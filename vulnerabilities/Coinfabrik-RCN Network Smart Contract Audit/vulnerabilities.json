{
    "rcn-network-master/rcn-network-master/contracts/core/basalt/NanoLoanEngine.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (inputId = 0; inputId < loanIds.length; inputId++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 925,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        activeLoans += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private activeLoans = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (IERC20 _rcn) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 650,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        rcn = _rcn;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // The loan 0 is a Invalid loan\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        loans.length++;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                if (loans[loanId].lender == _owner && loans[loanId].status == Status.lent) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                if (loans[loanId].lender == _owner && loans[loanId].status == Status.lent) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            Loan storage loan = loans[loanIds[inputId]];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z >= x) && (z >= y));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 962,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 984,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == loan.lender || (msg.sender == loan.borrower && loan.status == Status.initial));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                if (loans[loanId].lender == _owner && loans[loanId].status == Status.lent) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    result[resultIndex] = loanId;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 598,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    resultIndex++;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (loanId = 0; loanId <= totalLoans; loanId++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 598,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    resultIndex++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        loans.length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (inputId = 0; inputId < loanIds.length; inputId++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_33"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 98,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency (NanoLoanEngine.sol#93-98) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (NanoLoanEngine.sol#103-117) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": 338,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (NanoLoanEngine.sol#333-338) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (NanoLoanEngine.sol#340-347) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": 359,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (NanoLoanEngine.sol#349-359) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": 379,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (NanoLoanEngine.sol#361-379) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (NanoLoanEngine.sol#381-404) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": 434,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (NanoLoanEngine.sol#406-434) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": 469,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (NanoLoanEngine.sol#436-469) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (NanoLoanEngine.sol#471-516) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": 1148,
                    "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses a dangerous strict equality:\n\t- amount == 0\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": 1148,
                    "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanEngine.convertRate (NanoLoanEngine.sol#1281-1293) uses a dangerous strict equality:\n\t- address(oracle) == address(0)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": 1148,
                    "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanEngine.convertRate (NanoLoanEngine.sol#1281-1293) uses a dangerous strict equality:\n\t- address(oracle) == address(0)\nNanoLoanEngine.cosign (NanoLoanEngine.sol#960-968) uses a dangerous strict equality:\n\t- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": 1148,
                    "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanEngine.convertRate (NanoLoanEngine.sol#1281-1293) uses a dangerous strict equality:\n\t- address(oracle) == address(0)\nNanoLoanEngine.cosign (NanoLoanEngine.sol#960-968) uses a dangerous strict equality:\n\t- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp)\nNanoLoanEngine.lend (NanoLoanEngine.sol#911-948) uses a dangerous strict equality:\n\t- require(bool)(loan.cosigner == address(cosigner))\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": 1148,
                    "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanEngine.convertRate (NanoLoanEngine.sol#1281-1293) uses a dangerous strict equality:\n\t- address(oracle) == address(0)\nNanoLoanEngine.cosign (NanoLoanEngine.sol#960-968) uses a dangerous strict equality:\n\t- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp)\nNanoLoanEngine.lend (NanoLoanEngine.sol#911-948) uses a dangerous strict equality:\n\t- require(bool)(loan.cosigner == address(cosigner))\nNanoLoanEngine.transferFrom (NanoLoanEngine.sol#1063-1066) uses a dangerous strict equality:\n\t- require(bool)(loans[index].lender == from)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": 948,
                    "vulnerability_code": "    function lend(uint index, bytes memory oracleData, Cosigner cosigner, bytes memory cosignerData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.initial);\n\n        require(isApproved(index));\n\n        require(block.timestamp <= loan.expirationRequest);\n\n\n\n        loan.lender = msg.sender;\n\n        loan.dueTime = safeAdd(block.timestamp, loan.duesIn);\n\n        loan.interestTimestamp = block.timestamp;\n\n        loan.status = Status.lent;\n\n\n\n        // ERC721, create new loan and transfer it to the lender\n\n        emit Transfer(address(0), loan.lender, index);\n\n        activeLoans += 1;\n\n        lendersBalance[loan.lender] += 1;\n\n\n\n        if (loan.cancelableAt > 0)\n\n            internalAddInterest(loan, safeAdd(block.timestamp, loan.cancelableAt));\n\n\n\n        // Transfer the money to the borrower before handling the cosigner\n\n        // so the cosigner could require a specific usage for that money.\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, loan.amount);\n\n        require(rcn.transferFrom(msg.sender, loan.borrower, transferValue));\n\n\n\n        if (address(cosigner) != address(0)) {\n\n            // The cosigner it's temporary set to the next address (cosigner + 2), it's expected that the cosigner will\n\n            // call the method \"cosign\" to accept the conditions; that method also sets the cosigner to the right\n\n            // address. If that does not happen, the transaction fails.\n\n            loan.cosigner = address(uint256(address(cosigner)) + 2);\n\n            require(cosigner.requestCosign(address(this), index, cosignerData, oracleData));\n\n            require(loan.cosigner == address(cosigner));\n\n        }\n\n\n\n        emit Lent(index, loan.lender, address(cosigner));\n\n\n\n        return true;\n",
                    "message": "Reentrancy in NanoLoanEngine.lend (NanoLoanEngine.sol#911-948):\n\tExternal calls:\n\t- transferValue = convertRate(loan.oracle,loan.currency,oracleData,loan.amount) (NanoLoanEngine.sol#933)\n\t- require(bool)(rcn.transferFrom(msg.sender,loan.borrower,transferValue)) (NanoLoanEngine.sol#934)\n\tState variables written after the call(s):\n\t- loans (NanoLoanEngine.sol#940)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": 1272,
                    "vulnerability_code": "    function pay(uint index, uint256 _amount, address _from, bytes memory oracleData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.lent);\n\n        addInterest(index);\n\n        uint256 toPay = min(getPendingAmount(index), _amount);\n\n        emit PartialPayment(index, msg.sender, _from, toPay);\n\n\n\n        loan.paid = safeAdd(loan.paid, toPay);\n\n\n\n        if (getRawPendingAmount(index) == 0) {\n\n            emit TotalPayment(index);\n\n            loan.status = Status.paid;\n\n\n\n            // ERC721, remove loan from circulation\n\n            lendersBalance[loan.lender] -= 1;\n\n            activeLoans -= 1;\n\n            emit Transfer(loan.lender, address(0), index);\n\n        }\n\n\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, toPay);\n\n        require(transferValue > 0 || toPay < _amount);\n\n\n\n        lockTokens(address(rcn), transferValue);\n\n        require(rcn.transferFrom(msg.sender, address(this), transferValue));\n\n        loan.lenderBalance = safeAdd(transferValue, loan.lenderBalance);\n\n\n\n        return true;\n",
                    "message": "Reentrancy in NanoLoanEngine.pay (NanoLoanEngine.sol#1244-1272):\n\tExternal calls:\n\t- transferValue = convertRate(loan.oracle,loan.currency,oracleData,toPay) (NanoLoanEngine.sol#1264)\n\t- require(bool)(rcn.transferFrom(msg.sender,address(this),transferValue)) (NanoLoanEngine.sol#1268)\n\tState variables written after the call(s):\n\t- loans (NanoLoanEngine.sol#1269)\n"
                },
                {
                    "name": "shadowing-abstract",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public constant VERSION = 233;\n",
                    "message": "NanoLoanEngine.VERSION (NanoLoanEngine.sol#537) shadows:\n\t- Engine.VERSION (NanoLoanEngine.sol#269)\n"
                },
                {
                    "name": "shadowing-abstract",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string public constant VERSION_NAME = \"Basalt\";\n",
                    "message": "NanoLoanEngine.VERSION_NAME (NanoLoanEngine.sol#538) shadows:\n\t- Engine.VERSION_NAME (NanoLoanEngine.sol#270)\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 newTimestamp;\n",
                    "message": "newTimestamp in NanoLoanEngine.internalAddInterest (NanoLoanEngine.sol#1163) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 index) public view returns (address owner) { owner = loans[index].lender; }\n",
                    "message": "NanoLoanEngine.ownerOf.owner (local variable @ NanoLoanEngine.sol#772) shadows:\n\t- OwnableBasalt.owner (state variable @ NanoLoanEngine.sol#21)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": 1272,
                    "vulnerability_code": "    function pay(uint index, uint256 _amount, address _from, bytes memory oracleData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.lent);\n\n        addInterest(index);\n\n        uint256 toPay = min(getPendingAmount(index), _amount);\n\n        emit PartialPayment(index, msg.sender, _from, toPay);\n\n\n\n        loan.paid = safeAdd(loan.paid, toPay);\n\n\n\n        if (getRawPendingAmount(index) == 0) {\n\n            emit TotalPayment(index);\n\n            loan.status = Status.paid;\n\n\n\n            // ERC721, remove loan from circulation\n\n            lendersBalance[loan.lender] -= 1;\n\n            activeLoans -= 1;\n\n            emit Transfer(loan.lender, address(0), index);\n\n        }\n\n\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, toPay);\n\n        require(transferValue > 0 || toPay < _amount);\n\n\n\n        lockTokens(address(rcn), transferValue);\n\n        require(rcn.transferFrom(msg.sender, address(this), transferValue));\n\n        loan.lenderBalance = safeAdd(transferValue, loan.lenderBalance);\n\n\n\n        return true;\n",
                    "message": "Reentrancy in NanoLoanEngine.pay (NanoLoanEngine.sol#1244-1272):\n\tExternal calls:\n\t- transferValue = convertRate(loan.oracle,loan.currency,oracleData,toPay) (NanoLoanEngine.sol#1264)\n\tState variables written after the call(s):\n\t- lockedTokens (NanoLoanEngine.sol#1267)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1312,
                    "vulnerability_to_line": 1319,
                    "vulnerability_code": "    function withdrawal(uint index, address to, uint256 amount) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n        require(msg.sender == loan.lender);\n\n        loan.lenderBalance = safeSubtract(loan.lenderBalance, amount);\n\n        require(rcn.transfer(to, amount));\n\n        unlockTokens(address(rcn), amount);\n\n        return true;\n",
                    "message": "Reentrancy in NanoLoanEngine.withdrawal (NanoLoanEngine.sol#1312-1319):\n\tExternal calls:\n\t- require(bool)(rcn.transfer(to,amount)) (NanoLoanEngine.sol#1316)\n\tState variables written after the call(s):\n\t- lockedTokens (NanoLoanEngine.sol#1317)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1332,
                    "vulnerability_to_line": 1348,
                    "vulnerability_code": "    function withdrawalList(uint256[] memory loanIds, address to) public returns (uint256) {\n\n        uint256 inputId;\n\n        uint256 totalWithdraw = 0;\n\n\n\n        for (inputId = 0; inputId < loanIds.length; inputId++) {\n\n            Loan storage loan = loans[loanIds[inputId]];\n\n            if (loan.lender == msg.sender) {\n\n                totalWithdraw += loan.lenderBalance;\n\n                loan.lenderBalance = 0;\n\n            }\n\n        }\n\n\n\n        require(rcn.transfer(to, totalWithdraw));\n\n        unlockTokens(address(rcn), totalWithdraw);\n\n\n\n        return totalWithdraw;\n",
                    "message": "Reentrancy in NanoLoanEngine.withdrawalList (NanoLoanEngine.sol#1332-1348):\n\tExternal calls:\n\t- require(bool)(rcn.transfer(to,totalWithdraw)) (NanoLoanEngine.sol#1344)\n\tState variables written after the call(s):\n\t- lockedTokens (NanoLoanEngine.sol#1345)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\n\n        uint256 z = x + y;\n\n        require((z >= x) && (z >= y));\n\n        return z;\n",
                    "message": "RpSafeMath.safeAdd (NanoLoanEngine.sol#128-132) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)((z >= x) && (z >= y)) (NanoLoanEngine.sol#130)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": 968,
                    "vulnerability_code": "    function cosign(uint index, uint256 cost) external returns (bool) {\n\n        Loan storage loan = loans[index];\n\n        require(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp);\n\n        require(loan.cosigner != address(0));\n\n        require(loan.cosigner == address(uint256(msg.sender) + 2));\n\n        loan.cosigner = msg.sender;\n\n        require(rcn.transferFrom(loan.lender, msg.sender, cost));\n\n        return true;\n",
                    "message": "NanoLoanEngine.cosign (NanoLoanEngine.sol#960-968) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp) (NanoLoanEngine.sol#962)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": 770,
                    "vulnerability_code": "    function createLoan(\n\n        Oracle _oracleContract,\n\n        address _borrower,\n\n        bytes32 _currency,\n\n        uint256 _amount,\n\n        uint256 _interestRate,\n\n        uint256 _interestRatePunitory,\n\n        uint256 _duesIn,\n\n        uint256 _cancelableAt,\n\n        uint256 _expirationRequest,\n\n        string memory _metadata\n\n    ) public returns (uint256) {\n\n        require(!deprecated);\n\n        require(_cancelableAt <= _duesIn);\n\n        require(address(_oracleContract) != address(0) || _currency == bytes32(0));\n\n        require(_borrower != address(0));\n\n        require(_amount != 0);\n\n        require(_interestRatePunitory != 0);\n\n        require(_interestRate != 0);\n\n        require(_expirationRequest > block.timestamp);\n\n\n\n        Loan memory loan = Loan(\n\n            Status.initial,\n\n            _oracleContract,\n\n            _borrower,\n\n            address(0),\n\n            msg.sender,\n\n            address(0),\n\n            _amount,\n\n            0,\n\n            0,\n\n            0,\n\n            0,\n\n            _interestRate,\n\n            _interestRatePunitory,\n\n            0,\n\n            _duesIn,\n\n            _currency,\n\n            _cancelableAt,\n\n            0,\n\n            address(0),\n\n            _expirationRequest,\n\n            _metadata\n\n        );\n\n\n\n        uint index = loans.push(loan) - 1;\n\n        emit CreatedLoan(index, _borrower, msg.sender);\n\n\n\n        bytes32 identifier = getIdentifier(index);\n\n        require(identifierToIndex[identifier] == 0);\n\n        identifierToIndex[identifier] = index;\n\n\n\n        if (msg.sender == _borrower) {\n\n            approveLoan(index);\n\n        }\n\n\n\n        return index;\n",
                    "message": "NanoLoanEngine.createLoan (NanoLoanEngine.sol#713-770) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(identifierToIndex[identifier] == 0) (NanoLoanEngine.sol#762)\n\t- require(bool)(_expirationRequest > block.timestamp) (NanoLoanEngine.sol#732)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": 873,
                    "vulnerability_code": "    function approveLoanIdentifier(bytes32 identifier) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        return approveLoan(index);\n",
                    "message": "NanoLoanEngine.approveLoanIdentifier (NanoLoanEngine.sol#869-873) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(index != 0) (NanoLoanEngine.sol#871)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 884,
                    "vulnerability_to_line": 894,
                    "vulnerability_code": "    function registerApprove(bytes32 identifier, uint8 v, bytes32 r, bytes32 s) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        Loan storage loan = loans[index];\n\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n\n        bytes32 preHash = keccak256(abi.encodePacked(prefix, identifier));\n\n        require(loan.borrower == ecrecover(preHash, v, r, s));\n\n        loan.approbations[loan.borrower] = true;\n\n        emit ApprovedBy(index, loan.borrower);\n\n        return true;\n",
                    "message": "NanoLoanEngine.registerApprove (NanoLoanEngine.sol#884-894) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(index != 0) (NanoLoanEngine.sol#886)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": 948,
                    "vulnerability_code": "    function lend(uint index, bytes memory oracleData, Cosigner cosigner, bytes memory cosignerData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.initial);\n\n        require(isApproved(index));\n\n        require(block.timestamp <= loan.expirationRequest);\n\n\n\n        loan.lender = msg.sender;\n\n        loan.dueTime = safeAdd(block.timestamp, loan.duesIn);\n\n        loan.interestTimestamp = block.timestamp;\n\n        loan.status = Status.lent;\n\n\n\n        // ERC721, create new loan and transfer it to the lender\n\n        emit Transfer(address(0), loan.lender, index);\n\n        activeLoans += 1;\n\n        lendersBalance[loan.lender] += 1;\n\n\n\n        if (loan.cancelableAt > 0)\n\n            internalAddInterest(loan, safeAdd(block.timestamp, loan.cancelableAt));\n\n\n\n        // Transfer the money to the borrower before handling the cosigner\n\n        // so the cosigner could require a specific usage for that money.\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, loan.amount);\n\n        require(rcn.transferFrom(msg.sender, loan.borrower, transferValue));\n\n\n\n        if (address(cosigner) != address(0)) {\n\n            // The cosigner it's temporary set to the next address (cosigner + 2), it's expected that the cosigner will\n\n            // call the method \"cosign\" to accept the conditions; that method also sets the cosigner to the right\n\n            // address. If that does not happen, the transaction fails.\n\n            loan.cosigner = address(uint256(address(cosigner)) + 2);\n\n            require(cosigner.requestCosign(address(this), index, cosignerData, oracleData));\n\n            require(loan.cosigner == address(cosigner));\n\n        }\n\n\n\n        emit Lent(index, loan.lender, address(cosigner));\n\n\n\n        return true;\n",
                    "message": "NanoLoanEngine.lend (NanoLoanEngine.sol#911-948) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(rcn.transferFrom(msg.sender,loan.borrower,transferValue)) (NanoLoanEngine.sol#934)\n\t- require(bool)(loan.status == Status.initial) (NanoLoanEngine.sol#914)\n\t- loan.cancelableAt > 0 (NanoLoanEngine.sol#928-929)\n\t- require(bool)(loan.cosigner == address(cosigner)) (NanoLoanEngine.sol#942)\n\t- require(bool)(block.timestamp <= loan.expirationRequest) (NanoLoanEngine.sol#916)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1005,
                    "vulnerability_to_line": 1009,
                    "vulnerability_code": "    function destroyIdentifier(bytes32 identifier) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        return destroy(index);\n",
                    "message": "NanoLoanEngine.destroyIdentifier (NanoLoanEngine.sol#1005-1009) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(index != 0) (NanoLoanEngine.sol#1007)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": 1066,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 index) public returns (bool) {\n\n        require(loans[index].lender == from);\n\n        return transfer(to, index);\n",
                    "message": "NanoLoanEngine.transferFrom (NanoLoanEngine.sol#1063-1066) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(loans[index].lender == from) (NanoLoanEngine.sol#1064)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": 1148,
                    "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- amount == 0 (NanoLoanEngine.sol#1141-1147)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1158,
                    "vulnerability_to_line": 1203,
                    "vulnerability_code": "    function internalAddInterest(Loan storage loan, uint256 timestamp) internal {\n\n        if (timestamp > loan.interestTimestamp) {\n\n            uint256 newInterest = loan.interest;\n\n            uint256 newPunitoryInterest = loan.punitoryInterest;\n\n\n\n            uint256 newTimestamp;\n\n            uint256 realDelta;\n\n            uint256 calculatedInterest;\n\n\n\n            uint256 deltaTime;\n\n            uint256 pending;\n\n\n\n            uint256 endNonPunitory = min(timestamp, loan.dueTime);\n\n            if (endNonPunitory > loan.interestTimestamp) {\n\n                deltaTime = endNonPunitory - loan.interestTimestamp;\n\n\n\n                if (loan.paid < loan.amount) {\n\n                    pending = loan.amount - loan.paid;\n\n                } else {\n\n                    pending = 0;\n\n                }\n\n\n\n                (realDelta, calculatedInterest) = calculateInterest(deltaTime, loan.interestRate, pending);\n\n                newInterest = safeAdd(calculatedInterest, newInterest);\n\n                newTimestamp = loan.interestTimestamp + realDelta;\n\n            }\n\n\n\n            if (timestamp > loan.dueTime) {\n\n                uint256 startPunitory = max(loan.dueTime, loan.interestTimestamp);\n\n                deltaTime = timestamp - startPunitory;\n\n\n\n                uint256 debt = safeAdd(loan.amount, newInterest);\n\n                pending = min(debt, safeSubtract(safeAdd(debt, newPunitoryInterest), loan.paid));\n\n\n\n                (realDelta, calculatedInterest) = calculateInterest(deltaTime, loan.interestRatePunitory, pending);\n\n                newPunitoryInterest = safeAdd(newPunitoryInterest, calculatedInterest);\n\n                newTimestamp = startPunitory + realDelta;\n\n            }\n\n\n\n            if (newInterest != loan.interest || newPunitoryInterest != loan.punitoryInterest) {\n\n                loan.interestTimestamp = newTimestamp;\n\n                loan.interest = newInterest;\n\n                loan.punitoryInterest = newPunitoryInterest;\n\n            }\n\n        }\n",
                    "message": "NanoLoanEngine.internalAddInterest (NanoLoanEngine.sol#1158-1203) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- endNonPunitory > loan.interestTimestamp (NanoLoanEngine.sol#1171-1183)\n\t- timestamp > loan.interestTimestamp (NanoLoanEngine.sol#1159-1202)\n\t- newInterest != loan.interest || newPunitoryInterest != loan.punitoryInterest (NanoLoanEngine.sol#1197-1201)\n\t- timestamp > loan.dueTime (NanoLoanEngine.sol#1185-1195)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": 1293,
                    "vulnerability_code": "    function convertRate(Oracle oracle, bytes32 currency, bytes memory data, uint256 amount) public returns (uint256) {\n\n        if (address(oracle) == address(0)) {\n\n            return amount;\n\n        } else {\n\n            uint256 rate;\n\n            uint256 decimals;\n\n\n\n            (rate, decimals) = oracle.getRate(currency, data);\n\n\n\n            require(decimals <= RCN_DECIMALS);\n\n            return (safeMult(safeMult(amount, rate), (10**(RCN_DECIMALS-decimals)))) / PRECISION;\n\n        }\n",
                    "message": "NanoLoanEngine.convertRate (NanoLoanEngine.sol#1281-1293) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(decimals <= RCN_DECIMALS) (NanoLoanEngine.sol#1290)\n\t- address(oracle) == address(0) (NanoLoanEngine.sol#1282-1292)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 98,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency uses assembly (NanoLoanEngine.sol#93-98)\n\t- NanoLoanEngine.sol#95-97\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency uses assembly (NanoLoanEngine.sol#103-117)\n\t- NanoLoanEngine.sol#110-116\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": 338,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (NanoLoanEngine.sol#333-338)\n\t- NanoLoanEngine.sol#335-337\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (NanoLoanEngine.sol#340-347)\n\t- NanoLoanEngine.sol#342-346\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": 359,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#349-359)\n\t- NanoLoanEngine.sol#354-358\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": 379,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#361-379)\n\t- NanoLoanEngine.sol#367-377\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#381-404)\n\t- NanoLoanEngine.sol#388-402\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": 434,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#406-434)\n\t- NanoLoanEngine.sol#414-432\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": 469,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#436-469)\n\t- NanoLoanEngine.sol#445-467\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#471-516)\n\t- NanoLoanEngine.sol#488-514\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public VERSION;\n",
                    "message": "Engine.VERSION should be constant (NanoLoanEngine.sol#269)\nEngine.VERSION_NAME should be constant (NanoLoanEngine.sol#270)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n\n        require(_to != address(0), \"0x0 Is not a valid owner\");\n\n        owner = _to;\n\n        return true;\n",
                    "message": "OwnableBasalt.transferTo (NanoLoanEngine.sol#37-41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Oracle.url (NanoLoanEngine.sol#65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": "Oracle.getRate (NanoLoanEngine.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "    function addCurrency(string memory ticker) public onlyOwner returns (bool) {\n\n        bytes32 currency = encodeCurrency(ticker);\n\n        emit NewSymbol(currency);\n\n        supported[currency] = true;\n\n        currencies.push(currency);\n\n        return true;\n",
                    "message": "Oracle.addCurrency (NanoLoanEngine.sol#82-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (NanoLoanEngine.sol#103-117) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "    function withdrawTokens(IERC20 token, address to, uint256 amount) public onlyOwner returns (bool) {\n\n        require(safeSubtract(token.balanceOf(address(this)), lockedTokens[address(token)]) >= amount);\n\n        require(to != address(0));\n\n        return token.transfer(to, amount);\n",
                    "message": "TokenLockable.withdrawTokens (NanoLoanEngine.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Cosigner.url (NanoLoanEngine.sol#224) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": 237,
                    "vulnerability_code": "    function cost(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
                    "message": "Cosigner.cost (NanoLoanEngine.sol#231-237) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": 252,
                    "vulnerability_code": "    function requestCosign(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
                    "message": "Cosigner.requestCosign (NanoLoanEngine.sol#246-252) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address engine, uint256 index, bytes memory oracleData) public returns (bool);\n",
                    "message": "Cosigner.claim (NanoLoanEngine.sol#260) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalLoans() public view returns (uint256);\n",
                    "message": "Engine.getTotalLoans (NanoLoanEngine.sol#279) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 773,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalLoans() public view returns (uint256) { return loans.length; }\n",
                    "message": "NanoLoanEngine.getTotalLoans (NanoLoanEngine.sol#773) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 774,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOracle(uint index) public view returns (Oracle) { return loans[index].oracle; }\n",
                    "message": "NanoLoanEngine.getOracle (NanoLoanEngine.sol#774) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOracle(uint index) public view returns (Oracle);\n",
                    "message": "Engine.getOracle (NanoLoanEngine.sol#280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBorrower(uint index) public view returns (address) { return loans[index].borrower; }\n",
                    "message": "NanoLoanEngine.getBorrower (NanoLoanEngine.sol#775) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBorrower(uint index) public view returns (address);\n",
                    "message": "Engine.getBorrower (NanoLoanEngine.sol#281) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCosigner(uint index) public view returns (address);\n",
                    "message": "Engine.getCosigner (NanoLoanEngine.sol#282) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCosigner(uint index) public view returns (address) { return loans[index].cosigner; }\n",
                    "message": "NanoLoanEngine.getCosigner (NanoLoanEngine.sol#776) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 index) public view returns (address owner) { owner = loans[index].lender; }\n",
                    "message": "NanoLoanEngine.ownerOf (NanoLoanEngine.sol#772) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
                    "message": "Engine.ownerOf (NanoLoanEngine.sol#283) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCreator(uint index) public view returns (address);\n",
                    "message": "Engine.getCreator (NanoLoanEngine.sol#284) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCreator(uint index) public view returns (address) { return loans[index].creator; }\n",
                    "message": "NanoLoanEngine.getCreator (NanoLoanEngine.sol#777) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAmount(uint index) public view returns (uint256);\n",
                    "message": "Engine.getAmount (NanoLoanEngine.sol#285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 778,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAmount(uint index) public view returns (uint256) { return loans[index].amount; }\n",
                    "message": "NanoLoanEngine.getAmount (NanoLoanEngine.sol#778) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPaid(uint index) public view returns (uint256);\n",
                    "message": "Engine.getPaid (NanoLoanEngine.sol#286) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPaid(uint index) public view returns (uint256) { return loans[index].paid; }\n",
                    "message": "NanoLoanEngine.getPaid (NanoLoanEngine.sol#781) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 784,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDueTime(uint index) public view returns (uint256) { return loans[index].dueTime; }\n",
                    "message": "NanoLoanEngine.getDueTime (NanoLoanEngine.sol#784) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDueTime(uint index) public view returns (uint256);\n",
                    "message": "Engine.getDueTime (NanoLoanEngine.sol#287) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApprobation(uint index, address _address) public view returns (bool) { return loans[index].approbations[_address]; }\n",
                    "message": "NanoLoanEngine.getApprobation (NanoLoanEngine.sol#787) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApprobation(uint index, address _address) public view returns (bool);\n",
                    "message": "Engine.getApprobation (NanoLoanEngine.sol#288) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStatus(uint index) public view returns (Status) { return loans[index].status; }\n",
                    "message": "NanoLoanEngine.getStatus (NanoLoanEngine.sol#788) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStatus(uint index) public view returns (Status);\n",
                    "message": "Engine.getStatus (NanoLoanEngine.sol#289) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCurrency(uint index) public view returns (bytes32) { return loans[index].currency; }\n",
                    "message": "NanoLoanEngine.getCurrency (NanoLoanEngine.sol#791) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCurrency(uint index) public view returns (bytes32);\n",
                    "message": "Engine.getCurrency (NanoLoanEngine.sol#292) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeOwnership(uint256 index) public returns (bool);\n",
                    "message": "Engine.takeOwnership (NanoLoanEngine.sol#296) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": 1050,
                    "vulnerability_code": "    function takeOwnership(uint256 _index) public returns (bool) {\n\n        return transfer(msg.sender, _index);\n",
                    "message": "NanoLoanEngine.takeOwnership (NanoLoanEngine.sol#1048-1050) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1312,
                    "vulnerability_to_line": 1319,
                    "vulnerability_code": "    function withdrawal(uint index, address to, uint256 amount) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n        require(msg.sender == loan.lender);\n\n        loan.lenderBalance = safeSubtract(loan.lenderBalance, amount);\n\n        require(rcn.transfer(to, amount));\n\n        unlockTokens(address(rcn), amount);\n\n        return true;\n",
                    "message": "NanoLoanEngine.withdrawal (NanoLoanEngine.sol#1312-1319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawal(uint index, address to, uint256 amount) public returns (bool);\n",
                    "message": "Engine.withdrawal (NanoLoanEngine.sol#297) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function name() public view returns (string memory _name);\n",
                    "message": "ERC721.name (NanoLoanEngine.sol#307) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": 545,
                    "vulnerability_code": "    function name() public view returns (string memory _name) {\n\n        _name = \"RCN - Nano loan engine - Basalt 233\";\n",
                    "message": "NanoLoanEngine.name (NanoLoanEngine.sol#543-545) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "    function symbol() public view returns (string memory _symbol) {\n\n        _symbol = \"RCN-NLE-233\";\n",
                    "message": "NanoLoanEngine.symbol (NanoLoanEngine.sol#547-549) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function symbol() public view returns (string memory _symbol);\n",
                    "message": "ERC721.symbol (NanoLoanEngine.sol#308) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256 _totalSupply);\n",
                    "message": "ERC721.totalSupply (NanoLoanEngine.sol#309) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": 559,
                    "vulnerability_code": "    function totalSupply() public view returns (uint _totalSupply) {\n\n        _totalSupply = activeLoans;\n",
                    "message": "NanoLoanEngine.totalSupply (NanoLoanEngine.sol#557-559) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
                    "message": "ERC721.ownerOf (NanoLoanEngine.sol#312) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1081,
                    "vulnerability_to_line": 1087,
                    "vulnerability_code": "    function approve(address to, uint256 index) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n        require(msg.sender == loan.lender);\n\n        loan.approvedTransfer = to;\n\n        emit Approval(msg.sender, to, index);\n\n        return true;\n",
                    "message": "NanoLoanEngine.approve (NanoLoanEngine.sol#1081-1087) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address, uint256) public returns (bool);\n",
                    "message": "ERC721.approve (NanoLoanEngine.sol#313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeOwnership(uint256) public returns (bool);\n",
                    "message": "ERC721.takeOwnership (NanoLoanEngine.sol#314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _approved) public returns (bool);\n",
                    "message": "ERC721.setApprovalForAll (NanoLoanEngine.sol#316) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1095,
                    "vulnerability_to_line": 1099,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _approved) public returns (bool) {\n\n        operators[msg.sender][_operator] = _approved;\n\n        emit ApprovalForAll(msg.sender, _operator, _approved);\n\n        return true;\n",
                    "message": "NanoLoanEngine.setApprovalForAll (NanoLoanEngine.sol#1095-1099) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint index) public view returns (address) {return loans[index].approvedTransfer; }\n",
                    "message": "NanoLoanEngine.getApproved (NanoLoanEngine.sol#790) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 _tokenId) public view returns (address);\n",
                    "message": "ERC721.getApproved (NanoLoanEngine.sol#317) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": 613,
                    "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n\n        return operators[_owner][_operator];\n",
                    "message": "NanoLoanEngine.isApprovedForAll (NanoLoanEngine.sol#611-613) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n",
                    "message": "ERC721.isApprovedForAll (NanoLoanEngine.sol#318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenMetadata(uint256 _tokenId) public view returns (string memory info);\n",
                    "message": "ERC721.tokenMetadata (NanoLoanEngine.sol#320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 622,
                    "vulnerability_to_line": 624,
                    "vulnerability_code": "    function tokenMetadata(uint256 index) public view returns (string memory) {\n\n        return loans[index].metadata;\n",
                    "message": "NanoLoanEngine.tokenMetadata (NanoLoanEngine.sol#622-624) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "    function tokenMetadataHash(uint256 index) public view returns (bytes32) {\n\n        return keccak256(bytes(loans[index].metadata));\n",
                    "message": "NanoLoanEngine.tokenMetadataHash (NanoLoanEngine.sol#634-636) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": 770,
                    "vulnerability_code": "    function createLoan(\n\n        Oracle _oracleContract,\n\n        address _borrower,\n\n        bytes32 _currency,\n\n        uint256 _amount,\n\n        uint256 _interestRate,\n\n        uint256 _interestRatePunitory,\n\n        uint256 _duesIn,\n\n        uint256 _cancelableAt,\n\n        uint256 _expirationRequest,\n\n        string memory _metadata\n\n    ) public returns (uint256) {\n\n        require(!deprecated);\n\n        require(_cancelableAt <= _duesIn);\n\n        require(address(_oracleContract) != address(0) || _currency == bytes32(0));\n\n        require(_borrower != address(0));\n\n        require(_amount != 0);\n\n        require(_interestRatePunitory != 0);\n\n        require(_interestRate != 0);\n\n        require(_expirationRequest > block.timestamp);\n\n\n\n        Loan memory loan = Loan(\n\n            Status.initial,\n\n            _oracleContract,\n\n            _borrower,\n\n            address(0),\n\n            msg.sender,\n\n            address(0),\n\n            _amount,\n\n            0,\n\n            0,\n\n            0,\n\n            0,\n\n            _interestRate,\n\n            _interestRatePunitory,\n\n            0,\n\n            _duesIn,\n\n            _currency,\n\n            _cancelableAt,\n\n            0,\n\n            address(0),\n\n            _expirationRequest,\n\n            _metadata\n\n        );\n\n\n\n        uint index = loans.push(loan) - 1;\n\n        emit CreatedLoan(index, _borrower, msg.sender);\n\n\n\n        bytes32 identifier = getIdentifier(index);\n\n        require(identifierToIndex[identifier] == 0);\n\n        identifierToIndex[identifier] = index;\n\n\n\n        if (msg.sender == _borrower) {\n\n            approveLoan(index);\n\n        }\n\n\n\n        return index;\n",
                    "message": "NanoLoanEngine.createLoan (NanoLoanEngine.sol#713-770) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 779,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPunitoryInterest(uint index) public view returns (uint256) { return loans[index].punitoryInterest; }\n",
                    "message": "NanoLoanEngine.getPunitoryInterest (NanoLoanEngine.sol#779) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInterestTimestamp(uint index) public view returns (uint256) { return loans[index].interestTimestamp; }\n",
                    "message": "NanoLoanEngine.getInterestTimestamp (NanoLoanEngine.sol#780) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInterestRate(uint index) public view returns (uint256) { return loans[index].interestRate; }\n",
                    "message": "NanoLoanEngine.getInterestRate (NanoLoanEngine.sol#782) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 783,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInterestRatePunitory(uint index) public view returns (uint256) { return loans[index].interestRatePunitory; }\n",
                    "message": "NanoLoanEngine.getInterestRatePunitory (NanoLoanEngine.sol#783) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 785,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDuesIn(uint index) public view returns (uint256) { return loans[index].duesIn; }\n",
                    "message": "NanoLoanEngine.getDuesIn (NanoLoanEngine.sol#785) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 786,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCancelableAt(uint index) public view returns (uint256) { return loans[index].cancelableAt; }\n",
                    "message": "NanoLoanEngine.getCancelableAt (NanoLoanEngine.sol#786) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getLenderBalance(uint index) public view returns (uint256) { return loans[index].lenderBalance; }\n",
                    "message": "NanoLoanEngine.getLenderBalance (NanoLoanEngine.sol#789) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getExpirationRequest(uint index) public view returns (uint256) { return loans[index].expirationRequest; }\n",
                    "message": "NanoLoanEngine.getExpirationRequest (NanoLoanEngine.sol#792) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInterest(uint index) public view returns (uint256) { return loans[index].interest; }\n",
                    "message": "NanoLoanEngine.getInterest (NanoLoanEngine.sol#793) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": 873,
                    "vulnerability_code": "    function approveLoanIdentifier(bytes32 identifier) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        return approveLoan(index);\n",
                    "message": "NanoLoanEngine.approveLoanIdentifier (NanoLoanEngine.sol#869-873) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 884,
                    "vulnerability_to_line": 894,
                    "vulnerability_code": "    function registerApprove(bytes32 identifier, uint8 v, bytes32 r, bytes32 s) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        Loan storage loan = loans[index];\n\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n\n        bytes32 preHash = keccak256(abi.encodePacked(prefix, identifier));\n\n        require(loan.borrower == ecrecover(preHash, v, r, s));\n\n        loan.approbations[loan.borrower] = true;\n\n        emit ApprovedBy(index, loan.borrower);\n\n        return true;\n",
                    "message": "NanoLoanEngine.registerApprove (NanoLoanEngine.sol#884-894) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": 948,
                    "vulnerability_code": "    function lend(uint index, bytes memory oracleData, Cosigner cosigner, bytes memory cosignerData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.initial);\n\n        require(isApproved(index));\n\n        require(block.timestamp <= loan.expirationRequest);\n\n\n\n        loan.lender = msg.sender;\n\n        loan.dueTime = safeAdd(block.timestamp, loan.duesIn);\n\n        loan.interestTimestamp = block.timestamp;\n\n        loan.status = Status.lent;\n\n\n\n        // ERC721, create new loan and transfer it to the lender\n\n        emit Transfer(address(0), loan.lender, index);\n\n        activeLoans += 1;\n\n        lendersBalance[loan.lender] += 1;\n\n\n\n        if (loan.cancelableAt > 0)\n\n            internalAddInterest(loan, safeAdd(block.timestamp, loan.cancelableAt));\n\n\n\n        // Transfer the money to the borrower before handling the cosigner\n\n        // so the cosigner could require a specific usage for that money.\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, loan.amount);\n\n        require(rcn.transferFrom(msg.sender, loan.borrower, transferValue));\n\n\n\n        if (address(cosigner) != address(0)) {\n\n            // The cosigner it's temporary set to the next address (cosigner + 2), it's expected that the cosigner will\n\n            // call the method \"cosign\" to accept the conditions; that method also sets the cosigner to the right\n\n            // address. If that does not happen, the transaction fails.\n\n            loan.cosigner = address(uint256(address(cosigner)) + 2);\n\n            require(cosigner.requestCosign(address(this), index, cosignerData, oracleData));\n\n            require(loan.cosigner == address(cosigner));\n\n        }\n\n\n\n        emit Lent(index, loan.lender, address(cosigner));\n\n\n\n        return true;\n",
                    "message": "NanoLoanEngine.lend (NanoLoanEngine.sol#911-948) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1005,
                    "vulnerability_to_line": 1009,
                    "vulnerability_code": "    function destroyIdentifier(bytes32 identifier) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        return destroy(index);\n",
                    "message": "NanoLoanEngine.destroyIdentifier (NanoLoanEngine.sol#1005-1009) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": 1066,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 index) public returns (bool) {\n\n        require(loans[index].lender == from);\n\n        return transfer(to, index);\n",
                    "message": "NanoLoanEngine.transferFrom (NanoLoanEngine.sol#1063-1066) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": 1272,
                    "vulnerability_code": "    function pay(uint index, uint256 _amount, address _from, bytes memory oracleData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.lent);\n\n        addInterest(index);\n\n        uint256 toPay = min(getPendingAmount(index), _amount);\n\n        emit PartialPayment(index, msg.sender, _from, toPay);\n\n\n\n        loan.paid = safeAdd(loan.paid, toPay);\n\n\n\n        if (getRawPendingAmount(index) == 0) {\n\n            emit TotalPayment(index);\n\n            loan.status = Status.paid;\n\n\n\n            // ERC721, remove loan from circulation\n\n            lendersBalance[loan.lender] -= 1;\n\n            activeLoans -= 1;\n\n            emit Transfer(loan.lender, address(0), index);\n\n        }\n\n\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, toPay);\n\n        require(transferValue > 0 || toPay < _amount);\n\n\n\n        lockTokens(address(rcn), transferValue);\n\n        require(rcn.transferFrom(msg.sender, address(this), transferValue));\n\n        loan.lenderBalance = safeAdd(transferValue, loan.lenderBalance);\n\n\n\n        return true;\n",
                    "message": "NanoLoanEngine.pay (NanoLoanEngine.sol#1244-1272) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1332,
                    "vulnerability_to_line": 1348,
                    "vulnerability_code": "    function withdrawalList(uint256[] memory loanIds, address to) public returns (uint256) {\n\n        uint256 inputId;\n\n        uint256 totalWithdraw = 0;\n\n\n\n        for (inputId = 0; inputId < loanIds.length; inputId++) {\n\n            Loan storage loan = loans[loanIds[inputId]];\n\n            if (loan.lender == msg.sender) {\n\n                totalWithdraw += loan.lenderBalance;\n\n                loan.lenderBalance = 0;\n\n            }\n\n        }\n\n\n\n        require(rcn.transfer(to, totalWithdraw));\n\n        unlockTokens(address(rcn), totalWithdraw);\n\n\n\n        return totalWithdraw;\n",
                    "message": "NanoLoanEngine.withdrawalList (NanoLoanEngine.sol#1332-1348) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": 1355,
                    "vulnerability_code": "    function setDeprecated(bool _deprecated) public onlyOwner {\n\n        deprecated = _deprecated;\n",
                    "message": "NanoLoanEngine.setDeprecated (NanoLoanEngine.sol#1353-1355) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in NanoLoanEngine.sol:\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#17): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#46): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#123): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#165): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#202): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#266): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#302): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#329): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#523): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '_to' of OwnableBasalt.transferTo (NanoLoanEngine.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
                    "message": "Parameter '' of Engine.ownerOf (NanoLoanEngine.sol#283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public VERSION;\n",
                    "message": "Variable 'Engine.VERSION' (NanoLoanEngine.sol#269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string public VERSION_NAME;\n",
                    "message": "Variable 'Engine.VERSION_NAME' (NanoLoanEngine.sol#270) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
                    "message": "Parameter '' of ERC721.ownerOf (NanoLoanEngine.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address, uint256) public returns (bool);\n",
                    "message": "Parameter '' of ERC721.approve (NanoLoanEngine.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address, uint256) public returns (bool);\n",
                    "message": "Parameter '_scope_0' of ERC721.approve (NanoLoanEngine.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeOwnership(uint256) public returns (bool);\n",
                    "message": "Parameter '' of ERC721.takeOwnership (NanoLoanEngine.sol#314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address, uint256) public returns (bool);\n",
                    "message": "Parameter '' of ERC721.transfer (NanoLoanEngine.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address, uint256) public returns (bool);\n",
                    "message": "Parameter '_scope_0' of ERC721.transfer (NanoLoanEngine.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (NanoLoanEngine.sol#351) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#362) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint _balance) {\n",
                    "message": "Parameter '_owner' of NanoLoanEngine.balanceOf (NanoLoanEngine.sol#569) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeOwnership(uint256 _index) public returns (bool) {\n",
                    "message": "Parameter '_index' of NanoLoanEngine.takeOwnership (NanoLoanEngine.sol#1048) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1095,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _approved) public returns (bool) {\n",
                    "message": "Parameter '_operator' of NanoLoanEngine.setApprovalForAll (NanoLoanEngine.sol#1095) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1095,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _approved) public returns (bool) {\n",
                    "message": "Parameter '_approved' of NanoLoanEngine.setApprovalForAll (NanoLoanEngine.sol#1095) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n",
                    "message": "Parameter '_owner' of NanoLoanEngine.isApprovedForAll (NanoLoanEngine.sol#611) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n",
                    "message": "Parameter '_operator' of NanoLoanEngine.isApprovedForAll (NanoLoanEngine.sol#611) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApprobation(uint index, address _address) public view returns (bool) { return loans[index].approbations[_address]; }\n",
                    "message": "Parameter '_address' of NanoLoanEngine.getApprobation (NanoLoanEngine.sol#787) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensOfOwner(address _owner) external view returns(uint256[] memory ownerTokens) {\n",
                    "message": "Parameter '_owner' of NanoLoanEngine.tokensOfOwner (NanoLoanEngine.sol#582) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (IERC20 _rcn) public {\n",
                    "message": "Parameter '_rcn' of NanoLoanEngine. (NanoLoanEngine.sol#648) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 714,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Oracle _oracleContract,\n",
                    "message": "Parameter '_oracleContract' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#714) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 715,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _borrower,\n",
                    "message": "Parameter '_borrower' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#715) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 716,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _currency,\n",
                    "message": "Parameter '_currency' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#716) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#717) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _interestRate,\n",
                    "message": "Parameter '_interestRate' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#718) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _interestRatePunitory,\n",
                    "message": "Parameter '_interestRatePunitory' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#719) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 720,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _duesIn,\n",
                    "message": "Parameter '_duesIn' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#720) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 721,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _cancelableAt,\n",
                    "message": "Parameter '_cancelableAt' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#721) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _expirationRequest,\n",
                    "message": "Parameter '_expirationRequest' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#722) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory _metadata\n",
                    "message": "Parameter '_metadata' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#723) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pay(uint index, uint256 _amount, address _from, bytes memory oracleData) public returns (bool) {\n",
                    "message": "Parameter '_amount' of NanoLoanEngine.pay (NanoLoanEngine.sol#1244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pay(uint index, uint256 _amount, address _from, bytes memory oracleData) public returns (bool) {\n",
                    "message": "Parameter '_from' of NanoLoanEngine.pay (NanoLoanEngine.sol#1244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDeprecated(bool _deprecated) public onlyOwner {\n",
                    "message": "Parameter '_deprecated' of NanoLoanEngine.setDeprecated (NanoLoanEngine.sol#1353) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1034,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        loan.approvedTransfer = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        loans.length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 1081,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address to, uint256 index) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXACT_TIME",
                    "vulnerability_from_line": 962,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (inputId = 0; inputId < loanIds.length; inputId++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addInterest(uint index) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (inputId = 0; inputId < loanIds.length; inputId++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (true) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDeprecated(bool _deprecated) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private activeLoans = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) private lendersBalance;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => bool)) private operators;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Loan[] private loans;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/basalt/utils/OwnableBasalt.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n\n        require(_to != address(0), \"0x0 Is not a valid owner\");\n\n        owner = _to;\n\n        return true;\n",
                    "message": "OwnableBasalt.transferTo (OwnableBasalt.sol#23-27) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in OwnableBasalt.sol:\n\t- pragma solidity^0.5.11 (OwnableBasalt.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '_to' of OwnableBasalt.transferTo (OwnableBasalt.sol#23) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/basalt/utils/RpSafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z >= x) && (z >= y));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in RpSafeMath.sol:\n\t- pragma solidity^0.5.11 (RpSafeMath.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/basalt/utils/TokenLockable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z >= x) && (z >= y));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n\n        require(_to != address(0), \"0x0 Is not a valid owner\");\n\n        owner = _to;\n\n        return true;\n",
                    "message": "OwnableBasalt.transferTo (TokenLockable.sol#65-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "    function withdrawTokens(IERC20 token, address to, uint256 amount) public onlyOwner returns (bool) {\n\n        require(safeSubtract(token.balanceOf(address(this)), lockedTokens[address(token)]) >= amount);\n\n        require(to != address(0));\n\n        return token.transfer(to, amount);\n",
                    "message": "TokenLockable.withdrawTokens (TokenLockable.sol#102-106) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TokenLockable.sol:\n\t- pragma solidity^0.5.11 (TokenLockable.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TokenLockable.sol#45): it allows old versions\n\t- pragma solidity^0.5.11 (TokenLockable.sol#74): it allows old versions\n\t- pragma solidity^0.5.11 (TokenLockable.sol#88): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '_to' of OwnableBasalt.transferTo (TokenLockable.sol#65) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/basalt/examples/ReferenceOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract SimpleDelegable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(delegates[msg.sender], \"Only delegable\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(!isExpired(timestamp), \"The rate provided is expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(isDelegate(signer), \"Signature is not valid\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (rateCache.timestamp >= timestamp && !isExpired(rateCache.timestamp)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit CacheHit(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                msg.sender,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                currency,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                timestamp,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                rateCache.timestamp,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                rateCache.rate,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                rateCache.decimals\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (rateCache.rate, rateCache.decimals);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_48"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (ReferenceOracle.sol#88-93) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (ReferenceOracle.sol#95-102) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (ReferenceOracle.sol#104-114) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (ReferenceOracle.sol#116-134) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 159,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (ReferenceOracle.sol#136-159) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (ReferenceOracle.sol#161-189) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (ReferenceOracle.sol#191-224) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 271,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (ReferenceOracle.sol#226-271) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 358,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency (ReferenceOracle.sol#353-358) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 377,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (ReferenceOracle.sol#363-377) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (ReferenceOracle.sol#88-93)\n\t- ReferenceOracle.sol#90-92\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (ReferenceOracle.sol#95-102)\n\t- ReferenceOracle.sol#97-101\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (ReferenceOracle.sol#104-114)\n\t- ReferenceOracle.sol#109-113\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (ReferenceOracle.sol#116-134)\n\t- ReferenceOracle.sol#122-132\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 159,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (ReferenceOracle.sol#136-159)\n\t- ReferenceOracle.sol#143-157\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (ReferenceOracle.sol#161-189)\n\t- ReferenceOracle.sol#169-187\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (ReferenceOracle.sol#191-224)\n\t- ReferenceOracle.sol#200-222\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 271,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (ReferenceOracle.sol#226-271)\n\t- ReferenceOracle.sol#243-269\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 358,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency uses assembly (ReferenceOracle.sol#353-358)\n\t- ReferenceOracle.sol#355-357\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 377,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency uses assembly (ReferenceOracle.sol#363-377)\n\t- ReferenceOracle.sol#370-376\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 301,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n\n        require(_to != address(0), \"0x0 Is not a valid owner\");\n\n        owner = _to;\n\n        return true;\n",
                    "message": "OwnableBasalt.transferTo (ReferenceOracle.sol#297-301) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Oracle.url (ReferenceOracle.sol#325) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": 415,
                    "vulnerability_code": "    function url() public view returns (string memory) {\n\n        return infoUrl;\n",
                    "message": "ReferenceOracle.url (ReferenceOracle.sol#413-415) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": "Oracle.getRate (ReferenceOracle.sol#333) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": 529,
                    "vulnerability_code": "    function getRate(bytes32 currency, bytes memory data) public returns (uint256, uint256) {\n\n        if (address(_fallback) != address(0)) {\n\n            emit DelegatedCall(msg.sender, address(_fallback));\n\n            return _fallback.getRate(currency, data);\n\n        }\n\n\n\n        uint256 timestamp = uint256(readBytes32(data, INDEX_TIMESTAMP));\n\n        RateCache memory rateCache = cache[currency];\n\n        if (rateCache.timestamp >= timestamp && !isExpired(rateCache.timestamp)) {\n\n            emit CacheHit(\n\n                msg.sender,\n\n                currency,\n\n                timestamp,\n\n                rateCache.timestamp,\n\n                rateCache.rate,\n\n                rateCache.decimals\n\n            );\n\n            return (rateCache.rate, rateCache.decimals);\n\n        } else {\n\n            require(!isExpired(timestamp), \"The rate provided is expired\");\n\n            uint256 rate = uint256(readBytes32(data, INDEX_RATE));\n\n            uint256 decimals = uint256(readBytes32(data, INDEX_DECIMALS));\n\n\n\n            bytes32 _hash = keccak256(\n\n                abi.encodePacked(\n\n                    this,\n\n                    currency,\n\n                    rate,\n\n                    decimals,\n\n                    timestamp\n\n                    )\n\n                );\n\n            bytes32 preHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash));\n\n            address signer = ecrecover(\n\n                preHash,\n\n                uint8(uint256(readBytes32(data, INDEX_V))), // v\n\n                readBytes32(data, INDEX_R), // r\n\n                readBytes32(data, INDEX_S) // s\n\n            );\n\n\n\n            require(isDelegate(signer), \"Signature is not valid\");\n\n\n\n            cache[currency] = RateCache(timestamp, rate, decimals);\n\n\n\n            emit DeliveredRate(\n\n                msg.sender,\n\n                currency,\n\n                signer,\n\n                timestamp,\n\n                rate,\n\n                decimals\n\n            );\n\n            return (rate, decimals);\n\n        }\n",
                    "message": "ReferenceOracle.getRate (ReferenceOracle.sol#475-529) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": 348,
                    "vulnerability_code": "    function addCurrency(string memory ticker) public onlyOwner returns (bool) {\n\n        bytes32 currency = encodeCurrency(ticker);\n\n        emit NewSymbol(currency);\n\n        supported[currency] = true;\n\n        currencies.push(currency);\n\n        return true;\n",
                    "message": "Oracle.addCurrency (ReferenceOracle.sol#342-348) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 377,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (ReferenceOracle.sol#363-377) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 427,
                    "vulnerability_code": "    function setExpirationTime(uint256 time) public onlyOwner returns (bool) {\n\n        expiration = time;\n\n        return true;\n",
                    "message": "ReferenceOracle.setExpirationTime (ReferenceOracle.sol#424-427) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "    function setUrl(string memory _url) public onlyOwner returns (bool) {\n\n        infoUrl = _url;\n\n        return true;\n",
                    "message": "ReferenceOracle.setUrl (ReferenceOracle.sol#434-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": 448,
                    "vulnerability_code": "    function setFallback(Oracle __fallback) public onlyOwner returns (bool) {\n\n        _fallback = __fallback;\n\n        return true;\n",
                    "message": "ReferenceOracle.setFallback (ReferenceOracle.sol#445-448) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": 458,
                    "vulnerability_code": "    function invalidateCache(bytes32 currency) public onlyOwner returns (bool) {\n\n        delete cache[currency].timestamp;\n\n        return true;\n",
                    "message": "ReferenceOracle.invalidateCache (ReferenceOracle.sol#455-458) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in ReferenceOracle.sol:\n\t- pragma solidity^0.5.11 (ReferenceOracle.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (ReferenceOracle.sol#24): it allows old versions\n\t- pragma solidity^0.5.11 (ReferenceOracle.sol#57): it allows old versions\n\t- pragma solidity^0.5.11 (ReferenceOracle.sol#84): it allows old versions\n\t- pragma solidity^0.5.11 (ReferenceOracle.sol#277): it allows old versions\n\t- pragma solidity^0.5.11 (ReferenceOracle.sol#306): it allows old versions\n\t- pragma solidity^0.5.11 (ReferenceOracle.sol#383): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (ReferenceOracle.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal _owner;\n",
                    "message": "Variable 'Ownable._owner' (ReferenceOracle.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addDelegate(address _delegate) external onlyOwner returns (bool) {\n",
                    "message": "Parameter '_delegate' of SimpleDelegable.addDelegate (ReferenceOracle.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeDelegate(address _delegate) external onlyOwner returns (bool) {\n",
                    "message": "Parameter '_delegate' of SimpleDelegable.removeDelegate (ReferenceOracle.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isDelegate(address _delegate) public view returns (bool) {\n",
                    "message": "Parameter '_delegate' of SimpleDelegable.isDelegate (ReferenceOracle.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (ReferenceOracle.sol#105) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (ReferenceOracle.sol#106) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (ReferenceOracle.sol#117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (ReferenceOracle.sol#137) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (ReferenceOracle.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (ReferenceOracle.sol#192) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (ReferenceOracle.sol#227) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '_to' of OwnableBasalt.transferTo (ReferenceOracle.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUrl(string memory _url) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '_url' of ReferenceOracle.setUrl (ReferenceOracle.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFallback(Oracle __fallback) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '__fallback' of ReferenceOracle.setFallback (ReferenceOracle.sol#445) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Oracle public _fallback;\n",
                    "message": "Variable 'ReferenceOracle._fallback' (ReferenceOracle.sol#404) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (true) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setExpirationTime(uint256 time) public onlyOwner returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUrl(string memory _url) public onlyOwner returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFallback(Oracle __fallback) public onlyOwner returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant private INDEX_TIMESTAMP = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant private INDEX_RATE = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant private INDEX_DECIMALS = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant private INDEX_V = 3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant private INDEX_R = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant private INDEX_S = 5;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private infoUrl;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 currency, bytes memory data) public returns (uint256, uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => bool) delegates;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/basalt/interfaces/Engine.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_33"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency (Engine.sol#79-84) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (Engine.sol#89-103) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency uses assembly (Engine.sol#79-84)\n\t- Engine.sol#81-83\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency uses assembly (Engine.sol#89-103)\n\t- Engine.sol#96-102\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public VERSION;\n",
                    "message": "Engine.VERSION should be constant (Engine.sol#113)\nEngine.VERSION_NAME should be constant (Engine.sol#114)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n\n        require(_to != address(0), \"0x0 Is not a valid owner\");\n\n        owner = _to;\n\n        return true;\n",
                    "message": "OwnableBasalt.transferTo (Engine.sol#23-27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Oracle.url (Engine.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": "Oracle.getRate (Engine.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    function addCurrency(string memory ticker) public onlyOwner returns (bool) {\n\n        bytes32 currency = encodeCurrency(ticker);\n\n        emit NewSymbol(currency);\n\n        supported[currency] = true;\n\n        currencies.push(currency);\n\n        return true;\n",
                    "message": "Oracle.addCurrency (Engine.sol#68-74) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (Engine.sol#89-103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalLoans() public view returns (uint256);\n",
                    "message": "Engine.getTotalLoans (Engine.sol#123) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOracle(uint index) public view returns (Oracle);\n",
                    "message": "Engine.getOracle (Engine.sol#124) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBorrower(uint index) public view returns (address);\n",
                    "message": "Engine.getBorrower (Engine.sol#125) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCosigner(uint index) public view returns (address);\n",
                    "message": "Engine.getCosigner (Engine.sol#126) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
                    "message": "Engine.ownerOf (Engine.sol#127) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCreator(uint index) public view returns (address);\n",
                    "message": "Engine.getCreator (Engine.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAmount(uint index) public view returns (uint256);\n",
                    "message": "Engine.getAmount (Engine.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPaid(uint index) public view returns (uint256);\n",
                    "message": "Engine.getPaid (Engine.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDueTime(uint index) public view returns (uint256);\n",
                    "message": "Engine.getDueTime (Engine.sol#131) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApprobation(uint index, address _address) public view returns (bool);\n",
                    "message": "Engine.getApprobation (Engine.sol#132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStatus(uint index) public view returns (Status);\n",
                    "message": "Engine.getStatus (Engine.sol#133) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApproved(uint index) public view returns (bool);\n",
                    "message": "Engine.isApproved (Engine.sol#134) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPendingAmount(uint index) public returns (uint256);\n",
                    "message": "Engine.getPendingAmount (Engine.sol#135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCurrency(uint index) public view returns (bytes32);\n",
                    "message": "Engine.getCurrency (Engine.sol#136) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveLoan(uint index) public returns (bool);\n",
                    "message": "Engine.approveLoan (Engine.sol#138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 index) public returns (bool);\n",
                    "message": "Engine.transfer (Engine.sol#139) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeOwnership(uint256 index) public returns (bool);\n",
                    "message": "Engine.takeOwnership (Engine.sol#140) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawal(uint index, address to, uint256 amount) public returns (bool);\n",
                    "message": "Engine.withdrawal (Engine.sol#141) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in Engine.sol:\n\t- pragma solidity^0.5.11 (Engine.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (Engine.sol#32): it allows old versions\n\t- pragma solidity^0.5.11 (Engine.sol#110): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '_to' of OwnableBasalt.transferTo (Engine.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
                    "message": "Parameter '' of Engine.ownerOf (Engine.sol#127) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public VERSION;\n",
                    "message": "Variable 'Engine.VERSION' (Engine.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string public VERSION_NAME;\n",
                    "message": "Variable 'Engine.VERSION_NAME' (Engine.sol#114) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (true) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/basalt/interfaces/ERC721.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function name() public view returns (string memory _name);\n",
                    "message": "ERC721.name (ERC721.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function symbol() public view returns (string memory _symbol);\n",
                    "message": "ERC721.symbol (ERC721.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256 _totalSupply);\n",
                    "message": "ERC721.totalSupply (ERC721.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint _balance);\n",
                    "message": "ERC721.balanceOf (ERC721.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
                    "message": "ERC721.ownerOf (ERC721.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address, uint256) public returns (bool);\n",
                    "message": "ERC721.approve (ERC721.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeOwnership(uint256) public returns (bool);\n",
                    "message": "ERC721.takeOwnership (ERC721.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address, uint256) public returns (bool);\n",
                    "message": "ERC721.transfer (ERC721.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _approved) public returns (bool);\n",
                    "message": "ERC721.setApprovalForAll (ERC721.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 _tokenId) public view returns (address);\n",
                    "message": "ERC721.getApproved (ERC721.sol#18) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n",
                    "message": "ERC721.isApprovedForAll (ERC721.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenMetadata(uint256 _tokenId) public view returns (string memory info);\n",
                    "message": "ERC721.tokenMetadata (ERC721.sol#21) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in ERC721.sol:\n\t- pragma solidity^0.5.11 (ERC721.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
                    "message": "Parameter '' of ERC721.ownerOf (ERC721.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address, uint256) public returns (bool);\n",
                    "message": "Parameter '' of ERC721.approve (ERC721.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address, uint256) public returns (bool);\n",
                    "message": "Parameter '_scope_0' of ERC721.approve (ERC721.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeOwnership(uint256) public returns (bool);\n",
                    "message": "Parameter '' of ERC721.takeOwnership (ERC721.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address, uint256) public returns (bool);\n",
                    "message": "Parameter '' of ERC721.transfer (ERC721.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address, uint256) public returns (bool);\n",
                    "message": "Parameter '_scope_0' of ERC721.transfer (ERC721.sol#16) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/basalt/interfaces/Oracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_11"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency (Oracle.sol#79-84) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (Oracle.sol#89-103) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency uses assembly (Oracle.sol#79-84)\n\t- Oracle.sol#81-83\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency uses assembly (Oracle.sol#89-103)\n\t- Oracle.sol#96-102\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n\n        require(_to != address(0), \"0x0 Is not a valid owner\");\n\n        owner = _to;\n\n        return true;\n",
                    "message": "OwnableBasalt.transferTo (Oracle.sol#23-27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Oracle.url (Oracle.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": "Oracle.getRate (Oracle.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    function addCurrency(string memory ticker) public onlyOwner returns (bool) {\n\n        bytes32 currency = encodeCurrency(ticker);\n\n        emit NewSymbol(currency);\n\n        supported[currency] = true;\n\n        currencies.push(currency);\n\n        return true;\n",
                    "message": "Oracle.addCurrency (Oracle.sol#68-74) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (Oracle.sol#89-103) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in Oracle.sol:\n\t- pragma solidity^0.5.11 (Oracle.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (Oracle.sol#32): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '_to' of OwnableBasalt.transferTo (Oracle.sol#23) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (true) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/diaspore/LoanManager.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 949,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _to,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 950,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 951,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ERC721_RECEIVED,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    msg.sender,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    holder,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 954,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _assetId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 955,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _userData\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 956,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 957,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 962,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                (success, result) = _noThrowCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 963,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _to,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 965,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        ERC721_RECEIVED_LEGACY,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 966,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        holder,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 967,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _assetId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 968,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _userData\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes32 paid) = _safeGasCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(_model),\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _model.addPaid.selector,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _id,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _available\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1630,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes32 result) = _safeGasCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(debt.model),\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                debt.model.run.selector,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _id\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1636,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1724,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, uint256 result) = _safeGasStaticCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(debt.model),\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1726,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    debt.model.getStatus.selector,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1728,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _id\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 2423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes32 result) = _safeCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 2424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _borrower,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 2425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 2426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                0x76ba6009,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 2427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _id\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 2428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 2429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract DebtEngine is ERC721Base, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_METADATA_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1039,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1041,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        IERC20 _token\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public ERC721Base(\"RCN Debt Record\", \"RDR\") {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // Sanity checks\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(_token).isContract(), \"Token should be a contract\");\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 2208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(DebtEngine _debtEngine) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 2209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        debtEngine = _debtEngine;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 2210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = debtEngine.token();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 2211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token) != address(0), \"Error loading token\");\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 2212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1705,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                balance = debts[target].balance;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                debts[target].balance = 0;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < _allTokens.length, \"Index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_owner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 748,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_operator != address(0), \"0x0 is an invalid operator\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_target != address(0), \"Target can't be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 972,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 974,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Contract rejected the token\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1034,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1053,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(_token).isContract(), \"Token should be a contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_model.create(id, _data), \"Error creating debt in model\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_model.create(id, _data), \"Error creating debt in model\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_model.create(id, _data), \"Error creating debt in model\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid <= available, \"Paid can't exceed available\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(paidToken <= amount, \"Paid can't exceed requested\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(available < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _tokenAmounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(paidTokens[i] <= tokenAmount, \"Paid can't exceed requested\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_model != Model(0), \"Debt does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(debt.model != Model(0), \"Debt does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1668,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0x0), \"_to should not be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1669,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isAuthorized(msg.sender, uint256(_id)), \"Sender not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transfer(_to, amount), \"Error sending tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0x0), \"_to should not be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isAuthorized(msg.sender, uint256(_id)), \"Sender not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1686,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(debt.balance >= _amount, \"Debt balance is not enought\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transfer(_to, _amount), \"Error sending tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0x0), \"_to should not be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1716,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transfer(_to, total), \"Error sending tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1971,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1983,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2033,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2098,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token) != address(0), \"Error loading token\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(request.borrower != address(0), \"Request does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_borrower != address(0), \"The request should have a borrower\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(Model(_model).validate(_loanData), \"The loan data is not valid\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!canceledSettles[id], \"The debt was canceled\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(requests[id].borrower == address(0), \"Request already exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == request.borrower, \"Only borrower can approve\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(request.open, \"Request is no longer open\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(request.approved, \"The request is not approved by the borrower\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(request.expiration > now, \"The request is expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            token.transferFrom(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                msg.sender,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                request.borrower,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2519,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                tokens\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Error sending tokens to borrower\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            debtEngine.create2(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                Model(request.model),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                msg.sender,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                request.oracle,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _internalSalt(request),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                request.loanData\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ) == _id,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Error creating the debt\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                Cosigner(_cosigner).requestCosign(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    address(this),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    uint256(_id),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _cosignerData,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _oracleData\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"Cosign method returned false\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(_id, msg.sender, _callbackData), \"Rejected by loan callback\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(request.open, \"Request is no longer open or not requested\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            request.creator == msg.sender || request.borrower == msg.sender,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Only borrower or creator can cancel a request\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2572,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(request.cosigner != address(0), \"Cosigner 0x0 is not valid\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(request.expiration > now, \"Request is expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(request.cosigner == address(uint256(msg.sender) + 2), \"Cosigner not valid\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(request.salt >= _cost, \"Cosigner cost exceeded\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(token.transferFrom(debtEngine.ownerOf(_id), msg.sender, _cost), \"Error paying cosigner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(requests[id].borrower == address(0), \"Request already exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2680,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2681,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            token.transferFrom(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                msg.sender,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                tokens\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2686,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Error sending tokens to borrower\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2690,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _createDebt(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _requestData,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2693,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _loanData,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                innerSalt\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ) == id,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2696,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Error creating debt registry\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2697,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2726,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.sender == address(uint256(read(_requestData, O_BORROWER, L_BORROWER))) ||\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.sender == address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2745,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Only borrower or creator can cancel a settle\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2760,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!canceledSettles[_id], \"Settle was canceled\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2769,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2770,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                LoanApprover(borrower).settleApproveRequest(_requestData, _loanData, true, uint256(_id)) == expected,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2771,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"Borrower contract rejected the loan\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2783,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                borrower == ecrecovery(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)), _borrowerSig),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2784,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"Invalid borrower signature\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2785,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    LoanApprover(creator).settleApproveRequest(_requestData, _loanData, false, uint256(_id)) == expected,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Creator contract rejected the loan\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2795,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    creator == ecrecovery(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)), _creatorSig),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Invalid creator signature\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 2808,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 972,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 974,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Contract rejected the token\"\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_doCheck && _to.isContract()) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 945,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Call dest contract\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Perform check with the new safe call\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 947,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // onERC721Received(address,address,uint256,bytes)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 949,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _to,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 950,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 951,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ERC721_RECEIVED,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    msg.sender,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    holder,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1927,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if ((success==1)&&(result==1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1928,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1929,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (_borrower.isContract() && _borrower.implementsMethod(0x76ba6009)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                approved = _requestContractApprove(id, _borrower);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                requests[id].approved = approved;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (borrower.isContract() && borrower.implementsMethod(0x76ba6009)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                approved = _requestContractApprove(_id, borrower);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2467,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bytes32 _hash = keccak256(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    abi.encodePacked(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _id,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        \"sign approve request\"\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    )\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (approved && !request.approved) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            request.approved = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit Approved(_id);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 2496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _assetsOf[_from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _tokenAmounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_borrower != address(0), \"The request should have a borrower\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(request.approved, \"The request is not approved by the borrower\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(request.open, \"Request is no longer open or not requested\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            request.creator == msg.sender || request.borrower == msg.sender,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Only borrower or creator can cancel a request\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2572,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.sender == address(uint256(read(_requestData, O_BORROWER, L_BORROWER))) ||\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.sender == address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2745,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Only borrower or creator can cancel a settle\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2769,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2770,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                LoanApprover(borrower).settleApproveRequest(_requestData, _loanData, true, uint256(_id)) == expected,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2771,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"Borrower contract rejected the loan\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    LoanApprover(creator).settleApproveRequest(_requestData, _loanData, false, uint256(_id)) == expected,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Creator contract rejected the loan\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 2795,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_76"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract (LoanManager.sol#421-425) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1934,
                    "vulnerability_to_line": 1954,
                    "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
                    "message": "ImplementsInterface._noThrowImplements (LoanManager.sol#1934-1954) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1963,
                    "vulnerability_to_line": 1968,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (LoanManager.sol#1963-1968) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1970,
                    "vulnerability_to_line": 1977,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (LoanManager.sol#1970-1977) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1979,
                    "vulnerability_to_line": 1989,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (LoanManager.sol#1979-1989) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1991,
                    "vulnerability_to_line": 2009,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (LoanManager.sol#1991-2009) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 2011,
                    "vulnerability_to_line": 2034,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (LoanManager.sol#2011-2034) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 2036,
                    "vulnerability_to_line": 2064,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (LoanManager.sol#2036-2064) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 2066,
                    "vulnerability_to_line": 2099,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (LoanManager.sol#2066-2099) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 2101,
                    "vulnerability_to_line": 2146,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (LoanManager.sol#2101-2146) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 2923,
                    "vulnerability_to_line": 2939,
                    "vulnerability_code": "    function ecrecovery(bytes32 _hash, bytes memory _sig) internal pure returns (address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        assembly {\n\n            r := mload(add(_sig, 32))\n\n            s := mload(add(_sig, 64))\n\n            v := and(mload(add(_sig, 65)), 255)\n\n        }\n\n\n\n        if (v < 27) {\n\n            v += 27;\n\n        }\n\n\n\n        return ecrecover(_hash, v, r, s);\n",
                    "message": "LoanManager.ecrecovery (LoanManager.sol#2923-2939) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": 1003,
                    "vulnerability_code": "contract ERC721Base is ERC165 {\n\n    using SafeMath for uint256;\n\n    using IsContract for address;\n\n\n\n    mapping(uint256 => address) private _holderOf;\n\n\n\n    // Owner to array of assetId\n\n    mapping(address => uint256[]) private _assetsOf;\n\n    // AssetId to index on array in _assetsOf mapping\n\n    mapping(uint256 => uint256) private _indexOfAsset;\n\n\n\n    mapping(address => mapping(address => bool)) private _operators;\n\n    mapping(uint256 => address) private _approval;\n\n\n\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n\n    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n\n    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n\n    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n\n\n\n    constructor(\n\n        string memory name,\n\n        string memory symbol\n\n    ) public {\n\n        _name = name;\n\n        _symbol = symbol;\n\n\n\n        _registerInterface(ERC_721_INTERFACE);\n\n        _registerInterface(ERC_721_METADATA_INTERFACE);\n\n        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Metadata\n\n    // ///\n\n\n\n    /// ERC-721 Non-Fungible Token Standard, optional metadata extension\n\n    /// See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    /// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n\n\n\n    event SetURIProvider(address _uriProvider);\n\n\n\n    string private _name;\n\n    string private _symbol;\n\n\n\n    URIProvider private _uriProvider;\n\n\n\n    // @notice A descriptive name for a collection of NFTs in this contract\n\n    function name() external view returns (string memory) {\n\n        return _name;\n\n    }\n\n\n\n    // @notice An abbreviated name for NFTs in this contract\n\n    function symbol() external view returns (string memory) {\n\n        return _symbol;\n\n    }\n\n\n\n    /**\n\n    * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n\n    * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n\n    *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n\n    *  Metadata JSON Schema\".\n\n    */\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n\n        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n\n        URIProvider provider = _uriProvider;\n\n        return address(provider) == address(0) ? \"\" : provider.tokenURI(_tokenId);\n\n    }\n\n\n\n    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Enumeration\n\n    // ///\n\n\n\n    ///  ERC-721 Non-Fungible Token Standard, optional enumeration extension\n\n    ///  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    ///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\n\n\n\n    uint256[] private _allTokens;\n\n\n\n    /**\n\n     * @dev Gets the total of assets stored by the contract\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @return an array with total assets\n\n     */\n\n    function allTokens() external view returns (uint256[] memory) {\n\n        return _allTokens;\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total of assets of the owner\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @param _owner the address of owner\n\n     * @return an array with total assets of owner\n\n     */\n\n    function assetsOf(address _owner) external view returns (uint256[] memory) {\n\n        return _assetsOf[_owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total amount of assets stored by the contract\n\n     * @return uint256 representing the total amount of assets\n\n     */\n\n    function totalSupply() external view returns (uint256) {\n\n        return _allTokens.length;\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate valid NFTs\n\n    * @dev Throws if `_index` >= `totalSupply()`.\n\n    * @param _index A counter less than `totalSupply()`\n\n    * @return The token identifier for the `_index` of the NFT,\n\n    *  (sort order not specified)\n\n    */\n\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n\n        require(_index < _allTokens.length, \"Index out of bounds\");\n\n        return _allTokens[_index];\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate NFTs assigned to an owner\n\n    * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n\n    *  `_owner` is the zero address, representing invalid NFTs.\n\n    * @param _owner An address where we are interested in NFTs owned by them\n\n    * @param _index A counter less than `balanceOf(_owner)`\n\n    * @return The token identifier for the `_index` of the NFT assigned to `_owner`,\n\n    *   (sort order not specified)\n\n    */\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n\n        require(_owner != address(0), \"0x0 Is not a valid owner\");\n\n        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n\n        return _assetsOf[_owner][_index];\n\n    }\n\n\n\n    //\n\n    // Asset-centric getter functions\n\n    //\n\n\n\n    /**\n\n     * @dev Queries what address owns an asset. This method does not throw.\n\n     * In order to check if the asset exists, use the `exists` function or check if the\n\n     * return value of this call is `0`.\n\n     * @return uint256 the assetId\n\n     */\n\n    function ownerOf(uint256 _assetId) external view returns (address) {\n\n        return _ownerOf(_assetId);\n\n    }\n\n\n\n    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n\n    }\n\n\n\n    //\n\n    // Holder-centric getter functions\n\n    //\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param _owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address _owner) external view returns (uint256) {\n\n        return _balanceOf(_owner);\n\n    }\n\n\n\n    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n\n    }\n\n\n\n    //\n\n    // Authorization getters\n\n    //\n\n\n\n    /**\n\n     * @dev Query whether an address has been authorized to move any assets on behalf of someone else\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetHolder the address that provided the authorization\n\n     * @return bool true if the operator has been authorized to move any assets\n\n     */\n\n    function isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) external view returns (bool) {\n\n        return _isApprovedForAll(_operator, _assetHolder);\n\n    }\n\n\n\n    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Query what address has been particularly authorized to move an asset\n\n     * @param _assetId the asset to be queried for\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function getApproved(uint256 _assetId) external view returns (address) {\n\n        return _getApproved(_assetId);\n\n    }\n\n\n\n    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n\n    }\n\n\n\n    /**\n\n     * @dev Query if an operator can move an asset.\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetId the asset that has been `approved` for transfer\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n\n        return _isAuthorized(_operator, _assetId);\n\n    }\n\n\n\n    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n\n    }\n\n\n\n    //\n\n    // Authorization\n\n    //\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage (send) msg.sender's asset\n\n     * @param _operator address to be approved\n\n     * @param _authorized bool set to true to authorize, false to withdraw authorization\n\n     */\n\n    function setApprovalForAll(address _operator, bool _authorized) external {\n\n        if (_operators[msg.sender][_operator] != _authorized) {\n\n            _operators[msg.sender][_operator] = _authorized;\n\n            emit ApprovalForAll(msg.sender, _operator, _authorized);\n\n        }\n\n    }\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage one particular asset\n\n     * @param _operator address to be approved\n\n     * @param _assetId asset to approve\n\n     */\n\n    function approve(address _operator, uint256 _assetId) external {\n\n        address holder = _ownerOf(_assetId);\n\n        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n\n        if (_getApproved(_assetId) != _operator) {\n\n            _approval[_assetId] = _operator;\n\n            emit Approval(holder, _operator, _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Internal Operations\n\n    //\n\n\n\n    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n\n    }\n\n\n\n    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n    }\n\n\n\n    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Supply-altering functions\n\n    //\n\n\n\n    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n\n    }\n\n\n\n    //\n\n    // Transaction related operations\n\n    //\n\n\n\n    modifier onlyAuthorized(uint256 _assetId) {\n\n        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n\n        _;\n\n    }\n\n\n\n    modifier isCurrentOwner(address _from, uint256 _assetId) {\n\n        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n\n        _;\n\n    }\n\n\n\n    modifier addressDefined(address _target) {\n\n        require(_target != address(0), \"Target can't be 0x0\");\n\n        _;\n\n    }\n\n\n\n    /**\n\n     * @dev Alias of `safeTransferFrom(from, to, assetId, '')`\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Securely transfers the ownership of a given asset from one address to\n\n     * another address, calling the method `onNFTReceived` on the target address if\n\n     * there's code associated with it\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     * @param _userData bytes arbitrary user information to attach to this transfer\n\n     */\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes calldata _userData\n\n    ) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            _userData,\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given asset from one address to another address\n\n     * Warning! This function does not attempt to verify that the target address can send\n\n     * tokens.\n\n     *\n\n     * @param _from address sending the asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function transferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            false\n\n        );\n\n    }\n\n\n\n    /**\n\n     * Internal function that moves an asset from one holder to another\n\n     */\n\n    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n\n    }\n\n\n\n    //\n\n    // Utilities\n\n    //\n\n\n\n    /**\n\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract),\n\n     * relaxing the requirement on the return value\n\n     * @param _contract The contract that receives the ERC721\n\n     * @param _data The call data\n\n     * @return True if the call not reverts and the result of the call\n\n     */\n\n    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n\n    }\n",
                    "message": "ERC721Base (LoanManager.sol#520-1003) has incorrect ERC20 function interface(s):\n\t-approve (LoanManager.sol#775-782)\n\t-transferFrom (LoanManager.sol#915-923)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1507,
                    "vulnerability_to_line": 1539,
                    "vulnerability_code": "    function _pay(\n\n        bytes32 _id,\n\n        address _oracle,\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal returns (uint256 paid, uint256 paidToken){\n\n        Debt storage debt = debts[_id];\n\n\n\n        if (_oracle != debt.oracle) {\n\n            emit PayBatchError(\n\n                _id,\n\n                _oracle\n\n            );\n\n\n\n            return (0,0);\n\n        }\n\n\n\n        // Paid only required amount\n\n        paid = _safePay(_id, debt.model, _amount);\n\n        require(paid <= _amount, \"Paid can't be more than requested\");\n\n\n\n        // Get token amount to use as payment\n\n        paidToken = _oracle != address(0) ? _toToken(paid, _tokens, _equivalent) : paid;\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n\n\n\n        // Add balance to debt\n\n        uint256 newBalance = paidToken.add(debt.balance);\n\n        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(newBalance);\n",
                    "message": "Reentrancy in DebtEngine._pay (LoanManager.sol#1507-1539):\n\tExternal calls:\n\t- paid = _safePay(_id,debt.model,_amount) (LoanManager.sol#1526)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(this),paidToken),Error pulling payment tokens) (LoanManager.sol#1533)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1538)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 2499,
                    "vulnerability_to_line": 2563,
                    "vulnerability_code": "    function lend(\n\n        bytes32 _id,\n\n        bytes memory _oracleData,\n\n        address _cosigner,\n\n        uint256 _cosignerLimit,\n\n        bytes memory _cosignerData,\n\n        bytes memory _callbackData\n\n    ) public returns (bool) {\n\n        Request storage request = requests[_id];\n\n        require(request.open, \"Request is no longer open\");\n\n        require(request.approved, \"The request is not approved by the borrower\");\n\n        require(request.expiration > now, \"The request is expired\");\n\n\n\n        request.open = false;\n\n\n\n        uint256 tokens = _currencyToToken(request.oracle, request.amount, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                request.borrower,\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        emit Lent(_id, msg.sender, tokens);\n\n\n\n        // Generate the debt\n\n        require(\n\n            debtEngine.create2(\n\n                Model(request.model),\n\n                msg.sender,\n\n                request.oracle,\n\n                _internalSalt(request),\n\n                request.loanData\n\n            ) == _id,\n\n            \"Error creating the debt\"\n\n        );\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            uint256 auxSalt = request.salt;\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            request.salt = _cosignerLimit; // Risky ?\n\n            require(\n\n                Cosigner(_cosigner).requestCosign(\n\n                    address(this),\n\n                    uint256(_id),\n\n                    _cosignerData,\n\n                    _oracleData\n\n                ),\n\n                \"Cosign method returned false\"\n\n            );\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = auxSalt;\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = request.callback;\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(_id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n\n\n\n        return true;\n",
                    "message": "Reentrancy in LoanManager.lend (LoanManager.sol#2499-2563):\n\tExternal calls:\n\t- tokens = _currencyToToken(request.oracle,request.amount,_oracleData) (LoanManager.sol#2514)\n\t- require(bool,string)(token.transferFrom(msg.sender,request.borrower,tokens),Error sending tokens to borrower) (LoanManager.sol#2515-2522)\n\t- require(bool,string)(debtEngine.create2(Model(request.model),msg.sender,request.oracle,_internalSalt(request),request.loanData) == _id,Error creating the debt) (LoanManager.sol#2527-2536)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2541)\n\t- requests (LoanManager.sol#2542)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 2499,
                    "vulnerability_to_line": 2563,
                    "vulnerability_code": "    function lend(\n\n        bytes32 _id,\n\n        bytes memory _oracleData,\n\n        address _cosigner,\n\n        uint256 _cosignerLimit,\n\n        bytes memory _cosignerData,\n\n        bytes memory _callbackData\n\n    ) public returns (bool) {\n\n        Request storage request = requests[_id];\n\n        require(request.open, \"Request is no longer open\");\n\n        require(request.approved, \"The request is not approved by the borrower\");\n\n        require(request.expiration > now, \"The request is expired\");\n\n\n\n        request.open = false;\n\n\n\n        uint256 tokens = _currencyToToken(request.oracle, request.amount, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                request.borrower,\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        emit Lent(_id, msg.sender, tokens);\n\n\n\n        // Generate the debt\n\n        require(\n\n            debtEngine.create2(\n\n                Model(request.model),\n\n                msg.sender,\n\n                request.oracle,\n\n                _internalSalt(request),\n\n                request.loanData\n\n            ) == _id,\n\n            \"Error creating the debt\"\n\n        );\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            uint256 auxSalt = request.salt;\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            request.salt = _cosignerLimit; // Risky ?\n\n            require(\n\n                Cosigner(_cosigner).requestCosign(\n\n                    address(this),\n\n                    uint256(_id),\n\n                    _cosignerData,\n\n                    _oracleData\n\n                ),\n\n                \"Cosign method returned false\"\n\n            );\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = auxSalt;\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = request.callback;\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(_id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n\n\n\n        return true;\n",
                    "message": "Reentrancy in LoanManager.lend (LoanManager.sol#2499-2563):\n\tExternal calls:\n\t- tokens = _currencyToToken(request.oracle,request.amount,_oracleData) (LoanManager.sol#2514)\n\t- require(bool,string)(token.transferFrom(msg.sender,request.borrower,tokens),Error sending tokens to borrower) (LoanManager.sol#2515-2522)\n\t- require(bool,string)(debtEngine.create2(Model(request.model),msg.sender,request.oracle,_internalSalt(request),request.loanData) == _id,Error creating the debt) (LoanManager.sol#2527-2536)\n\t- require(bool,string)(Cosigner(_cosigner).requestCosign(address(this),uint256(_id),_cosignerData,_oracleData),Cosign method returned false) (LoanManager.sol#2543-2551)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2553)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1322,
                    "vulnerability_to_line": 1361,
                    "vulnerability_code": "    function pay(\n\n        bytes32 _id,\n\n        uint256 _amount,\n\n        address _origin,\n\n        bytes calldata _oracleData\n\n    ) external returns (uint256 paid, uint256 paidToken) {\n\n        Debt storage debt = debts[_id];\n\n        // Paid only required amount\n\n        paid = _safePay(_id, debt.model, _amount);\n\n        require(paid <= _amount, \"Paid can't be more than requested\");\n\n\n\n        RateOracle oracle = RateOracle(debt.oracle);\n\n        if (address(oracle) != address(0)) {\n\n            // Convert\n\n            (uint256 tokens, uint256 equivalent) = oracle.readSample(_oracleData);\n\n            emit ReadedOracle(_id, tokens, equivalent);\n\n            paidToken = _toToken(paid, tokens, equivalent);\n\n        } else {\n\n            paidToken = paid;\n\n        }\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n\n\n\n        // Add balance to the debt\n\n        uint256 newBalance = paidToken.add(debt.balance);\n\n        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(newBalance);\n\n\n\n        // Emit pay event\n\n        emit Paid({\n\n            _id: _id,\n\n            _sender: msg.sender,\n\n            _origin: _origin,\n\n            _requested: _amount,\n\n            _requestedTokens: 0,\n\n            _paid: paid,\n\n            _tokens: paidToken\n\n        });\n",
                    "message": "Reentrancy in DebtEngine.pay (LoanManager.sol#1322-1361):\n\tExternal calls:\n\t- paid = _safePay(_id,debt.model,_amount) (LoanManager.sol#1330)\n\t- (tokens,equivalent) = oracle.readSample(_oracleData) (LoanManager.sol#1336)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(this),paidToken),Error pulling payment tokens) (LoanManager.sol#1344)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1349)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1363,
                    "vulnerability_to_line": 1417,
                    "vulnerability_code": "    function payToken(\n\n        bytes32 id,\n\n        uint256 amount,\n\n        address origin,\n\n        bytes calldata oracleData\n\n    ) external returns (uint256 paid, uint256 paidToken) {\n\n        Debt storage debt = debts[id];\n\n        // Read storage\n\n        RateOracle oracle = RateOracle(debt.oracle);\n\n\n\n        uint256 equivalent;\n\n        uint256 tokens;\n\n        uint256 available;\n\n\n\n        // Get available <currency> amount\n\n        if (address(oracle) != address(0)) {\n\n            (tokens, equivalent) = oracle.readSample(oracleData);\n\n            emit ReadedOracle(id, tokens, equivalent);\n\n            available = _fromToken(amount, tokens, equivalent);\n\n        } else {\n\n            available = amount;\n\n        }\n\n\n\n        // Call addPaid on model\n\n        paid = _safePay(id, debt.model, available);\n\n        require(paid <= available, \"Paid can't exceed available\");\n\n\n\n        // Convert back to required pull amount\n\n        if (address(oracle) != address(0)) {\n\n            paidToken = _toToken(paid, tokens, equivalent);\n\n            require(paidToken <= amount, \"Paid can't exceed requested\");\n\n        } else {\n\n            paidToken = paid;\n\n        }\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling tokens\");\n\n\n\n        // Add balance to the debt\n\n        // WARNING: Reusing variable **available**\n\n        available = paidToken.add(debt.balance);\n\n        require(available < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(available);\n\n\n\n        // Emit pay event\n\n        emit Paid({\n\n            _id: id,\n\n            _sender: msg.sender,\n\n            _origin: origin,\n\n            _requested: 0,\n\n            _requestedTokens: amount,\n\n            _paid: paid,\n\n            _tokens: paidToken\n\n        });\n",
                    "message": "Reentrancy in DebtEngine.payToken (LoanManager.sol#1363-1417):\n\tExternal calls:\n\t- (tokens,equivalent) = oracle.readSample(oracleData) (LoanManager.sol#1379)\n\t- paid = _safePay(id,debt.model,available) (LoanManager.sol#1387)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1387)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1363,
                    "vulnerability_to_line": 1417,
                    "vulnerability_code": "    function payToken(\n\n        bytes32 id,\n\n        uint256 amount,\n\n        address origin,\n\n        bytes calldata oracleData\n\n    ) external returns (uint256 paid, uint256 paidToken) {\n\n        Debt storage debt = debts[id];\n\n        // Read storage\n\n        RateOracle oracle = RateOracle(debt.oracle);\n\n\n\n        uint256 equivalent;\n\n        uint256 tokens;\n\n        uint256 available;\n\n\n\n        // Get available <currency> amount\n\n        if (address(oracle) != address(0)) {\n\n            (tokens, equivalent) = oracle.readSample(oracleData);\n\n            emit ReadedOracle(id, tokens, equivalent);\n\n            available = _fromToken(amount, tokens, equivalent);\n\n        } else {\n\n            available = amount;\n\n        }\n\n\n\n        // Call addPaid on model\n\n        paid = _safePay(id, debt.model, available);\n\n        require(paid <= available, \"Paid can't exceed available\");\n\n\n\n        // Convert back to required pull amount\n\n        if (address(oracle) != address(0)) {\n\n            paidToken = _toToken(paid, tokens, equivalent);\n\n            require(paidToken <= amount, \"Paid can't exceed requested\");\n\n        } else {\n\n            paidToken = paid;\n\n        }\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling tokens\");\n\n\n\n        // Add balance to the debt\n\n        // WARNING: Reusing variable **available**\n\n        available = paidToken.add(debt.balance);\n\n        require(available < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(available);\n\n\n\n        // Emit pay event\n\n        emit Paid({\n\n            _id: id,\n\n            _sender: msg.sender,\n\n            _origin: origin,\n\n            _requested: 0,\n\n            _requestedTokens: amount,\n\n            _paid: paid,\n\n            _tokens: paidToken\n\n        });\n",
                    "message": "Reentrancy in DebtEngine.payToken (LoanManager.sol#1363-1417):\n\tExternal calls:\n\t- (tokens,equivalent) = oracle.readSample(oracleData) (LoanManager.sol#1379)\n\t- paid = _safePay(id,debt.model,available) (LoanManager.sol#1387)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(this),paidToken),Error pulling tokens) (LoanManager.sol#1399)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1405)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 2457,
                    "vulnerability_to_line": 2497,
                    "vulnerability_code": "    function registerApproveRequest(\n\n        bytes32 _id,\n\n        bytes calldata _signature\n\n    ) external returns (bool approved) {\n\n        Request storage request = requests[_id];\n\n        address borrower = request.borrower;\n\n\n\n        if (!request.approved) {\n\n            if (borrower.isContract() && borrower.implementsMethod(0x76ba6009)) {\n\n                approved = _requestContractApprove(_id, borrower);\n\n            } else {\n\n                bytes32 _hash = keccak256(\n\n                    abi.encodePacked(\n\n                        _id,\n\n                        \"sign approve request\"\n\n                    )\n\n                );\n\n\n\n                address signer = ecrecovery(\n\n                    keccak256(\n\n                        abi.encodePacked(\n\n                            \"\\x19Ethereum Signed Message:\\n32\",\n\n                            _hash\n\n                        )\n\n                    ),\n\n                    _signature\n\n                );\n\n\n\n                if (borrower == signer) {\n\n                    emit ApprovedBySignature(_id);\n\n                    approved = true;\n\n                }\n\n            }\n\n        }\n\n\n\n        // Check request.approved again, protect against reentrancy\n\n        if (approved && !request.approved) {\n\n            request.approved = true;\n\n            emit Approved(_id);\n\n        }\n",
                    "message": "Reentrancy in LoanManager.registerApproveRequest (LoanManager.sol#2457-2497):\n\tExternal calls:\n\t- approved = _requestContractApprove(_id,borrower) (LoanManager.sol#2466)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2494)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 2345,
                    "vulnerability_to_line": 2415,
                    "vulnerability_code": "    function requestLoan(\n\n        uint128 _amount,\n\n        address _model,\n\n        address _oracle,\n\n        address _borrower,\n\n        address _callback,\n\n        uint256 _salt,\n\n        uint64 _expiration,\n\n        bytes calldata _loanData\n\n    ) external returns (bytes32 id) {\n\n        require(_borrower != address(0), \"The request should have a borrower\");\n\n        require(Model(_model).validate(_loanData), \"The loan data is not valid\");\n\n\n\n        id = calcId(\n\n            _amount,\n\n            _borrower,\n\n            msg.sender,\n\n            _model,\n\n            _oracle,\n\n            _callback,\n\n            _salt,\n\n            _expiration,\n\n            _loanData\n\n        );\n\n\n\n        require(!canceledSettles[id], \"The debt was canceled\");\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        bool approved = msg.sender == _borrower;\n\n\n\n        requests[id] = Request({\n\n            open: true,\n\n            approved: approved,\n\n            cosigner: address(0),\n\n            amount: _amount,\n\n            model: _model,\n\n            creator: msg.sender,\n\n            oracle: _oracle,\n\n            borrower: _borrower,\n\n            callback: _callback,\n\n            salt: _salt,\n\n            loanData: _loanData,\n\n            expiration: _expiration\n\n        });\n\n\n\n        emit Requested(\n\n            id,\n\n            _amount,\n\n            _model,\n\n            msg.sender,\n\n            _oracle,\n\n            _borrower,\n\n            _callback,\n\n            _salt,\n\n            _loanData,\n\n            _expiration\n\n        );\n\n\n\n        if (!approved) {\n\n            // implements: 0x76ba6009 = approveRequest(bytes32)\n\n            if (_borrower.isContract() && _borrower.implementsMethod(0x76ba6009)) {\n\n                approved = _requestContractApprove(id, _borrower);\n\n                requests[id].approved = approved;\n\n            }\n\n        }\n\n\n\n        if (approved) {\n\n            emit Approved(id);\n\n        }\n",
                    "message": "Reentrancy in LoanManager.requestLoan (LoanManager.sol#2345-2415):\n\tExternal calls:\n\t- require(bool,string)(Model(_model).validate(_loanData),The loan data is not valid) (LoanManager.sol#2356)\n\t- approved = _requestContractApprove(id,_borrower) (LoanManager.sol#2407)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2408)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1626,
                    "vulnerability_to_line": 1665,
                    "vulnerability_code": "    function run(bytes32 _id) external returns (bool) {\n\n        Debt storage debt = debts[_id];\n\n        require(debt.model != Model(0), \"Debt does not exist\");\n\n\n\n        (bool success, bytes32 result) = _safeGasCall(\n\n            address(debt.model),\n\n            abi.encodeWithSelector(\n\n                debt.model.run.selector,\n\n                _id\n\n            )\n\n        );\n\n\n\n        if (success) {\n\n            if (debt.error) {\n\n                emit ErrorRecover({\n\n                    _id: _id,\n\n                    _sender: msg.sender,\n\n                    _value: 0,\n\n                    _gasLeft: gasleft(),\n\n                    _gasLimit: block.gaslimit,\n\n                    _result: result,\n\n                    _callData: msg.data\n\n                });\n\n\n\n                delete debt.error;\n\n            }\n\n\n\n            return result == bytes32(uint256(1));\n\n        } else {\n\n            emit Error({\n\n                _id: _id,\n\n                _sender: msg.sender,\n\n                _value: 0,\n\n                _gasLeft: gasleft(),\n\n                _gasLimit: block.gaslimit,\n\n                _callData: msg.data\n\n            });\n\n            debt.error = true;\n\n        }\n",
                    "message": "Reentrancy in DebtEngine.run (LoanManager.sol#1626-1665):\n\tExternal calls:\n\t- (success,result) = _safeGasCall(address(debt.model),abi.encodeWithSelector(debt.model.run.selector,_id)) (LoanManager.sol#1630-1636)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1663)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 2658,
                    "vulnerability_to_line": 2735,
                    "vulnerability_code": "    function settleLend(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        address _cosigner,\n\n        uint256 _maxCosignerCost,\n\n        bytes memory _cosignerData,\n\n        bytes memory _oracleData,\n\n        bytes memory _creatorSig,\n\n        bytes memory _borrowerSig,\n\n        bytes memory _callbackData\n\n    ) public returns (bytes32 id) {\n\n        // Validate request\n\n        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n\n\n\n        // Get id\n\n        uint256 innerSalt;\n\n        (id, innerSalt) = _buildSettleId(_requestData, _loanData);\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        // Transfer tokens to borrower\n\n        uint256 tokens = _currencyToToken(_requestData, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        // Generate the debt\n\n        require(\n\n            _createDebt(\n\n                _requestData,\n\n                _loanData,\n\n                innerSalt\n\n            ) == id,\n\n            \"Error creating debt registry\"\n\n        );\n\n\n\n        emit SettledLend(id, msg.sender, tokens);\n\n\n\n        // Save the request info\n\n        requests[id] = Request({\n\n            open: false,\n\n            approved: true,\n\n            cosigner: _cosigner,\n\n            amount: uint128(uint256(read(_requestData, O_AMOUNT, L_AMOUNT))),\n\n            model: address(uint256(read(_requestData, O_MODEL, L_MODEL))),\n\n            creator: address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n\n            oracle: address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            borrower: address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n            callback: address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n\n            salt: _cosigner != address(0) ? _maxCosignerCost : uint256(read(_requestData, O_SALT, L_SALT)),\n\n            loanData: _loanData,\n\n            expiration: uint64(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)))\n\n        });\n\n\n\n        Request storage request = requests[id];\n\n\n\n        // Validate signatures\n\n        _validateSettleSignatures(id, _requestData, _loanData, _creatorSig, _borrowerSig);\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = uint256(read(_requestData, O_SALT, L_SALT));\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK)));\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n",
                    "message": "Reentrancy in LoanManager.settleLend (LoanManager.sol#2658-2735):\n\tExternal calls:\n\t- (id,innerSalt) = _buildSettleId(_requestData,_loanData) (LoanManager.sol#2674)\n\t- tokens = _currencyToToken(_requestData,_oracleData) (LoanManager.sol#2679)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(uint256(read(_requestData,O_BORROWER,L_BORROWER))),tokens),Error sending tokens to borrower) (LoanManager.sol#2680-2687)\n\t- require(bool,string)(_createDebt(_requestData,_loanData,innerSalt) == id,Error creating debt registry) (LoanManager.sol#2690-2697)\n\t- _validateSettleSignatures(id,_requestData,_loanData,_creatorSig,_borrowerSig) (LoanManager.sol#2720)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2724)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 2658,
                    "vulnerability_to_line": 2735,
                    "vulnerability_code": "    function settleLend(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        address _cosigner,\n\n        uint256 _maxCosignerCost,\n\n        bytes memory _cosignerData,\n\n        bytes memory _oracleData,\n\n        bytes memory _creatorSig,\n\n        bytes memory _borrowerSig,\n\n        bytes memory _callbackData\n\n    ) public returns (bytes32 id) {\n\n        // Validate request\n\n        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n\n\n\n        // Get id\n\n        uint256 innerSalt;\n\n        (id, innerSalt) = _buildSettleId(_requestData, _loanData);\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        // Transfer tokens to borrower\n\n        uint256 tokens = _currencyToToken(_requestData, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        // Generate the debt\n\n        require(\n\n            _createDebt(\n\n                _requestData,\n\n                _loanData,\n\n                innerSalt\n\n            ) == id,\n\n            \"Error creating debt registry\"\n\n        );\n\n\n\n        emit SettledLend(id, msg.sender, tokens);\n\n\n\n        // Save the request info\n\n        requests[id] = Request({\n\n            open: false,\n\n            approved: true,\n\n            cosigner: _cosigner,\n\n            amount: uint128(uint256(read(_requestData, O_AMOUNT, L_AMOUNT))),\n\n            model: address(uint256(read(_requestData, O_MODEL, L_MODEL))),\n\n            creator: address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n\n            oracle: address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            borrower: address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n            callback: address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n\n            salt: _cosigner != address(0) ? _maxCosignerCost : uint256(read(_requestData, O_SALT, L_SALT)),\n\n            loanData: _loanData,\n\n            expiration: uint64(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)))\n\n        });\n\n\n\n        Request storage request = requests[id];\n\n\n\n        // Validate signatures\n\n        _validateSettleSignatures(id, _requestData, _loanData, _creatorSig, _borrowerSig);\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = uint256(read(_requestData, O_SALT, L_SALT));\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK)));\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n",
                    "message": "Reentrancy in LoanManager.settleLend (LoanManager.sol#2658-2735):\n\tExternal calls:\n\t- (id,innerSalt) = _buildSettleId(_requestData,_loanData) (LoanManager.sol#2674)\n\t- tokens = _currencyToToken(_requestData,_oracleData) (LoanManager.sol#2679)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(uint256(read(_requestData,O_BORROWER,L_BORROWER))),tokens),Error sending tokens to borrower) (LoanManager.sol#2680-2687)\n\t- require(bool,string)(_createDebt(_requestData,_loanData,innerSalt) == id,Error creating debt registry) (LoanManager.sol#2690-2697)\n\t- _validateSettleSignatures(id,_requestData,_loanData,_creatorSig,_borrowerSig) (LoanManager.sol#2720)\n\t- require(bool,string)(Cosigner(_cosigner).requestCosign(address(this),uint256(id),_cosignerData,_oracleData),Cosign method returned false) (LoanManager.sol#2725)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2727)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 2658,
                    "vulnerability_to_line": 2735,
                    "vulnerability_code": "    function settleLend(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        address _cosigner,\n\n        uint256 _maxCosignerCost,\n\n        bytes memory _cosignerData,\n\n        bytes memory _oracleData,\n\n        bytes memory _creatorSig,\n\n        bytes memory _borrowerSig,\n\n        bytes memory _callbackData\n\n    ) public returns (bytes32 id) {\n\n        // Validate request\n\n        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n\n\n\n        // Get id\n\n        uint256 innerSalt;\n\n        (id, innerSalt) = _buildSettleId(_requestData, _loanData);\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        // Transfer tokens to borrower\n\n        uint256 tokens = _currencyToToken(_requestData, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        // Generate the debt\n\n        require(\n\n            _createDebt(\n\n                _requestData,\n\n                _loanData,\n\n                innerSalt\n\n            ) == id,\n\n            \"Error creating debt registry\"\n\n        );\n\n\n\n        emit SettledLend(id, msg.sender, tokens);\n\n\n\n        // Save the request info\n\n        requests[id] = Request({\n\n            open: false,\n\n            approved: true,\n\n            cosigner: _cosigner,\n\n            amount: uint128(uint256(read(_requestData, O_AMOUNT, L_AMOUNT))),\n\n            model: address(uint256(read(_requestData, O_MODEL, L_MODEL))),\n\n            creator: address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n\n            oracle: address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            borrower: address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n            callback: address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n\n            salt: _cosigner != address(0) ? _maxCosignerCost : uint256(read(_requestData, O_SALT, L_SALT)),\n\n            loanData: _loanData,\n\n            expiration: uint64(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)))\n\n        });\n\n\n\n        Request storage request = requests[id];\n\n\n\n        // Validate signatures\n\n        _validateSettleSignatures(id, _requestData, _loanData, _creatorSig, _borrowerSig);\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = uint256(read(_requestData, O_SALT, L_SALT));\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK)));\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n",
                    "message": "Reentrancy in LoanManager.settleLend (LoanManager.sol#2658-2735):\n\tExternal calls:\n\t- (id,innerSalt) = _buildSettleId(_requestData,_loanData) (LoanManager.sol#2674)\n\t- tokens = _currencyToToken(_requestData,_oracleData) (LoanManager.sol#2679)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(uint256(read(_requestData,O_BORROWER,L_BORROWER))),tokens),Error sending tokens to borrower) (LoanManager.sol#2680-2687)\n\t- require(bool,string)(_createDebt(_requestData,_loanData,innerSalt) == id,Error creating debt registry) (LoanManager.sol#2690-2697)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2702-2715)\n\t- requests (LoanManager.sol#2702-2715)\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 equivalent;\n",
                    "message": "equivalent in DebtEngine.payTokenBatch (LoanManager.sol#1465) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 tokens;\n",
                    "message": "tokens in DebtEngine.payToken (LoanManager.sol#1374) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 equivalent;\n",
                    "message": "equivalent in DebtEngine.payBatch (LoanManager.sol#1430) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 tokens;\n",
                    "message": "tokens in DebtEngine.payBatch (LoanManager.sol#1429) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 tokens;\n",
                    "message": "tokens in DebtEngine.payTokenBatch (LoanManager.sol#1464) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 equivalent;\n",
                    "message": "equivalent in DebtEngine.payToken (LoanManager.sol#1373) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "ERC721Base.constructor.name (local variable @ LoanManager.sol#546) shadows:\n\t- ERC721Base.name (function @ LoanManager.sol#573-575)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol\n",
                    "message": "ERC721Base.constructor.symbol (local variable @ LoanManager.sol#547) shadows:\n\t- ERC721Base.symbol (function @ LoanManager.sol#578-580)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "DebtEngine.create._owner (local variable @ LoanManager.sol#1171) shadows:\n\t- Ownable._owner (state variable @ LoanManager.sol#1031)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "DebtEngine.create2._owner (local variable @ LoanManager.sol#1205) shadows:\n\t- Ownable._owner (state variable @ LoanManager.sol#1031)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "DebtEngine.create3._owner (local variable @ LoanManager.sol#1242) shadows:\n\t- Ownable._owner (state variable @ LoanManager.sol#1031)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 2288,
                    "vulnerability_to_line": 2295,
                    "vulnerability_code": "        uint256 internalSalt = _buildInternalSalt(\n\n            _amount,\n\n            _borrower,\n\n            _creator,\n\n            _callback,\n\n            _salt,\n\n            _expiration\n",
                    "message": "LoanManager.calcId.internalSalt (local variable @ LoanManager.sol#2288-2295) shadows:\n\t- LoanManager.internalSalt (function @ LoanManager.sol#2328-2332)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1541,
                    "vulnerability_to_line": 1584,
                    "vulnerability_code": "    function _safePay(\n\n        bytes32 _id,\n\n        Model _model,\n\n        uint256 _available\n\n    ) internal returns (uint256) {\n\n        require(_model != Model(0), \"Debt does not exist\");\n\n\n\n        (bool success, bytes32 paid) = _safeGasCall(\n\n            address(_model),\n\n            abi.encodeWithSelector(\n\n                _model.addPaid.selector,\n\n                _id,\n\n                _available\n\n            )\n\n        );\n\n\n\n        if (success) {\n\n            if (debts[_id].error) {\n\n                emit ErrorRecover({\n\n                    _id: _id,\n\n                    _sender: msg.sender,\n\n                    _value: 0,\n\n                    _gasLeft: gasleft(),\n\n                    _gasLimit: block.gaslimit,\n\n                    _result: paid,\n\n                    _callData: msg.data\n\n                });\n\n\n\n                delete debts[_id].error;\n\n            }\n\n\n\n            return uint256(paid);\n\n        } else {\n\n            emit Error({\n\n                _id: _id,\n\n                _sender: msg.sender,\n\n                _value: msg.value,\n\n                _gasLeft: gasleft(),\n\n                _gasLimit: block.gaslimit,\n\n                _callData: msg.data\n\n            });\n\n            debts[_id].error = true;\n\n        }\n",
                    "message": "Reentrancy in DebtEngine._safePay (LoanManager.sol#1541-1584):\n\tExternal calls:\n\t- (success,paid) = _safeGasCall(address(_model),abi.encodeWithSelector(_model.addPaid.selector,_id,_available)) (LoanManager.sol#1548-1555)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1569)\n\t- debts (LoanManager.sol#1582)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 2345,
                    "vulnerability_to_line": 2415,
                    "vulnerability_code": "    function requestLoan(\n\n        uint128 _amount,\n\n        address _model,\n\n        address _oracle,\n\n        address _borrower,\n\n        address _callback,\n\n        uint256 _salt,\n\n        uint64 _expiration,\n\n        bytes calldata _loanData\n\n    ) external returns (bytes32 id) {\n\n        require(_borrower != address(0), \"The request should have a borrower\");\n\n        require(Model(_model).validate(_loanData), \"The loan data is not valid\");\n\n\n\n        id = calcId(\n\n            _amount,\n\n            _borrower,\n\n            msg.sender,\n\n            _model,\n\n            _oracle,\n\n            _callback,\n\n            _salt,\n\n            _expiration,\n\n            _loanData\n\n        );\n\n\n\n        require(!canceledSettles[id], \"The debt was canceled\");\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        bool approved = msg.sender == _borrower;\n\n\n\n        requests[id] = Request({\n\n            open: true,\n\n            approved: approved,\n\n            cosigner: address(0),\n\n            amount: _amount,\n\n            model: _model,\n\n            creator: msg.sender,\n\n            oracle: _oracle,\n\n            borrower: _borrower,\n\n            callback: _callback,\n\n            salt: _salt,\n\n            loanData: _loanData,\n\n            expiration: _expiration\n\n        });\n\n\n\n        emit Requested(\n\n            id,\n\n            _amount,\n\n            _model,\n\n            msg.sender,\n\n            _oracle,\n\n            _borrower,\n\n            _callback,\n\n            _salt,\n\n            _loanData,\n\n            _expiration\n\n        );\n\n\n\n        if (!approved) {\n\n            // implements: 0x76ba6009 = approveRequest(bytes32)\n\n            if (_borrower.isContract() && _borrower.implementsMethod(0x76ba6009)) {\n\n                approved = _requestContractApprove(id, _borrower);\n\n                requests[id].approved = approved;\n\n            }\n\n        }\n\n\n\n        if (approved) {\n\n            emit Approved(id);\n\n        }\n",
                    "message": "Reentrancy in LoanManager.requestLoan (LoanManager.sol#2345-2415):\n\tExternal calls:\n\t- require(bool,string)(Model(_model).validate(_loanData),The loan data is not valid) (LoanManager.sol#2356)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2376-2389)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 2737,
                    "vulnerability_to_line": 2751,
                    "vulnerability_code": "    function settleCancel(\n\n        bytes calldata _requestData,\n\n        bytes calldata _loanData\n\n    ) external returns (bool) {\n\n        (bytes32 id, ) = _buildSettleId(_requestData, _loanData);\n\n        require(\n\n            msg.sender == address(uint256(read(_requestData, O_BORROWER, L_BORROWER))) ||\n\n            msg.sender == address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n\n            \"Only borrower or creator can cancel a settle\"\n\n        );\n\n        canceledSettles[id] = true;\n\n        emit SettledCancel(id, msg.sender);\n\n\n\n        return true;\n",
                    "message": "Reentrancy in LoanManager.settleCancel (LoanManager.sol#2737-2751):\n\tExternal calls:\n\t- (id) = _buildSettleId(_requestData,_loanData) (LoanManager.sol#2741)\n\tState variables written after the call(s):\n\t- canceledSettles (LoanManager.sol#2747)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract uses assembly (LoanManager.sol#421-425)\n\t- LoanManager.sol#423\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1934,
                    "vulnerability_to_line": 1954,
                    "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
                    "message": "ImplementsInterface._noThrowImplements uses assembly (LoanManager.sol#1934-1954)\n\t- LoanManager.sol#1939-1953\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1963,
                    "vulnerability_to_line": 1968,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (LoanManager.sol#1963-1968)\n\t- LoanManager.sol#1965-1967\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1970,
                    "vulnerability_to_line": 1977,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (LoanManager.sol#1970-1977)\n\t- LoanManager.sol#1972-1976\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1979,
                    "vulnerability_to_line": 1989,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (LoanManager.sol#1979-1989)\n\t- LoanManager.sol#1984-1988\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1991,
                    "vulnerability_to_line": 2009,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (LoanManager.sol#1991-2009)\n\t- LoanManager.sol#1997-2007\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 2011,
                    "vulnerability_to_line": 2034,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (LoanManager.sol#2011-2034)\n\t- LoanManager.sol#2018-2032\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 2036,
                    "vulnerability_to_line": 2064,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (LoanManager.sol#2036-2064)\n\t- LoanManager.sol#2044-2062\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 2066,
                    "vulnerability_to_line": 2099,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (LoanManager.sol#2066-2099)\n\t- LoanManager.sol#2075-2097\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 2101,
                    "vulnerability_to_line": 2146,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (LoanManager.sol#2101-2146)\n\t- LoanManager.sol#2118-2144\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 2923,
                    "vulnerability_to_line": 2939,
                    "vulnerability_code": "    function ecrecovery(bytes32 _hash, bytes memory _sig) internal pure returns (address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        assembly {\n\n            r := mload(add(_sig, 32))\n\n            s := mload(add(_sig, 64))\n\n            v := and(mload(add(_sig, 65)), 255)\n\n        }\n\n\n\n        if (v < 27) {\n\n            v += 27;\n\n        }\n\n\n\n        return ecrecover(_hash, v, r, s);\n",
                    "message": "LoanManager.ecrecovery uses assembly (LoanManager.sol#2923-2939)\n\t- LoanManager.sol#2928-2932\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Cosigner.url (LoanManager.sol#1867) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1874,
                    "vulnerability_to_line": 1880,
                    "vulnerability_code": "    function cost(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
                    "message": "Cosigner.cost (LoanManager.sol#1874-1880) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1889,
                    "vulnerability_to_line": 1895,
                    "vulnerability_code": "    function requestCosign(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
                    "message": "Cosigner.requestCosign (LoanManager.sol#1889-1895) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address engine, uint256 index, bytes memory oracleData) public returns (bool);\n",
                    "message": "Cosigner.claim (LoanManager.sol#1903) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 2499,
                    "vulnerability_to_line": 2563,
                    "vulnerability_code": "    function lend(\n\n        bytes32 _id,\n\n        bytes memory _oracleData,\n\n        address _cosigner,\n\n        uint256 _cosignerLimit,\n\n        bytes memory _cosignerData,\n\n        bytes memory _callbackData\n\n    ) public returns (bool) {\n\n        Request storage request = requests[_id];\n\n        require(request.open, \"Request is no longer open\");\n\n        require(request.approved, \"The request is not approved by the borrower\");\n\n        require(request.expiration > now, \"The request is expired\");\n\n\n\n        request.open = false;\n\n\n\n        uint256 tokens = _currencyToToken(request.oracle, request.amount, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                request.borrower,\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        emit Lent(_id, msg.sender, tokens);\n\n\n\n        // Generate the debt\n\n        require(\n\n            debtEngine.create2(\n\n                Model(request.model),\n\n                msg.sender,\n\n                request.oracle,\n\n                _internalSalt(request),\n\n                request.loanData\n\n            ) == _id,\n\n            \"Error creating the debt\"\n\n        );\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            uint256 auxSalt = request.salt;\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            request.salt = _cosignerLimit; // Risky ?\n\n            require(\n\n                Cosigner(_cosigner).requestCosign(\n\n                    address(this),\n\n                    uint256(_id),\n\n                    _cosignerData,\n\n                    _oracleData\n\n                ),\n\n                \"Cosign method returned false\"\n\n            );\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = auxSalt;\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = request.callback;\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(_id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n\n\n\n        return true;\n",
                    "message": "LoanManager.lend (LoanManager.sol#2499-2563) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 2658,
                    "vulnerability_to_line": 2735,
                    "vulnerability_code": "    function settleLend(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        address _cosigner,\n\n        uint256 _maxCosignerCost,\n\n        bytes memory _cosignerData,\n\n        bytes memory _oracleData,\n\n        bytes memory _creatorSig,\n\n        bytes memory _borrowerSig,\n\n        bytes memory _callbackData\n\n    ) public returns (bytes32 id) {\n\n        // Validate request\n\n        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n\n\n\n        // Get id\n\n        uint256 innerSalt;\n\n        (id, innerSalt) = _buildSettleId(_requestData, _loanData);\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        // Transfer tokens to borrower\n\n        uint256 tokens = _currencyToToken(_requestData, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        // Generate the debt\n\n        require(\n\n            _createDebt(\n\n                _requestData,\n\n                _loanData,\n\n                innerSalt\n\n            ) == id,\n\n            \"Error creating debt registry\"\n\n        );\n\n\n\n        emit SettledLend(id, msg.sender, tokens);\n\n\n\n        // Save the request info\n\n        requests[id] = Request({\n\n            open: false,\n\n            approved: true,\n\n            cosigner: _cosigner,\n\n            amount: uint128(uint256(read(_requestData, O_AMOUNT, L_AMOUNT))),\n\n            model: address(uint256(read(_requestData, O_MODEL, L_MODEL))),\n\n            creator: address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n\n            oracle: address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            borrower: address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n            callback: address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n\n            salt: _cosigner != address(0) ? _maxCosignerCost : uint256(read(_requestData, O_SALT, L_SALT)),\n\n            loanData: _loanData,\n\n            expiration: uint64(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)))\n\n        });\n\n\n\n        Request storage request = requests[id];\n\n\n\n        // Validate signatures\n\n        _validateSettleSignatures(id, _requestData, _loanData, _creatorSig, _borrowerSig);\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = uint256(read(_requestData, O_SALT, L_SALT));\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK)));\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n",
                    "message": "LoanManager.settleLend (LoanManager.sol#2658-2735) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in LoanManager.sol:\n\t- pragma solidity^0.5.11 (LoanManager.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#17): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#32): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#355): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#417): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#430): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#458): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#511): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1007): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1028): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1061): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1771): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1823): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1845): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1908): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1959): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#2152): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 993,
                    "vulnerability_to_line": 1002,
                    "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
                    "message": "Low level call in ERC721Base._noThrowCall (LoanManager.sol#993-1002):\n\t-(success,returnData) = _contract.call(_data) LoanManager.sol#998\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 1735,
                    "vulnerability_to_line": 1746,
                    "vulnerability_code": "    function _safeGasStaticCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal view returns (bool success, uint256 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.staticcall.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (uint256));\n",
                    "message": "Low level call in DebtEngine._safeGasStaticCall (LoanManager.sol#1735-1746):\n\t-(success,returnData) = _contract.staticcall.gas(gasleft()())(_data) LoanManager.sol#1742\n\t-(success,returnData) = _contract.staticcall.gas(_gas)(_data) LoanManager.sol#1742\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 1755,
                    "vulnerability_to_line": 1766,
                    "vulnerability_code": "    function _safeGasCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes32 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.call.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes32));\n",
                    "message": "Low level call in DebtEngine._safeGasCall (LoanManager.sol#1755-1766):\n\t-(success,returnData) = _contract.call.gas(gasleft()())(_data) LoanManager.sol#1762\n\t-(success,returnData) = _contract.call.gas(_gas)(_data) LoanManager.sol#1762\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 2961,
                    "vulnerability_to_line": 2970,
                    "vulnerability_code": "    function _safeCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes32 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes32));\n",
                    "message": "Low level call in LoanManager._safeCall (LoanManager.sol#2961-2970):\n\t-(success,returnData) = _contract.call(_data) LoanManager.sol#2966\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": 506,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (LoanManager.sol#501-506) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (LoanManager.sol#466) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n",
                    "message": "Parameter '_tokenId' of ERC721Base.tokenURI (LoanManager.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 598,
                    "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n",
                    "message": "Function 'ERC721Base._setURIProvider' (LoanManager.sol#594-598) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n",
                    "message": "Parameter '_provider' of ERC721Base._setURIProvider (LoanManager.sol#594) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function assetsOf(address _owner) external view returns (uint256[] memory) {\n",
                    "message": "Parameter '_owner' of ERC721Base.assetsOf (LoanManager.sol#627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 646,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenByIndex(uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_index' of ERC721Base.tokenByIndex (LoanManager.sol#646) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base.tokenOfOwnerByIndex (LoanManager.sol#660) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_index' of ERC721Base.tokenOfOwnerByIndex (LoanManager.sol#660) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 _assetId) external view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.ownerOf (LoanManager.sol#676) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": 682,
                    "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n",
                    "message": "Function 'ERC721Base._ownerOf' (LoanManager.sol#680-682) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._ownerOf (LoanManager.sol#680) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) external view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base.balanceOf (LoanManager.sol#692) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 696,
                    "vulnerability_to_line": 698,
                    "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n",
                    "message": "Function 'ERC721Base._balanceOf' (LoanManager.sol#696-698) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 696,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base._balanceOf (LoanManager.sol#696) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 711,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of ERC721Base.isApprovedForAll (LoanManager.sol#711) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _assetHolder\n",
                    "message": "Parameter '_assetHolder' of ERC721Base.isApprovedForAll (LoanManager.sol#712) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": 722,
                    "vulnerability_code": "    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n",
                    "message": "Function 'ERC721Base._isApprovedForAll' (LoanManager.sol#717-722) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of ERC721Base._isApprovedForAll (LoanManager.sol#718) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _assetHolder\n",
                    "message": "Parameter '_assetHolder' of ERC721Base._isApprovedForAll (LoanManager.sol#719) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 _assetId) external view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.getApproved (LoanManager.sol#729) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": 735,
                    "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n",
                    "message": "Function 'ERC721Base._getApproved' (LoanManager.sol#733-735) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._getApproved (LoanManager.sol#733) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
                    "message": "Parameter '_operator' of ERC721Base.isAuthorized (LoanManager.sol#743) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.isAuthorized (LoanManager.sol#743) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 752,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n",
                    "message": "Function 'ERC721Base._isAuthorized' (LoanManager.sol#747-752) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
                    "message": "Parameter '_operator' of ERC721Base._isAuthorized (LoanManager.sol#747) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._isAuthorized (LoanManager.sol#747) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 763,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
                    "message": "Parameter '_operator' of ERC721Base.setApprovalForAll (LoanManager.sol#763) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 763,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
                    "message": "Parameter '_authorized' of ERC721Base.setApprovalForAll (LoanManager.sol#763) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
                    "message": "Parameter '_operator' of ERC721Base.approve (LoanManager.sol#775) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.approve (LoanManager.sol#775) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": 799,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n",
                    "message": "Function 'ERC721Base._addAssetTo' (LoanManager.sol#788-799) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_to' of ERC721Base._addAssetTo (LoanManager.sol#788) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._addAssetTo (LoanManager.sol#788) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": 824,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n",
                    "message": "Function 'ERC721Base._transferAsset' (LoanManager.sol#801-824) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_from' of ERC721Base._transferAsset (LoanManager.sol#801) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_to' of ERC721Base._transferAsset (LoanManager.sol#801) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._transferAsset (LoanManager.sol#801) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": 831,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n",
                    "message": "Function 'ERC721Base._clearApproval' (LoanManager.sol#826-831) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
                    "message": "Parameter '_holder' of ERC721Base._clearApproval (LoanManager.sol#826) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._clearApproval (LoanManager.sol#826) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n",
                    "message": "Function 'ERC721Base._generate' (LoanManager.sol#837-843) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
                    "message": "Parameter '_assetId' of ERC721Base._generate (LoanManager.sol#837) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
                    "message": "Parameter '_beneficiary' of ERC721Base._generate (LoanManager.sol#837) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_from' of ERC721Base.safeTransferFrom (LoanManager.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_to' of ERC721Base.safeTransferFrom (LoanManager.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (LoanManager.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 892,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of ERC721Base.safeTransferFrom (LoanManager.sol#892) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC721Base.safeTransferFrom (LoanManager.sol#893) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 894,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _assetId,\n",
                    "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (LoanManager.sol#894) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _userData\n",
                    "message": "Parameter '_userData' of ERC721Base.safeTransferFrom (LoanManager.sol#895) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_from' of ERC721Base.transferFrom (LoanManager.sol#915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_to' of ERC721Base.transferFrom (LoanManager.sol#915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.transferFrom (LoanManager.sol#915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 928,
                    "vulnerability_to_line": 980,
                    "vulnerability_code": "    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n",
                    "message": "Function 'ERC721Base._doTransferFrom' (LoanManager.sol#928-980) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 930,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC721Base._doTransferFrom (LoanManager.sol#930) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 931,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _assetId,\n",
                    "message": "Parameter '_assetId' of ERC721Base._doTransferFrom (LoanManager.sol#931) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _userData,\n",
                    "message": "Parameter '_userData' of ERC721Base._doTransferFrom (LoanManager.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 933,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _doCheck\n",
                    "message": "Parameter '_doCheck' of ERC721Base._doTransferFrom (LoanManager.sol#933) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 993,
                    "vulnerability_to_line": 1002,
                    "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
                    "message": "Function 'ERC721Base._noThrowCall' (LoanManager.sol#993-1002) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 994,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of ERC721Base._noThrowCall (LoanManager.sol#994) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 995,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of ERC721Base._noThrowCall (LoanManager.sol#995) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1052,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (LoanManager.sol#1052) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1031,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal _owner;\n",
                    "message": "Variable 'Ownable._owner' (LoanManager.sol#1031) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        IERC20 _token\n",
                    "message": "Parameter '_token' of DebtEngine. (LoanManager.sol#1157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setURIProvider(URIProvider _provider) external onlyOwner {\n",
                    "message": "Parameter '_provider' of DebtEngine.setURIProvider (LoanManager.sol#1165) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Model _model,\n",
                    "message": "Parameter '_model' of DebtEngine.create (LoanManager.sol#1170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "Parameter '_owner' of DebtEngine.create (LoanManager.sol#1171) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.create (LoanManager.sol#1172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data\n",
                    "message": "Parameter '_data' of DebtEngine.create (LoanManager.sol#1173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Model _model,\n",
                    "message": "Parameter '_model' of DebtEngine.create2 (LoanManager.sol#1204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "Parameter '_owner' of DebtEngine.create2 (LoanManager.sol#1205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.create2 (LoanManager.sol#1206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of DebtEngine.create2 (LoanManager.sol#1207) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data\n",
                    "message": "Parameter '_data' of DebtEngine.create2 (LoanManager.sol#1208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Model _model,\n",
                    "message": "Parameter '_model' of DebtEngine.create3 (LoanManager.sol#1241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "Parameter '_owner' of DebtEngine.create3 (LoanManager.sol#1242) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.create3 (LoanManager.sol#1243) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of DebtEngine.create3 (LoanManager.sol#1244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data\n",
                    "message": "Parameter '_data' of DebtEngine.create3 (LoanManager.sol#1245) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of DebtEngine.buildId (LoanManager.sol#1275) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _nonce\n",
                    "message": "Parameter '_nonce' of DebtEngine.buildId (LoanManager.sol#1276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of DebtEngine.buildId2 (LoanManager.sol#1289) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _model,\n",
                    "message": "Parameter '_model' of DebtEngine.buildId2 (LoanManager.sol#1290) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.buildId2 (LoanManager.sol#1291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of DebtEngine.buildId2 (LoanManager.sol#1292) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data\n",
                    "message": "Parameter '_data' of DebtEngine.buildId2 (LoanManager.sol#1293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of DebtEngine.buildId3 (LoanManager.sol#1309) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt\n",
                    "message": "Parameter '_salt' of DebtEngine.buildId3 (LoanManager.sol#1310) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of DebtEngine.pay (LoanManager.sol#1323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of DebtEngine.pay (LoanManager.sol#1324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _origin,\n",
                    "message": "Parameter '_origin' of DebtEngine.pay (LoanManager.sol#1325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _oracleData\n",
                    "message": "Parameter '_oracleData' of DebtEngine.pay (LoanManager.sol#1326) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32[] calldata _ids,\n",
                    "message": "Parameter '_ids' of DebtEngine.payBatch (LoanManager.sol#1420) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _amounts,\n",
                    "message": "Parameter '_amounts' of DebtEngine.payBatch (LoanManager.sol#1421) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _origin,\n",
                    "message": "Parameter '_origin' of DebtEngine.payBatch (LoanManager.sol#1422) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.payBatch (LoanManager.sol#1423) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _oracleData\n",
                    "message": "Parameter '_oracleData' of DebtEngine.payBatch (LoanManager.sol#1424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32[] calldata _ids,\n",
                    "message": "Parameter '_ids' of DebtEngine.payTokenBatch (LoanManager.sol#1455) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _tokenAmounts,\n",
                    "message": "Parameter '_tokenAmounts' of DebtEngine.payTokenBatch (LoanManager.sol#1456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _origin,\n",
                    "message": "Parameter '_origin' of DebtEngine.payTokenBatch (LoanManager.sol#1457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.payTokenBatch (LoanManager.sol#1458) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _oracleData\n",
                    "message": "Parameter '_oracleData' of DebtEngine.payTokenBatch (LoanManager.sol#1459) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1507,
                    "vulnerability_to_line": 1539,
                    "vulnerability_code": "    function _pay(\n\n        bytes32 _id,\n\n        address _oracle,\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal returns (uint256 paid, uint256 paidToken){\n\n        Debt storage debt = debts[_id];\n\n\n\n        if (_oracle != debt.oracle) {\n\n            emit PayBatchError(\n\n                _id,\n\n                _oracle\n\n            );\n\n\n\n            return (0,0);\n\n        }\n\n\n\n        // Paid only required amount\n\n        paid = _safePay(_id, debt.model, _amount);\n\n        require(paid <= _amount, \"Paid can't be more than requested\");\n\n\n\n        // Get token amount to use as payment\n\n        paidToken = _oracle != address(0) ? _toToken(paid, _tokens, _equivalent) : paid;\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n\n\n\n        // Add balance to debt\n\n        uint256 newBalance = paidToken.add(debt.balance);\n\n        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(newBalance);\n",
                    "message": "Function 'DebtEngine._pay' (LoanManager.sol#1507-1539) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of DebtEngine._pay (LoanManager.sol#1508) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine._pay (LoanManager.sol#1509) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of DebtEngine._pay (LoanManager.sol#1510) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of DebtEngine._pay (LoanManager.sol#1511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _equivalent\n",
                    "message": "Parameter '_equivalent' of DebtEngine._pay (LoanManager.sol#1512) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1541,
                    "vulnerability_to_line": 1584,
                    "vulnerability_code": "    function _safePay(\n\n        bytes32 _id,\n\n        Model _model,\n\n        uint256 _available\n\n    ) internal returns (uint256) {\n\n        require(_model != Model(0), \"Debt does not exist\");\n\n\n\n        (bool success, bytes32 paid) = _safeGasCall(\n\n            address(_model),\n\n            abi.encodeWithSelector(\n\n                _model.addPaid.selector,\n\n                _id,\n\n                _available\n\n            )\n\n        );\n\n\n\n        if (success) {\n\n            if (debts[_id].error) {\n\n                emit ErrorRecover({\n\n                    _id: _id,\n\n                    _sender: msg.sender,\n\n                    _value: 0,\n\n                    _gasLeft: gasleft(),\n\n                    _gasLimit: block.gaslimit,\n\n                    _result: paid,\n\n                    _callData: msg.data\n\n                });\n\n\n\n                delete debts[_id].error;\n\n            }\n\n\n\n            return uint256(paid);\n\n        } else {\n\n            emit Error({\n\n                _id: _id,\n\n                _sender: msg.sender,\n\n                _value: msg.value,\n\n                _gasLeft: gasleft(),\n\n                _gasLimit: block.gaslimit,\n\n                _callData: msg.data\n\n            });\n\n            debts[_id].error = true;\n\n        }\n",
                    "message": "Function 'DebtEngine._safePay' (LoanManager.sol#1541-1584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of DebtEngine._safePay (LoanManager.sol#1542) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Model _model,\n",
                    "message": "Parameter '_model' of DebtEngine._safePay (LoanManager.sol#1543) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _available\n",
                    "message": "Parameter '_available' of DebtEngine._safePay (LoanManager.sol#1544) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1595,
                    "vulnerability_to_line": 1606,
                    "vulnerability_code": "    function _toToken(\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal pure returns (uint256 _result) {\n\n        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n\n        uint256 aux = _tokens.mult(_amount);\n\n        _result = aux / _equivalent;\n\n        if (aux % _equivalent > 0) {\n\n            _result = _result.add(1);\n\n        }\n",
                    "message": "Function 'DebtEngine._toToken' (LoanManager.sol#1595-1606) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of DebtEngine._toToken (LoanManager.sol#1596) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of DebtEngine._toToken (LoanManager.sol#1597) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1598,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _equivalent\n",
                    "message": "Parameter '_equivalent' of DebtEngine._toToken (LoanManager.sol#1598) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1617,
                    "vulnerability_to_line": 1624,
                    "vulnerability_code": "    function _fromToken(\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal pure returns (uint256) {\n\n        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n\n        return _amount.mult(_equivalent) / _tokens;\n",
                    "message": "Function 'DebtEngine._fromToken' (LoanManager.sol#1617-1624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1618,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of DebtEngine._fromToken (LoanManager.sol#1618) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1619,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of DebtEngine._fromToken (LoanManager.sol#1619) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _equivalent\n",
                    "message": "Parameter '_equivalent' of DebtEngine._fromToken (LoanManager.sol#1620) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function run(bytes32 _id) external returns (bool) {\n",
                    "message": "Parameter '_id' of DebtEngine.run (LoanManager.sol#1626) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(bytes32 _id, address _to) external returns (uint256 amount) {\n",
                    "message": "Parameter '_id' of DebtEngine.withdraw (LoanManager.sol#1667) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(bytes32 _id, address _to) external returns (uint256 amount) {\n",
                    "message": "Parameter '_to' of DebtEngine.withdraw (LoanManager.sol#1667) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawPartial(bytes32 _id, address _to, uint256 _amount) external returns (bool success) {\n",
                    "message": "Parameter '_id' of DebtEngine.withdrawPartial (LoanManager.sol#1682) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawPartial(bytes32 _id, address _to, uint256 _amount) external returns (bool success) {\n",
                    "message": "Parameter '_to' of DebtEngine.withdrawPartial (LoanManager.sol#1682) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawPartial(bytes32 _id, address _to, uint256 _amount) external returns (bool success) {\n",
                    "message": "Parameter '_amount' of DebtEngine.withdrawPartial (LoanManager.sol#1682) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawBatch(bytes32[] calldata _ids, address _to) external returns (uint256 total) {\n",
                    "message": "Parameter '_ids' of DebtEngine.withdrawBatch (LoanManager.sol#1698) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawBatch(bytes32[] calldata _ids, address _to) external returns (uint256 total) {\n",
                    "message": "Parameter '_to' of DebtEngine.withdrawBatch (LoanManager.sol#1698) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStatus(bytes32 _id) external view returns (uint256) {\n",
                    "message": "Parameter '_id' of DebtEngine.getStatus (LoanManager.sol#1719) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1735,
                    "vulnerability_to_line": 1746,
                    "vulnerability_code": "    function _safeGasStaticCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal view returns (bool success, uint256 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.staticcall.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (uint256));\n",
                    "message": "Function 'DebtEngine._safeGasStaticCall' (LoanManager.sol#1735-1746) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of DebtEngine._safeGasStaticCall (LoanManager.sol#1736) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1737,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of DebtEngine._safeGasStaticCall (LoanManager.sol#1737) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1755,
                    "vulnerability_to_line": 1766,
                    "vulnerability_code": "    function _safeGasCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes32 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.call.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes32));\n",
                    "message": "Function 'DebtEngine._safeGasCall' (LoanManager.sol#1755-1766) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1756,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of DebtEngine._safeGasCall (LoanManager.sol#1756) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of DebtEngine._safeGasCall (LoanManager.sol#1757) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function implementsMethod(address _contract, bytes4 _interfaceId) internal view returns (bool) {\n",
                    "message": "Parameter '_contract' of ImplementsInterface.implementsMethod (LoanManager.sol#1915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function implementsMethod(address _contract, bytes4 _interfaceId) internal view returns (bool) {\n",
                    "message": "Parameter '_interfaceId' of ImplementsInterface.implementsMethod (LoanManager.sol#1915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1934,
                    "vulnerability_to_line": 1954,
                    "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
                    "message": "Function 'ImplementsInterface._noThrowImplements' (LoanManager.sol#1934-1954) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
                    "message": "Constant 'ImplementsInterface.InvalidID' (LoanManager.sol#1912) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1980,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#1980) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1981,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (LoanManager.sol#1981) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1992,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#1992) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#2012) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#2037) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2067,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#2067) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#2102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(DebtEngine _debtEngine) public {\n",
                    "message": "Parameter '_debtEngine' of LoanManager. (LoanManager.sol#2208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBorrower(uint256 _id) external view returns (address) { return requests[bytes32(_id)].borrower; }\n",
                    "message": "Parameter '_id' of LoanManager.getBorrower (LoanManager.sol#2215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCreator(uint256 _id) external view returns (address) { return requests[bytes32(_id)].creator; }\n",
                    "message": "Parameter '_id' of LoanManager.getCreator (LoanManager.sol#2216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOracle(uint256 _id) external view returns (address) { return requests[bytes32(_id)].oracle; }\n",
                    "message": "Parameter '_id' of LoanManager.getOracle (LoanManager.sol#2217) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCosigner(uint256 _id) external view returns (address) { return requests[bytes32(_id)].cosigner; }\n",
                    "message": "Parameter '_id' of LoanManager.getCosigner (LoanManager.sol#2218) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCurrency(uint256 _id) external view returns (bytes32) {\n",
                    "message": "Parameter '_id' of LoanManager.getCurrency (LoanManager.sol#2219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAmount(uint256 _id) external view returns (uint256) { return requests[bytes32(_id)].amount; }\n",
                    "message": "Parameter '_id' of LoanManager.getAmount (LoanManager.sol#2223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getExpirationRequest(uint256 _id) external view returns (uint256) { return requests[bytes32(_id)].expiration; }\n",
                    "message": "Parameter '_id' of LoanManager.getExpirationRequest (LoanManager.sol#2224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 _id) external view returns (bool) { return requests[bytes32(_id)].approved; }\n",
                    "message": "Parameter '_id' of LoanManager.getApproved (LoanManager.sol#2225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDueTime(uint256 _id) external view returns (uint256) { return Model(requests[bytes32(_id)].model).getDueTime(bytes32(_id)); }\n",
                    "message": "Parameter '_id' of LoanManager.getDueTime (LoanManager.sol#2226) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClosingObligation(uint256 _id) external view returns (uint256) { return Model(requests[bytes32(_id)].model).getClosingObligation(bytes32(_id)); }\n",
                    "message": "Parameter '_id' of LoanManager.getClosingObligation (LoanManager.sol#2227) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getLoanData(uint256 _id) external view returns (bytes memory) { return requests[bytes32(_id)].loanData; }\n",
                    "message": "Parameter '_id' of LoanManager.getLoanData (LoanManager.sol#2228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStatus(uint256 _id) external view returns (uint256) {\n",
                    "message": "Parameter '_id' of LoanManager.getStatus (LoanManager.sol#2229) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 _id) external view returns (address) {\n",
                    "message": "Parameter '_id' of LoanManager.ownerOf (LoanManager.sol#2233) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBorrower(bytes32 _id) external view returns (address) { return requests[_id].borrower; }\n",
                    "message": "Parameter '_id' of LoanManager.getBorrower (LoanManager.sol#2238) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCreator(bytes32 _id) external view returns (address) { return requests[_id].creator; }\n",
                    "message": "Parameter '_id' of LoanManager.getCreator (LoanManager.sol#2239) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOracle(bytes32 _id) external view returns (address) { return requests[_id].oracle; }\n",
                    "message": "Parameter '_id' of LoanManager.getOracle (LoanManager.sol#2240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCosigner(bytes32 _id) external view returns (address) { return requests[_id].cosigner; }\n",
                    "message": "Parameter '_id' of LoanManager.getCosigner (LoanManager.sol#2241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCurrency(bytes32 _id) external view returns (bytes32) {\n",
                    "message": "Parameter '_id' of LoanManager.getCurrency (LoanManager.sol#2242) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAmount(bytes32 _id) external view returns (uint256) { return requests[_id].amount; }\n",
                    "message": "Parameter '_id' of LoanManager.getAmount (LoanManager.sol#2246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getExpirationRequest(bytes32 _id) external view returns (uint256) { return requests[_id].expiration; }\n",
                    "message": "Parameter '_id' of LoanManager.getExpirationRequest (LoanManager.sol#2247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(bytes32 _id) external view returns (bool) { return requests[_id].approved; }\n",
                    "message": "Parameter '_id' of LoanManager.getApproved (LoanManager.sol#2248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDueTime(bytes32 _id) external view returns (uint256) { return Model(requests[_id].model).getDueTime(bytes32(_id)); }\n",
                    "message": "Parameter '_id' of LoanManager.getDueTime (LoanManager.sol#2249) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClosingObligation(bytes32 _id) external view returns (uint256) { return Model(requests[_id].model).getClosingObligation(bytes32(_id)); }\n",
                    "message": "Parameter '_id' of LoanManager.getClosingObligation (LoanManager.sol#2250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getLoanData(bytes32 _id) external view returns (bytes memory) { return requests[_id].loanData; }\n",
                    "message": "Parameter '_id' of LoanManager.getLoanData (LoanManager.sol#2251) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStatus(bytes32 _id) external view returns (uint256) {\n",
                    "message": "Parameter '_id' of LoanManager.getStatus (LoanManager.sol#2252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(bytes32 _id) external view returns (address) {\n",
                    "message": "Parameter '_id' of LoanManager.ownerOf (LoanManager.sol#2256) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCallback(bytes32 _id) external view returns (address) { return requests[_id].callback; }\n",
                    "message": "Parameter '_id' of LoanManager.getCallback (LoanManager.sol#2260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _amount,\n",
                    "message": "Parameter '_amount' of LoanManager.calcId (LoanManager.sol#2278) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _borrower,\n",
                    "message": "Parameter '_borrower' of LoanManager.calcId (LoanManager.sol#2279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of LoanManager.calcId (LoanManager.sol#2280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _model,\n",
                    "message": "Parameter '_model' of LoanManager.calcId (LoanManager.sol#2281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of LoanManager.calcId (LoanManager.sol#2282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _callback,\n",
                    "message": "Parameter '_callback' of LoanManager.calcId (LoanManager.sol#2283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of LoanManager.calcId (LoanManager.sol#2284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint64 _expiration,\n",
                    "message": "Parameter '_expiration' of LoanManager.calcId (LoanManager.sol#2285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of LoanManager.calcId (LoanManager.sol#2286) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _amount,\n",
                    "message": "Parameter '_amount' of LoanManager.buildInternalSalt (LoanManager.sol#2311) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _borrower,\n",
                    "message": "Parameter '_borrower' of LoanManager.buildInternalSalt (LoanManager.sol#2312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of LoanManager.buildInternalSalt (LoanManager.sol#2313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _callback,\n",
                    "message": "Parameter '_callback' of LoanManager.buildInternalSalt (LoanManager.sol#2314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of LoanManager.buildInternalSalt (LoanManager.sol#2315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint64 _expiration\n",
                    "message": "Parameter '_expiration' of LoanManager.buildInternalSalt (LoanManager.sol#2316) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function internalSalt(bytes32 _id) external view returns (uint256) {\n",
                    "message": "Parameter '_id' of LoanManager.internalSalt (LoanManager.sol#2328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2334,
                    "vulnerability_to_line": 2343,
                    "vulnerability_code": "    function _internalSalt(Request memory _request) internal pure returns (uint256) {\n\n        return _buildInternalSalt(\n\n            _request.amount,\n\n            _request.borrower,\n\n            _request.creator,\n\n            _request.callback,\n\n            _request.salt,\n\n            _request.expiration\n\n        );\n",
                    "message": "Function 'LoanManager._internalSalt' (LoanManager.sol#2334-2343) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _internalSalt(Request memory _request) internal pure returns (uint256) {\n",
                    "message": "Parameter '_request' of LoanManager._internalSalt (LoanManager.sol#2334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _amount,\n",
                    "message": "Parameter '_amount' of LoanManager.requestLoan (LoanManager.sol#2346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _model,\n",
                    "message": "Parameter '_model' of LoanManager.requestLoan (LoanManager.sol#2347) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of LoanManager.requestLoan (LoanManager.sol#2348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _borrower,\n",
                    "message": "Parameter '_borrower' of LoanManager.requestLoan (LoanManager.sol#2349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _callback,\n",
                    "message": "Parameter '_callback' of LoanManager.requestLoan (LoanManager.sol#2350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of LoanManager.requestLoan (LoanManager.sol#2351) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint64 _expiration,\n",
                    "message": "Parameter '_expiration' of LoanManager.requestLoan (LoanManager.sol#2352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _loanData\n",
                    "message": "Parameter '_loanData' of LoanManager.requestLoan (LoanManager.sol#2353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2417,
                    "vulnerability_to_line": 2443,
                    "vulnerability_code": "    function _requestContractApprove(\n\n        bytes32 _id,\n\n        address _borrower\n\n    ) internal returns (bool approved) {\n\n        // bytes32 expected = _id XOR keccak256(\"approve-loan-request\");\n\n        bytes32 expected = _id ^ 0xdfcb15a077f54a681c23131eacdfd6e12b5e099685b492d382c3fd8bfc1e9a2a;\n\n        (bool success, bytes32 result) = _safeCall(\n\n            _borrower,\n\n            abi.encodeWithSelector(\n\n                0x76ba6009,\n\n                _id\n\n            )\n\n        );\n\n\n\n        approved = success && result == expected;\n\n\n\n        // Emit events if approve was rejected or failed\n\n        if (approved) {\n\n            emit ApprovedByCallback(_id);\n\n        } else {\n\n            if (!success) {\n\n                emit ApprovedError(_id, result);\n\n            } else {\n\n                emit ApprovedRejected(_id, result);\n\n            }\n\n        }\n",
                    "message": "Function 'LoanManager._requestContractApprove' (LoanManager.sol#2417-2443) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of LoanManager._requestContractApprove (LoanManager.sol#2418) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _borrower\n",
                    "message": "Parameter '_borrower' of LoanManager._requestContractApprove (LoanManager.sol#2419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id\n",
                    "message": "Parameter '_id' of LoanManager.approveRequest (LoanManager.sol#2446) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of LoanManager.registerApproveRequest (LoanManager.sol#2458) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _signature\n",
                    "message": "Parameter '_signature' of LoanManager.registerApproveRequest (LoanManager.sol#2459) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of LoanManager.lend (LoanManager.sol#2500) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _oracleData,\n",
                    "message": "Parameter '_oracleData' of LoanManager.lend (LoanManager.sol#2501) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _cosigner,\n",
                    "message": "Parameter '_cosigner' of LoanManager.lend (LoanManager.sol#2502) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _cosignerLimit,\n",
                    "message": "Parameter '_cosignerLimit' of LoanManager.lend (LoanManager.sol#2503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _cosignerData,\n",
                    "message": "Parameter '_cosignerData' of LoanManager.lend (LoanManager.sol#2504) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _callbackData\n",
                    "message": "Parameter '_callbackData' of LoanManager.lend (LoanManager.sol#2505) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cancel(bytes32 _id) external returns (bool) {\n",
                    "message": "Parameter '_id' of LoanManager.cancel (LoanManager.sol#2565) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cosign(uint256 _id, uint256 _cost) external returns (bool) {\n",
                    "message": "Parameter '_id' of LoanManager.cosign (LoanManager.sol#2583) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cosign(uint256 _id, uint256 _cost) external returns (bool) {\n",
                    "message": "Parameter '_cost' of LoanManager.cosign (LoanManager.sol#2583) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2619,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _amount,\n",
                    "message": "Parameter '_amount' of LoanManager.encodeRequest (LoanManager.sol#2619) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _model,\n",
                    "message": "Parameter '_model' of LoanManager.encodeRequest (LoanManager.sol#2620) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of LoanManager.encodeRequest (LoanManager.sol#2621) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _borrower,\n",
                    "message": "Parameter '_borrower' of LoanManager.encodeRequest (LoanManager.sol#2622) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _callback,\n",
                    "message": "Parameter '_callback' of LoanManager.encodeRequest (LoanManager.sol#2623) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of LoanManager.encodeRequest (LoanManager.sol#2624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint64 _expiration,\n",
                    "message": "Parameter '_expiration' of LoanManager.encodeRequest (LoanManager.sol#2625) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of LoanManager.encodeRequest (LoanManager.sol#2626) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _loanData\n",
                    "message": "Parameter '_loanData' of LoanManager.encodeRequest (LoanManager.sol#2627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _requestData,\n",
                    "message": "Parameter '_requestData' of LoanManager.settleLend (LoanManager.sol#2659) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _loanData,\n",
                    "message": "Parameter '_loanData' of LoanManager.settleLend (LoanManager.sol#2660) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _cosigner,\n",
                    "message": "Parameter '_cosigner' of LoanManager.settleLend (LoanManager.sol#2661) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _maxCosignerCost,\n",
                    "message": "Parameter '_maxCosignerCost' of LoanManager.settleLend (LoanManager.sol#2662) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2663,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _cosignerData,\n",
                    "message": "Parameter '_cosignerData' of LoanManager.settleLend (LoanManager.sol#2663) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2664,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _oracleData,\n",
                    "message": "Parameter '_oracleData' of LoanManager.settleLend (LoanManager.sol#2664) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2665,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _creatorSig,\n",
                    "message": "Parameter '_creatorSig' of LoanManager.settleLend (LoanManager.sol#2665) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2666,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _borrowerSig,\n",
                    "message": "Parameter '_borrowerSig' of LoanManager.settleLend (LoanManager.sol#2666) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _callbackData\n",
                    "message": "Parameter '_callbackData' of LoanManager.settleLend (LoanManager.sol#2667) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _requestData,\n",
                    "message": "Parameter '_requestData' of LoanManager.settleCancel (LoanManager.sol#2738) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _loanData\n",
                    "message": "Parameter '_loanData' of LoanManager.settleCancel (LoanManager.sol#2739) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2753,
                    "vulnerability_to_line": 2813,
                    "vulnerability_code": "    function _validateSettleSignatures(\n\n        bytes32 _id,\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        bytes memory _creatorSig,\n\n        bytes memory _borrowerSig\n\n    ) internal {\n\n        require(!canceledSettles[_id], \"Settle was canceled\");\n\n\n\n        // bytes32 expected = uint256(_id) XOR keccak256(\"approve-loan-request\");\n\n        bytes32 expected = _id ^ 0xdfcb15a077f54a681c23131eacdfd6e12b5e099685b492d382c3fd8bfc1e9a2a;\n\n        address borrower = address(uint256(read(_requestData, O_BORROWER, L_BORROWER)));\n\n        address creator = address(uint256(read(_requestData, O_CREATOR, L_CREATOR)));\n\n        bytes32 _hash;\n\n\n\n        if (borrower.isContract()) {\n\n            require(\n\n                LoanApprover(borrower).settleApproveRequest(_requestData, _loanData, true, uint256(_id)) == expected,\n\n                \"Borrower contract rejected the loan\"\n\n            );\n\n\n\n            emit BorrowerByCallback(_id);\n\n        } else {\n\n            _hash = keccak256(\n\n                abi.encodePacked(\n\n                    _id,\n\n                    \"sign settle lend as borrower\"\n\n                )\n\n            );\n\n            require(\n\n                borrower == ecrecovery(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)), _borrowerSig),\n\n                \"Invalid borrower signature\"\n\n            );\n\n\n\n            emit BorrowerBySignature(_id);\n\n        }\n\n\n\n        if (borrower != creator) {\n\n            if (creator.isContract()) {\n\n                require(\n\n                    LoanApprover(creator).settleApproveRequest(_requestData, _loanData, false, uint256(_id)) == expected,\n\n                    \"Creator contract rejected the loan\"\n\n                );\n\n\n\n                emit CreatorByCallback(_id);\n\n            } else {\n\n                _hash = keccak256(\n\n                    abi.encodePacked(\n\n                        _id,\n\n                        \"sign settle lend as creator\"\n\n                    )\n\n                );\n\n                require(\n\n                    creator == ecrecovery(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)), _creatorSig),\n\n                    \"Invalid creator signature\"\n\n                );\n\n\n\n                emit CreatorBySignature(_id);\n\n            }\n\n        }\n",
                    "message": "Function 'LoanManager._validateSettleSignatures' (LoanManager.sol#2753-2813) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of LoanManager._validateSettleSignatures (LoanManager.sol#2754) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _requestData,\n",
                    "message": "Parameter '_requestData' of LoanManager._validateSettleSignatures (LoanManager.sol#2755) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2756,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _loanData,\n",
                    "message": "Parameter '_loanData' of LoanManager._validateSettleSignatures (LoanManager.sol#2756) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _creatorSig,\n",
                    "message": "Parameter '_creatorSig' of LoanManager._validateSettleSignatures (LoanManager.sol#2757) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _borrowerSig\n",
                    "message": "Parameter '_borrowerSig' of LoanManager._validateSettleSignatures (LoanManager.sol#2758) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2815,
                    "vulnerability_to_line": 2824,
                    "vulnerability_code": "    function _currencyToToken(\n\n        bytes memory _requestData,\n\n        bytes memory _oracleData\n\n    ) internal returns (uint256) {\n\n        return _currencyToToken(\n\n            address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            uint256(read(_requestData, O_AMOUNT, L_AMOUNT)),\n\n            _oracleData\n\n        );\n",
                    "message": "Function 'LoanManager._currencyToToken' (LoanManager.sol#2815-2824) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _requestData,\n",
                    "message": "Parameter '_requestData' of LoanManager._currencyToToken (LoanManager.sol#2816) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2817,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _oracleData\n",
                    "message": "Parameter '_oracleData' of LoanManager._currencyToToken (LoanManager.sol#2817) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2826,
                    "vulnerability_to_line": 2838,
                    "vulnerability_code": "    function _createDebt(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        uint256 _innerSalt\n\n    ) internal returns (bytes32) {\n\n        return debtEngine.create2(\n\n            Model(address(uint256(read(_requestData, O_MODEL, L_MODEL)))),\n\n            msg.sender,\n\n            address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            _innerSalt,\n\n            _loanData\n\n        );\n",
                    "message": "Function 'LoanManager._createDebt' (LoanManager.sol#2826-2838) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2827,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _requestData,\n",
                    "message": "Parameter '_requestData' of LoanManager._createDebt (LoanManager.sol#2827) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2828,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _loanData,\n",
                    "message": "Parameter '_loanData' of LoanManager._createDebt (LoanManager.sol#2828) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2829,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _innerSalt\n",
                    "message": "Parameter '_innerSalt' of LoanManager._createDebt (LoanManager.sol#2829) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2840,
                    "vulnerability_to_line": 2870,
                    "vulnerability_code": "    function _buildSettleId(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData\n\n    ) internal view returns (bytes32 id, uint256 innerSalt) {\n\n        (\n\n            uint128 amount,\n\n            address model,\n\n            address oracle,\n\n            address borrower,\n\n            uint256 salt,\n\n            uint64 expiration,\n\n            address creator\n\n        ) = _decodeSettle(_requestData);\n\n\n\n        innerSalt = _buildInternalSalt(\n\n            amount,\n\n            borrower,\n\n            creator,\n\n            address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n\n            salt,\n\n            expiration\n\n        );\n\n\n\n        id = debtEngine.buildId2(\n\n            address(this),\n\n            model,\n\n            oracle,\n\n            innerSalt,\n\n            _loanData\n\n        );\n",
                    "message": "Function 'LoanManager._buildSettleId' (LoanManager.sol#2840-2870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _requestData,\n",
                    "message": "Parameter '_requestData' of LoanManager._buildSettleId (LoanManager.sol#2841) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2842,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _loanData\n",
                    "message": "Parameter '_loanData' of LoanManager._buildSettleId (LoanManager.sol#2842) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2872,
                    "vulnerability_to_line": 2892,
                    "vulnerability_code": "    function _buildInternalSalt(\n\n        uint128 _amount,\n\n        address _borrower,\n\n        address _creator,\n\n        address _callback,\n\n        uint256 _salt,\n\n        uint64 _expiration\n\n    ) internal pure returns (uint256) {\n\n        return uint256(\n\n            keccak256(\n\n                abi.encodePacked(\n\n                    _amount,\n\n                    _borrower,\n\n                    _creator,\n\n                    _callback,\n\n                    _salt,\n\n                    _expiration\n\n                )\n\n            )\n\n        );\n",
                    "message": "Function 'LoanManager._buildInternalSalt' (LoanManager.sol#2872-2892) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2873,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _amount,\n",
                    "message": "Parameter '_amount' of LoanManager._buildInternalSalt (LoanManager.sol#2873) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2874,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _borrower,\n",
                    "message": "Parameter '_borrower' of LoanManager._buildInternalSalt (LoanManager.sol#2874) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of LoanManager._buildInternalSalt (LoanManager.sol#2875) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2876,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _callback,\n",
                    "message": "Parameter '_callback' of LoanManager._buildInternalSalt (LoanManager.sol#2876) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of LoanManager._buildInternalSalt (LoanManager.sol#2877) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint64 _expiration\n",
                    "message": "Parameter '_expiration' of LoanManager._buildInternalSalt (LoanManager.sol#2878) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2894,
                    "vulnerability_to_line": 2921,
                    "vulnerability_code": "    function _decodeSettle(\n\n        bytes memory _data\n\n    ) internal pure returns (\n\n        uint128 amount,\n\n        address model,\n\n        address oracle,\n\n        address borrower,\n\n        uint256 salt,\n\n        uint64 expiration,\n\n        address creator\n\n    ) {\n\n        (\n\n            bytes32 _amount,\n\n            bytes32 _model,\n\n            bytes32 _oracle,\n\n            bytes32 _borrower,\n\n            bytes32 _salt,\n\n            bytes32 _expiration\n\n        ) = decode(_data, L_AMOUNT, L_MODEL, L_ORACLE, L_BORROWER, L_SALT, L_EXPIRATION);\n\n\n\n        amount = uint128(uint256(_amount));\n\n        model = address(uint256(_model));\n\n        oracle = address(uint256(_oracle));\n\n        borrower = address(uint256(_borrower));\n\n        salt = uint256(_salt);\n\n        expiration = uint64(uint256(_expiration));\n\n        creator = address(uint256(read(_data, O_CREATOR, L_CREATOR)));\n",
                    "message": "Function 'LoanManager._decodeSettle' (LoanManager.sol#2894-2921) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2895,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of LoanManager._decodeSettle (LoanManager.sol#2895) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2923,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ecrecovery(bytes32 _hash, bytes memory _sig) internal pure returns (address) {\n",
                    "message": "Parameter '_hash' of LoanManager.ecrecovery (LoanManager.sol#2923) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2941,
                    "vulnerability_to_line": 2952,
                    "vulnerability_code": "    function _currencyToToken(\n\n        address _oracle,\n\n        uint256 _amount,\n\n        bytes memory _oracleData\n\n    ) internal returns (uint256) {\n\n        if (_oracle == address(0)) return _amount;\n\n        (uint256 tokens, uint256 equivalent) = RateOracle(_oracle).readSample(_oracleData);\n\n\n\n        emit ReadedOracle(_oracle, tokens, equivalent);\n\n\n\n        return tokens.mult(_amount) / equivalent;\n",
                    "message": "Function 'LoanManager._currencyToToken' (LoanManager.sol#2941-2952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2942,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of LoanManager._currencyToToken (LoanManager.sol#2942) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2943,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of LoanManager._currencyToToken (LoanManager.sol#2943) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _oracleData\n",
                    "message": "Parameter '_oracleData' of LoanManager._currencyToToken (LoanManager.sol#2944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2961,
                    "vulnerability_to_line": 2970,
                    "vulnerability_code": "    function _safeCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes32 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes32));\n",
                    "message": "Function 'LoanManager._safeCall' (LoanManager.sol#2961-2970) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2962,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of LoanManager._safeCall (LoanManager.sol#2962) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 2963,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of LoanManager._safeCall (LoanManager.sol#2963) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
                    "message": "RateOracle.RATE_ORACLE_INTERFACE (LoanManager.sol#368) is never used in RateOracle\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant MODEL_INTERFACE = 0xaf498c35;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1913,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant ERC165ID = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 2406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (_borrower.isContract() && _borrower.implementsMethod(0x76ba6009)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 2426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                0x76ba6009,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 2465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (borrower.isContract() && borrower.implementsMethod(0x76ba6009)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 828,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approval[_assetId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 2221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return oracle == address(0) ? bytes32(0x0) : RateOracle(oracle).currency();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 2244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return oracle == address(0) ? bytes32(0x0) : RateOracle(oracle).currency();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _assetsOf[_from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _noThrowImplements(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1963,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1979,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1991,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 2011,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 2036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 2066,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 2101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setURIProvider(URIProvider _provider) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1061,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1771,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1823,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1959,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 2152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => address) private _holderOf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256[]) private _assetsOf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _indexOfAsset;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => bool)) private _operators;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => address) private _approval;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    URIProvider private _uriProvider;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2601,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant L_AMOUNT = 16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2602,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant O_AMOUNT = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant O_MODEL = L_AMOUNT;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant L_MODEL = 20;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant O_ORACLE = O_MODEL + L_MODEL;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant L_ORACLE = 20;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant O_BORROWER = O_ORACLE + L_ORACLE;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant L_BORROWER = 20;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant O_SALT = O_BORROWER + L_BORROWER;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant L_SALT = 32;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant O_EXPIRATION = O_SALT + L_SALT;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant L_EXPIRATION = 8;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant O_CREATOR = O_EXPIRATION + L_EXPIRATION;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant L_CREATOR = 20;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant O_CALLBACK = O_CREATOR + L_CREATOR;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 2616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant L_CALLBACK = 20;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 2165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 1963,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 1970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 1979,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 1991,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 2011,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 2036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 2066,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 2101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 2923,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ecrecovery(bytes32 _hash, bytes memory _sig) internal pure returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _noThrowImplements(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256 amount, bool defined);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 996,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal returns (bool success, bytes4 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256 paid, uint256 paidToken) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256 paid, uint256 paidToken) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1937,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) private view returns (uint256 success, uint256 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1995,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 2016,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 2042,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 2073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 2109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 2628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external view returns (bytes memory requestData, bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 2843,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal view returns (bytes32 id, uint256 innerSalt) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 2896,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 2964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal returns (bool success, bytes32 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (success, returnData) = _contract.call(_data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 2966,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (success, returnData) = _contract.call(_data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1939,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1965,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1972,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1984,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 2018,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 2044,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 2075,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 2118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 2928,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function payBatch(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1812,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function settleApproveRequest(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _amounts,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _origin,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _oracleData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256[] memory paid, uint256[] memory paidTokens) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256[] memory paid, uint256[] memory paidTokens) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 count = _ids.length;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 tokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 equivalent;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_oracle != address(0)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_oracle != address(0)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_oracle != address(0)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (tokens, equivalent) = RateOracle(_oracle).readSample(_oracleData);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit ReadedOracleBatch(_oracle, count, tokens, equivalent);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit ReadedOracleBatch(_oracle, count, tokens, equivalent);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit ReadedOracleBatch(_oracle, count, tokens, equivalent);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _loanData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _isBorrower,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _id\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        external returns (bytes32);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1913,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant ERC165ID = 0x01ffc9a7;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/diaspore/DebtEngine.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 949,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _to,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 950,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 951,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ERC721_RECEIVED,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    msg.sender,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    holder,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 954,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _assetId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 955,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _userData\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 956,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 957,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 962,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                (success, result) = _noThrowCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 963,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _to,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 965,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        ERC721_RECEIVED_LEGACY,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 966,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        holder,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 967,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _assetId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 968,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _userData\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes32 paid) = _safeGasCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(_model),\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _model.addPaid.selector,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _id,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _available\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1630,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes32 result) = _safeGasCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(debt.model),\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                debt.model.run.selector,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _id\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1636,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1724,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, uint256 result) = _safeGasStaticCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(debt.model),\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1726,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    debt.model.getStatus.selector,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1728,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _id\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 1730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract DebtEngine is ERC721Base, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_METADATA_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1039,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1041,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        IERC20 _token\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public ERC721Base(\"RCN Debt Record\", \"RDR\") {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // Sanity checks\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(_token).isContract(), \"Token should be a contract\");\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1705,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                balance = debts[target].balance;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                debts[target].balance = 0;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < _allTokens.length, \"Index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_owner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 748,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_operator != address(0), \"0x0 is an invalid operator\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_target != address(0), \"Target can't be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 972,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 974,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Contract rejected the token\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1034,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1053,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(_token).isContract(), \"Token should be a contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_model.create(id, _data), \"Error creating debt in model\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_model.create(id, _data), \"Error creating debt in model\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_model.create(id, _data), \"Error creating debt in model\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid <= available, \"Paid can't exceed available\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(paidToken <= amount, \"Paid can't exceed requested\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(available < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _tokenAmounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(paidTokens[i] <= tokenAmount, \"Paid can't exceed requested\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_model != Model(0), \"Debt does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(debt.model != Model(0), \"Debt does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1668,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0x0), \"_to should not be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1669,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isAuthorized(msg.sender, uint256(_id)), \"Sender not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transfer(_to, amount), \"Error sending tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0x0), \"_to should not be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isAuthorized(msg.sender, uint256(_id)), \"Sender not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1686,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(debt.balance >= _amount, \"Debt balance is not enought\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transfer(_to, _amount), \"Error sending tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0x0), \"_to should not be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1716,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(token.transfer(_to, total), \"Error sending tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 972,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 974,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Contract rejected the token\"\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_doCheck && _to.isContract()) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 945,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Call dest contract\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Perform check with the new safe call\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 947,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // onERC721Received(address,address,uint256,bytes)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 949,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _to,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 950,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 951,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ERC721_RECEIVED,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    msg.sender,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    holder,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _assetsOf[_from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _tokenAmounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_34"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract (DebtEngine.sol#421-425) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": 1003,
                    "vulnerability_code": "contract ERC721Base is ERC165 {\n\n    using SafeMath for uint256;\n\n    using IsContract for address;\n\n\n\n    mapping(uint256 => address) private _holderOf;\n\n\n\n    // Owner to array of assetId\n\n    mapping(address => uint256[]) private _assetsOf;\n\n    // AssetId to index on array in _assetsOf mapping\n\n    mapping(uint256 => uint256) private _indexOfAsset;\n\n\n\n    mapping(address => mapping(address => bool)) private _operators;\n\n    mapping(uint256 => address) private _approval;\n\n\n\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n\n    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n\n    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n\n    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n\n\n\n    constructor(\n\n        string memory name,\n\n        string memory symbol\n\n    ) public {\n\n        _name = name;\n\n        _symbol = symbol;\n\n\n\n        _registerInterface(ERC_721_INTERFACE);\n\n        _registerInterface(ERC_721_METADATA_INTERFACE);\n\n        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Metadata\n\n    // ///\n\n\n\n    /// ERC-721 Non-Fungible Token Standard, optional metadata extension\n\n    /// See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    /// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n\n\n\n    event SetURIProvider(address _uriProvider);\n\n\n\n    string private _name;\n\n    string private _symbol;\n\n\n\n    URIProvider private _uriProvider;\n\n\n\n    // @notice A descriptive name for a collection of NFTs in this contract\n\n    function name() external view returns (string memory) {\n\n        return _name;\n\n    }\n\n\n\n    // @notice An abbreviated name for NFTs in this contract\n\n    function symbol() external view returns (string memory) {\n\n        return _symbol;\n\n    }\n\n\n\n    /**\n\n    * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n\n    * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n\n    *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n\n    *  Metadata JSON Schema\".\n\n    */\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n\n        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n\n        URIProvider provider = _uriProvider;\n\n        return address(provider) == address(0) ? \"\" : provider.tokenURI(_tokenId);\n\n    }\n\n\n\n    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Enumeration\n\n    // ///\n\n\n\n    ///  ERC-721 Non-Fungible Token Standard, optional enumeration extension\n\n    ///  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    ///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\n\n\n\n    uint256[] private _allTokens;\n\n\n\n    /**\n\n     * @dev Gets the total of assets stored by the contract\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @return an array with total assets\n\n     */\n\n    function allTokens() external view returns (uint256[] memory) {\n\n        return _allTokens;\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total of assets of the owner\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @param _owner the address of owner\n\n     * @return an array with total assets of owner\n\n     */\n\n    function assetsOf(address _owner) external view returns (uint256[] memory) {\n\n        return _assetsOf[_owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total amount of assets stored by the contract\n\n     * @return uint256 representing the total amount of assets\n\n     */\n\n    function totalSupply() external view returns (uint256) {\n\n        return _allTokens.length;\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate valid NFTs\n\n    * @dev Throws if `_index` >= `totalSupply()`.\n\n    * @param _index A counter less than `totalSupply()`\n\n    * @return The token identifier for the `_index` of the NFT,\n\n    *  (sort order not specified)\n\n    */\n\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n\n        require(_index < _allTokens.length, \"Index out of bounds\");\n\n        return _allTokens[_index];\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate NFTs assigned to an owner\n\n    * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n\n    *  `_owner` is the zero address, representing invalid NFTs.\n\n    * @param _owner An address where we are interested in NFTs owned by them\n\n    * @param _index A counter less than `balanceOf(_owner)`\n\n    * @return The token identifier for the `_index` of the NFT assigned to `_owner`,\n\n    *   (sort order not specified)\n\n    */\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n\n        require(_owner != address(0), \"0x0 Is not a valid owner\");\n\n        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n\n        return _assetsOf[_owner][_index];\n\n    }\n\n\n\n    //\n\n    // Asset-centric getter functions\n\n    //\n\n\n\n    /**\n\n     * @dev Queries what address owns an asset. This method does not throw.\n\n     * In order to check if the asset exists, use the `exists` function or check if the\n\n     * return value of this call is `0`.\n\n     * @return uint256 the assetId\n\n     */\n\n    function ownerOf(uint256 _assetId) external view returns (address) {\n\n        return _ownerOf(_assetId);\n\n    }\n\n\n\n    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n\n    }\n\n\n\n    //\n\n    // Holder-centric getter functions\n\n    //\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param _owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address _owner) external view returns (uint256) {\n\n        return _balanceOf(_owner);\n\n    }\n\n\n\n    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n\n    }\n\n\n\n    //\n\n    // Authorization getters\n\n    //\n\n\n\n    /**\n\n     * @dev Query whether an address has been authorized to move any assets on behalf of someone else\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetHolder the address that provided the authorization\n\n     * @return bool true if the operator has been authorized to move any assets\n\n     */\n\n    function isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) external view returns (bool) {\n\n        return _isApprovedForAll(_operator, _assetHolder);\n\n    }\n\n\n\n    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Query what address has been particularly authorized to move an asset\n\n     * @param _assetId the asset to be queried for\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function getApproved(uint256 _assetId) external view returns (address) {\n\n        return _getApproved(_assetId);\n\n    }\n\n\n\n    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n\n    }\n\n\n\n    /**\n\n     * @dev Query if an operator can move an asset.\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetId the asset that has been `approved` for transfer\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n\n        return _isAuthorized(_operator, _assetId);\n\n    }\n\n\n\n    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n\n    }\n\n\n\n    //\n\n    // Authorization\n\n    //\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage (send) msg.sender's asset\n\n     * @param _operator address to be approved\n\n     * @param _authorized bool set to true to authorize, false to withdraw authorization\n\n     */\n\n    function setApprovalForAll(address _operator, bool _authorized) external {\n\n        if (_operators[msg.sender][_operator] != _authorized) {\n\n            _operators[msg.sender][_operator] = _authorized;\n\n            emit ApprovalForAll(msg.sender, _operator, _authorized);\n\n        }\n\n    }\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage one particular asset\n\n     * @param _operator address to be approved\n\n     * @param _assetId asset to approve\n\n     */\n\n    function approve(address _operator, uint256 _assetId) external {\n\n        address holder = _ownerOf(_assetId);\n\n        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n\n        if (_getApproved(_assetId) != _operator) {\n\n            _approval[_assetId] = _operator;\n\n            emit Approval(holder, _operator, _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Internal Operations\n\n    //\n\n\n\n    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n\n    }\n\n\n\n    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n    }\n\n\n\n    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Supply-altering functions\n\n    //\n\n\n\n    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n\n    }\n\n\n\n    //\n\n    // Transaction related operations\n\n    //\n\n\n\n    modifier onlyAuthorized(uint256 _assetId) {\n\n        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n\n        _;\n\n    }\n\n\n\n    modifier isCurrentOwner(address _from, uint256 _assetId) {\n\n        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n\n        _;\n\n    }\n\n\n\n    modifier addressDefined(address _target) {\n\n        require(_target != address(0), \"Target can't be 0x0\");\n\n        _;\n\n    }\n\n\n\n    /**\n\n     * @dev Alias of `safeTransferFrom(from, to, assetId, '')`\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Securely transfers the ownership of a given asset from one address to\n\n     * another address, calling the method `onNFTReceived` on the target address if\n\n     * there's code associated with it\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     * @param _userData bytes arbitrary user information to attach to this transfer\n\n     */\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes calldata _userData\n\n    ) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            _userData,\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given asset from one address to another address\n\n     * Warning! This function does not attempt to verify that the target address can send\n\n     * tokens.\n\n     *\n\n     * @param _from address sending the asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function transferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            false\n\n        );\n\n    }\n\n\n\n    /**\n\n     * Internal function that moves an asset from one holder to another\n\n     */\n\n    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n\n    }\n\n\n\n    //\n\n    // Utilities\n\n    //\n\n\n\n    /**\n\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract),\n\n     * relaxing the requirement on the return value\n\n     * @param _contract The contract that receives the ERC721\n\n     * @param _data The call data\n\n     * @return True if the call not reverts and the result of the call\n\n     */\n\n    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n\n    }\n",
                    "message": "ERC721Base (DebtEngine.sol#520-1003) has incorrect ERC20 function interface(s):\n\t-approve (DebtEngine.sol#775-782)\n\t-transferFrom (DebtEngine.sol#915-923)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1507,
                    "vulnerability_to_line": 1539,
                    "vulnerability_code": "    function _pay(\n\n        bytes32 _id,\n\n        address _oracle,\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal returns (uint256 paid, uint256 paidToken){\n\n        Debt storage debt = debts[_id];\n\n\n\n        if (_oracle != debt.oracle) {\n\n            emit PayBatchError(\n\n                _id,\n\n                _oracle\n\n            );\n\n\n\n            return (0,0);\n\n        }\n\n\n\n        // Paid only required amount\n\n        paid = _safePay(_id, debt.model, _amount);\n\n        require(paid <= _amount, \"Paid can't be more than requested\");\n\n\n\n        // Get token amount to use as payment\n\n        paidToken = _oracle != address(0) ? _toToken(paid, _tokens, _equivalent) : paid;\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n\n\n\n        // Add balance to debt\n\n        uint256 newBalance = paidToken.add(debt.balance);\n\n        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(newBalance);\n",
                    "message": "Reentrancy in DebtEngine._pay (DebtEngine.sol#1507-1539):\n\tExternal calls:\n\t- paid = _safePay(_id,debt.model,_amount) (DebtEngine.sol#1526)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(this),paidToken),Error pulling payment tokens) (DebtEngine.sol#1533)\n\tState variables written after the call(s):\n\t- debts (DebtEngine.sol#1538)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1322,
                    "vulnerability_to_line": 1361,
                    "vulnerability_code": "    function pay(\n\n        bytes32 _id,\n\n        uint256 _amount,\n\n        address _origin,\n\n        bytes calldata _oracleData\n\n    ) external returns (uint256 paid, uint256 paidToken) {\n\n        Debt storage debt = debts[_id];\n\n        // Paid only required amount\n\n        paid = _safePay(_id, debt.model, _amount);\n\n        require(paid <= _amount, \"Paid can't be more than requested\");\n\n\n\n        RateOracle oracle = RateOracle(debt.oracle);\n\n        if (address(oracle) != address(0)) {\n\n            // Convert\n\n            (uint256 tokens, uint256 equivalent) = oracle.readSample(_oracleData);\n\n            emit ReadedOracle(_id, tokens, equivalent);\n\n            paidToken = _toToken(paid, tokens, equivalent);\n\n        } else {\n\n            paidToken = paid;\n\n        }\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n\n\n\n        // Add balance to the debt\n\n        uint256 newBalance = paidToken.add(debt.balance);\n\n        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(newBalance);\n\n\n\n        // Emit pay event\n\n        emit Paid({\n\n            _id: _id,\n\n            _sender: msg.sender,\n\n            _origin: _origin,\n\n            _requested: _amount,\n\n            _requestedTokens: 0,\n\n            _paid: paid,\n\n            _tokens: paidToken\n\n        });\n",
                    "message": "Reentrancy in DebtEngine.pay (DebtEngine.sol#1322-1361):\n\tExternal calls:\n\t- paid = _safePay(_id,debt.model,_amount) (DebtEngine.sol#1330)\n\t- (tokens,equivalent) = oracle.readSample(_oracleData) (DebtEngine.sol#1336)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(this),paidToken),Error pulling payment tokens) (DebtEngine.sol#1344)\n\tState variables written after the call(s):\n\t- debts (DebtEngine.sol#1349)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1363,
                    "vulnerability_to_line": 1417,
                    "vulnerability_code": "    function payToken(\n\n        bytes32 id,\n\n        uint256 amount,\n\n        address origin,\n\n        bytes calldata oracleData\n\n    ) external returns (uint256 paid, uint256 paidToken) {\n\n        Debt storage debt = debts[id];\n\n        // Read storage\n\n        RateOracle oracle = RateOracle(debt.oracle);\n\n\n\n        uint256 equivalent;\n\n        uint256 tokens;\n\n        uint256 available;\n\n\n\n        // Get available <currency> amount\n\n        if (address(oracle) != address(0)) {\n\n            (tokens, equivalent) = oracle.readSample(oracleData);\n\n            emit ReadedOracle(id, tokens, equivalent);\n\n            available = _fromToken(amount, tokens, equivalent);\n\n        } else {\n\n            available = amount;\n\n        }\n\n\n\n        // Call addPaid on model\n\n        paid = _safePay(id, debt.model, available);\n\n        require(paid <= available, \"Paid can't exceed available\");\n\n\n\n        // Convert back to required pull amount\n\n        if (address(oracle) != address(0)) {\n\n            paidToken = _toToken(paid, tokens, equivalent);\n\n            require(paidToken <= amount, \"Paid can't exceed requested\");\n\n        } else {\n\n            paidToken = paid;\n\n        }\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling tokens\");\n\n\n\n        // Add balance to the debt\n\n        // WARNING: Reusing variable **available**\n\n        available = paidToken.add(debt.balance);\n\n        require(available < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(available);\n\n\n\n        // Emit pay event\n\n        emit Paid({\n\n            _id: id,\n\n            _sender: msg.sender,\n\n            _origin: origin,\n\n            _requested: 0,\n\n            _requestedTokens: amount,\n\n            _paid: paid,\n\n            _tokens: paidToken\n\n        });\n",
                    "message": "Reentrancy in DebtEngine.payToken (DebtEngine.sol#1363-1417):\n\tExternal calls:\n\t- (tokens,equivalent) = oracle.readSample(oracleData) (DebtEngine.sol#1379)\n\t- paid = _safePay(id,debt.model,available) (DebtEngine.sol#1387)\n\tState variables written after the call(s):\n\t- debts (DebtEngine.sol#1387)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1363,
                    "vulnerability_to_line": 1417,
                    "vulnerability_code": "    function payToken(\n\n        bytes32 id,\n\n        uint256 amount,\n\n        address origin,\n\n        bytes calldata oracleData\n\n    ) external returns (uint256 paid, uint256 paidToken) {\n\n        Debt storage debt = debts[id];\n\n        // Read storage\n\n        RateOracle oracle = RateOracle(debt.oracle);\n\n\n\n        uint256 equivalent;\n\n        uint256 tokens;\n\n        uint256 available;\n\n\n\n        // Get available <currency> amount\n\n        if (address(oracle) != address(0)) {\n\n            (tokens, equivalent) = oracle.readSample(oracleData);\n\n            emit ReadedOracle(id, tokens, equivalent);\n\n            available = _fromToken(amount, tokens, equivalent);\n\n        } else {\n\n            available = amount;\n\n        }\n\n\n\n        // Call addPaid on model\n\n        paid = _safePay(id, debt.model, available);\n\n        require(paid <= available, \"Paid can't exceed available\");\n\n\n\n        // Convert back to required pull amount\n\n        if (address(oracle) != address(0)) {\n\n            paidToken = _toToken(paid, tokens, equivalent);\n\n            require(paidToken <= amount, \"Paid can't exceed requested\");\n\n        } else {\n\n            paidToken = paid;\n\n        }\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling tokens\");\n\n\n\n        // Add balance to the debt\n\n        // WARNING: Reusing variable **available**\n\n        available = paidToken.add(debt.balance);\n\n        require(available < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(available);\n\n\n\n        // Emit pay event\n\n        emit Paid({\n\n            _id: id,\n\n            _sender: msg.sender,\n\n            _origin: origin,\n\n            _requested: 0,\n\n            _requestedTokens: amount,\n\n            _paid: paid,\n\n            _tokens: paidToken\n\n        });\n",
                    "message": "Reentrancy in DebtEngine.payToken (DebtEngine.sol#1363-1417):\n\tExternal calls:\n\t- (tokens,equivalent) = oracle.readSample(oracleData) (DebtEngine.sol#1379)\n\t- paid = _safePay(id,debt.model,available) (DebtEngine.sol#1387)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(this),paidToken),Error pulling tokens) (DebtEngine.sol#1399)\n\tState variables written after the call(s):\n\t- debts (DebtEngine.sol#1405)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1626,
                    "vulnerability_to_line": 1665,
                    "vulnerability_code": "    function run(bytes32 _id) external returns (bool) {\n\n        Debt storage debt = debts[_id];\n\n        require(debt.model != Model(0), \"Debt does not exist\");\n\n\n\n        (bool success, bytes32 result) = _safeGasCall(\n\n            address(debt.model),\n\n            abi.encodeWithSelector(\n\n                debt.model.run.selector,\n\n                _id\n\n            )\n\n        );\n\n\n\n        if (success) {\n\n            if (debt.error) {\n\n                emit ErrorRecover({\n\n                    _id: _id,\n\n                    _sender: msg.sender,\n\n                    _value: 0,\n\n                    _gasLeft: gasleft(),\n\n                    _gasLimit: block.gaslimit,\n\n                    _result: result,\n\n                    _callData: msg.data\n\n                });\n\n\n\n                delete debt.error;\n\n            }\n\n\n\n            return result == bytes32(uint256(1));\n\n        } else {\n\n            emit Error({\n\n                _id: _id,\n\n                _sender: msg.sender,\n\n                _value: 0,\n\n                _gasLeft: gasleft(),\n\n                _gasLimit: block.gaslimit,\n\n                _callData: msg.data\n\n            });\n\n            debt.error = true;\n\n        }\n",
                    "message": "Reentrancy in DebtEngine.run (DebtEngine.sol#1626-1665):\n\tExternal calls:\n\t- (success,result) = _safeGasCall(address(debt.model),abi.encodeWithSelector(debt.model.run.selector,_id)) (DebtEngine.sol#1630-1636)\n\tState variables written after the call(s):\n\t- debts (DebtEngine.sol#1663)\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 tokens;\n",
                    "message": "tokens in DebtEngine.payToken (DebtEngine.sol#1374) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 tokens;\n",
                    "message": "tokens in DebtEngine.payTokenBatch (DebtEngine.sol#1464) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 tokens;\n",
                    "message": "tokens in DebtEngine.payBatch (DebtEngine.sol#1429) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 equivalent;\n",
                    "message": "equivalent in DebtEngine.payToken (DebtEngine.sol#1373) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 equivalent;\n",
                    "message": "equivalent in DebtEngine.payTokenBatch (DebtEngine.sol#1465) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 equivalent;\n",
                    "message": "equivalent in DebtEngine.payBatch (DebtEngine.sol#1430) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "ERC721Base.constructor.name (local variable @ DebtEngine.sol#546) shadows:\n\t- ERC721Base.name (function @ DebtEngine.sol#573-575)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol\n",
                    "message": "ERC721Base.constructor.symbol (local variable @ DebtEngine.sol#547) shadows:\n\t- ERC721Base.symbol (function @ DebtEngine.sol#578-580)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "DebtEngine.create._owner (local variable @ DebtEngine.sol#1171) shadows:\n\t- Ownable._owner (state variable @ DebtEngine.sol#1031)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "DebtEngine.create2._owner (local variable @ DebtEngine.sol#1205) shadows:\n\t- Ownable._owner (state variable @ DebtEngine.sol#1031)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "DebtEngine.create3._owner (local variable @ DebtEngine.sol#1242) shadows:\n\t- Ownable._owner (state variable @ DebtEngine.sol#1031)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1541,
                    "vulnerability_to_line": 1584,
                    "vulnerability_code": "    function _safePay(\n\n        bytes32 _id,\n\n        Model _model,\n\n        uint256 _available\n\n    ) internal returns (uint256) {\n\n        require(_model != Model(0), \"Debt does not exist\");\n\n\n\n        (bool success, bytes32 paid) = _safeGasCall(\n\n            address(_model),\n\n            abi.encodeWithSelector(\n\n                _model.addPaid.selector,\n\n                _id,\n\n                _available\n\n            )\n\n        );\n\n\n\n        if (success) {\n\n            if (debts[_id].error) {\n\n                emit ErrorRecover({\n\n                    _id: _id,\n\n                    _sender: msg.sender,\n\n                    _value: 0,\n\n                    _gasLeft: gasleft(),\n\n                    _gasLimit: block.gaslimit,\n\n                    _result: paid,\n\n                    _callData: msg.data\n\n                });\n\n\n\n                delete debts[_id].error;\n\n            }\n\n\n\n            return uint256(paid);\n\n        } else {\n\n            emit Error({\n\n                _id: _id,\n\n                _sender: msg.sender,\n\n                _value: msg.value,\n\n                _gasLeft: gasleft(),\n\n                _gasLimit: block.gaslimit,\n\n                _callData: msg.data\n\n            });\n\n            debts[_id].error = true;\n\n        }\n",
                    "message": "Reentrancy in DebtEngine._safePay (DebtEngine.sol#1541-1584):\n\tExternal calls:\n\t- (success,paid) = _safeGasCall(address(_model),abi.encodeWithSelector(_model.addPaid.selector,_id,_available)) (DebtEngine.sol#1548-1555)\n\tState variables written after the call(s):\n\t- debts (DebtEngine.sol#1569)\n\t- debts (DebtEngine.sol#1582)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract uses assembly (DebtEngine.sol#421-425)\n\t- DebtEngine.sol#423\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in DebtEngine.sol:\n\t- pragma solidity^0.5.11 (DebtEngine.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (DebtEngine.sol#17): it allows old versions\n\t- pragma solidity^0.5.11 (DebtEngine.sol#32): it allows old versions\n\t- pragma solidity^0.5.11 (DebtEngine.sol#355): it allows old versions\n\t- pragma solidity^0.5.11 (DebtEngine.sol#417): it allows old versions\n\t- pragma solidity^0.5.11 (DebtEngine.sol#430): it allows old versions\n\t- pragma solidity^0.5.11 (DebtEngine.sol#458): it allows old versions\n\t- pragma solidity^0.5.11 (DebtEngine.sol#511): it allows old versions\n\t- pragma solidity^0.5.11 (DebtEngine.sol#1007): it allows old versions\n\t- pragma solidity^0.5.11 (DebtEngine.sol#1028): it allows old versions\n\t- pragma solidity^0.5.11 (DebtEngine.sol#1061): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 993,
                    "vulnerability_to_line": 1002,
                    "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
                    "message": "Low level call in ERC721Base._noThrowCall (DebtEngine.sol#993-1002):\n\t-(success,returnData) = _contract.call(_data) DebtEngine.sol#998\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 1735,
                    "vulnerability_to_line": 1746,
                    "vulnerability_code": "    function _safeGasStaticCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal view returns (bool success, uint256 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.staticcall.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (uint256));\n",
                    "message": "Low level call in DebtEngine._safeGasStaticCall (DebtEngine.sol#1735-1746):\n\t-(success,returnData) = _contract.staticcall.gas(gasleft()())(_data) DebtEngine.sol#1742\n\t-(success,returnData) = _contract.staticcall.gas(_gas)(_data) DebtEngine.sol#1742\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 1755,
                    "vulnerability_to_line": 1766,
                    "vulnerability_code": "    function _safeGasCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes32 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.call.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes32));\n",
                    "message": "Low level call in DebtEngine._safeGasCall (DebtEngine.sol#1755-1766):\n\t-(success,returnData) = _contract.call.gas(gasleft()())(_data) DebtEngine.sol#1762\n\t-(success,returnData) = _contract.call.gas(_gas)(_data) DebtEngine.sol#1762\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": 506,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (DebtEngine.sol#501-506) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (DebtEngine.sol#466) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n",
                    "message": "Parameter '_tokenId' of ERC721Base.tokenURI (DebtEngine.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 598,
                    "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n",
                    "message": "Function 'ERC721Base._setURIProvider' (DebtEngine.sol#594-598) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n",
                    "message": "Parameter '_provider' of ERC721Base._setURIProvider (DebtEngine.sol#594) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function assetsOf(address _owner) external view returns (uint256[] memory) {\n",
                    "message": "Parameter '_owner' of ERC721Base.assetsOf (DebtEngine.sol#627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 646,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenByIndex(uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_index' of ERC721Base.tokenByIndex (DebtEngine.sol#646) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base.tokenOfOwnerByIndex (DebtEngine.sol#660) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_index' of ERC721Base.tokenOfOwnerByIndex (DebtEngine.sol#660) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 _assetId) external view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.ownerOf (DebtEngine.sol#676) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": 682,
                    "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n",
                    "message": "Function 'ERC721Base._ownerOf' (DebtEngine.sol#680-682) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._ownerOf (DebtEngine.sol#680) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) external view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base.balanceOf (DebtEngine.sol#692) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 696,
                    "vulnerability_to_line": 698,
                    "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n",
                    "message": "Function 'ERC721Base._balanceOf' (DebtEngine.sol#696-698) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 696,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base._balanceOf (DebtEngine.sol#696) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 711,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of ERC721Base.isApprovedForAll (DebtEngine.sol#711) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _assetHolder\n",
                    "message": "Parameter '_assetHolder' of ERC721Base.isApprovedForAll (DebtEngine.sol#712) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": 722,
                    "vulnerability_code": "    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n",
                    "message": "Function 'ERC721Base._isApprovedForAll' (DebtEngine.sol#717-722) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of ERC721Base._isApprovedForAll (DebtEngine.sol#718) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _assetHolder\n",
                    "message": "Parameter '_assetHolder' of ERC721Base._isApprovedForAll (DebtEngine.sol#719) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 _assetId) external view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.getApproved (DebtEngine.sol#729) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": 735,
                    "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n",
                    "message": "Function 'ERC721Base._getApproved' (DebtEngine.sol#733-735) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._getApproved (DebtEngine.sol#733) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
                    "message": "Parameter '_operator' of ERC721Base.isAuthorized (DebtEngine.sol#743) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.isAuthorized (DebtEngine.sol#743) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 752,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n",
                    "message": "Function 'ERC721Base._isAuthorized' (DebtEngine.sol#747-752) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
                    "message": "Parameter '_operator' of ERC721Base._isAuthorized (DebtEngine.sol#747) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._isAuthorized (DebtEngine.sol#747) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 763,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
                    "message": "Parameter '_operator' of ERC721Base.setApprovalForAll (DebtEngine.sol#763) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 763,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
                    "message": "Parameter '_authorized' of ERC721Base.setApprovalForAll (DebtEngine.sol#763) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
                    "message": "Parameter '_operator' of ERC721Base.approve (DebtEngine.sol#775) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.approve (DebtEngine.sol#775) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": 799,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n",
                    "message": "Function 'ERC721Base._addAssetTo' (DebtEngine.sol#788-799) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_to' of ERC721Base._addAssetTo (DebtEngine.sol#788) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._addAssetTo (DebtEngine.sol#788) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": 824,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n",
                    "message": "Function 'ERC721Base._transferAsset' (DebtEngine.sol#801-824) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_from' of ERC721Base._transferAsset (DebtEngine.sol#801) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_to' of ERC721Base._transferAsset (DebtEngine.sol#801) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._transferAsset (DebtEngine.sol#801) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": 831,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n",
                    "message": "Function 'ERC721Base._clearApproval' (DebtEngine.sol#826-831) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
                    "message": "Parameter '_holder' of ERC721Base._clearApproval (DebtEngine.sol#826) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._clearApproval (DebtEngine.sol#826) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n",
                    "message": "Function 'ERC721Base._generate' (DebtEngine.sol#837-843) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
                    "message": "Parameter '_assetId' of ERC721Base._generate (DebtEngine.sol#837) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
                    "message": "Parameter '_beneficiary' of ERC721Base._generate (DebtEngine.sol#837) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_from' of ERC721Base.safeTransferFrom (DebtEngine.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_to' of ERC721Base.safeTransferFrom (DebtEngine.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (DebtEngine.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 892,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of ERC721Base.safeTransferFrom (DebtEngine.sol#892) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC721Base.safeTransferFrom (DebtEngine.sol#893) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 894,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _assetId,\n",
                    "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (DebtEngine.sol#894) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _userData\n",
                    "message": "Parameter '_userData' of ERC721Base.safeTransferFrom (DebtEngine.sol#895) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_from' of ERC721Base.transferFrom (DebtEngine.sol#915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_to' of ERC721Base.transferFrom (DebtEngine.sol#915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.transferFrom (DebtEngine.sol#915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 928,
                    "vulnerability_to_line": 980,
                    "vulnerability_code": "    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n",
                    "message": "Function 'ERC721Base._doTransferFrom' (DebtEngine.sol#928-980) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 930,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC721Base._doTransferFrom (DebtEngine.sol#930) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 931,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _assetId,\n",
                    "message": "Parameter '_assetId' of ERC721Base._doTransferFrom (DebtEngine.sol#931) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _userData,\n",
                    "message": "Parameter '_userData' of ERC721Base._doTransferFrom (DebtEngine.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 933,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _doCheck\n",
                    "message": "Parameter '_doCheck' of ERC721Base._doTransferFrom (DebtEngine.sol#933) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 993,
                    "vulnerability_to_line": 1002,
                    "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
                    "message": "Function 'ERC721Base._noThrowCall' (DebtEngine.sol#993-1002) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 994,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of ERC721Base._noThrowCall (DebtEngine.sol#994) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 995,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of ERC721Base._noThrowCall (DebtEngine.sol#995) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1052,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (DebtEngine.sol#1052) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1031,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal _owner;\n",
                    "message": "Variable 'Ownable._owner' (DebtEngine.sol#1031) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        IERC20 _token\n",
                    "message": "Parameter '_token' of DebtEngine. (DebtEngine.sol#1157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setURIProvider(URIProvider _provider) external onlyOwner {\n",
                    "message": "Parameter '_provider' of DebtEngine.setURIProvider (DebtEngine.sol#1165) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Model _model,\n",
                    "message": "Parameter '_model' of DebtEngine.create (DebtEngine.sol#1170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "Parameter '_owner' of DebtEngine.create (DebtEngine.sol#1171) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.create (DebtEngine.sol#1172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data\n",
                    "message": "Parameter '_data' of DebtEngine.create (DebtEngine.sol#1173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Model _model,\n",
                    "message": "Parameter '_model' of DebtEngine.create2 (DebtEngine.sol#1204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "Parameter '_owner' of DebtEngine.create2 (DebtEngine.sol#1205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.create2 (DebtEngine.sol#1206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of DebtEngine.create2 (DebtEngine.sol#1207) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data\n",
                    "message": "Parameter '_data' of DebtEngine.create2 (DebtEngine.sol#1208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Model _model,\n",
                    "message": "Parameter '_model' of DebtEngine.create3 (DebtEngine.sol#1241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "Parameter '_owner' of DebtEngine.create3 (DebtEngine.sol#1242) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.create3 (DebtEngine.sol#1243) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of DebtEngine.create3 (DebtEngine.sol#1244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data\n",
                    "message": "Parameter '_data' of DebtEngine.create3 (DebtEngine.sol#1245) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of DebtEngine.buildId (DebtEngine.sol#1275) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _nonce\n",
                    "message": "Parameter '_nonce' of DebtEngine.buildId (DebtEngine.sol#1276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of DebtEngine.buildId2 (DebtEngine.sol#1289) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _model,\n",
                    "message": "Parameter '_model' of DebtEngine.buildId2 (DebtEngine.sol#1290) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.buildId2 (DebtEngine.sol#1291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of DebtEngine.buildId2 (DebtEngine.sol#1292) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data\n",
                    "message": "Parameter '_data' of DebtEngine.buildId2 (DebtEngine.sol#1293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of DebtEngine.buildId3 (DebtEngine.sol#1309) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt\n",
                    "message": "Parameter '_salt' of DebtEngine.buildId3 (DebtEngine.sol#1310) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of DebtEngine.pay (DebtEngine.sol#1323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of DebtEngine.pay (DebtEngine.sol#1324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _origin,\n",
                    "message": "Parameter '_origin' of DebtEngine.pay (DebtEngine.sol#1325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _oracleData\n",
                    "message": "Parameter '_oracleData' of DebtEngine.pay (DebtEngine.sol#1326) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32[] calldata _ids,\n",
                    "message": "Parameter '_ids' of DebtEngine.payBatch (DebtEngine.sol#1420) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _amounts,\n",
                    "message": "Parameter '_amounts' of DebtEngine.payBatch (DebtEngine.sol#1421) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _origin,\n",
                    "message": "Parameter '_origin' of DebtEngine.payBatch (DebtEngine.sol#1422) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.payBatch (DebtEngine.sol#1423) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _oracleData\n",
                    "message": "Parameter '_oracleData' of DebtEngine.payBatch (DebtEngine.sol#1424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32[] calldata _ids,\n",
                    "message": "Parameter '_ids' of DebtEngine.payTokenBatch (DebtEngine.sol#1455) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _tokenAmounts,\n",
                    "message": "Parameter '_tokenAmounts' of DebtEngine.payTokenBatch (DebtEngine.sol#1456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _origin,\n",
                    "message": "Parameter '_origin' of DebtEngine.payTokenBatch (DebtEngine.sol#1457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine.payTokenBatch (DebtEngine.sol#1458) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _oracleData\n",
                    "message": "Parameter '_oracleData' of DebtEngine.payTokenBatch (DebtEngine.sol#1459) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1507,
                    "vulnerability_to_line": 1539,
                    "vulnerability_code": "    function _pay(\n\n        bytes32 _id,\n\n        address _oracle,\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal returns (uint256 paid, uint256 paidToken){\n\n        Debt storage debt = debts[_id];\n\n\n\n        if (_oracle != debt.oracle) {\n\n            emit PayBatchError(\n\n                _id,\n\n                _oracle\n\n            );\n\n\n\n            return (0,0);\n\n        }\n\n\n\n        // Paid only required amount\n\n        paid = _safePay(_id, debt.model, _amount);\n\n        require(paid <= _amount, \"Paid can't be more than requested\");\n\n\n\n        // Get token amount to use as payment\n\n        paidToken = _oracle != address(0) ? _toToken(paid, _tokens, _equivalent) : paid;\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n\n\n\n        // Add balance to debt\n\n        uint256 newBalance = paidToken.add(debt.balance);\n\n        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(newBalance);\n",
                    "message": "Function 'DebtEngine._pay' (DebtEngine.sol#1507-1539) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of DebtEngine._pay (DebtEngine.sol#1508) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of DebtEngine._pay (DebtEngine.sol#1509) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of DebtEngine._pay (DebtEngine.sol#1510) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of DebtEngine._pay (DebtEngine.sol#1511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _equivalent\n",
                    "message": "Parameter '_equivalent' of DebtEngine._pay (DebtEngine.sol#1512) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1541,
                    "vulnerability_to_line": 1584,
                    "vulnerability_code": "    function _safePay(\n\n        bytes32 _id,\n\n        Model _model,\n\n        uint256 _available\n\n    ) internal returns (uint256) {\n\n        require(_model != Model(0), \"Debt does not exist\");\n\n\n\n        (bool success, bytes32 paid) = _safeGasCall(\n\n            address(_model),\n\n            abi.encodeWithSelector(\n\n                _model.addPaid.selector,\n\n                _id,\n\n                _available\n\n            )\n\n        );\n\n\n\n        if (success) {\n\n            if (debts[_id].error) {\n\n                emit ErrorRecover({\n\n                    _id: _id,\n\n                    _sender: msg.sender,\n\n                    _value: 0,\n\n                    _gasLeft: gasleft(),\n\n                    _gasLimit: block.gaslimit,\n\n                    _result: paid,\n\n                    _callData: msg.data\n\n                });\n\n\n\n                delete debts[_id].error;\n\n            }\n\n\n\n            return uint256(paid);\n\n        } else {\n\n            emit Error({\n\n                _id: _id,\n\n                _sender: msg.sender,\n\n                _value: msg.value,\n\n                _gasLeft: gasleft(),\n\n                _gasLimit: block.gaslimit,\n\n                _callData: msg.data\n\n            });\n\n            debts[_id].error = true;\n\n        }\n",
                    "message": "Function 'DebtEngine._safePay' (DebtEngine.sol#1541-1584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of DebtEngine._safePay (DebtEngine.sol#1542) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Model _model,\n",
                    "message": "Parameter '_model' of DebtEngine._safePay (DebtEngine.sol#1543) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _available\n",
                    "message": "Parameter '_available' of DebtEngine._safePay (DebtEngine.sol#1544) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1595,
                    "vulnerability_to_line": 1606,
                    "vulnerability_code": "    function _toToken(\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal pure returns (uint256 _result) {\n\n        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n\n        uint256 aux = _tokens.mult(_amount);\n\n        _result = aux / _equivalent;\n\n        if (aux % _equivalent > 0) {\n\n            _result = _result.add(1);\n\n        }\n",
                    "message": "Function 'DebtEngine._toToken' (DebtEngine.sol#1595-1606) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of DebtEngine._toToken (DebtEngine.sol#1596) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of DebtEngine._toToken (DebtEngine.sol#1597) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1598,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _equivalent\n",
                    "message": "Parameter '_equivalent' of DebtEngine._toToken (DebtEngine.sol#1598) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1617,
                    "vulnerability_to_line": 1624,
                    "vulnerability_code": "    function _fromToken(\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal pure returns (uint256) {\n\n        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n\n        return _amount.mult(_equivalent) / _tokens;\n",
                    "message": "Function 'DebtEngine._fromToken' (DebtEngine.sol#1617-1624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1618,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of DebtEngine._fromToken (DebtEngine.sol#1618) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1619,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of DebtEngine._fromToken (DebtEngine.sol#1619) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _equivalent\n",
                    "message": "Parameter '_equivalent' of DebtEngine._fromToken (DebtEngine.sol#1620) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function run(bytes32 _id) external returns (bool) {\n",
                    "message": "Parameter '_id' of DebtEngine.run (DebtEngine.sol#1626) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(bytes32 _id, address _to) external returns (uint256 amount) {\n",
                    "message": "Parameter '_id' of DebtEngine.withdraw (DebtEngine.sol#1667) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(bytes32 _id, address _to) external returns (uint256 amount) {\n",
                    "message": "Parameter '_to' of DebtEngine.withdraw (DebtEngine.sol#1667) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawPartial(bytes32 _id, address _to, uint256 _amount) external returns (bool success) {\n",
                    "message": "Parameter '_id' of DebtEngine.withdrawPartial (DebtEngine.sol#1682) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawPartial(bytes32 _id, address _to, uint256 _amount) external returns (bool success) {\n",
                    "message": "Parameter '_to' of DebtEngine.withdrawPartial (DebtEngine.sol#1682) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawPartial(bytes32 _id, address _to, uint256 _amount) external returns (bool success) {\n",
                    "message": "Parameter '_amount' of DebtEngine.withdrawPartial (DebtEngine.sol#1682) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawBatch(bytes32[] calldata _ids, address _to) external returns (uint256 total) {\n",
                    "message": "Parameter '_ids' of DebtEngine.withdrawBatch (DebtEngine.sol#1698) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawBatch(bytes32[] calldata _ids, address _to) external returns (uint256 total) {\n",
                    "message": "Parameter '_to' of DebtEngine.withdrawBatch (DebtEngine.sol#1698) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStatus(bytes32 _id) external view returns (uint256) {\n",
                    "message": "Parameter '_id' of DebtEngine.getStatus (DebtEngine.sol#1719) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1735,
                    "vulnerability_to_line": 1746,
                    "vulnerability_code": "    function _safeGasStaticCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal view returns (bool success, uint256 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.staticcall.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (uint256));\n",
                    "message": "Function 'DebtEngine._safeGasStaticCall' (DebtEngine.sol#1735-1746) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of DebtEngine._safeGasStaticCall (DebtEngine.sol#1736) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1737,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of DebtEngine._safeGasStaticCall (DebtEngine.sol#1737) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1755,
                    "vulnerability_to_line": 1766,
                    "vulnerability_code": "    function _safeGasCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes32 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.call.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes32));\n",
                    "message": "Function 'DebtEngine._safeGasCall' (DebtEngine.sol#1755-1766) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1756,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of DebtEngine._safeGasCall (DebtEngine.sol#1756) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of DebtEngine._safeGasCall (DebtEngine.sol#1757) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
                    "message": "RateOracle.RATE_ORACLE_INTERFACE (DebtEngine.sol#368) is never used in RateOracle\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant MODEL_INTERFACE = 0xaf498c35;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 828,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approval[_assetId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _assetsOf[_from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setURIProvider(URIProvider _provider) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1061,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => address) private _holderOf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256[]) private _assetsOf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _indexOfAsset;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => bool)) private _operators;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => address) private _approval;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    URIProvider private _uriProvider;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256 amount, bool defined);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 996,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal returns (bool success, bytes4 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256 paid, uint256 paidToken) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256 paid, uint256 paidToken) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (success, returnData) = _contract.call(_data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function payBatch(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _amounts,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _origin,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _oracleData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256[] memory paid, uint256[] memory paidTokens) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256[] memory paid, uint256[] memory paidTokens) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 count = _ids.length;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 tokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 equivalent;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_oracle != address(0)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_oracle != address(0)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_oracle != address(0)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (tokens, equivalent) = RateOracle(_oracle).readSample(_oracleData);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit ReadedOracleBatch(_oracle, count, tokens, equivalent);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit ReadedOracleBatch(_oracle, count, tokens, equivalent);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit ReadedOracleBatch(_oracle, count, tokens, equivalent);\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/diaspore/utils/OracleAdapter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Oracle _legacyOracle,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory _symbol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory _name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory _maintainer,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _decimals,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _currency,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        legacyOracle = _legacyOracle;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_21"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency (OracleAdapter.sol#209-214) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 233,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (OracleAdapter.sol#219-233) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency uses assembly (OracleAdapter.sol#209-214)\n\t- OracleAdapter.sol#211-213\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 233,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency uses assembly (OracleAdapter.sol#219-233)\n\t- OracleAdapter.sol#226-232\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 157,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n\n        require(_to != address(0), \"0x0 Is not a valid owner\");\n\n        owner = _to;\n\n        return true;\n",
                    "message": "OwnableBasalt.transferTo (OracleAdapter.sol#153-157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Oracle.url (OracleAdapter.sol#181) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": "Oracle.getRate (OracleAdapter.sol#189) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 204,
                    "vulnerability_code": "    function addCurrency(string memory ticker) public onlyOwner returns (bool) {\n\n        bytes32 currency = encodeCurrency(ticker);\n\n        emit NewSymbol(currency);\n\n        supported[currency] = true;\n\n        currencies.push(currency);\n\n        return true;\n",
                    "message": "Oracle.addCurrency (OracleAdapter.sol#198-204) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 233,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (OracleAdapter.sol#219-233) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in OracleAdapter.sol:\n\t- pragma solidity^0.5.11 (OracleAdapter.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (OracleAdapter.sol#18): it allows old versions\n\t- pragma solidity^0.5.11 (OracleAdapter.sol#80): it allows old versions\n\t- pragma solidity^0.5.11 (OracleAdapter.sol#133): it allows old versions\n\t- pragma solidity^0.5.11 (OracleAdapter.sol#162): it allows old versions\n\t- pragma solidity^0.5.11 (OracleAdapter.sol#239): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (OracleAdapter.sol#123-128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (OracleAdapter.sol#88) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '_to' of OwnableBasalt.transferTo (OracleAdapter.sol#153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent) {\n",
                    "message": "Parameter '_data' of OracleAdapter.readSample (OracleAdapter.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Oracle _legacyOracle,\n",
                    "message": "Parameter '_legacyOracle' of OracleAdapter. (OracleAdapter.sol#256) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory _symbol,\n",
                    "message": "Parameter '_symbol' of OracleAdapter. (OracleAdapter.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory _name,\n",
                    "message": "Parameter '_name' of OracleAdapter. (OracleAdapter.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory _maintainer,\n",
                    "message": "Parameter '_maintainer' of OracleAdapter. (OracleAdapter.sol#259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _decimals,\n",
                    "message": "Parameter '_decimals' of OracleAdapter. (OracleAdapter.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _currency,\n",
                    "message": "Parameter '_currency' of OracleAdapter. (OracleAdapter.sol#261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token\n",
                    "message": "Parameter '_token' of OracleAdapter. (OracleAdapter.sol#262) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (true) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private isymbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private iname;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private imaintainer;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private idecimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private icurrency;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private itoken;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/diaspore/model/NanoLoanModel.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract NanoLoanModel is ERC165, BytesUtils, Ownable, Model, ModelDescriptor, MinMax  {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(MODEL_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 728,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(MODEL_DESCRIPTOR_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 678,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 748,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == engine, \"Only engine allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_cancelableAt <= _duesIn, \"The cancelableAt should be less or equal than duesIn\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 831,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_interestRate > 1000, \"Interest rate too high\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_interestRatePunitory > 1000, \"Punitory interest rate too high\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 833,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount != 0, \"amount can't be 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(uint64(now) + _duesIn > uint64(now), \"duesIn should be not 0 or overflow now plus duesIn\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(configs[id].interestRate == 0, \"Entry already exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 959,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(state.status != STATUS_PAID, \"The loan status should not be paid\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 967,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newPay < U_128_OVERFLOW, \"Paid overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1021,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(newTimestamp < U_64_OVERFLOW, \"newTimestamp overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1026,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    require(newInterest < U_128_OVERFLOW, \"newInterest overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    require(newPunitoryInterest < U_128_OVERFLOW, \"newPunitoryInterest overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1065,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert(\"Not implemented!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length == L_DATA, \"Invalid data length\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (timestamp > config.dueTime && timestamp > state.interestTimestamp) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 debt = config.amount.add(calcInterest).add(state.interest);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 pending = min(debt, debt.add(state.punitoryInterest).sub(state.paid));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 872,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (, debt) = _calculateInterest(timestamp - max(config.dueTime, state.interestTimestamp), config.interestRatePunitory, pending);// cant overflow, check in the previus if\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 874,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            calcInterest = debt.add(calcInterest);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_cancelableAt <= _duesIn, \"The cancelableAt should be less or equal than duesIn\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(uint64(now) + _duesIn > uint64(now), \"duesIn should be not 0 or overflow now plus duesIn\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 959,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(state.status != STATUS_PAID, \"The loan status should not be paid\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_70"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (NanoLoanModel.sol#496-501) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": 510,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (NanoLoanModel.sol#503-510) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (NanoLoanModel.sol#512-522) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 542,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (NanoLoanModel.sol#524-542) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": 567,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (NanoLoanModel.sol#544-567) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": 597,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (NanoLoanModel.sol#569-597) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": 632,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (NanoLoanModel.sol#599-632) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 679,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (NanoLoanModel.sol#634-679) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": 1062,
                    "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": 1062,
                    "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": 1062,
                    "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\nNanoLoanModel.create (NanoLoanModel.sol#911-941) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].interestRate == 0,Entry already exist)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": 1062,
                    "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\nNanoLoanModel.create (NanoLoanModel.sol#911-941) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].interestRate == 0,Entry already exist)\nNanoLoanModel.getDueTime (NanoLoanModel.sol#884-886) uses a dangerous strict equality:\n\t- states[id].status == STATUS_PAID\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": 1062,
                    "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\nNanoLoanModel.create (NanoLoanModel.sol#911-941) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].interestRate == 0,Entry already exist)\nNanoLoanModel.getDueTime (NanoLoanModel.sol#884-886) uses a dangerous strict equality:\n\t- states[id].status == STATUS_PAID\nNanoLoanModel.getFrequency (NanoLoanModel.sol#892-894) uses a dangerous strict equality:\n\t- configs[id].dueTime == 0\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": 1062,
                    "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\nNanoLoanModel.create (NanoLoanModel.sol#911-941) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].interestRate == 0,Entry already exist)\nNanoLoanModel.getDueTime (NanoLoanModel.sol#884-886) uses a dangerous strict equality:\n\t- states[id].status == STATUS_PAID\nNanoLoanModel.getFrequency (NanoLoanModel.sol#892-894) uses a dangerous strict equality:\n\t- configs[id].dueTime == 0\nNanoLoanModel.getInstallments (NanoLoanModel.sol#896-898) uses a dangerous strict equality:\n\t- configs[id].dueTime == 0\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": 1062,
                    "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\nNanoLoanModel.create (NanoLoanModel.sol#911-941) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].interestRate == 0,Entry already exist)\nNanoLoanModel.getDueTime (NanoLoanModel.sol#884-886) uses a dangerous strict equality:\n\t- states[id].status == STATUS_PAID\nNanoLoanModel.getFrequency (NanoLoanModel.sol#892-894) uses a dangerous strict equality:\n\t- configs[id].dueTime == 0\nNanoLoanModel.getInstallments (NanoLoanModel.sol#896-898) uses a dangerous strict equality:\n\t- configs[id].dueTime == 0\nNanoLoanModel.getObligation (NanoLoanModel.sol#849-852) uses a dangerous strict equality:\n\t- defined = timestamp == now || timestamp <= states[id].interestTimestamp\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 newPunitoryInterest;\n",
                    "message": "newPunitoryInterest in NanoLoanModel._addInterest (NanoLoanModel.sol#1008) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 calcInterest;\n",
                    "message": "calcInterest in NanoLoanModel._getObligation (NanoLoanModel.sol#860) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 995,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 pending;\n",
                    "message": "pending in NanoLoanModel._addInterest (NanoLoanModel.sol#995) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 994,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 newTimestamp;\n",
                    "message": "newTimestamp in NanoLoanModel._addInterest (NanoLoanModel.sol#994) is a local variable never initialiazed\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (NanoLoanModel.sol#496-501)\n\t- NanoLoanModel.sol#498-500\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": 510,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (NanoLoanModel.sol#503-510)\n\t- NanoLoanModel.sol#505-509\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#512-522)\n\t- NanoLoanModel.sol#517-521\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 542,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#524-542)\n\t- NanoLoanModel.sol#530-540\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": 567,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#544-567)\n\t- NanoLoanModel.sol#551-565\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": 597,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#569-597)\n\t- NanoLoanModel.sol#577-595\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": 632,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#599-632)\n\t- NanoLoanModel.sol#608-630\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 679,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#634-679)\n\t- NanoLoanModel.sol#651-677\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in NanoLoanModel.sol:\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#18): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#341): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#357): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#378): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#411): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#464): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#492): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#685): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (NanoLoanModel.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal _owner;\n",
                    "message": "Variable 'Ownable._owner' (NanoLoanModel.sol#381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (NanoLoanModel.sol#454-459) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (NanoLoanModel.sol#419) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#513) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (NanoLoanModel.sol#514) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#525) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#545) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#570) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#600) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#635) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 720,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    event _setEngine(address _engine);\n",
                    "message": "Event 'NanoLoanModel._setEngine' (NanoLoanModel.sol#720) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 721,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    event _setDescriptor(address _descriptor);\n",
                    "message": "Event 'NanoLoanModel._setDescriptor' (NanoLoanModel.sol#721) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    event _setInterest(bytes32 _id, uint128 _interest);\n",
                    "message": "Event 'NanoLoanModel._setInterest' (NanoLoanModel.sol#722) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    event _setPunitoryInterest(bytes32 _id, uint128 _punitoryInterest);\n",
                    "message": "Event 'NanoLoanModel._setPunitoryInterest' (NanoLoanModel.sol#723) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    event _setInterestTimestamp(bytes32 _id, uint256 _interestTimestamp);\n",
                    "message": "Event 'NanoLoanModel._setInterestTimestamp' (NanoLoanModel.sol#724) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isOperator(address _target) external view returns (bool) {\n",
                    "message": "Parameter '_target' of NanoLoanModel.isOperator (NanoLoanModel.sol#789) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addDebt(bytes32, uint256) external onlyEngine returns (bool) {\n",
                    "message": "Parameter '' of NanoLoanModel.addDebt (NanoLoanModel.sol#1064) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addDebt(bytes32, uint256) external onlyEngine returns (bool) {\n",
                    "message": "Parameter '_scope_0' of NanoLoanModel.addDebt (NanoLoanModel.sol#1064) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simFirstObligation(bytes calldata _data) external view returns (uint256 amount, uint256 cancelableAt) {\n",
                    "message": "Parameter '_data' of NanoLoanModel.simFirstObligation (NanoLoanModel.sol#1115) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simTotalObligation(bytes calldata _data) external view returns (uint256 amount) {\n",
                    "message": "Parameter '_data' of NanoLoanModel.simTotalObligation (NanoLoanModel.sol#1122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simDuration(bytes calldata _data) external view returns (uint256 duration) {\n",
                    "message": "Parameter '_data' of NanoLoanModel.simDuration (NanoLoanModel.sol#1130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simPunitiveInterestRate(bytes calldata _data) external view returns (uint256 punitiveInterestRate) {\n",
                    "message": "Parameter '_data' of NanoLoanModel.simPunitiveInterestRate (NanoLoanModel.sol#1134) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEngine(address _engine) external onlyOwner returns (bool) {\n",
                    "message": "Parameter '_engine' of NanoLoanModel.setEngine (NanoLoanModel.sol#761) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDescriptor(address _descriptor) external onlyOwner returns (bool) {\n",
                    "message": "Parameter '_descriptor' of NanoLoanModel.setDescriptor (NanoLoanModel.sol#767) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 774,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _amount,\n",
                    "message": "Parameter '_amount' of NanoLoanModel.encodeData (NanoLoanModel.sol#774) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _interestRate,\n",
                    "message": "Parameter '_interestRate' of NanoLoanModel.encodeData (NanoLoanModel.sol#775) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _interestRatePunitory,\n",
                    "message": "Parameter '_interestRatePunitory' of NanoLoanModel.encodeData (NanoLoanModel.sol#776) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint64  _dueTime,\n",
                    "message": "Parameter '_dueTime' of NanoLoanModel.encodeData (NanoLoanModel.sol#777) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 778,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint64  _cancelableAt\n",
                    "message": "Parameter '_cancelableAt' of NanoLoanModel.encodeData (NanoLoanModel.sol#778) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 823,
                    "vulnerability_to_line": 839,
                    "vulnerability_code": "    function _validate(\n\n        uint128 _amount,\n\n        uint256 _interestRate,\n\n        uint256 _interestRatePunitory,\n\n        uint64 _duesIn,\n\n        uint64 _cancelableAt\n\n    ) internal view {\n\n        require(_cancelableAt <= _duesIn, \"The cancelableAt should be less or equal than duesIn\");\n\n        require(_interestRate > 1000, \"Interest rate too high\");\n\n        require(_interestRatePunitory > 1000, \"Punitory interest rate too high\");\n\n        require(_amount != 0, \"amount can't be 0\");\n\n\n\n        require(uint64(now) + _duesIn > uint64(now), \"duesIn should be not 0 or overflow now plus duesIn\");\n\n        // cancelableAt cant make overflow because:\n\n        //     cancelableAt <= duesIn\n\n        // and we check the sum of duesIn and now in the previus requiere\n",
                    "message": "Function 'NanoLoanModel._validate' (NanoLoanModel.sol#823-839) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 824,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _amount,\n",
                    "message": "Parameter '_amount' of NanoLoanModel._validate (NanoLoanModel.sol#824) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _interestRate,\n",
                    "message": "Parameter '_interestRate' of NanoLoanModel._validate (NanoLoanModel.sol#825) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _interestRatePunitory,\n",
                    "message": "Parameter '_interestRatePunitory' of NanoLoanModel._validate (NanoLoanModel.sol#826) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 827,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint64 _duesIn,\n",
                    "message": "Parameter '_duesIn' of NanoLoanModel._validate (NanoLoanModel.sol#827) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 828,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint64 _cancelableAt\n",
                    "message": "Parameter '_cancelableAt' of NanoLoanModel._validate (NanoLoanModel.sol#828) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": 878,
                    "vulnerability_code": "    function _getObligation(bytes32 id, uint256 timestamp) internal view returns (uint256 total){\n\n        State storage state = states[id];\n\n        if (state.status == STATUS_PAID)\n\n            return 0;\n\n        Config storage config = configs[id];\n\n\n\n        uint256 calcInterest;\n\n        uint256 endNonPunitory = min(timestamp, config.dueTime);\n\n\n\n        if (state.paid < config.amount)\n\n            total = config.amount - state.paid;\n\n\n\n        if (state.interestTimestamp < endNonPunitory)\n\n            (, calcInterest) = _calculateInterest(endNonPunitory - state.interestTimestamp, config.interestRate, total);\n\n\n\n        if (timestamp > config.dueTime && timestamp > state.interestTimestamp) {\n\n            uint256 debt = config.amount.add(calcInterest).add(state.interest);\n\n            uint256 pending = min(debt, debt.add(state.punitoryInterest).sub(state.paid));\n\n\n\n            (, debt) = _calculateInterest(timestamp - max(config.dueTime, state.interestTimestamp), config.interestRatePunitory, pending);// cant overflow, check in the previus if\n\n            calcInterest = debt.add(calcInterest);\n\n        }\n\n\n\n        total = total.add(calcInterest).add(state.interest).add(state.punitoryInterest);\n",
                    "message": "Function 'NanoLoanModel._getObligation' (NanoLoanModel.sol#854-878) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 985,
                    "vulnerability_to_line": 1039,
                    "vulnerability_code": "    function _addInterest(bytes32 id, uint256 timestamp) internal returns(bool) {\n\n        Config storage config = configs[id];\n\n        State storage state = states[id];\n\n\n\n        uint256 newInterest = state.interest;\n\n\n\n        uint256 realDelta;\n\n        uint256 calculatedInterest;\n\n\n\n        uint256 newTimestamp;\n\n        uint256 pending;\n\n        if (state.interestTimestamp < timestamp) {\n\n            uint256 endNonPunitory = min(timestamp, config.dueTime);\n\n            if (state.interestTimestamp < endNonPunitory) {\n\n                if (state.paid < config.amount)\n\n                    pending = config.amount - state.paid;// cant overflow, check in if-condition\n\n\n\n                (realDelta, calculatedInterest) = _calculateInterest(endNonPunitory - state.interestTimestamp, config.interestRate, pending);// cant overflow, check in if-condition\n\n                newInterest = calculatedInterest.add(newInterest);\n\n                newTimestamp = state.interestTimestamp.add(realDelta);\n\n            }\n\n\n\n            uint256 startPunitory;\n\n            uint256 newPunitoryInterest;\n\n            if (config.dueTime < timestamp) {\n\n                startPunitory = max(config.dueTime, state.interestTimestamp);\n\n                uint256 debt = config.amount.add(newInterest);\n\n                newPunitoryInterest = state.punitoryInterest;\n\n                pending = min(debt, debt.add(newPunitoryInterest).sub(state.paid));\n\n\n\n                (realDelta, calculatedInterest) = _calculateInterest(timestamp - startPunitory, config.interestRatePunitory, pending);// cant overflow, check in the previus if\n\n                newPunitoryInterest = newPunitoryInterest.add(calculatedInterest);\n\n                newTimestamp = startPunitory.add(realDelta);\n\n            }\n\n\n\n            if (newInterest != state.interest || newPunitoryInterest != state.punitoryInterest) {\n\n                require(newTimestamp < U_64_OVERFLOW, \"newTimestamp overflow\");\n\n                state.interestTimestamp = uint64(newTimestamp);\n\n                emit _setInterestTimestamp(id, newTimestamp);\n\n\n\n                if (newInterest != state.interest) {\n\n                    require(newInterest < U_128_OVERFLOW, \"newInterest overflow\");\n\n                    state.interest = uint128(newInterest);\n\n                    emit _setInterest(id, uint128(newInterest));\n\n                }\n\n\n\n                if (newPunitoryInterest != state.punitoryInterest) {\n\n                    require(newPunitoryInterest < U_128_OVERFLOW, \"newPunitoryInterest overflow\");\n\n                    state.punitoryInterest = uint128(newPunitoryInterest);\n\n                    emit _setPunitoryInterest(id, uint128(newPunitoryInterest));\n\n                }\n\n                return true;\n\n            }\n\n        }\n",
                    "message": "Function 'NanoLoanModel._addInterest' (NanoLoanModel.sol#985-1039) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": 1062,
                    "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
                    "message": "Function 'NanoLoanModel._calculateInterest' (NanoLoanModel.sol#1051-1062) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": 1112,
                    "vulnerability_code": "    function _decodeData(\n\n        bytes memory _data\n\n    ) internal pure returns (uint128, uint256, uint256, uint64, uint64) {\n\n        require(_data.length == L_DATA, \"Invalid data length\");\n\n        (bytes32 amount, bytes32 interestRate, bytes32 interestRatePunitory,\n\n            bytes32 duesIn, bytes32 cancelableAt) = decode(_data, 16, 32, 32, 8, 8);\n\n        return (\n\n            uint128(uint256(amount)),\n\n            uint256(interestRate),\n\n            uint256(interestRatePunitory),\n\n            uint64(uint256(duesIn)),\n\n            uint64(uint256(cancelableAt))\n\n        );\n",
                    "message": "Function 'NanoLoanModel._decodeData' (NanoLoanModel.sol#1099-1112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of NanoLoanModel._decodeData (NanoLoanModel.sol#1100) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterface;\n",
                    "message": "NanoLoanModel._supportedInterface (NanoLoanModel.sol#713) is never used in NanoLoanModel\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant MODEL_INTERFACE = 0xaf498c35;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant MODEL_DESCRIPTOR_INTERFACE = 0x02735375;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXACT_TIME",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        defined = timestamp == now || timestamp <= states[id].interestTimestamp;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addDebt(bytes32, uint256) external onlyEngine returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEngine(address _engine) external onlyOwner returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDescriptor(address _descriptor) external onlyOwner returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private altDescriptor;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterface;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant U_128_OVERFLOW = 2 ** 128;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant U_64_OVERFLOW = 2 ** 64;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint128;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint64;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256 amount, bool defined);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simFirstObligation(bytes calldata data) external view returns (uint256 amount, uint256 time);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 642,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256 amount, bool defined) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1055,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (uint256 realDelta, uint256 interest) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (uint128, uint256, uint256, uint64, uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simFirstObligation(bytes calldata _data) external view returns (uint256 amount, uint256 cancelableAt) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/diaspore/model/InstallmentsModel.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 663,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract InstallmentsModel is ERC165, BytesUtils, Ownable, Model, ModelDescriptor {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 668,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(MODEL_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(MODEL_DESCRIPTOR_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 650,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 711,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == engine, \"Only engine allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 748,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(configs[id].cuota == 0, \"Entry already exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 783,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(available < U_128_OVERFLOW, \"Amount overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(paid < U_128_OVERFLOW, \"Paid overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 836,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert(\"Not implemented!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(target <= now, \"Forbidden advance clock into the future\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(lentTime < target, \"Clock can't go negative\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 846,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(targetClock > state.clock, \"Clock is ahead of target\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(config.lentTime != 0, \"The registry does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1015,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(newClock < U_64_OVERFLOW, \"Clock overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1016,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(newInterest < U_128_OVERFLOW, \"Interest overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newInterest < U_128_OVERFLOW, \"New interest overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(cuota > 0, \"Cuota can't be 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(installments > 0, \"Installments can't be 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(timeUnit > 0, \"Time unit can't be 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(timeUnit <= duration, \"Time unit must be lower or equal than installment duration\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(timeUnit < interestRate, \"Interest rate by time unit is too low\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length == L_DATA, \"Invalid data length\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 813,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                if (clock / duration >= config.installments && baseDebt + interest <= paid) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    // Registry paid!\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    state.status = uint8(STATUS_PAID);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    emit ChangedStatus(id, now, STATUS_PAID);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 817,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    break;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (nextInstallmentDelta <= _targetDelta && _clock / _duration < _installments) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            delta = nextInstallmentDelta;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            installmentCompleted = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            delta = _targetDelta;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            installmentCompleted = false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(target <= now, \"Forbidden advance clock into the future\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(timeUnit <= duration, \"Time unit must be lower or equal than installment duration\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(timeUnit < interestRate, \"Interest rate by time unit is too low\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_87"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (InstallmentsModel.sol#468-473) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": 482,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (InstallmentsModel.sol#475-482) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (InstallmentsModel.sol#484-494) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (InstallmentsModel.sol#496-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": 539,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (InstallmentsModel.sol#516-539) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": 569,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (InstallmentsModel.sol#541-569) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": 604,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (InstallmentsModel.sol#571-604) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": 651,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (InstallmentsModel.sol#606-651) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 767,
                    "vulnerability_code": "    function create(bytes32 id, bytes calldata data) external onlyEngine returns (bool) {\n\n        require(configs[id].cuota == 0, \"Entry already exist\");\n\n\n\n        (uint128 cuota, uint256 interestRate, uint24 installments, uint40 duration, uint32 timeUnit) = _validate(data);\n\n\n\n        configs[id] = Config({\n\n            installments: installments,\n\n            duration: duration,\n\n            lentTime: uint64(now),\n\n            cuota: cuota,\n\n            interestRate: interestRate,\n\n            timeUnit: timeUnit\n\n        });\n\n\n\n        states[id].clock = duration;\n\n\n\n        emit Created(id);\n\n        emit _setClock(id, duration);\n\n\n\n        return true;\n",
                    "message": "InstallmentsModel.create (InstallmentsModel.sol#747-767) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].cuota == 0,Entry already exist)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (InstallmentsModel.sol#468-473)\n\t- InstallmentsModel.sol#470-472\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": 482,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (InstallmentsModel.sol#475-482)\n\t- InstallmentsModel.sol#477-481\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#484-494)\n\t- InstallmentsModel.sol#489-493\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#496-514)\n\t- InstallmentsModel.sol#502-512\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": 539,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#516-539)\n\t- InstallmentsModel.sol#523-537\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": 569,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#541-569)\n\t- InstallmentsModel.sol#549-567\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": 604,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#571-604)\n\t- InstallmentsModel.sol#580-602\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": 651,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#606-651)\n\t- InstallmentsModel.sol#623-649\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in InstallmentsModel.sol:\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#18): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#341): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#357): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#378): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#411): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#464): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#657): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (InstallmentsModel.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal _owner;\n",
                    "message": "Variable 'Ownable._owner' (InstallmentsModel.sol#381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (InstallmentsModel.sol#454-459) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (InstallmentsModel.sol#419) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#485) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (InstallmentsModel.sol#486) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#497) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#517) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#542) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 572,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#572) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#607) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    event _setEngine(address _engine);\n",
                    "message": "Event 'InstallmentsModel._setEngine' (InstallmentsModel.sol#685) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 686,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    event _setDescriptor(address _descriptor);\n",
                    "message": "Event 'InstallmentsModel._setDescriptor' (InstallmentsModel.sol#686) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    event _setClock(bytes32 _id, uint64 _to);\n",
                    "message": "Event 'InstallmentsModel._setClock' (InstallmentsModel.sol#688) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 689,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    event _setPaidBase(bytes32 _id, uint128 _paidBase);\n",
                    "message": "Event 'InstallmentsModel._setPaidBase' (InstallmentsModel.sol#689) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 690,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    event _setInterest(bytes32 _id, uint128 _interest);\n",
                    "message": "Event 'InstallmentsModel._setInterest' (InstallmentsModel.sol#690) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isOperator(address _target) external view returns (bool) {\n",
                    "message": "Parameter '_target' of InstallmentsModel.isOperator (InstallmentsModel.sol#850) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 971,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simFirstObligation(bytes calldata _data) external view returns (uint256 amount, uint256 time) {\n",
                    "message": "Parameter '_data' of InstallmentsModel.simFirstObligation (InstallmentsModel.sol#971) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simTotalObligation(bytes calldata _data) external view returns (uint256 amount) {\n",
                    "message": "Parameter '_data' of InstallmentsModel.simTotalObligation (InstallmentsModel.sol#975) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 980,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simDuration(bytes calldata _data) external view returns (uint256 duration) {\n",
                    "message": "Parameter '_data' of InstallmentsModel.simDuration (InstallmentsModel.sol#980) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 985,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simPunitiveInterestRate(bytes calldata _data) external view returns (uint256 punitiveInterestRate) {\n",
                    "message": "Parameter '_data' of InstallmentsModel.simPunitiveInterestRate (InstallmentsModel.sol#985) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 989,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simFrequency(bytes calldata _data) external view returns (uint256 frequency) {\n",
                    "message": "Parameter '_data' of InstallmentsModel.simFrequency (InstallmentsModel.sol#989) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 993,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simInstallments(bytes calldata _data) external view returns (uint256 installments) {\n",
                    "message": "Parameter '_data' of InstallmentsModel.simInstallments (InstallmentsModel.sol#993) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEngine(address _engine) external onlyOwner returns (bool) {\n",
                    "message": "Parameter '_engine' of InstallmentsModel.setEngine (InstallmentsModel.sol#725) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDescriptor(address _descriptor) external onlyOwner returns (bool) {\n",
                    "message": "Parameter '_descriptor' of InstallmentsModel.setDescriptor (InstallmentsModel.sol#731) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _cuota,\n",
                    "message": "Parameter '_cuota' of InstallmentsModel.encodeData (InstallmentsModel.sol#738) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _interestRate,\n",
                    "message": "Parameter '_interestRate' of InstallmentsModel.encodeData (InstallmentsModel.sol#739) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint24 _installments,\n",
                    "message": "Parameter '_installments' of InstallmentsModel.encodeData (InstallmentsModel.sol#740) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 741,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint40 _duration,\n",
                    "message": "Parameter '_duration' of InstallmentsModel.encodeData (InstallmentsModel.sol#741) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint32 _timeUnit\n",
                    "message": "Parameter '_timeUnit' of InstallmentsModel.encodeData (InstallmentsModel.sol#742) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 910,
                    "vulnerability_to_line": 928,
                    "vulnerability_code": "    function _simRunClock(\n\n        uint256 _clock,\n\n        uint256 _targetClock,\n\n        uint256 _prevInterest,\n\n        Config memory _config,\n\n        State memory _state\n\n    ) internal pure returns (uint256 interest, uint256 clock) {\n\n        (interest, clock) = _runAdvanceClock({\n\n            _clock: _clock,\n\n            _timeUnit: _config.timeUnit,\n\n            _interest: _prevInterest,\n\n            _duration: _config.duration,\n\n            _cuota: _config.cuota,\n\n            _installments: _config.installments,\n\n            _paidBase: _state.paidBase,\n\n            _interestRate: _config.interestRate,\n\n            _targetClock: _targetClock\n\n        });\n",
                    "message": "Function 'InstallmentsModel._simRunClock' (InstallmentsModel.sol#910-928) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _clock,\n",
                    "message": "Parameter '_clock' of InstallmentsModel._simRunClock (InstallmentsModel.sol#911) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _targetClock,\n",
                    "message": "Parameter '_targetClock' of InstallmentsModel._simRunClock (InstallmentsModel.sol#912) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 913,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _prevInterest,\n",
                    "message": "Parameter '_prevInterest' of InstallmentsModel._simRunClock (InstallmentsModel.sol#913) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 914,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Config memory _config,\n",
                    "message": "Parameter '_config' of InstallmentsModel._simRunClock (InstallmentsModel.sol#914) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        State memory _state\n",
                    "message": "Parameter '_state' of InstallmentsModel._simRunClock (InstallmentsModel.sol#915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": 1029,
                    "vulnerability_code": "    function _advanceClock(bytes32 id, uint256 _target) internal returns (bool) {\n\n        Config storage config = configs[id];\n\n        State storage state = states[id];\n\n\n\n        uint256 clock = state.clock;\n\n        if (clock < _target) {\n\n            (uint256 newInterest, uint256 newClock) = _runAdvanceClock({\n\n                _clock: clock,\n\n                _timeUnit: config.timeUnit,\n\n                _interest: state.interest,\n\n                _duration: config.duration,\n\n                _cuota: config.cuota,\n\n                _installments: config.installments,\n\n                _paidBase: state.paidBase,\n\n                _interestRate: config.interestRate,\n\n                _targetClock: _target\n\n            });\n\n\n\n            require(newClock < U_64_OVERFLOW, \"Clock overflow\");\n\n            require(newInterest < U_128_OVERFLOW, \"Interest overflow\");\n\n\n\n            emit _setClock(id, uint64(newClock));\n\n\n\n            if (newInterest != 0) {\n\n                emit _setInterest(id, uint128(newInterest));\n\n            }\n\n\n\n            state.clock = uint64(newClock);\n\n            state.interest = uint128(newInterest);\n\n\n\n            return true;\n\n        }\n",
                    "message": "Function 'InstallmentsModel._advanceClock' (InstallmentsModel.sol#997-1029) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _advanceClock(bytes32 id, uint256 _target) internal returns (bool) {\n",
                    "message": "Parameter '_target' of InstallmentsModel._advanceClock (InstallmentsModel.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1031,
                    "vulnerability_to_line": 1062,
                    "vulnerability_code": "    function _getClosingObligation(bytes32 id) internal view returns (uint256) {\n\n        State storage state = states[id];\n\n        Config storage config = configs[id];\n\n\n\n        // Static storage loads\n\n        uint256 installments = config.installments;\n\n        uint256 cuota = config.cuota;\n\n        uint256 currentClock = uint64(now) - config.lentTime;\n\n\n\n        uint256 interest;\n\n        uint256 clock = state.clock;\n\n\n\n        if (clock >= currentClock) {\n\n            interest = state.interest;\n\n        } else {\n\n            (interest,) = _runAdvanceClock({\n\n                _clock: clock,\n\n                _timeUnit: config.timeUnit,\n\n                _interest: state.interest,\n\n                _duration: config.duration,\n\n                _cuota: cuota,\n\n                _installments: installments,\n\n                _paidBase: state.paidBase,\n\n                _interestRate: config.interestRate,\n\n                _targetClock: currentClock\n\n            });\n\n        }\n\n\n\n        uint256 debt = cuota * installments + interest;\n\n        uint256 paid = state.paid;\n\n        return debt > paid ? debt - paid : 0;\n",
                    "message": "Function 'InstallmentsModel._getClosingObligation' (InstallmentsModel.sol#1031-1062) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": 1112,
                    "vulnerability_code": "    function _runAdvanceClock(\n\n        uint256 _clock,\n\n        uint256 _timeUnit,\n\n        uint256 _interest,\n\n        uint256 _duration,\n\n        uint256 _cuota,\n\n        uint256 _installments,\n\n        uint256 _paidBase,\n\n        uint256 _interestRate,\n\n        uint256 _targetClock\n\n    ) internal pure returns (uint256 interest, uint256 clock) {\n\n        // Advance clock to lentTime if never advanced before\n\n        clock = _clock;\n\n        interest = _interest;\n\n\n\n        // Aux variables\n\n        uint256 delta;\n\n        bool installmentCompleted;\n\n\n\n        do {\n\n            // Delta to next installment and absolute delta (no exceeding 1 installment)\n\n            (delta, installmentCompleted) = _calcDelta({\n\n                _targetDelta: _targetClock - clock,\n\n                _clock: clock,\n\n                _duration: _duration,\n\n                _installments: _installments\n\n            });\n\n\n\n            // Running debt\n\n            uint256 newInterest = _newInterest({\n\n                _clock: clock,\n\n                _timeUnit: _timeUnit,\n\n                _duration: _duration,\n\n                _installments: _installments,\n\n                _cuota: _cuota,\n\n                _paidBase: _paidBase,\n\n                _delta: delta,\n\n                _interestRate: _interestRate\n\n            });\n\n\n\n            // Don't change clock unless we have a change\n\n            if (installmentCompleted || newInterest > 0) {\n\n                clock += delta;\n\n                interest += newInterest;\n\n            } else {\n\n                break;\n\n            }\n\n        } while (clock < _targetClock);\n",
                    "message": "Function 'InstallmentsModel._runAdvanceClock' (InstallmentsModel.sol#1064-1112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1065,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _clock,\n",
                    "message": "Parameter '_clock' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1065) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1066,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _timeUnit,\n",
                    "message": "Parameter '_timeUnit' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1066) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1067,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _interest,\n",
                    "message": "Parameter '_interest' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1067) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _duration,\n",
                    "message": "Parameter '_duration' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1068) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1069,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _cuota,\n",
                    "message": "Parameter '_cuota' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1069) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1070,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _installments,\n",
                    "message": "Parameter '_installments' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1070) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1071,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _paidBase,\n",
                    "message": "Parameter '_paidBase' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1071) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1072,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _interestRate,\n",
                    "message": "Parameter '_interestRate' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1072) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _targetClock\n",
                    "message": "Parameter '_targetClock' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1073) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1114,
                    "vulnerability_to_line": 1128,
                    "vulnerability_code": "    function _calcDelta(\n\n        uint256 _targetDelta,\n\n        uint256 _clock,\n\n        uint256 _duration,\n\n        uint256 _installments\n\n    ) internal pure returns (uint256 delta, bool installmentCompleted) {\n\n        uint256 nextInstallmentDelta = _duration - _clock % _duration;\n\n        if (nextInstallmentDelta <= _targetDelta && _clock / _duration < _installments) {\n\n            delta = nextInstallmentDelta;\n\n            installmentCompleted = true;\n\n        } else {\n\n            delta = _targetDelta;\n\n            installmentCompleted = false;\n\n        }\n",
                    "message": "Function 'InstallmentsModel._calcDelta' (InstallmentsModel.sol#1114-1128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _targetDelta,\n",
                    "message": "Parameter '_targetDelta' of InstallmentsModel._calcDelta (InstallmentsModel.sol#1115) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _clock,\n",
                    "message": "Parameter '_clock' of InstallmentsModel._calcDelta (InstallmentsModel.sol#1116) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _duration,\n",
                    "message": "Parameter '_duration' of InstallmentsModel._calcDelta (InstallmentsModel.sol#1117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _installments\n",
                    "message": "Parameter '_installments' of InstallmentsModel._calcDelta (InstallmentsModel.sol#1118) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1130,
                    "vulnerability_to_line": 1144,
                    "vulnerability_code": "    function _newInterest(\n\n        uint256 _clock,\n\n        uint256 _timeUnit,\n\n        uint256 _duration,\n\n        uint256 _installments,\n\n        uint256 _cuota,\n\n        uint256 _paidBase,\n\n        uint256 _delta,\n\n        uint256 _interestRate\n\n    ) internal pure returns (uint256) {\n\n        uint256 runningDebt = _baseDebt(_clock, _duration, _installments, _cuota) - _paidBase;\n\n        uint256 newInterest = (100000 * (_delta / _timeUnit) * runningDebt) / (_interestRate / _timeUnit);\n\n        require(newInterest < U_128_OVERFLOW, \"New interest overflow\");\n\n        return newInterest;\n",
                    "message": "Function 'InstallmentsModel._newInterest' (InstallmentsModel.sol#1130-1144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _clock,\n",
                    "message": "Parameter '_clock' of InstallmentsModel._newInterest (InstallmentsModel.sol#1131) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _timeUnit,\n",
                    "message": "Parameter '_timeUnit' of InstallmentsModel._newInterest (InstallmentsModel.sol#1132) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _duration,\n",
                    "message": "Parameter '_duration' of InstallmentsModel._newInterest (InstallmentsModel.sol#1133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _installments,\n",
                    "message": "Parameter '_installments' of InstallmentsModel._newInterest (InstallmentsModel.sol#1134) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _cuota,\n",
                    "message": "Parameter '_cuota' of InstallmentsModel._newInterest (InstallmentsModel.sol#1135) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _paidBase,\n",
                    "message": "Parameter '_paidBase' of InstallmentsModel._newInterest (InstallmentsModel.sol#1136) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _delta,\n",
                    "message": "Parameter '_delta' of InstallmentsModel._newInterest (InstallmentsModel.sol#1137) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _interestRate\n",
                    "message": "Parameter '_interestRate' of InstallmentsModel._newInterest (InstallmentsModel.sol#1138) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1146,
                    "vulnerability_to_line": 1154,
                    "vulnerability_code": "    function _baseDebt(\n\n        uint256 clock,\n\n        uint256 duration,\n\n        uint256 installments,\n\n        uint256 cuota\n\n    ) internal pure returns (uint256 base) {\n\n        uint256 installment = clock / duration;\n\n        return uint128(installment < installments ? installment * cuota : installments * cuota);\n",
                    "message": "Function 'InstallmentsModel._baseDebt' (InstallmentsModel.sol#1146-1154) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1156,
                    "vulnerability_to_line": 1167,
                    "vulnerability_code": "    function _validate(\n\n        bytes memory _data\n\n    ) internal pure returns (uint128 cuota, uint256 interestRate, uint24 installments, uint40 duration, uint32 timeUnit) {\n\n        (cuota, interestRate, installments, duration, timeUnit) = _decodeData(_data);\n\n\n\n        require(cuota > 0, \"Cuota can't be 0\");\n\n        require(installments > 0, \"Installments can't be 0\");\n\n        require(timeUnit > 0, \"Time unit can't be 0\");\n\n\n\n        require(timeUnit <= duration, \"Time unit must be lower or equal than installment duration\");\n\n        require(timeUnit < interestRate, \"Interest rate by time unit is too low\");\n",
                    "message": "Function 'InstallmentsModel._validate' (InstallmentsModel.sol#1156-1167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of InstallmentsModel._validate (InstallmentsModel.sol#1157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1169,
                    "vulnerability_to_line": 1181,
                    "vulnerability_code": "    function _decodeData(\n\n        bytes memory _data\n\n    ) internal pure returns (uint128, uint256, uint24, uint40, uint32) {\n\n        require(_data.length == L_DATA, \"Invalid data length\");\n\n        (\n\n            bytes32 cuota,\n\n            bytes32 interestRate,\n\n            bytes32 installments,\n\n            bytes32 duration,\n\n            bytes32 timeUnit\n\n        ) = decode(_data, 16, 32, 3, 5, 4);\n\n        return (uint128(uint256(cuota)), uint256(interestRate), uint24(uint256(installments)), uint40(uint256(duration)), uint32(uint256(timeUnit)));\n",
                    "message": "Function 'InstallmentsModel._decodeData' (InstallmentsModel.sol#1169-1181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of InstallmentsModel._decodeData (InstallmentsModel.sol#1170) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterface;\n",
                    "message": "InstallmentsModel._supportedInterface (InstallmentsModel.sol#665) is never used in InstallmentsModel\nInstallmentsModel.U_40_OVERFLOW (InstallmentsModel.sol#682) is never used in InstallmentsModel\nInstallmentsModel.U_24_OVERFLOW (InstallmentsModel.sol#683) is never used in InstallmentsModel\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant MODEL_INTERFACE = 0xaf498c35;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant MODEL_DESCRIPTOR_INTERFACE = 0x02735375;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 1141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 newInterest = (100000 * (_delta / _timeUnit) * runningDebt) / (_interestRate / _timeUnit);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 1141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 newInterest = (100000 * (_delta / _timeUnit) * runningDebt) / (_interestRate / _timeUnit);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addDebt(bytes32 id, uint256 amount) external onlyEngine returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEngine(address _engine) external onlyOwner returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDescriptor(address _descriptor) external onlyOwner returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterface;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private altDescriptor;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant U_128_OVERFLOW = 2 ** 128;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 681,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant U_64_OVERFLOW = 2 ** 64;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant U_40_OVERFLOW = 2 ** 40;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant U_24_OVERFLOW = 2 ** 24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256 amount, bool defined);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simFirstObligation(bytes calldata data) external view returns (uint256 amount, uint256 time);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256, bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (uint256 interest, uint256 clock) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 971,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simFirstObligation(bytes calldata _data) external view returns (uint256 amount, uint256 time) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1074,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (uint256 interest, uint256 clock) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (uint256 delta, bool installmentCompleted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (uint128 cuota, uint256 interestRate, uint24 installments, uint40 duration, uint32 timeUnit) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (uint128, uint256, uint24, uint40, uint32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/diaspore/interfaces/LoanCallback.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in LoanCallback.sol:\n\t- pragma solidity^0.5.11 (LoanCallback.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/diaspore/interfaces/Model.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in Model.sol:\n\t- pragma solidity^0.5.11 (Model.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (Model.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant MODEL_INTERFACE = 0xaf498c35;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256 amount, bool defined);\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/diaspore/interfaces/RateOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in RateOracle.sol:\n\t- pragma solidity^0.5.11 (RateOracle.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (RateOracle.sol#18): it allows old versions\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
                    "message": "RateOracle.RATE_ORACLE_INTERFACE (RateOracle.sol#31) is never used in RateOracle\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent);\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/diaspore/interfaces/ModelDescriptor.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in ModelDescriptor.sol:\n\t- pragma solidity^0.5.11 (ModelDescriptor.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant MODEL_DESCRIPTOR_INTERFACE = 0x02735375;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function simFirstObligation(bytes calldata data) external view returns (uint256 amount, uint256 time);\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/core/diaspore/interfaces/LoanApprover.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in LoanApprover.sol:\n\t- pragma solidity^0.5.11 (LoanApprover.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (LoanApprover.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function settleApproveRequest(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _loanData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _isBorrower,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _id\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        external returns (bytes32);\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/commons/Ownable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in Ownable.sol:\n\t- pragma solidity^0.5.11 (Ownable.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (Ownable.sol#24): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (Ownable.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal _owner;\n",
                    "message": "Variable 'Ownable._owner' (Ownable.sol#27) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/commons/SimpleDelegable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract SimpleDelegable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(delegates[msg.sender], \"Only delegable\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "    function isDelegate(address _delegate) public view returns (bool) {\n\n        return delegates[_delegate];\n",
                    "message": "SimpleDelegable.isDelegate (SimpleDelegable.sol#77-79) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in SimpleDelegable.sol:\n\t- pragma solidity^0.5.11 (SimpleDelegable.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (SimpleDelegable.sol#24): it allows old versions\n\t- pragma solidity^0.5.11 (SimpleDelegable.sol#57): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (SimpleDelegable.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal _owner;\n",
                    "message": "Variable 'Ownable._owner' (SimpleDelegable.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addDelegate(address _delegate) external onlyOwner returns (bool) {\n",
                    "message": "Parameter '_delegate' of SimpleDelegable.addDelegate (SimpleDelegable.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeDelegate(address _delegate) external onlyOwner returns (bool) {\n",
                    "message": "Parameter '_delegate' of SimpleDelegable.removeDelegate (SimpleDelegable.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isDelegate(address _delegate) public view returns (bool) {\n",
                    "message": "Parameter '_delegate' of SimpleDelegable.isDelegate (SimpleDelegable.sol#77) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => bool) delegates;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/commons/ERC721Base.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _to,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ERC721_RECEIVED,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    msg.sender,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    holder,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _assetId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _userData\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                (success, result) = _noThrowCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _to,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        ERC721_RECEIVED_LEGACY,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        holder,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _assetId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _userData\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_METADATA_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < _allTokens.length, \"Index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_owner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_operator != address(0), \"0x0 is an invalid operator\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_target != address(0), \"Target can't be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 574,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Contract rejected the token\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 574,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Contract rejected the token\"\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_doCheck && _to.isContract()) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Call dest contract\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Perform check with the new safe call\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // onERC721Received(address,address,uint256,bytes)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _to,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ERC721_RECEIVED,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    msg.sender,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    holder,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _assetsOf[_from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_70"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract (ERC721Base.sol#103-107) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": 604,
                    "vulnerability_code": "contract ERC721Base is ERC165 {\n\n    using SafeMath for uint256;\n\n    using IsContract for address;\n\n\n\n    mapping(uint256 => address) private _holderOf;\n\n\n\n    // Owner to array of assetId\n\n    mapping(address => uint256[]) private _assetsOf;\n\n    // AssetId to index on array in _assetsOf mapping\n\n    mapping(uint256 => uint256) private _indexOfAsset;\n\n\n\n    mapping(address => mapping(address => bool)) private _operators;\n\n    mapping(uint256 => address) private _approval;\n\n\n\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n\n    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n\n    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n\n    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n\n\n\n    constructor(\n\n        string memory name,\n\n        string memory symbol\n\n    ) public {\n\n        _name = name;\n\n        _symbol = symbol;\n\n\n\n        _registerInterface(ERC_721_INTERFACE);\n\n        _registerInterface(ERC_721_METADATA_INTERFACE);\n\n        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Metadata\n\n    // ///\n\n\n\n    /// ERC-721 Non-Fungible Token Standard, optional metadata extension\n\n    /// See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    /// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n\n\n\n    event SetURIProvider(address _uriProvider);\n\n\n\n    string private _name;\n\n    string private _symbol;\n\n\n\n    URIProvider private _uriProvider;\n\n\n\n    // @notice A descriptive name for a collection of NFTs in this contract\n\n    function name() external view returns (string memory) {\n\n        return _name;\n\n    }\n\n\n\n    // @notice An abbreviated name for NFTs in this contract\n\n    function symbol() external view returns (string memory) {\n\n        return _symbol;\n\n    }\n\n\n\n    /**\n\n    * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n\n    * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n\n    *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n\n    *  Metadata JSON Schema\".\n\n    */\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n\n        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n\n        URIProvider provider = _uriProvider;\n\n        return address(provider) == address(0) ? \"\" : provider.tokenURI(_tokenId);\n\n    }\n\n\n\n    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Enumeration\n\n    // ///\n\n\n\n    ///  ERC-721 Non-Fungible Token Standard, optional enumeration extension\n\n    ///  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    ///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\n\n\n\n    uint256[] private _allTokens;\n\n\n\n    /**\n\n     * @dev Gets the total of assets stored by the contract\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @return an array with total assets\n\n     */\n\n    function allTokens() external view returns (uint256[] memory) {\n\n        return _allTokens;\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total of assets of the owner\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @param _owner the address of owner\n\n     * @return an array with total assets of owner\n\n     */\n\n    function assetsOf(address _owner) external view returns (uint256[] memory) {\n\n        return _assetsOf[_owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total amount of assets stored by the contract\n\n     * @return uint256 representing the total amount of assets\n\n     */\n\n    function totalSupply() external view returns (uint256) {\n\n        return _allTokens.length;\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate valid NFTs\n\n    * @dev Throws if `_index` >= `totalSupply()`.\n\n    * @param _index A counter less than `totalSupply()`\n\n    * @return The token identifier for the `_index` of the NFT,\n\n    *  (sort order not specified)\n\n    */\n\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n\n        require(_index < _allTokens.length, \"Index out of bounds\");\n\n        return _allTokens[_index];\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate NFTs assigned to an owner\n\n    * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n\n    *  `_owner` is the zero address, representing invalid NFTs.\n\n    * @param _owner An address where we are interested in NFTs owned by them\n\n    * @param _index A counter less than `balanceOf(_owner)`\n\n    * @return The token identifier for the `_index` of the NFT assigned to `_owner`,\n\n    *   (sort order not specified)\n\n    */\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n\n        require(_owner != address(0), \"0x0 Is not a valid owner\");\n\n        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n\n        return _assetsOf[_owner][_index];\n\n    }\n\n\n\n    //\n\n    // Asset-centric getter functions\n\n    //\n\n\n\n    /**\n\n     * @dev Queries what address owns an asset. This method does not throw.\n\n     * In order to check if the asset exists, use the `exists` function or check if the\n\n     * return value of this call is `0`.\n\n     * @return uint256 the assetId\n\n     */\n\n    function ownerOf(uint256 _assetId) external view returns (address) {\n\n        return _ownerOf(_assetId);\n\n    }\n\n\n\n    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n\n    }\n\n\n\n    //\n\n    // Holder-centric getter functions\n\n    //\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param _owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address _owner) external view returns (uint256) {\n\n        return _balanceOf(_owner);\n\n    }\n\n\n\n    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n\n    }\n\n\n\n    //\n\n    // Authorization getters\n\n    //\n\n\n\n    /**\n\n     * @dev Query whether an address has been authorized to move any assets on behalf of someone else\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetHolder the address that provided the authorization\n\n     * @return bool true if the operator has been authorized to move any assets\n\n     */\n\n    function isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) external view returns (bool) {\n\n        return _isApprovedForAll(_operator, _assetHolder);\n\n    }\n\n\n\n    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Query what address has been particularly authorized to move an asset\n\n     * @param _assetId the asset to be queried for\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function getApproved(uint256 _assetId) external view returns (address) {\n\n        return _getApproved(_assetId);\n\n    }\n\n\n\n    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n\n    }\n\n\n\n    /**\n\n     * @dev Query if an operator can move an asset.\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetId the asset that has been `approved` for transfer\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n\n        return _isAuthorized(_operator, _assetId);\n\n    }\n\n\n\n    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n\n    }\n\n\n\n    //\n\n    // Authorization\n\n    //\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage (send) msg.sender's asset\n\n     * @param _operator address to be approved\n\n     * @param _authorized bool set to true to authorize, false to withdraw authorization\n\n     */\n\n    function setApprovalForAll(address _operator, bool _authorized) external {\n\n        if (_operators[msg.sender][_operator] != _authorized) {\n\n            _operators[msg.sender][_operator] = _authorized;\n\n            emit ApprovalForAll(msg.sender, _operator, _authorized);\n\n        }\n\n    }\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage one particular asset\n\n     * @param _operator address to be approved\n\n     * @param _assetId asset to approve\n\n     */\n\n    function approve(address _operator, uint256 _assetId) external {\n\n        address holder = _ownerOf(_assetId);\n\n        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n\n        if (_getApproved(_assetId) != _operator) {\n\n            _approval[_assetId] = _operator;\n\n            emit Approval(holder, _operator, _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Internal Operations\n\n    //\n\n\n\n    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n\n    }\n\n\n\n    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n    }\n\n\n\n    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Supply-altering functions\n\n    //\n\n\n\n    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n\n    }\n\n\n\n    //\n\n    // Transaction related operations\n\n    //\n\n\n\n    modifier onlyAuthorized(uint256 _assetId) {\n\n        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n\n        _;\n\n    }\n\n\n\n    modifier isCurrentOwner(address _from, uint256 _assetId) {\n\n        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n\n        _;\n\n    }\n\n\n\n    modifier addressDefined(address _target) {\n\n        require(_target != address(0), \"Target can't be 0x0\");\n\n        _;\n\n    }\n\n\n\n    /**\n\n     * @dev Alias of `safeTransferFrom(from, to, assetId, '')`\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Securely transfers the ownership of a given asset from one address to\n\n     * another address, calling the method `onNFTReceived` on the target address if\n\n     * there's code associated with it\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     * @param _userData bytes arbitrary user information to attach to this transfer\n\n     */\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes calldata _userData\n\n    ) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            _userData,\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given asset from one address to another address\n\n     * Warning! This function does not attempt to verify that the target address can send\n\n     * tokens.\n\n     *\n\n     * @param _from address sending the asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function transferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            false\n\n        );\n\n    }\n\n\n\n    /**\n\n     * Internal function that moves an asset from one holder to another\n\n     */\n\n    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n\n    }\n\n\n\n    //\n\n    // Utilities\n\n    //\n\n\n\n    /**\n\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract),\n\n     * relaxing the requirement on the return value\n\n     * @param _contract The contract that receives the ERC721\n\n     * @param _data The call data\n\n     * @return True if the call not reverts and the result of the call\n\n     */\n\n    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n\n    }\n",
                    "message": "ERC721Base (ERC721Base.sol#121-604) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Base.sol#376-383)\n\t-transferFrom (ERC721Base.sol#516-524)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "ERC721Base.constructor.name (local variable @ ERC721Base.sol#147) shadows:\n\t- ERC721Base.name (function @ ERC721Base.sol#174-176)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol\n",
                    "message": "ERC721Base.constructor.symbol (local variable @ ERC721Base.sol#148) shadows:\n\t- ERC721Base.symbol (function @ ERC721Base.sol#179-181)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract uses assembly (ERC721Base.sol#103-107)\n\t- ERC721Base.sol#105\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in ERC721Base.sol:\n\t- pragma solidity^0.5.11 (ERC721Base.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (ERC721Base.sol#31): it allows old versions\n\t- pragma solidity^0.5.11 (ERC721Base.sol#46): it allows old versions\n\t- pragma solidity^0.5.11 (ERC721Base.sol#99): it allows old versions\n\t- pragma solidity^0.5.11 (ERC721Base.sol#112): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
                    "message": "Low level call in ERC721Base._noThrowCall (ERC721Base.sol#594-603):\n\t-(success,returnData) = _contract.call(_data) ERC721Base.sol#599\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721Base.sol#89-94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721Base.sol#54) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n",
                    "message": "Parameter '_tokenId' of ERC721Base.tokenURI (ERC721Base.sol#189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": 199,
                    "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n",
                    "message": "Function 'ERC721Base._setURIProvider' (ERC721Base.sol#195-199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n",
                    "message": "Parameter '_provider' of ERC721Base._setURIProvider (ERC721Base.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function assetsOf(address _owner) external view returns (uint256[] memory) {\n",
                    "message": "Parameter '_owner' of ERC721Base.assetsOf (ERC721Base.sol#228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenByIndex(uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_index' of ERC721Base.tokenByIndex (ERC721Base.sol#247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base.tokenOfOwnerByIndex (ERC721Base.sol#261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_index' of ERC721Base.tokenOfOwnerByIndex (ERC721Base.sol#261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 _assetId) external view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.ownerOf (ERC721Base.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n",
                    "message": "Function 'ERC721Base._ownerOf' (ERC721Base.sol#281-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._ownerOf (ERC721Base.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) external view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base.balanceOf (ERC721Base.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 299,
                    "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n",
                    "message": "Function 'ERC721Base._balanceOf' (ERC721Base.sol#297-299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base._balanceOf (ERC721Base.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of ERC721Base.isApprovedForAll (ERC721Base.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _assetHolder\n",
                    "message": "Parameter '_assetHolder' of ERC721Base.isApprovedForAll (ERC721Base.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n",
                    "message": "Function 'ERC721Base._isApprovedForAll' (ERC721Base.sol#318-323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of ERC721Base._isApprovedForAll (ERC721Base.sol#319) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _assetHolder\n",
                    "message": "Parameter '_assetHolder' of ERC721Base._isApprovedForAll (ERC721Base.sol#320) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 _assetId) external view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.getApproved (ERC721Base.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n",
                    "message": "Function 'ERC721Base._getApproved' (ERC721Base.sol#334-336) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._getApproved (ERC721Base.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
                    "message": "Parameter '_operator' of ERC721Base.isAuthorized (ERC721Base.sol#344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.isAuthorized (ERC721Base.sol#344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": 353,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n",
                    "message": "Function 'ERC721Base._isAuthorized' (ERC721Base.sol#348-353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
                    "message": "Parameter '_operator' of ERC721Base._isAuthorized (ERC721Base.sol#348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._isAuthorized (ERC721Base.sol#348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
                    "message": "Parameter '_operator' of ERC721Base.setApprovalForAll (ERC721Base.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
                    "message": "Parameter '_authorized' of ERC721Base.setApprovalForAll (ERC721Base.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
                    "message": "Parameter '_operator' of ERC721Base.approve (ERC721Base.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.approve (ERC721Base.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n",
                    "message": "Function 'ERC721Base._addAssetTo' (ERC721Base.sol#389-400) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_to' of ERC721Base._addAssetTo (ERC721Base.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._addAssetTo (ERC721Base.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n",
                    "message": "Function 'ERC721Base._transferAsset' (ERC721Base.sol#402-425) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_from' of ERC721Base._transferAsset (ERC721Base.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_to' of ERC721Base._transferAsset (ERC721Base.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._transferAsset (ERC721Base.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 432,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n",
                    "message": "Function 'ERC721Base._clearApproval' (ERC721Base.sol#427-432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
                    "message": "Parameter '_holder' of ERC721Base._clearApproval (ERC721Base.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._clearApproval (ERC721Base.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": 444,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n",
                    "message": "Function 'ERC721Base._generate' (ERC721Base.sol#438-444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
                    "message": "Parameter '_assetId' of ERC721Base._generate (ERC721Base.sol#438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
                    "message": "Parameter '_beneficiary' of ERC721Base._generate (ERC721Base.sol#438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_from' of ERC721Base.safeTransferFrom (ERC721Base.sol#472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_to' of ERC721Base.safeTransferFrom (ERC721Base.sol#472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (ERC721Base.sol#472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of ERC721Base.safeTransferFrom (ERC721Base.sol#493) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC721Base.safeTransferFrom (ERC721Base.sol#494) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _assetId,\n",
                    "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (ERC721Base.sol#495) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _userData\n",
                    "message": "Parameter '_userData' of ERC721Base.safeTransferFrom (ERC721Base.sol#496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_from' of ERC721Base.transferFrom (ERC721Base.sol#516) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_to' of ERC721Base.transferFrom (ERC721Base.sol#516) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.transferFrom (ERC721Base.sol#516) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n",
                    "message": "Function 'ERC721Base._doTransferFrom' (ERC721Base.sol#529-581) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC721Base._doTransferFrom (ERC721Base.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _assetId,\n",
                    "message": "Parameter '_assetId' of ERC721Base._doTransferFrom (ERC721Base.sol#532) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _userData,\n",
                    "message": "Parameter '_userData' of ERC721Base._doTransferFrom (ERC721Base.sol#533) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _doCheck\n",
                    "message": "Parameter '_doCheck' of ERC721Base._doTransferFrom (ERC721Base.sol#534) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
                    "message": "Function 'ERC721Base._noThrowCall' (ERC721Base.sol#594-603) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of ERC721Base._noThrowCall (ERC721Base.sol#595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of ERC721Base._noThrowCall (ERC721Base.sol#596) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approval[_assetId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _assetsOf[_from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => address) private _holderOf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256[]) private _assetsOf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _indexOfAsset;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => bool)) private _operators;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => address) private _approval;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    URIProvider private _uriProvider;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal returns (bool success, bytes4 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (success, returnData) = _contract.call(_data);\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/commons/ERC165.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in ERC165.sol:\n\t- pragma solidity^0.5.11 (ERC165.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (ERC165.sol#18): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 66,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC165.sol#61-66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC165.sol#26) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/TestOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _purl = \"\";\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert(\"Invalid data\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_42"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency (TestOracle.sol#79-84) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (TestOracle.sol#89-103) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (TestOracle.sol#113-118) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": 127,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (TestOracle.sol#120-127) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (TestOracle.sol#129-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 159,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestOracle.sol#141-159) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": 184,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestOracle.sol#161-184) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestOracle.sol#186-214) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 249,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestOracle.sol#216-249) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": 296,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestOracle.sol#251-296) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": 331,
                    "vulnerability_code": "    function buildData(bytes32 d) internal pure returns (bytes memory o) {\n\n        assembly {\n\n            let size := 32\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, size)\n\n            mstore(add(o, 32), d)\n\n        }\n",
                    "message": "TestOracle.buildData (TestOracle.sol#323-331) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency uses assembly (TestOracle.sol#79-84)\n\t- TestOracle.sol#81-83\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency uses assembly (TestOracle.sol#89-103)\n\t- TestOracle.sol#96-102\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (TestOracle.sol#113-118)\n\t- TestOracle.sol#115-117\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": 127,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (TestOracle.sol#120-127)\n\t- TestOracle.sol#122-126\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (TestOracle.sol#129-139)\n\t- TestOracle.sol#134-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 159,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestOracle.sol#141-159)\n\t- TestOracle.sol#147-157\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": 184,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestOracle.sol#161-184)\n\t- TestOracle.sol#168-182\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestOracle.sol#186-214)\n\t- TestOracle.sol#194-212\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 249,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestOracle.sol#216-249)\n\t- TestOracle.sol#225-247\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": 296,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestOracle.sol#251-296)\n\t- TestOracle.sol#268-294\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": 331,
                    "vulnerability_code": "    function buildData(bytes32 d) internal pure returns (bytes memory o) {\n\n        assembly {\n\n            let size := 32\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, size)\n\n            mstore(add(o, 32), d)\n\n        }\n",
                    "message": "TestOracle.buildData uses assembly (TestOracle.sol#323-331)\n\t- TestOracle.sol#324-330\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public dummyData1 = keccak256(\"test_oracle_1\");\n",
                    "message": "TestOracle.dummyData1 should be constant (TestOracle.sol#307)\nTestOracle.dummyData2 should be constant (TestOracle.sol#308)\nTestOracle.dummyData3 should be constant (TestOracle.sol#309)\nTestOracle.invalidData should be constant (TestOracle.sol#311)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n\n        require(_to != address(0), \"0x0 Is not a valid owner\");\n\n        owner = _to;\n\n        return true;\n",
                    "message": "OwnableBasalt.transferTo (TestOracle.sol#23-27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "    function url() public view returns (string memory) {\n\n        return _purl;\n",
                    "message": "TestOracle.url (TestOracle.sol#333-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Oracle.url (TestOracle.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": 352,
                    "vulnerability_code": "    function getRate(bytes32, bytes memory data) public returns (uint256 rate, uint256 decimals) {\n\n        bytes32 sentData = readBytes32(data, 0);\n\n\n\n        if (sentData == dummyData1) {\n\n            // 1 ETH WEI = 6000 RCN WEI\n\n            return (6000, 0);\n\n        } else if (sentData == dummyData2) {\n\n            // 1 ETH WEI = 0.5 RCN WEI\n\n            return (5, 1);\n\n        } else if (sentData == dummyData3) {\n\n            // 1 ETH = 2 RCN\n\n            return (2, 0);\n\n        }\n\n\n\n        revert(\"Invalid data\");\n",
                    "message": "TestOracle.getRate (TestOracle.sol#337-352) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": "Oracle.getRate (TestOracle.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    function addCurrency(string memory ticker) public onlyOwner returns (bool) {\n\n        bytes32 currency = encodeCurrency(ticker);\n\n        emit NewSymbol(currency);\n\n        supported[currency] = true;\n\n        currencies.push(currency);\n\n        return true;\n",
                    "message": "Oracle.addCurrency (TestOracle.sol#68-74) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (TestOracle.sol#89-103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "    function setUrl(string memory _url) public {\n\n        _purl = _url;\n",
                    "message": "TestOracle.setUrl (TestOracle.sol#319-321) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestOracle.sol:\n\t- pragma solidity^0.5.11 (TestOracle.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TestOracle.sol#32): it allows old versions\n\t- pragma solidity^0.5.11 (TestOracle.sol#109): it allows old versions\n\t- pragma solidity^0.5.11 (TestOracle.sol#303): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '_to' of OwnableBasalt.transferTo (TestOracle.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestOracle.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (TestOracle.sol#131) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestOracle.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestOracle.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestOracle.sol#187) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestOracle.sol#217) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestOracle.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32, bytes memory data) public returns (uint256 rate, uint256 decimals) {\n",
                    "message": "Parameter '' of TestOracle.getRate (TestOracle.sol#337) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUrl(string memory _url) public {\n",
                    "message": "Parameter '_url' of TestOracle.setUrl (TestOracle.sol#319) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buildData(bytes32 d) internal pure returns (bytes memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (true) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _purl = \"\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buildData(bytes32 d) internal pure returns (bytes memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32, bytes memory data) public returns (uint256 rate, uint256 decimals) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/TestERC721.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _to,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ERC721_RECEIVED,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    msg.sender,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    holder,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _assetId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _userData\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                (success, result) = _noThrowCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _to,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        ERC721_RECEIVED_LEGACY,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        holder,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _assetId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _userData\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_METADATA_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public ERC721Base(\"Test ERC721\", \"TST\") {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < _allTokens.length, \"Index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_owner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_operator != address(0), \"0x0 is an invalid operator\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_target != address(0), \"Target can't be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 574,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Contract rejected the token\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 574,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Contract rejected the token\"\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_doCheck && _to.isContract()) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Call dest contract\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Perform check with the new safe call\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // onERC721Received(address,address,uint256,bytes)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _to,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ERC721_RECEIVED,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    msg.sender,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    holder,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _assetsOf[_from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_70"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract (TestERC721.sol#103-107) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": 604,
                    "vulnerability_code": "contract ERC721Base is ERC165 {\n\n    using SafeMath for uint256;\n\n    using IsContract for address;\n\n\n\n    mapping(uint256 => address) private _holderOf;\n\n\n\n    // Owner to array of assetId\n\n    mapping(address => uint256[]) private _assetsOf;\n\n    // AssetId to index on array in _assetsOf mapping\n\n    mapping(uint256 => uint256) private _indexOfAsset;\n\n\n\n    mapping(address => mapping(address => bool)) private _operators;\n\n    mapping(uint256 => address) private _approval;\n\n\n\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n\n    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n\n    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n\n    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n\n\n\n    constructor(\n\n        string memory name,\n\n        string memory symbol\n\n    ) public {\n\n        _name = name;\n\n        _symbol = symbol;\n\n\n\n        _registerInterface(ERC_721_INTERFACE);\n\n        _registerInterface(ERC_721_METADATA_INTERFACE);\n\n        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Metadata\n\n    // ///\n\n\n\n    /// ERC-721 Non-Fungible Token Standard, optional metadata extension\n\n    /// See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    /// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n\n\n\n    event SetURIProvider(address _uriProvider);\n\n\n\n    string private _name;\n\n    string private _symbol;\n\n\n\n    URIProvider private _uriProvider;\n\n\n\n    // @notice A descriptive name for a collection of NFTs in this contract\n\n    function name() external view returns (string memory) {\n\n        return _name;\n\n    }\n\n\n\n    // @notice An abbreviated name for NFTs in this contract\n\n    function symbol() external view returns (string memory) {\n\n        return _symbol;\n\n    }\n\n\n\n    /**\n\n    * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n\n    * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n\n    *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n\n    *  Metadata JSON Schema\".\n\n    */\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n\n        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n\n        URIProvider provider = _uriProvider;\n\n        return address(provider) == address(0) ? \"\" : provider.tokenURI(_tokenId);\n\n    }\n\n\n\n    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Enumeration\n\n    // ///\n\n\n\n    ///  ERC-721 Non-Fungible Token Standard, optional enumeration extension\n\n    ///  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    ///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\n\n\n\n    uint256[] private _allTokens;\n\n\n\n    /**\n\n     * @dev Gets the total of assets stored by the contract\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @return an array with total assets\n\n     */\n\n    function allTokens() external view returns (uint256[] memory) {\n\n        return _allTokens;\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total of assets of the owner\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @param _owner the address of owner\n\n     * @return an array with total assets of owner\n\n     */\n\n    function assetsOf(address _owner) external view returns (uint256[] memory) {\n\n        return _assetsOf[_owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total amount of assets stored by the contract\n\n     * @return uint256 representing the total amount of assets\n\n     */\n\n    function totalSupply() external view returns (uint256) {\n\n        return _allTokens.length;\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate valid NFTs\n\n    * @dev Throws if `_index` >= `totalSupply()`.\n\n    * @param _index A counter less than `totalSupply()`\n\n    * @return The token identifier for the `_index` of the NFT,\n\n    *  (sort order not specified)\n\n    */\n\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n\n        require(_index < _allTokens.length, \"Index out of bounds\");\n\n        return _allTokens[_index];\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate NFTs assigned to an owner\n\n    * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n\n    *  `_owner` is the zero address, representing invalid NFTs.\n\n    * @param _owner An address where we are interested in NFTs owned by them\n\n    * @param _index A counter less than `balanceOf(_owner)`\n\n    * @return The token identifier for the `_index` of the NFT assigned to `_owner`,\n\n    *   (sort order not specified)\n\n    */\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n\n        require(_owner != address(0), \"0x0 Is not a valid owner\");\n\n        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n\n        return _assetsOf[_owner][_index];\n\n    }\n\n\n\n    //\n\n    // Asset-centric getter functions\n\n    //\n\n\n\n    /**\n\n     * @dev Queries what address owns an asset. This method does not throw.\n\n     * In order to check if the asset exists, use the `exists` function or check if the\n\n     * return value of this call is `0`.\n\n     * @return uint256 the assetId\n\n     */\n\n    function ownerOf(uint256 _assetId) external view returns (address) {\n\n        return _ownerOf(_assetId);\n\n    }\n\n\n\n    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n\n    }\n\n\n\n    //\n\n    // Holder-centric getter functions\n\n    //\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param _owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address _owner) external view returns (uint256) {\n\n        return _balanceOf(_owner);\n\n    }\n\n\n\n    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n\n    }\n\n\n\n    //\n\n    // Authorization getters\n\n    //\n\n\n\n    /**\n\n     * @dev Query whether an address has been authorized to move any assets on behalf of someone else\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetHolder the address that provided the authorization\n\n     * @return bool true if the operator has been authorized to move any assets\n\n     */\n\n    function isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) external view returns (bool) {\n\n        return _isApprovedForAll(_operator, _assetHolder);\n\n    }\n\n\n\n    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Query what address has been particularly authorized to move an asset\n\n     * @param _assetId the asset to be queried for\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function getApproved(uint256 _assetId) external view returns (address) {\n\n        return _getApproved(_assetId);\n\n    }\n\n\n\n    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n\n    }\n\n\n\n    /**\n\n     * @dev Query if an operator can move an asset.\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetId the asset that has been `approved` for transfer\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n\n        return _isAuthorized(_operator, _assetId);\n\n    }\n\n\n\n    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n\n    }\n\n\n\n    //\n\n    // Authorization\n\n    //\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage (send) msg.sender's asset\n\n     * @param _operator address to be approved\n\n     * @param _authorized bool set to true to authorize, false to withdraw authorization\n\n     */\n\n    function setApprovalForAll(address _operator, bool _authorized) external {\n\n        if (_operators[msg.sender][_operator] != _authorized) {\n\n            _operators[msg.sender][_operator] = _authorized;\n\n            emit ApprovalForAll(msg.sender, _operator, _authorized);\n\n        }\n\n    }\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage one particular asset\n\n     * @param _operator address to be approved\n\n     * @param _assetId asset to approve\n\n     */\n\n    function approve(address _operator, uint256 _assetId) external {\n\n        address holder = _ownerOf(_assetId);\n\n        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n\n        if (_getApproved(_assetId) != _operator) {\n\n            _approval[_assetId] = _operator;\n\n            emit Approval(holder, _operator, _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Internal Operations\n\n    //\n\n\n\n    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n\n    }\n\n\n\n    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n    }\n\n\n\n    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Supply-altering functions\n\n    //\n\n\n\n    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n\n    }\n\n\n\n    //\n\n    // Transaction related operations\n\n    //\n\n\n\n    modifier onlyAuthorized(uint256 _assetId) {\n\n        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n\n        _;\n\n    }\n\n\n\n    modifier isCurrentOwner(address _from, uint256 _assetId) {\n\n        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n\n        _;\n\n    }\n\n\n\n    modifier addressDefined(address _target) {\n\n        require(_target != address(0), \"Target can't be 0x0\");\n\n        _;\n\n    }\n\n\n\n    /**\n\n     * @dev Alias of `safeTransferFrom(from, to, assetId, '')`\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Securely transfers the ownership of a given asset from one address to\n\n     * another address, calling the method `onNFTReceived` on the target address if\n\n     * there's code associated with it\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     * @param _userData bytes arbitrary user information to attach to this transfer\n\n     */\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes calldata _userData\n\n    ) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            _userData,\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given asset from one address to another address\n\n     * Warning! This function does not attempt to verify that the target address can send\n\n     * tokens.\n\n     *\n\n     * @param _from address sending the asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function transferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            false\n\n        );\n\n    }\n\n\n\n    /**\n\n     * Internal function that moves an asset from one holder to another\n\n     */\n\n    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n\n    }\n\n\n\n    //\n\n    // Utilities\n\n    //\n\n\n\n    /**\n\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract),\n\n     * relaxing the requirement on the return value\n\n     * @param _contract The contract that receives the ERC721\n\n     * @param _data The call data\n\n     * @return True if the call not reverts and the result of the call\n\n     */\n\n    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n\n    }\n",
                    "message": "ERC721Base (TestERC721.sol#121-604) has incorrect ERC20 function interface(s):\n\t-approve (TestERC721.sol#376-383)\n\t-transferFrom (TestERC721.sol#516-524)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "ERC721Base.constructor.name (local variable @ TestERC721.sol#147) shadows:\n\t- ERC721Base.name (function @ TestERC721.sol#174-176)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol\n",
                    "message": "ERC721Base.constructor.symbol (local variable @ TestERC721.sol#148) shadows:\n\t- ERC721Base.symbol (function @ TestERC721.sol#179-181)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract uses assembly (TestERC721.sol#103-107)\n\t- TestERC721.sol#105\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestERC721.sol:\n\t- pragma solidity^0.5.11 (TestERC721.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TestERC721.sol#31): it allows old versions\n\t- pragma solidity^0.5.11 (TestERC721.sol#46): it allows old versions\n\t- pragma solidity^0.5.11 (TestERC721.sol#99): it allows old versions\n\t- pragma solidity^0.5.11 (TestERC721.sol#112): it allows old versions\n\t- pragma solidity^0.5.11 (TestERC721.sol#608): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
                    "message": "Low level call in ERC721Base._noThrowCall (TestERC721.sol#594-603):\n\t-(success,returnData) = _contract.call(_data) TestERC721.sol#599\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (TestERC721.sol#89-94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (TestERC721.sol#54) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n",
                    "message": "Parameter '_tokenId' of ERC721Base.tokenURI (TestERC721.sol#189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": 199,
                    "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n",
                    "message": "Function 'ERC721Base._setURIProvider' (TestERC721.sol#195-199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n",
                    "message": "Parameter '_provider' of ERC721Base._setURIProvider (TestERC721.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function assetsOf(address _owner) external view returns (uint256[] memory) {\n",
                    "message": "Parameter '_owner' of ERC721Base.assetsOf (TestERC721.sol#228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenByIndex(uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_index' of ERC721Base.tokenByIndex (TestERC721.sol#247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base.tokenOfOwnerByIndex (TestERC721.sol#261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_index' of ERC721Base.tokenOfOwnerByIndex (TestERC721.sol#261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 _assetId) external view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.ownerOf (TestERC721.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n",
                    "message": "Function 'ERC721Base._ownerOf' (TestERC721.sol#281-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._ownerOf (TestERC721.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) external view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base.balanceOf (TestERC721.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 299,
                    "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n",
                    "message": "Function 'ERC721Base._balanceOf' (TestERC721.sol#297-299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base._balanceOf (TestERC721.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of ERC721Base.isApprovedForAll (TestERC721.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _assetHolder\n",
                    "message": "Parameter '_assetHolder' of ERC721Base.isApprovedForAll (TestERC721.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n",
                    "message": "Function 'ERC721Base._isApprovedForAll' (TestERC721.sol#318-323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of ERC721Base._isApprovedForAll (TestERC721.sol#319) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _assetHolder\n",
                    "message": "Parameter '_assetHolder' of ERC721Base._isApprovedForAll (TestERC721.sol#320) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 _assetId) external view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.getApproved (TestERC721.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n",
                    "message": "Function 'ERC721Base._getApproved' (TestERC721.sol#334-336) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._getApproved (TestERC721.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
                    "message": "Parameter '_operator' of ERC721Base.isAuthorized (TestERC721.sol#344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.isAuthorized (TestERC721.sol#344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": 353,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n",
                    "message": "Function 'ERC721Base._isAuthorized' (TestERC721.sol#348-353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
                    "message": "Parameter '_operator' of ERC721Base._isAuthorized (TestERC721.sol#348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._isAuthorized (TestERC721.sol#348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
                    "message": "Parameter '_operator' of ERC721Base.setApprovalForAll (TestERC721.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
                    "message": "Parameter '_authorized' of ERC721Base.setApprovalForAll (TestERC721.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
                    "message": "Parameter '_operator' of ERC721Base.approve (TestERC721.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.approve (TestERC721.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n",
                    "message": "Function 'ERC721Base._addAssetTo' (TestERC721.sol#389-400) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_to' of ERC721Base._addAssetTo (TestERC721.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._addAssetTo (TestERC721.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n",
                    "message": "Function 'ERC721Base._transferAsset' (TestERC721.sol#402-425) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_from' of ERC721Base._transferAsset (TestERC721.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_to' of ERC721Base._transferAsset (TestERC721.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._transferAsset (TestERC721.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 432,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n",
                    "message": "Function 'ERC721Base._clearApproval' (TestERC721.sol#427-432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
                    "message": "Parameter '_holder' of ERC721Base._clearApproval (TestERC721.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._clearApproval (TestERC721.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": 444,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n",
                    "message": "Function 'ERC721Base._generate' (TestERC721.sol#438-444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
                    "message": "Parameter '_assetId' of ERC721Base._generate (TestERC721.sol#438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
                    "message": "Parameter '_beneficiary' of ERC721Base._generate (TestERC721.sol#438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_from' of ERC721Base.safeTransferFrom (TestERC721.sol#472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_to' of ERC721Base.safeTransferFrom (TestERC721.sol#472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (TestERC721.sol#472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of ERC721Base.safeTransferFrom (TestERC721.sol#493) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC721Base.safeTransferFrom (TestERC721.sol#494) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _assetId,\n",
                    "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (TestERC721.sol#495) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _userData\n",
                    "message": "Parameter '_userData' of ERC721Base.safeTransferFrom (TestERC721.sol#496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_from' of ERC721Base.transferFrom (TestERC721.sol#516) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_to' of ERC721Base.transferFrom (TestERC721.sol#516) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.transferFrom (TestERC721.sol#516) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n",
                    "message": "Function 'ERC721Base._doTransferFrom' (TestERC721.sol#529-581) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC721Base._doTransferFrom (TestERC721.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _assetId,\n",
                    "message": "Parameter '_assetId' of ERC721Base._doTransferFrom (TestERC721.sol#532) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _userData,\n",
                    "message": "Parameter '_userData' of ERC721Base._doTransferFrom (TestERC721.sol#533) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _doCheck\n",
                    "message": "Parameter '_doCheck' of ERC721Base._doTransferFrom (TestERC721.sol#534) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
                    "message": "Function 'ERC721Base._noThrowCall' (TestERC721.sol#594-603) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of ERC721Base._noThrowCall (TestERC721.sol#595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of ERC721Base._noThrowCall (TestERC721.sol#596) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approval[_assetId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _assetsOf[_from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => address) private _holderOf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256[]) private _assetsOf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _indexOfAsset;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => bool)) private _operators;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => address) private _approval;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    URIProvider private _uriProvider;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal returns (bool success, bytes4 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (success, returnData) = _contract.call(_data);\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/TestERC721ReceiverMultiple.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestERC721ReceiverMultiple.sol:\n\t- pragma solidity^0.5.11 (TestERC721ReceiverMultiple.sol#4): it allows old versions\n\t- pragma solidity^0.5.11 (TestERC721ReceiverMultiple.sol#20): it allows old versions\n\t- pragma solidity^0.5.11 (TestERC721ReceiverMultiple.sol#35): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of TestERC721ReceiverMultiple.onERC721Received (TestERC721ReceiverMultiple.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of TestERC721ReceiverMultiple.onERC721Received (TestERC721ReceiverMultiple.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId,\n",
                    "message": "Parameter '_tokenId' of TestERC721ReceiverMultiple.onERC721Received (TestERC721ReceiverMultiple.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _userData\n",
                    "message": "Parameter '_userData' of TestERC721ReceiverMultiple.onERC721Received (TestERC721ReceiverMultiple.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of TestERC721ReceiverMultiple.onERC721Received (TestERC721ReceiverMultiple.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId,\n",
                    "message": "Parameter '_tokenId' of TestERC721ReceiverMultiple.onERC721Received (TestERC721ReceiverMultiple.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _userData\n",
                    "message": "Parameter '_userData' of TestERC721ReceiverMultiple.onERC721Received (TestERC721ReceiverMultiple.sol#70) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return bytes4(0x150b7a02);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return bytes4(0xf0b9e5ba);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/IERC721Receiver.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in IERC721Receiver.sol:\n\t- pragma solidity^0.5.11 (IERC721Receiver.sol#4): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/TestCosigner.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(IERC20 _token) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_79"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (TestCosigner.sol#70-75) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (TestCosigner.sol#77-84) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (TestCosigner.sol#86-96) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestCosigner.sol#98-116) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestCosigner.sol#118-141) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestCosigner.sol#143-171) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestCosigner.sol#173-206) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 253,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestCosigner.sol#208-253) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 340,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency (TestCosigner.sol#335-340) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 359,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (TestCosigner.sol#345-359) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": 488,
                    "vulnerability_code": "    function requestCosign(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory\n\n    ) public returns (bool) {\n\n        if (readBytes32(data, 0) == keccak256(\"custom_data\")) {\n\n            require(Engine(engine).cosign(uint256(customId), customCost));\n\n            customId = 0x0;\n\n            customCost = 0;\n\n            return true;\n\n        }\n\n\n\n        if (readBytes32(data, 0) == keccak256(\"test_oracle\")) {\n\n            require(Engine(engine).cosign(index, uint256(readBytes32(data, 1))));\n\n            return true;\n\n        }\n\n\n\n        if (readBytes32(data, 0) == keccak256(\"return_true_no_cosign\")) {\n\n            return true;\n\n        }\n",
                    "message": "Reentrancy in TestCosigner.requestCosign (TestCosigner.sol#467-488):\n\tExternal calls:\n\t- require(bool)(Engine(engine).cosign(uint256(customId),customCost)) (TestCosigner.sol#474)\n\tState variables written after the call(s):\n\t- customCost (TestCosigner.sol#476)\n\t- customId (TestCosigner.sol#475)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory data,\n",
                    "message": "TestCosigner.cost.data (local variable @ TestCosigner.sol#461) shadows:\n\t- TestCosigner.data (state variable @ TestCosigner.sol#424)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory data,\n",
                    "message": "TestCosigner.requestCosign.data (local variable @ TestCosigner.sol#470) shadows:\n\t- TestCosigner.data (state variable @ TestCosigner.sol#424)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (TestCosigner.sol#70-75)\n\t- TestCosigner.sol#72-74\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (TestCosigner.sol#77-84)\n\t- TestCosigner.sol#79-83\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (TestCosigner.sol#86-96)\n\t- TestCosigner.sol#91-95\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestCosigner.sol#98-116)\n\t- TestCosigner.sol#104-114\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestCosigner.sol#118-141)\n\t- TestCosigner.sol#125-139\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestCosigner.sol#143-171)\n\t- TestCosigner.sol#151-169\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestCosigner.sol#173-206)\n\t- TestCosigner.sol#182-204\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 253,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestCosigner.sol#208-253)\n\t- TestCosigner.sol#225-251\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 340,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
                    "message": "Oracle.encodeCurrency uses assembly (TestCosigner.sol#335-340)\n\t- TestCosigner.sol#337-339\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 359,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency uses assembly (TestCosigner.sol#345-359)\n\t- TestCosigner.sol#352-358\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "    function buildData(bytes32 a, bytes32 b) internal returns (bytes memory o) {\n\n        assembly {\n\n            let size := 64\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, size)\n\n            mstore(add(o, 32), a)\n\n            mstore(add(o, 64), b)\n\n        }\n",
                    "message": "TestCosigner.buildData uses assembly (TestCosigner.sol#447-456)\n\t- TestCosigner.sol#448-455\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public VERSION;\n",
                    "message": "Engine.VERSION should be constant (TestCosigner.sol#369)\nEngine.VERSION_NAME should be constant (TestCosigner.sol#370)\nTestCosigner.customData should be constant (TestCosigner.sol#430)\nTestCosigner.dummyCost should be constant (TestCosigner.sol#423)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Cosigner.url (TestCosigner.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": 492,
                    "vulnerability_code": "    function url() public view returns (string memory) {\n\n        return \"\";\n",
                    "message": "TestCosigner.url (TestCosigner.sol#490-492) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function cost(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
                    "message": "Cosigner.cost (TestCosigner.sol#32-38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 465,
                    "vulnerability_code": "    function cost(\n\n        address,\n\n        uint256,\n\n        bytes memory data,\n\n        bytes memory\n\n    ) public view returns (uint256) {\n\n        return uint256(readBytes32(data, 1));\n",
                    "message": "TestCosigner.cost (TestCosigner.sol#458-465) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": 488,
                    "vulnerability_code": "    function requestCosign(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory\n\n    ) public returns (bool) {\n\n        if (readBytes32(data, 0) == keccak256(\"custom_data\")) {\n\n            require(Engine(engine).cosign(uint256(customId), customCost));\n\n            customId = 0x0;\n\n            customCost = 0;\n\n            return true;\n\n        }\n\n\n\n        if (readBytes32(data, 0) == keccak256(\"test_oracle\")) {\n\n            require(Engine(engine).cosign(index, uint256(readBytes32(data, 1))));\n\n            return true;\n\n        }\n\n\n\n        if (readBytes32(data, 0) == keccak256(\"return_true_no_cosign\")) {\n\n            return true;\n\n        }\n",
                    "message": "TestCosigner.requestCosign (TestCosigner.sol#467-488) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function requestCosign(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
                    "message": "Cosigner.requestCosign (TestCosigner.sol#47-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": 496,
                    "vulnerability_code": "    function claim(address, uint256, bytes memory) public returns (bool) {\n\n        return false;\n",
                    "message": "TestCosigner.claim (TestCosigner.sol#494-496) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address engine, uint256 index, bytes memory oracleData) public returns (bool);\n",
                    "message": "Cosigner.claim (TestCosigner.sol#61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n\n        require(_to != address(0), \"0x0 Is not a valid owner\");\n\n        owner = _to;\n\n        return true;\n",
                    "message": "OwnableBasalt.transferTo (TestCosigner.sol#279-283) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Oracle.url (TestCosigner.sol#307) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": "Oracle.getRate (TestCosigner.sol#315) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 330,
                    "vulnerability_code": "    function addCurrency(string memory ticker) public onlyOwner returns (bool) {\n\n        bytes32 currency = encodeCurrency(ticker);\n\n        emit NewSymbol(currency);\n\n        supported[currency] = true;\n\n        currencies.push(currency);\n\n        return true;\n",
                    "message": "Oracle.addCurrency (TestCosigner.sol#324-330) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 359,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
                    "message": "Oracle.decodeCurrency (TestCosigner.sol#345-359) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalLoans() public view returns (uint256);\n",
                    "message": "Engine.getTotalLoans (TestCosigner.sol#379) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOracle(uint index) public view returns (Oracle);\n",
                    "message": "Engine.getOracle (TestCosigner.sol#380) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBorrower(uint index) public view returns (address);\n",
                    "message": "Engine.getBorrower (TestCosigner.sol#381) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCosigner(uint index) public view returns (address);\n",
                    "message": "Engine.getCosigner (TestCosigner.sol#382) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
                    "message": "Engine.ownerOf (TestCosigner.sol#383) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCreator(uint index) public view returns (address);\n",
                    "message": "Engine.getCreator (TestCosigner.sol#384) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAmount(uint index) public view returns (uint256);\n",
                    "message": "Engine.getAmount (TestCosigner.sol#385) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPaid(uint index) public view returns (uint256);\n",
                    "message": "Engine.getPaid (TestCosigner.sol#386) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDueTime(uint index) public view returns (uint256);\n",
                    "message": "Engine.getDueTime (TestCosigner.sol#387) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApprobation(uint index, address _address) public view returns (bool);\n",
                    "message": "Engine.getApprobation (TestCosigner.sol#388) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStatus(uint index) public view returns (Status);\n",
                    "message": "Engine.getStatus (TestCosigner.sol#389) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApproved(uint index) public view returns (bool);\n",
                    "message": "Engine.isApproved (TestCosigner.sol#390) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPendingAmount(uint index) public returns (uint256);\n",
                    "message": "Engine.getPendingAmount (TestCosigner.sol#391) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCurrency(uint index) public view returns (bytes32);\n",
                    "message": "Engine.getCurrency (TestCosigner.sol#392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveLoan(uint index) public returns (bool);\n",
                    "message": "Engine.approveLoan (TestCosigner.sol#394) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 index) public returns (bool);\n",
                    "message": "Engine.transfer (TestCosigner.sol#395) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeOwnership(uint256 index) public returns (bool);\n",
                    "message": "Engine.takeOwnership (TestCosigner.sol#396) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawal(uint index, address to, uint256 amount) public returns (bool);\n",
                    "message": "Engine.withdrawal (TestCosigner.sol#397) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "    function getDummyCost() public view returns(uint256) {\n\n        return uint256(dummyCost);\n",
                    "message": "TestCosigner.getDummyCost (TestCosigner.sol#443-445) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestCosigner.sol:\n\t- pragma solidity^0.5.11 (TestCosigner.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TestCosigner.sol#66): it allows old versions\n\t- pragma solidity^0.5.11 (TestCosigner.sol#259): it allows old versions\n\t- pragma solidity^0.5.11 (TestCosigner.sol#288): it allows old versions\n\t- pragma solidity^0.5.11 (TestCosigner.sol#366): it allows old versions\n\t- pragma solidity^0.5.11 (TestCosigner.sol#402): it allows old versions\n\t- pragma solidity^0.5.11 (TestCosigner.sol#417): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestCosigner.sol#87) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (TestCosigner.sol#88) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestCosigner.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestCosigner.sol#119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestCosigner.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestCosigner.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestCosigner.sol#209) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n",
                    "message": "Parameter '_to' of OwnableBasalt.transferTo (TestCosigner.sol#279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
                    "message": "Parameter '' of Engine.ownerOf (TestCosigner.sol#383) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public VERSION;\n",
                    "message": "Variable 'Engine.VERSION' (TestCosigner.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string public VERSION_NAME;\n",
                    "message": "Variable 'Engine.VERSION_NAME' (TestCosigner.sol#370) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address,\n",
                    "message": "Parameter '' of TestCosigner.cost (TestCosigner.sol#459) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256,\n",
                    "message": "Parameter '_scope_0' of TestCosigner.cost (TestCosigner.sol#460) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory\n",
                    "message": "Parameter '_scope_1' of TestCosigner.cost (TestCosigner.sol#462) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory\n",
                    "message": "Parameter '' of TestCosigner.requestCosign (TestCosigner.sol#471) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address, uint256, bytes memory) public returns (bool) {\n",
                    "message": "Parameter '' of TestCosigner.claim (TestCosigner.sol#494) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address, uint256, bytes memory) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of TestCosigner.claim (TestCosigner.sol#494) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address, uint256, bytes memory) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of TestCosigner.claim (TestCosigner.sol#494) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(IERC20 _token) public {\n",
                    "message": "Parameter '_token' of TestCosigner. (TestCosigner.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCustomData(bytes32 _customId, uint256 _customCost) external {\n",
                    "message": "Parameter '_customId' of TestCosigner.setCustomData (TestCosigner.sol#438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCustomData(bytes32 _customId, uint256 _customCost) external {\n",
                    "message": "Parameter '_customCost' of TestCosigner.setCustomData (TestCosigner.sol#438) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            customId = 0x0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buildData(bytes32 a, bytes32 b) internal returns (bytes memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (true) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/TestERC721ReceiverLegacy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestERC721ReceiverLegacy.sol:\n\t- pragma solidity^0.5.11 (TestERC721ReceiverLegacy.sol#4): it allows old versions\n\t- pragma solidity^0.5.11 (TestERC721ReceiverLegacy.sol#19): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of TestERC721ReceiverLegacy.onERC721Received (TestERC721ReceiverLegacy.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId,\n",
                    "message": "Parameter '_tokenId' of TestERC721ReceiverLegacy.onERC721Received (TestERC721ReceiverLegacy.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _userData\n",
                    "message": "Parameter '_userData' of TestERC721ReceiverLegacy.onERC721Received (TestERC721ReceiverLegacy.sol#31) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return bytes4(0xf0b9e5ba);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/TestURIProvider.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _to,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ERC721_RECEIVED,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    msg.sender,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    holder,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _assetId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _userData\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                (success, result) = _noThrowCall(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _to,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        ERC721_RECEIVED_LEGACY,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        holder,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _assetId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        _userData\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    )\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_METADATA_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public ERC721Base(\"Test ERC721\", \"TST\") {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < _allTokens.length, \"Index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_owner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_operator != address(0), \"0x0 is an invalid operator\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_target != address(0), \"Target can't be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 574,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Contract rejected the token\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 574,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    \"Contract rejected the token\"\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_doCheck && _to.isContract()) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Call dest contract\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Perform check with the new safe call\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // onERC721Received(address,address,uint256,bytes)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _to,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                abi.encodeWithSelector(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ERC721_RECEIVED,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    msg.sender,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    holder,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _assetsOf[_from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_72"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract (TestURIProvider.sol#103-107) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": 604,
                    "vulnerability_code": "contract ERC721Base is ERC165 {\n\n    using SafeMath for uint256;\n\n    using IsContract for address;\n\n\n\n    mapping(uint256 => address) private _holderOf;\n\n\n\n    // Owner to array of assetId\n\n    mapping(address => uint256[]) private _assetsOf;\n\n    // AssetId to index on array in _assetsOf mapping\n\n    mapping(uint256 => uint256) private _indexOfAsset;\n\n\n\n    mapping(address => mapping(address => bool)) private _operators;\n\n    mapping(uint256 => address) private _approval;\n\n\n\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n\n    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n\n    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n\n    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n\n\n\n    constructor(\n\n        string memory name,\n\n        string memory symbol\n\n    ) public {\n\n        _name = name;\n\n        _symbol = symbol;\n\n\n\n        _registerInterface(ERC_721_INTERFACE);\n\n        _registerInterface(ERC_721_METADATA_INTERFACE);\n\n        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Metadata\n\n    // ///\n\n\n\n    /// ERC-721 Non-Fungible Token Standard, optional metadata extension\n\n    /// See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    /// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n\n\n\n    event SetURIProvider(address _uriProvider);\n\n\n\n    string private _name;\n\n    string private _symbol;\n\n\n\n    URIProvider private _uriProvider;\n\n\n\n    // @notice A descriptive name for a collection of NFTs in this contract\n\n    function name() external view returns (string memory) {\n\n        return _name;\n\n    }\n\n\n\n    // @notice An abbreviated name for NFTs in this contract\n\n    function symbol() external view returns (string memory) {\n\n        return _symbol;\n\n    }\n\n\n\n    /**\n\n    * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n\n    * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n\n    *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n\n    *  Metadata JSON Schema\".\n\n    */\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n\n        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n\n        URIProvider provider = _uriProvider;\n\n        return address(provider) == address(0) ? \"\" : provider.tokenURI(_tokenId);\n\n    }\n\n\n\n    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Enumeration\n\n    // ///\n\n\n\n    ///  ERC-721 Non-Fungible Token Standard, optional enumeration extension\n\n    ///  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    ///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\n\n\n\n    uint256[] private _allTokens;\n\n\n\n    /**\n\n     * @dev Gets the total of assets stored by the contract\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @return an array with total assets\n\n     */\n\n    function allTokens() external view returns (uint256[] memory) {\n\n        return _allTokens;\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total of assets of the owner\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @param _owner the address of owner\n\n     * @return an array with total assets of owner\n\n     */\n\n    function assetsOf(address _owner) external view returns (uint256[] memory) {\n\n        return _assetsOf[_owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total amount of assets stored by the contract\n\n     * @return uint256 representing the total amount of assets\n\n     */\n\n    function totalSupply() external view returns (uint256) {\n\n        return _allTokens.length;\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate valid NFTs\n\n    * @dev Throws if `_index` >= `totalSupply()`.\n\n    * @param _index A counter less than `totalSupply()`\n\n    * @return The token identifier for the `_index` of the NFT,\n\n    *  (sort order not specified)\n\n    */\n\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n\n        require(_index < _allTokens.length, \"Index out of bounds\");\n\n        return _allTokens[_index];\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate NFTs assigned to an owner\n\n    * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n\n    *  `_owner` is the zero address, representing invalid NFTs.\n\n    * @param _owner An address where we are interested in NFTs owned by them\n\n    * @param _index A counter less than `balanceOf(_owner)`\n\n    * @return The token identifier for the `_index` of the NFT assigned to `_owner`,\n\n    *   (sort order not specified)\n\n    */\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n\n        require(_owner != address(0), \"0x0 Is not a valid owner\");\n\n        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n\n        return _assetsOf[_owner][_index];\n\n    }\n\n\n\n    //\n\n    // Asset-centric getter functions\n\n    //\n\n\n\n    /**\n\n     * @dev Queries what address owns an asset. This method does not throw.\n\n     * In order to check if the asset exists, use the `exists` function or check if the\n\n     * return value of this call is `0`.\n\n     * @return uint256 the assetId\n\n     */\n\n    function ownerOf(uint256 _assetId) external view returns (address) {\n\n        return _ownerOf(_assetId);\n\n    }\n\n\n\n    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n\n    }\n\n\n\n    //\n\n    // Holder-centric getter functions\n\n    //\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param _owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address _owner) external view returns (uint256) {\n\n        return _balanceOf(_owner);\n\n    }\n\n\n\n    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n\n    }\n\n\n\n    //\n\n    // Authorization getters\n\n    //\n\n\n\n    /**\n\n     * @dev Query whether an address has been authorized to move any assets on behalf of someone else\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetHolder the address that provided the authorization\n\n     * @return bool true if the operator has been authorized to move any assets\n\n     */\n\n    function isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) external view returns (bool) {\n\n        return _isApprovedForAll(_operator, _assetHolder);\n\n    }\n\n\n\n    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Query what address has been particularly authorized to move an asset\n\n     * @param _assetId the asset to be queried for\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function getApproved(uint256 _assetId) external view returns (address) {\n\n        return _getApproved(_assetId);\n\n    }\n\n\n\n    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n\n    }\n\n\n\n    /**\n\n     * @dev Query if an operator can move an asset.\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetId the asset that has been `approved` for transfer\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n\n        return _isAuthorized(_operator, _assetId);\n\n    }\n\n\n\n    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n\n    }\n\n\n\n    //\n\n    // Authorization\n\n    //\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage (send) msg.sender's asset\n\n     * @param _operator address to be approved\n\n     * @param _authorized bool set to true to authorize, false to withdraw authorization\n\n     */\n\n    function setApprovalForAll(address _operator, bool _authorized) external {\n\n        if (_operators[msg.sender][_operator] != _authorized) {\n\n            _operators[msg.sender][_operator] = _authorized;\n\n            emit ApprovalForAll(msg.sender, _operator, _authorized);\n\n        }\n\n    }\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage one particular asset\n\n     * @param _operator address to be approved\n\n     * @param _assetId asset to approve\n\n     */\n\n    function approve(address _operator, uint256 _assetId) external {\n\n        address holder = _ownerOf(_assetId);\n\n        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n\n        if (_getApproved(_assetId) != _operator) {\n\n            _approval[_assetId] = _operator;\n\n            emit Approval(holder, _operator, _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Internal Operations\n\n    //\n\n\n\n    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n\n    }\n\n\n\n    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n    }\n\n\n\n    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Supply-altering functions\n\n    //\n\n\n\n    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n\n    }\n\n\n\n    //\n\n    // Transaction related operations\n\n    //\n\n\n\n    modifier onlyAuthorized(uint256 _assetId) {\n\n        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n\n        _;\n\n    }\n\n\n\n    modifier isCurrentOwner(address _from, uint256 _assetId) {\n\n        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n\n        _;\n\n    }\n\n\n\n    modifier addressDefined(address _target) {\n\n        require(_target != address(0), \"Target can't be 0x0\");\n\n        _;\n\n    }\n\n\n\n    /**\n\n     * @dev Alias of `safeTransferFrom(from, to, assetId, '')`\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Securely transfers the ownership of a given asset from one address to\n\n     * another address, calling the method `onNFTReceived` on the target address if\n\n     * there's code associated with it\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     * @param _userData bytes arbitrary user information to attach to this transfer\n\n     */\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes calldata _userData\n\n    ) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            _userData,\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given asset from one address to another address\n\n     * Warning! This function does not attempt to verify that the target address can send\n\n     * tokens.\n\n     *\n\n     * @param _from address sending the asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function transferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            false\n\n        );\n\n    }\n\n\n\n    /**\n\n     * Internal function that moves an asset from one holder to another\n\n     */\n\n    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n\n    }\n\n\n\n    //\n\n    // Utilities\n\n    //\n\n\n\n    /**\n\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract),\n\n     * relaxing the requirement on the return value\n\n     * @param _contract The contract that receives the ERC721\n\n     * @param _data The call data\n\n     * @return True if the call not reverts and the result of the call\n\n     */\n\n    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n\n    }\n",
                    "message": "ERC721Base (TestURIProvider.sol#121-604) has incorrect ERC20 function interface(s):\n\t-approve (TestURIProvider.sol#376-383)\n\t-transferFrom (TestURIProvider.sol#516-524)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "ERC721Base.constructor.name (local variable @ TestURIProvider.sol#147) shadows:\n\t- ERC721Base.name (function @ TestURIProvider.sol#174-176)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol\n",
                    "message": "ERC721Base.constructor.symbol (local variable @ TestURIProvider.sol#148) shadows:\n\t- ERC721Base.symbol (function @ TestURIProvider.sol#179-181)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract uses assembly (TestURIProvider.sol#103-107)\n\t- TestURIProvider.sol#105\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string public uri = \"https://ripioCreditNetwork/debtId\";\n",
                    "message": "TestURIProvider.uri should be constant (TestURIProvider.sol#611)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestURIProvider.sol:\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#31): it allows old versions\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#46): it allows old versions\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#99): it allows old versions\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#112): it allows old versions\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#608): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
                    "message": "Low level call in ERC721Base._noThrowCall (TestURIProvider.sol#594-603):\n\t-(success,returnData) = _contract.call(_data) TestURIProvider.sol#599\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (TestURIProvider.sol#89-94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (TestURIProvider.sol#54) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n",
                    "message": "Parameter '_tokenId' of ERC721Base.tokenURI (TestURIProvider.sol#189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": 199,
                    "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n",
                    "message": "Function 'ERC721Base._setURIProvider' (TestURIProvider.sol#195-199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n",
                    "message": "Parameter '_provider' of ERC721Base._setURIProvider (TestURIProvider.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function assetsOf(address _owner) external view returns (uint256[] memory) {\n",
                    "message": "Parameter '_owner' of ERC721Base.assetsOf (TestURIProvider.sol#228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenByIndex(uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_index' of ERC721Base.tokenByIndex (TestURIProvider.sol#247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base.tokenOfOwnerByIndex (TestURIProvider.sol#261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
                    "message": "Parameter '_index' of ERC721Base.tokenOfOwnerByIndex (TestURIProvider.sol#261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 _assetId) external view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.ownerOf (TestURIProvider.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n",
                    "message": "Function 'ERC721Base._ownerOf' (TestURIProvider.sol#281-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._ownerOf (TestURIProvider.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) external view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base.balanceOf (TestURIProvider.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 299,
                    "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n",
                    "message": "Function 'ERC721Base._balanceOf' (TestURIProvider.sol#297-299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Base._balanceOf (TestURIProvider.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of ERC721Base.isApprovedForAll (TestURIProvider.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _assetHolder\n",
                    "message": "Parameter '_assetHolder' of ERC721Base.isApprovedForAll (TestURIProvider.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n",
                    "message": "Function 'ERC721Base._isApprovedForAll' (TestURIProvider.sol#318-323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of ERC721Base._isApprovedForAll (TestURIProvider.sol#319) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _assetHolder\n",
                    "message": "Parameter '_assetHolder' of ERC721Base._isApprovedForAll (TestURIProvider.sol#320) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 _assetId) external view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.getApproved (TestURIProvider.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n",
                    "message": "Function 'ERC721Base._getApproved' (TestURIProvider.sol#334-336) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._getApproved (TestURIProvider.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
                    "message": "Parameter '_operator' of ERC721Base.isAuthorized (TestURIProvider.sol#344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
                    "message": "Parameter '_assetId' of ERC721Base.isAuthorized (TestURIProvider.sol#344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": 353,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n",
                    "message": "Function 'ERC721Base._isAuthorized' (TestURIProvider.sol#348-353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
                    "message": "Parameter '_operator' of ERC721Base._isAuthorized (TestURIProvider.sol#348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
                    "message": "Parameter '_assetId' of ERC721Base._isAuthorized (TestURIProvider.sol#348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
                    "message": "Parameter '_operator' of ERC721Base.setApprovalForAll (TestURIProvider.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
                    "message": "Parameter '_authorized' of ERC721Base.setApprovalForAll (TestURIProvider.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
                    "message": "Parameter '_operator' of ERC721Base.approve (TestURIProvider.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.approve (TestURIProvider.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n",
                    "message": "Function 'ERC721Base._addAssetTo' (TestURIProvider.sol#389-400) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_to' of ERC721Base._addAssetTo (TestURIProvider.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._addAssetTo (TestURIProvider.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n",
                    "message": "Function 'ERC721Base._transferAsset' (TestURIProvider.sol#402-425) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_from' of ERC721Base._transferAsset (TestURIProvider.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_to' of ERC721Base._transferAsset (TestURIProvider.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._transferAsset (TestURIProvider.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 432,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n",
                    "message": "Function 'ERC721Base._clearApproval' (TestURIProvider.sol#427-432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
                    "message": "Parameter '_holder' of ERC721Base._clearApproval (TestURIProvider.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
                    "message": "Parameter '_assetId' of ERC721Base._clearApproval (TestURIProvider.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": 444,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n",
                    "message": "Function 'ERC721Base._generate' (TestURIProvider.sol#438-444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
                    "message": "Parameter '_assetId' of ERC721Base._generate (TestURIProvider.sol#438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
                    "message": "Parameter '_beneficiary' of ERC721Base._generate (TestURIProvider.sol#438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_from' of ERC721Base.safeTransferFrom (TestURIProvider.sol#472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_to' of ERC721Base.safeTransferFrom (TestURIProvider.sol#472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (TestURIProvider.sol#472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of ERC721Base.safeTransferFrom (TestURIProvider.sol#493) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC721Base.safeTransferFrom (TestURIProvider.sol#494) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _assetId,\n",
                    "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (TestURIProvider.sol#495) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _userData\n",
                    "message": "Parameter '_userData' of ERC721Base.safeTransferFrom (TestURIProvider.sol#496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_from' of ERC721Base.transferFrom (TestURIProvider.sol#516) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_to' of ERC721Base.transferFrom (TestURIProvider.sol#516) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
                    "message": "Parameter '_assetId' of ERC721Base.transferFrom (TestURIProvider.sol#516) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n",
                    "message": "Function 'ERC721Base._doTransferFrom' (TestURIProvider.sol#529-581) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC721Base._doTransferFrom (TestURIProvider.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _assetId,\n",
                    "message": "Parameter '_assetId' of ERC721Base._doTransferFrom (TestURIProvider.sol#532) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _userData,\n",
                    "message": "Parameter '_userData' of ERC721Base._doTransferFrom (TestURIProvider.sol#533) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _doCheck\n",
                    "message": "Parameter '_doCheck' of ERC721Base._doTransferFrom (TestURIProvider.sol#534) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
                    "message": "Function 'ERC721Base._noThrowCall' (TestURIProvider.sol#594-603) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of ERC721Base._noThrowCall (TestURIProvider.sol#595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of ERC721Base._noThrowCall (TestURIProvider.sol#596) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setURIProvider(URIProvider _provider) external  {\n",
                    "message": "Parameter '_provider' of TestURIProvider.setURIProvider (TestURIProvider.sol#629) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approval[_assetId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _assetsOf[_from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => address) private _holderOf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256[]) private _assetsOf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _indexOfAsset;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => bool)) private _operators;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => address) private _approval;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    URIProvider private _uriProvider;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal returns (bool success, bytes4 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (success, returnData) = _contract.call(_data);\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/TestERC721ReceiverLegacyRaw.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestERC721ReceiverLegacyRaw.sol:\n\t- pragma solidity^0.5.11 (TestERC721ReceiverLegacyRaw.sol#4): it allows old versions\n\t- pragma solidity^0.5.11 (TestERC721ReceiverLegacyRaw.sol#19): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of TestERC721ReceiverLegacyRaw.onERC721Received (TestERC721ReceiverLegacyRaw.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId,\n",
                    "message": "Parameter '_tokenId' of TestERC721ReceiverLegacyRaw.onERC721Received (TestERC721ReceiverLegacyRaw.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _userData\n",
                    "message": "Parameter '_userData' of TestERC721ReceiverLegacyRaw.onERC721Received (TestERC721ReceiverLegacyRaw.sol#29) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return bytes4(0xf0b9e5ba);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/TestAccountMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success == 1, \"Tx reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "assembly",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function _safeCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (uint256 success, bytes32 result) {\n\n        assembly {\n\n            let x := mload(0x40)\n\n            success := call(\n\n                            gas,                 // Send almost all gas\n\n                            _contract,            // To addr\n\n                            0,                    // Send ETH\n\n                            add(0x20, _data),     // Input is data past the first 32 bytes\n\n                            mload(_data),         // Input size is the lenght of data\n\n                            x,                    // Store the ouput on x\n\n                            0x20                  // Output is a single bytes32, has 32 bytes\n\n                        )\n\n\n\n            result := mload(x)\n\n        }\n",
                    "message": "TestAccountMock._safeCall uses assembly (TestAccountMock.sol#16-34)\n\t- TestAccountMock.sol#20-33\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "    function send(\n\n        address _to,\n\n        bytes memory _data\n\n    ) public returns (bytes32) {\n\n        (uint256 success, bytes32 result) = _safeCall(_to, _data);\n\n        require(success == 1, \"Tx reverted\");\n\n        return result;\n",
                    "message": "TestAccountMock.send (TestAccountMock.sol#7-14) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestAccountMock.sol:\n\t- pragma solidity^0.5.11 (TestAccountMock.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of TestAccountMock.send (TestAccountMock.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data\n",
                    "message": "Parameter '_data' of TestAccountMock.send (TestAccountMock.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function _safeCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (uint256 success, bytes32 result) {\n\n        assembly {\n\n            let x := mload(0x40)\n\n            success := call(\n\n                            gas,                 // Send almost all gas\n\n                            _contract,            // To addr\n\n                            0,                    // Send ETH\n\n                            add(0x20, _data),     // Input is data past the first 32 bytes\n\n                            mload(_data),         // Input size is the lenght of data\n\n                            x,                    // Store the ouput on x\n\n                            0x20                  // Output is a single bytes32, has 32 bytes\n\n                        )\n\n\n\n            result := mload(x)\n\n        }\n",
                    "message": "Function 'TestAccountMock._safeCall' (TestAccountMock.sol#16-34) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _safeCall(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal returns (uint256 success, bytes32 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/IERC721ReceiverLegacy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in IERC721ReceiverLegacy.sol:\n\t- pragma solidity^0.5.11 (IERC721ReceiverLegacy.sol#4): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/TestToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit CreatedToken(address(this));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            balances[_to] = balances[_to].add(_value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            balances[_from] = balances[_from].sub(_value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit Transfer(_from, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_25"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string public version = \"1.1\";\n",
                    "message": "TestToken.version should be constant (TestToken.sol#116)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool success) {\n\n        if (balances[msg.sender] >= _value) {\n\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n\n            balances[_to] = balances[_to].add(_value);\n\n            emit Transfer(msg.sender, _to, _value);\n\n            return true;\n\n        } else {\n\n            return false;\n\n        }\n",
                    "message": "StandardToken.transfer (TestToken.sol#47-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\n\n            balances[_to] = balances[_to].add(_value);\n\n            balances[_from] = balances[_from].sub(_value);\n\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n            emit Transfer(_from, _to, _value);\n\n            return true;\n\n        } else {\n\n            return false;\n\n        }\n",
                    "message": "StandardToken.transferFrom (TestToken.sol#58-68) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256 balance) {\n\n        return balances[_owner];\n",
                    "message": "StandardToken.balanceOf (TestToken.sol#70-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "    function approve(address _spender,  uint256 _value) public returns (bool success) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "StandardToken.approve (TestToken.sol#74-78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 82,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (TestToken.sol#80-82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "StandardToken.increaseApproval (TestToken.sol#84-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "StandardToken.decreaseApproval (TestToken.sol#90-99) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestToken.sol:\n\t- pragma solidity^0.5.11 (TestToken.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TestToken.sol#32): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_to' of StandardToken.transfer (TestToken.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of StandardToken.transfer (TestToken.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (TestToken.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (TestToken.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (TestToken.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of StandardToken.balanceOf (TestToken.sol#70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender,  uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (TestToken.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender,  uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (TestToken.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (TestToken.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (TestToken.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (TestToken.sol#84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (TestToken.sol#84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (TestToken.sol#90) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (TestToken.sol#90) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBalance(address _address, uint256 _balance) external {\n",
                    "message": "Parameter '_address' of TestToken.setBalance (TestToken.sol#138) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBalance(address _address, uint256 _balance) external {\n",
                    "message": "Parameter '_balance' of TestToken.setBalance (TestToken.sol#138) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender,  uint256 _value) public returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/TestERC721Receiver.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestERC721Receiver.sol:\n\t- pragma solidity^0.5.11 (TestERC721Receiver.sol#4): it allows old versions\n\t- pragma solidity^0.5.11 (TestERC721Receiver.sol#20): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _operator,\n",
                    "message": "Parameter '_operator' of TestERC721Receiver.onERC721Received (TestERC721Receiver.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of TestERC721Receiver.onERC721Received (TestERC721Receiver.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId,\n",
                    "message": "Parameter '_tokenId' of TestERC721Receiver.onERC721Received (TestERC721Receiver.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _userData\n",
                    "message": "Parameter '_userData' of TestERC721Receiver.onERC721Received (TestERC721Receiver.sol#34) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return bytes4(0x150b7a02);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/diaspore/TestDebtEngine.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestDebtEngine.sol:\n\t- pragma solidity^0.5.11 (TestDebtEngine.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token\n",
                    "message": "Parameter '_token' of TestDebtEngine. (TestDebtEngine.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _creator,\n",
                    "message": "Parameter '_creator' of TestDebtEngine.buildId2 (TestDebtEngine.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _model,\n",
                    "message": "Parameter '_model' of TestDebtEngine.buildId2 (TestDebtEngine.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _oracle,\n",
                    "message": "Parameter '_oracle' of TestDebtEngine.buildId2 (TestDebtEngine.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _salt,\n",
                    "message": "Parameter '_salt' of TestDebtEngine.buildId2 (TestDebtEngine.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data\n",
                    "message": "Parameter '_data' of TestDebtEngine.buildId2 (TestDebtEngine.sol#20) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return 0x0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/diaspore/TestLoanCallback.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            stub = keccak256(abi.encodePacked(stub));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            stub = keccak256(abi.encodePacked(stub));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_id == requireId, \"callback: wrong id\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_lender == requireLender, \"callback: wrong lender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(keccak256(abi.encodePacked(_data)) == keccak256(abi.encodePacked(requireData)), \"callback: wrong data\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestLoanCallback.sol:\n\t- pragma solidity^0.5.11 (TestLoanCallback.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TestLoanCallback.sol#25): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _id,\n",
                    "message": "Parameter '_id' of TestLoanCallback.onLent (TestLoanCallback.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _lender,\n",
                    "message": "Parameter '_lender' of TestLoanCallback.onLent (TestLoanCallback.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data\n",
                    "message": "Parameter '_data' of TestLoanCallback.onLent (TestLoanCallback.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setRequireId(bytes32 _id) external {\n",
                    "message": "Parameter '_id' of TestLoanCallback.setRequireId (TestLoanCallback.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setRequireLender(address _lender) external {\n",
                    "message": "Parameter '_lender' of TestLoanCallback.setRequireLender (TestLoanCallback.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setRequireData(bytes calldata _data) external {\n",
                    "message": "Parameter '_data' of TestLoanCallback.setRequireData (TestLoanCallback.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBurnGas(uint256 _gas) external {\n",
                    "message": "Parameter '_gas' of TestLoanCallback.setBurnGas (TestLoanCallback.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setReturn(bool _value) external {\n",
                    "message": "Parameter '_value' of TestLoanCallback.setReturn (TestLoanCallback.sol#58) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (initGas - gasleft() < targetGas) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/diaspore/TestLoanApprover.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(0x76ba6009);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(0xcd40239e);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(0xbbfa4397);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                revert(\"Loan rejected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_31"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (TestLoanApprover.sol#127-132) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (TestLoanApprover.sol#134-141) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 153,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (TestLoanApprover.sol#143-153) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestLoanApprover.sol#155-173) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestLoanApprover.sol#175-198) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestLoanApprover.sol#200-228) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 263,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestLoanApprover.sol#230-263) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestLoanApprover.sol#265-310) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (TestLoanApprover.sol#127-132)\n\t- TestLoanApprover.sol#129-131\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (TestLoanApprover.sol#134-141)\n\t- TestLoanApprover.sol#136-140\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 153,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (TestLoanApprover.sol#143-153)\n\t- TestLoanApprover.sol#148-152\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestLoanApprover.sol#155-173)\n\t- TestLoanApprover.sol#161-171\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestLoanApprover.sol#175-198)\n\t- TestLoanApprover.sol#182-196\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestLoanApprover.sol#200-228)\n\t- TestLoanApprover.sol#208-226\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 263,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestLoanApprover.sol#230-263)\n\t- TestLoanApprover.sol#239-261\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestLoanApprover.sol#265-310)\n\t- TestLoanApprover.sol#282-308\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestLoanApprover.sol:\n\t- pragma solidity^0.5.11 (TestLoanApprover.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TestLoanApprover.sol#18): it allows old versions\n\t- pragma solidity^0.5.11 (TestLoanApprover.sol#70): it allows old versions\n\t- pragma solidity^0.5.11 (TestLoanApprover.sol#123): it allows old versions\n\t- pragma solidity^0.5.11 (TestLoanApprover.sol#316): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (TestLoanApprover.sol#113-118) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (TestLoanApprover.sol#78) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestLoanApprover.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (TestLoanApprover.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestLoanApprover.sol#156) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestLoanApprover.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestLoanApprover.sol#201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestLoanApprover.sol#231) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestLoanApprover.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _futureDebt\n",
                    "message": "Parameter '_futureDebt' of TestLoanApprover.approveRequest (TestLoanApprover.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _loanData,\n",
                    "message": "Parameter '_loanData' of TestLoanApprover.settleApproveRequest (TestLoanApprover.sol#374) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _id\n",
                    "message": "Parameter '_id' of TestLoanApprover.settleApproveRequest (TestLoanApprover.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _expected\n",
                    "message": "Parameter '_expected' of TestLoanApprover.setExpectedApprove (TestLoanApprover.sol#340) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ErrorBehavior _code\n",
                    "message": "Parameter '_code' of TestLoanApprover.setErrorBehavior (TestLoanApprover.sol#347) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(0x76ba6009);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(0xcd40239e);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(0xbbfa4397);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        expectedApprove = 0x0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return 0x0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (errorBehavior == ErrorBehavior.Revert) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function settleApproveRequest(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function settleApproveRequest(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _loanData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _isBorrower,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _id\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        external returns (bytes32);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _loanData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _isBorrower,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _id\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (bytes32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 btotal;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (btotal, ) = decode(_loanData, 16, 8);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (btotal, ) = decode(_loanData, 16, 8);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 total = uint128(uint256(btotal));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (total == 666)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return bytes32(_id) ^ keccak256(\"approve-loan-request\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return bytes32(_id) ^ keccak256(\"approve-loan-request\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return bytes32(_id) ^ keccak256(\"approve-loan-request\");\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/diaspore/TestModel.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TestModel is ERC165, BytesUtils, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(MODEL_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == engine, \"Sender is not engine\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length == L_DATA, \"Invalid data length\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length == L_DATA, \"Invalid data length\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paid < U_128_OVERFLOW, \"Paid overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(total < U_128_OVERFLOW, \"Total overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 601,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(due > now, \"Due time already past\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (now >= dueTime && prevPing < dueTime) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                emit ChangedObligation(id, dueTime, entry.total);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            while (aux / aux != 2) aux++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            while (aux / aux != 2) aux++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            while (aux / aux != 2) aux++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_42"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (TestModel.sol#129-134) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (TestModel.sol#136-143) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (TestModel.sol#145-155) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestModel.sol#157-175) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestModel.sol#177-200) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestModel.sol#202-230) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 265,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestModel.sol#232-265) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestModel.sol#267-312) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 aux;\n",
                    "message": "aux in TestModel.getStatus (TestModel.sol#437) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 aux;\n",
                    "message": "aux in TestModel._run (TestModel.sol#583) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 aux;\n",
                    "message": "aux in TestModel.addPaid (TestModel.sol#523) is a local variable never initialiazed\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (TestModel.sol#129-134)\n\t- TestModel.sol#131-133\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (TestModel.sol#136-143)\n\t- TestModel.sol#138-142\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (TestModel.sol#145-155)\n\t- TestModel.sol#150-154\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestModel.sol#157-175)\n\t- TestModel.sol#163-173\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestModel.sol#177-200)\n\t- TestModel.sol#184-198\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestModel.sol#202-230)\n\t- TestModel.sol#210-228\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 265,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestModel.sol#232-265)\n\t- TestModel.sol#241-263\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestModel.sol#267-312)\n\t- TestModel.sol#284-310\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestModel.sol:\n\t- pragma solidity^0.5.11 (TestModel.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TestModel.sol#18): it allows old versions\n\t- pragma solidity^0.5.11 (TestModel.sol#71): it allows old versions\n\t- pragma solidity^0.5.11 (TestModel.sol#92): it allows old versions\n\t- pragma solidity^0.5.11 (TestModel.sol#125): it allows old versions\n\t- pragma solidity^0.5.11 (TestModel.sol#319): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 66,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (TestModel.sol#61-66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (TestModel.sol#26) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (TestModel.sol#116) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal _owner;\n",
                    "message": "Variable 'Ownable._owner' (TestModel.sol#95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestModel.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (TestModel.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestModel.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestModel.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestModel.sol#203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestModel.sol#233) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestModel.sol#268) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _total,\n",
                    "message": "Parameter '_total' of TestModel.encodeData (TestModel.sol#367) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint64 _dueTime\n",
                    "message": "Parameter '_dueTime' of TestModel.encodeData (TestModel.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGlobalErrorFlag(uint256 _flag) external onlyOwner {\n",
                    "message": "Parameter '_flag' of TestModel.setGlobalErrorFlag (TestModel.sol#391) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setErrorFlag(bytes32 _id, uint64 _flag) external onlyOwner {\n",
                    "message": "Parameter '_id' of TestModel.setErrorFlag (TestModel.sol#396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setErrorFlag(bytes32 _id, uint64 _flag) external onlyOwner {\n",
                    "message": "Parameter '_flag' of TestModel.setErrorFlag (TestModel.sol#396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEngine(address _engine) external onlyOwner {\n",
                    "message": "Parameter '_engine' of TestModel.setEngine (TestModel.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFrequency(bytes32) external view returns (uint256) {\n",
                    "message": "Parameter '' of TestModel.getFrequency (TestModel.sol#474) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInstallments(bytes32) external view returns (uint256) {\n",
                    "message": "Parameter '' of TestModel.getInstallments (TestModel.sol#478) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": 598,
                    "vulnerability_code": "    function _run(bytes32 id) internal returns (bool) {\n\n        Entry storage entry = registry[id];\n\n        uint256 prevPing = entry.lastPing;\n\n\n\n        if (entry.errorFlag == ERROR_RUN) {\n\n            return uint256(10) / uint256(0) == 9;\n\n        } else if (entry.errorFlag == ERROR_INFINITE_LOOP_RUN) {\n\n            uint256 aux;\n\n            while (aux / aux != 2) aux++;\n\n            return aux == 1;\n\n        }\n\n\n\n        if (now != prevPing) {\n\n            uint256 dueTime = entry.dueTime;\n\n\n\n            if (now >= dueTime && prevPing < dueTime) {\n\n                emit ChangedObligation(id, dueTime, entry.total);\n\n            }\n\n\n\n            entry.lastPing = uint64(now);\n\n            return true;\n\n        }\n",
                    "message": "Function 'TestModel._run' (TestModel.sol#576-598) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": 602,
                    "vulnerability_code": "    function _validate(uint256 due) internal view {\n\n        require(due > now, \"Due time already past\");\n",
                    "message": "Function 'TestModel._validate' (TestModel.sol#600-602) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant U_64_OVERFLOW = 2 ** 64;\n",
                    "message": "TestModel.U_64_OVERFLOW (TestModel.sol#343) is never used in TestModel\nTestModel._supportedInterface (TestModel.sol#360) is never used in TestModel\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant MODEL_INTERFACE = 0xaf498c35;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXACT_TIME",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (now != prevPing) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGlobalErrorFlag(uint256 _flag) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setErrorFlag(bytes32 _id, uint64 _flag) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEngine(address _engine) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant U_128_OVERFLOW = 2 ** 128;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant U_64_OVERFLOW = 2 ** 64;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterface;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getObligation(bytes32 id, uint64 time) external view returns (uint256,bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/test_utils/diaspore/TestRateOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(RATE_ORACLE_INTERFACE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_31"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-state",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public constant VERSION = 5;\n",
                    "message": "TestRateOracle.VERSION (TestRateOracle.sol#331) shadows:\n\t- RateOracle.VERSION (TestRateOracle.sol#30)\n"
                },
                {
                    "name": "shadowing-state",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
                    "message": "TestRateOracle.RATE_ORACLE_INTERFACE (TestRateOracle.sol#332) shadows:\n\t- RateOracle.RATE_ORACLE_INTERFACE (TestRateOracle.sol#31)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": 142,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (TestRateOracle.sol#137-142) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (TestRateOracle.sol#144-151) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (TestRateOracle.sol#153-163) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestRateOracle.sol#165-183) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestRateOracle.sol#185-208) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestRateOracle.sol#210-238) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": 273,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestRateOracle.sol#240-273) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (TestRateOracle.sol#275-320) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": 142,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (TestRateOracle.sol#137-142)\n\t- TestRateOracle.sol#139-141\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (TestRateOracle.sol#144-151)\n\t- TestRateOracle.sol#146-150\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (TestRateOracle.sol#153-163)\n\t- TestRateOracle.sol#158-162\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestRateOracle.sol#165-183)\n\t- TestRateOracle.sol#171-181\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestRateOracle.sol#185-208)\n\t- TestRateOracle.sol#192-206\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestRateOracle.sol#210-238)\n\t- TestRateOracle.sol#218-236\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": 273,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestRateOracle.sol#240-273)\n\t- TestRateOracle.sol#249-271\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (TestRateOracle.sol#275-320)\n\t- TestRateOracle.sol#292-318\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in TestRateOracle.sol:\n\t- pragma solidity^0.5.11 (TestRateOracle.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TestRateOracle.sol#18): it allows old versions\n\t- pragma solidity^0.5.11 (TestRateOracle.sol#80): it allows old versions\n\t- pragma solidity^0.5.11 (TestRateOracle.sol#133): it allows old versions\n\t- pragma solidity^0.5.11 (TestRateOracle.sol#326): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (TestRateOracle.sol#123-128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (TestRateOracle.sol#88) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestRateOracle.sol#154) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (TestRateOracle.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestRateOracle.sol#166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestRateOracle.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestRateOracle.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestRateOracle.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (TestRateOracle.sol#276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readSample(bytes calldata _data) external returns (uint256 tokens, uint256 equivalent) {\n",
                    "message": "Parameter '_data' of TestRateOracle.readSample (TestRateOracle.sol#359) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _tokens,\n",
                    "message": "Parameter '_tokens' of TestRateOracle.encodeRate (TestRateOracle.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint128 _equivalent\n",
                    "message": "Parameter '_equivalent' of TestRateOracle.encodeRate (TestRateOracle.sol#354) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function symbol() external view returns (string memory) {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function name() external view returns (string memory) {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decimals() external view returns (uint256) {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function token() external view returns (address) {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function currency() external view returns (bytes32) {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function maintainer() external view returns (string memory) {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() external view returns (string memory) {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readSample(bytes calldata _data) external returns (uint256 tokens, uint256 equivalent) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/utils/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in SafeMath.sol:\n\t- pragma solidity^0.5.11 (SafeMath.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/utils/BytesUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_24"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 (BytesUtils.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read (BytesUtils.sol#14-21) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode (BytesUtils.sol#23-33) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (BytesUtils.sol#35-53) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (BytesUtils.sol#55-78) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (BytesUtils.sol#80-108) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (BytesUtils.sol#110-143) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode (BytesUtils.sol#145-190) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
                    "message": "BytesUtils.readBytes32 uses assembly (BytesUtils.sol#7-12)\n\t- BytesUtils.sol#9-11\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
                    "message": "BytesUtils.read uses assembly (BytesUtils.sol#14-21)\n\t- BytesUtils.sol#16-20\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
                    "message": "BytesUtils.decode uses assembly (BytesUtils.sol#23-33)\n\t- BytesUtils.sol#28-32\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (BytesUtils.sol#35-53)\n\t- BytesUtils.sol#41-51\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (BytesUtils.sol#55-78)\n\t- BytesUtils.sol#62-76\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (BytesUtils.sol#80-108)\n\t- BytesUtils.sol#88-106\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (BytesUtils.sol#110-143)\n\t- BytesUtils.sol#119-141\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
                    "message": "BytesUtils.decode uses assembly (BytesUtils.sol#145-190)\n\t- BytesUtils.sol#162-188\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in BytesUtils.sol:\n\t- pragma solidity^0.5.11 (BytesUtils.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _la\n",
                    "message": "Parameter '_la' of BytesUtils.decode (BytesUtils.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#111) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes memory _data,\n",
                    "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#146) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal pure returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/utils/ImplementsInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if ((success==1)&&(result==1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
                    "message": "ImplementsInterface._noThrowImplements (ImplementsInterface.sol#29-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
                    "message": "ImplementsInterface._noThrowImplements uses assembly (ImplementsInterface.sol#29-49)\n\t- ImplementsInterface.sol#34-48\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in ImplementsInterface.sol:\n\t- pragma solidity^0.5.11 (ImplementsInterface.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function implementsMethod(address _contract, bytes4 _interfaceId) internal view returns (bool) {\n",
                    "message": "Parameter '_contract' of ImplementsInterface.implementsMethod (ImplementsInterface.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function implementsMethod(address _contract, bytes4 _interfaceId) internal view returns (bool) {\n",
                    "message": "Parameter '_interfaceId' of ImplementsInterface.implementsMethod (ImplementsInterface.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
                    "message": "Function 'ImplementsInterface._noThrowImplements' (ImplementsInterface.sol#29-49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
                    "message": "Constant 'ImplementsInterface.InvalidID' (ImplementsInterface.sol#7) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant ERC165ID = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _noThrowImplements(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _noThrowImplements(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) private view returns (uint256 success, uint256 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant ERC165ID = 0x01ffc9a7;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/utils/IsContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract (IsContract.sol#7-11) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
                    "message": "IsContract.isContract uses assembly (IsContract.sol#7-11)\n\t- IsContract.sol#9\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in IsContract.sol:\n\t- pragma solidity^0.5.11 (IsContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/interfaces/IERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in IERC20.sol:\n\t- pragma solidity^0.5.11 (IERC20.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/interfaces/Cosigner.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function url() public view returns (string memory);\n",
                    "message": "Cosigner.url (Cosigner.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function cost(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
                    "message": "Cosigner.cost (Cosigner.sol#32-38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function requestCosign(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
                    "message": "Cosigner.requestCosign (Cosigner.sol#47-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address engine, uint256 index, bytes memory oracleData) public returns (bool);\n",
                    "message": "Cosigner.claim (Cosigner.sol#61) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in Cosigner.sol:\n\t- pragma solidity^0.5.11 (Cosigner.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/interfaces/IERC165.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in IERC165.sol:\n\t- pragma solidity^0.5.11 (IERC165.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    },
    "rcn-network-master/rcn-network-master/contracts/interfaces/IERC173.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": "Detected issues with version pragma in IERC173.sol:\n\t- pragma solidity^0.5.11 (IERC173.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.11;\n",
                    "message": null
                }
            ]
        }
    }
}