{
    "code.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _rewards) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        strategist = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        onesplit = address(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        rewards = _rewards;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(vaults[_token] == address(0), \"vault\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(approvedStrategies[_token][_strategy] == true, \"!approved\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == strategist || msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == strategist || msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == strategist || msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == vaults[_token], \"!vault\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_60"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (code.sol#66-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 239,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n\n        require(approvedStrategies[_token][_strategy] == true, \"!approved\");\n\n\n\n        address _current = strategies[_token];\n\n        if (_current != address(0)) {\n\n            Strategy(_current).withdrawAll();\n\n        }\n\n        strategies[_token] = _strategy;\n",
                    "message": "Reentrancy in Controller.setStrategy (code.sol#230-239):\n\tExternal calls:\n\t- Strategy(_current).withdrawAll() (code.sol#236)\n\tState variables written after the call(s):\n\t- strategies (code.sol#238)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 239,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n\n        require(approvedStrategies[_token][_strategy] == true, \"!approved\");\n\n\n\n        address _current = strategies[_token];\n\n        if (_current != address(0)) {\n\n            Strategy(_current).withdrawAll();\n\n        }\n\n        strategies[_token] = _strategy;\n",
                    "message": "Controller.setStrategy (code.sol#230-239) does not use the value returned by external calls:\n\t-Strategy(_current).withdrawAll() (code.sol#236)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function withdrawAll(address _token) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n\n        Strategy(strategies[_token]).withdrawAll();\n",
                    "message": "Controller.withdrawAll (code.sol#259-262) does not use the value returned by external calls:\n\t-Strategy(strategies[_token]).withdrawAll() (code.sol#261)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": 305,
                    "vulnerability_code": "    function yearn(address _strategy, address _token, uint parts) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!governance\");\n\n        // This contract should never have value in it, but just incase since this is a public call\n\n        uint _before = IERC20(_token).balanceOf(address(this));\n\n        Strategy(_strategy).withdraw(_token);\n\n        uint _after =  IERC20(_token).balanceOf(address(this));\n\n        if (_after > _before) {\n\n            uint _amount = _after.sub(_before);\n\n            address _want = Strategy(_strategy).want();\n\n            uint[] memory _distribution;\n\n            uint _expected;\n\n            _before = IERC20(_want).balanceOf(address(this));\n\n            IERC20(_token).safeApprove(onesplit, 0);\n\n            IERC20(_token).safeApprove(onesplit, _amount);\n\n            (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);\n\n            OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);\n\n            _after = IERC20(_want).balanceOf(address(this));\n\n            if (_after > _before) {\n\n                _amount = _after.sub(_before);\n\n                uint _reward = _amount.mul(split).div(max);\n\n                earn(_want, _amount.sub(_reward));\n\n                IERC20(_want).safeTransfer(rewards, _reward);\n\n            }\n\n        }\n",
                    "message": "Controller.yearn (code.sol#281-305) does not use the value returned by external calls:\n\t-OneSplitAudit(onesplit).swap(_token,_want,_amount,_expected,_distribution,0) (code.sol#296)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (code.sol#66-72)\n\t- code.sol#70\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": 187,
                    "vulnerability_code": "    function setRewards(address _rewards) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        rewards = _rewards;\n",
                    "message": "Controller.setRewards (code.sol#184-187) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": 192,
                    "vulnerability_code": "    function setStrategist(address _strategist) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        strategist = _strategist;\n",
                    "message": "Controller.setStrategist (code.sol#189-192) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 197,
                    "vulnerability_code": "    function setSplit(uint _split) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        split = _split;\n",
                    "message": "Controller.setSplit (code.sol#194-197) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "    function setOneSplit(address _onesplit) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        onesplit = _onesplit;\n",
                    "message": "Controller.setOneSplit (code.sol#199-202) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "Controller.setGovernance (code.sol#204-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "    function setVault(address _token, address _vault) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n\n        require(vaults[_token] == address(0), \"vault\");\n\n        vaults[_token] = _vault;\n",
                    "message": "Controller.setVault (code.sol#209-213) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": 218,
                    "vulnerability_code": "    function approveStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        approvedStrategies[_token][_strategy] = true;\n",
                    "message": "Controller.approveStrategy (code.sol#215-218) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": 223,
                    "vulnerability_code": "    function revokeStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        approvedStrategies[_token][_strategy] = false;\n",
                    "message": "Controller.revokeStrategy (code.sol#220-223) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n\n        converters[_input][_output] = _converter;\n",
                    "message": "Controller.setConverter (code.sol#225-228) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 239,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n\n        require(approvedStrategies[_token][_strategy] == true, \"!approved\");\n\n\n\n        address _current = strategies[_token];\n\n        if (_current != address(0)) {\n\n            Strategy(_current).withdrawAll();\n\n        }\n\n        strategies[_token] = _strategy;\n",
                    "message": "Controller.setStrategy (code.sol#230-239) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function withdrawAll(address _token) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n\n        Strategy(strategies[_token]).withdrawAll();\n",
                    "message": "Controller.withdrawAll (code.sol#259-262) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": 267,
                    "vulnerability_code": "    function inCaseTokensGetStuck(address _token, uint _amount) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!governance\");\n\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n",
                    "message": "Controller.inCaseTokensGetStuck (code.sol#264-267) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 272,
                    "vulnerability_code": "    function inCaseStrategyTokenGetStuck(address _strategy, address _token) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!governance\");\n\n        Strategy(_strategy).withdraw(_token);\n",
                    "message": "Controller.inCaseStrategyTokenGetStuck (code.sol#269-272) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 278,
                    "vulnerability_code": "    function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {\n\n        uint _balance = IERC20(_token).balanceOf(_strategy);\n\n        address _want = Strategy(_strategy).want();\n\n        (expected,) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);\n",
                    "message": "Controller.getExpectedReturn (code.sol#274-278) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": 305,
                    "vulnerability_code": "    function yearn(address _strategy, address _token, uint parts) public {\n\n        require(msg.sender == strategist || msg.sender == governance, \"!governance\");\n\n        // This contract should never have value in it, but just incase since this is a public call\n\n        uint _before = IERC20(_token).balanceOf(address(this));\n\n        Strategy(_strategy).withdraw(_token);\n\n        uint _after =  IERC20(_token).balanceOf(address(this));\n\n        if (_after > _before) {\n\n            uint _amount = _after.sub(_before);\n\n            address _want = Strategy(_strategy).want();\n\n            uint[] memory _distribution;\n\n            uint _expected;\n\n            _before = IERC20(_want).balanceOf(address(this));\n\n            IERC20(_token).safeApprove(onesplit, 0);\n\n            IERC20(_token).safeApprove(onesplit, _amount);\n\n            (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);\n\n            OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);\n\n            _after = IERC20(_want).balanceOf(address(this));\n\n            if (_after > _before) {\n\n                _amount = _after.sub(_before);\n\n                uint _reward = _amount.mul(split).div(max);\n\n                earn(_want, _amount.sub(_reward));\n\n                IERC20(_want).safeTransfer(rewards, _reward);\n\n            }\n\n        }\n",
                    "message": "Controller.yearn (code.sol#281-305) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "    function withdraw(address _token, uint _amount) public {\n\n        require(msg.sender == vaults[_token], \"!vault\");\n\n        Strategy(strategies[_token]).withdraw(_amount);\n",
                    "message": "Controller.withdraw (code.sol#307-310) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in code.sol:\n\t- pragma solidity^0.5.16 (code.sol#7): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": 82,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (code.sol#76-82):\n\t-(success) = recipient.call.value(amount)() code.sol#80\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (code.sol#103-114):\n\t-(success,returndata) = address(token).call(data) code.sol#107\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address) external;\n",
                    "message": "Parameter '' of Strategy.withdraw (code.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint) external;\n",
                    "message": "Parameter '' of Strategy.withdraw (code.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function convert(address) external returns (uint);\n",
                    "message": "Parameter '' of Converter.convert (code.sol#127) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _rewards) public {\n",
                    "message": "Parameter '_rewards' of Controller. (code.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setRewards(address _rewards) public {\n",
                    "message": "Parameter '_rewards' of Controller.setRewards (code.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setStrategist(address _strategist) public {\n",
                    "message": "Parameter '_strategist' of Controller.setStrategist (code.sol#189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSplit(uint _split) public {\n",
                    "message": "Parameter '_split' of Controller.setSplit (code.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOneSplit(address _onesplit) public {\n",
                    "message": "Parameter '_onesplit' of Controller.setOneSplit (code.sol#199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of Controller.setGovernance (code.sol#204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setVault(address _token, address _vault) public {\n",
                    "message": "Parameter '_token' of Controller.setVault (code.sol#209) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setVault(address _token, address _vault) public {\n",
                    "message": "Parameter '_vault' of Controller.setVault (code.sol#209) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveStrategy(address _token, address _strategy) public {\n",
                    "message": "Parameter '_token' of Controller.approveStrategy (code.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveStrategy(address _token, address _strategy) public {\n",
                    "message": "Parameter '_strategy' of Controller.approveStrategy (code.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function revokeStrategy(address _token, address _strategy) public {\n",
                    "message": "Parameter '_token' of Controller.revokeStrategy (code.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function revokeStrategy(address _token, address _strategy) public {\n",
                    "message": "Parameter '_strategy' of Controller.revokeStrategy (code.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
                    "message": "Parameter '_input' of Controller.setConverter (code.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
                    "message": "Parameter '_output' of Controller.setConverter (code.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
                    "message": "Parameter '_converter' of Controller.setConverter (code.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n",
                    "message": "Parameter '_token' of Controller.setStrategy (code.sol#230) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n",
                    "message": "Parameter '_strategy' of Controller.setStrategy (code.sol#230) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address _token, uint _amount) public {\n",
                    "message": "Parameter '_token' of Controller.earn (code.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address _token, uint _amount) public {\n",
                    "message": "Parameter '_amount' of Controller.earn (code.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _token) external view returns (uint) {\n",
                    "message": "Parameter '_token' of Controller.balanceOf (code.sol#255) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawAll(address _token) public {\n",
                    "message": "Parameter '_token' of Controller.withdrawAll (code.sol#259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function inCaseTokensGetStuck(address _token, uint _amount) public {\n",
                    "message": "Parameter '_token' of Controller.inCaseTokensGetStuck (code.sol#264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function inCaseTokensGetStuck(address _token, uint _amount) public {\n",
                    "message": "Parameter '_amount' of Controller.inCaseTokensGetStuck (code.sol#264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function inCaseStrategyTokenGetStuck(address _strategy, address _token) public {\n",
                    "message": "Parameter '_strategy' of Controller.inCaseStrategyTokenGetStuck (code.sol#269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function inCaseStrategyTokenGetStuck(address _strategy, address _token) public {\n",
                    "message": "Parameter '_token' of Controller.inCaseStrategyTokenGetStuck (code.sol#269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {\n",
                    "message": "Parameter '_strategy' of Controller.getExpectedReturn (code.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {\n",
                    "message": "Parameter '_token' of Controller.getExpectedReturn (code.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function yearn(address _strategy, address _token, uint parts) public {\n",
                    "message": "Parameter '_strategy' of Controller.yearn (code.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function yearn(address _strategy, address _token, uint parts) public {\n",
                    "message": "Parameter '_token' of Controller.yearn (code.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _token, uint _amount) public {\n",
                    "message": "Parameter '_token' of Controller.withdraw (code.sol#307) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _token, uint _amount) public {\n",
                    "message": "Parameter '_amount' of Controller.withdraw (code.sol#307) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public constant max = 10000;\n",
                    "message": "Constant 'Controller.max' (code.sol#175) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        onesplit = address(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setRewards(address _rewards) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setStrategist(address _strategist) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSplit(uint _split) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOneSplit(address _onesplit) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setVault(address _token, address _vault) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swap(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata distribution,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 flags\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns(uint256 returnAmount);\n",
                    "message": null
                }
            ]
        }
    }
}