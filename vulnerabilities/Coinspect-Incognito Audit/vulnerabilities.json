{
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/erc20/usdc/usdc.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Blacklistable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract FiatTokenV1 is Ownable, ERC20, Pausable, Blacklistable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 internal totalSupply_ = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    setOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_54"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n",
                    "message": "FiatTokenV1.allowance.owner (local variable @ usdc.sol#501) shadows:\n\t- Ownable.owner (function @ usdc.sol#65-67)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner\n",
                    "message": "FiatTokenV1.initialize._owner (local variable @ usdc.sol#424) shadows:\n\t- Ownable._owner (state variable @ usdc.sol#45)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 92,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    emit OwnershipTransferred(owner(), newOwner);\n\n    setOwner(newOwner);\n",
                    "message": "Ownable.transferOwnership (usdc.sol#88-92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 157,
                    "vulnerability_code": "    function isBlacklisted(address _account) public view returns (bool) {\n\n        return blacklisted[_account];\n",
                    "message": "Blacklistable.isBlacklisted (usdc.sol#155-157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 166,
                    "vulnerability_code": "    function blacklist(address _account) public onlyBlacklister {\n\n        blacklisted[_account] = true;\n\n        emit Blacklisted(_account);\n",
                    "message": "Blacklistable.blacklist (usdc.sol#163-166) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function unBlacklist(address _account) public onlyBlacklister {\n\n        blacklisted[_account] = false;\n\n        emit UnBlacklisted(_account);\n",
                    "message": "Blacklistable.unBlacklist (usdc.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "    function updateBlacklister(address _newBlacklister) public onlyOwner {\n\n        require(_newBlacklister != address(0));\n\n        blacklister = _newBlacklister;\n\n        emit BlacklisterChanged(blacklister);\n",
                    "message": "Blacklistable.updateBlacklister (usdc.sol#177-181) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": 252,
                    "vulnerability_code": "  function pause() onlyPauser public {\n\n    paused = true;\n\n    emit Pause();\n",
                    "message": "Pausable.pause (usdc.sol#249-252) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 260,
                    "vulnerability_code": "  function unpause() onlyPauser public {\n\n    paused = false;\n\n    emit Unpause();\n",
                    "message": "Pausable.unpause (usdc.sol#257-260) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function updatePauser(address _newPauser) onlyOwner public {\n\n    require(_newPauser != address(0));\n\n    pauser = _newPauser;\n\n    emit PauserChanged(pauser);\n",
                    "message": "Pausable.updatePauser (usdc.sol#265-269) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": 510,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
                    "message": "FiatTokenV1.totalSupply (usdc.sol#508-510) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (usdc.sol#333) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": 518,
                    "vulnerability_code": "    function balanceOf(address account) public view returns (uint256) {\n\n        return balances[account];\n",
                    "message": "FiatTokenV1.balanceOf (usdc.sol#516-518) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (usdc.sol#334) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": 563,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_to) public returns (bool) {\n\n        require(_to != address(0));\n\n        require(_value <= balances[msg.sender]);\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n",
                    "message": "FiatTokenV1.transfer (usdc.sol#555-563) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (usdc.sol#335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "ERC20.allowance (usdc.sol#346-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": 503,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return allowed[owner][spender];\n",
                    "message": "FiatTokenV1.allowance (usdc.sol#501-503) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused notBlacklisted(_to) notBlacklisted(msg.sender) notBlacklisted(_from) public returns (bool) {\n\n        require(_to != address(0));\n\n        require(_value <= balances[_from]);\n\n        require(_value <= allowed[_from][msg.sender]);\n\n\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n",
                    "message": "FiatTokenV1.transferFrom (usdc.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "ERC20.transferFrom (usdc.sol#349-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (usdc.sol#352) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 528,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_spender) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "FiatTokenV1.approve (usdc.sol#524-528) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "    function initialize(\n\n        string _name,\n\n        string _symbol,\n\n        string _currency,\n\n        uint8 _decimals,\n\n        address _masterMinter,\n\n        address _pauser,\n\n        address _blacklister,\n\n        address _owner\n\n    ) public {\n\n        require(!initialized);\n\n        require(_masterMinter != address(0));\n\n        require(_pauser != address(0));\n\n        require(_blacklister != address(0));\n\n        require(_owner != address(0));\n\n\n\n        name = _name;\n\n        symbol = _symbol;\n\n        currency = _currency;\n\n        decimals = _decimals;\n\n        masterMinter = _masterMinter;\n\n        pauser = _pauser;\n\n        blacklister = _blacklister;\n\n        setOwner(_owner);\n\n        initialized = true;\n",
                    "message": "FiatTokenV1.initialize (usdc.sol#416-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": 470,
                    "vulnerability_code": "    function mint(address _to, uint256 _amount) whenNotPaused onlyMinters notBlacklisted(msg.sender) notBlacklisted(_to) public returns (bool) {\n\n        require(_to != address(0));\n\n        require(_amount > 0);\n\n\n\n        uint256 mintingAllowedAmount = minterAllowed[msg.sender];\n\n        require(_amount <= mintingAllowedAmount);\n\n\n\n        totalSupply_ = totalSupply_.add(_amount);\n\n        balances[_to] = balances[_to].add(_amount);\n\n        minterAllowed[msg.sender] = mintingAllowedAmount.sub(_amount);\n\n        emit Mint(msg.sender, _to, _amount);\n\n        emit Transfer(0x0, _to, _amount);\n\n        return true;\n",
                    "message": "FiatTokenV1.mint (usdc.sol#457-470) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": 486,
                    "vulnerability_code": "    function minterAllowance(address minter) public view returns (uint256) {\n\n        return minterAllowed[minter];\n",
                    "message": "FiatTokenV1.minterAllowance (usdc.sol#484-486) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "    function isMinter(address account) public view returns (bool) {\n\n        return minters[account];\n",
                    "message": "FiatTokenV1.isMinter (usdc.sol#492-494) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": 576,
                    "vulnerability_code": "    function configureMinter(address minter, uint256 minterAllowedAmount) whenNotPaused onlyMasterMinter public returns (bool) {\n\n        minters[minter] = true;\n\n        minterAllowed[minter] = minterAllowedAmount;\n\n        emit MinterConfigured(minter, minterAllowedAmount);\n\n        return true;\n",
                    "message": "FiatTokenV1.configureMinter (usdc.sol#571-576) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "    function removeMinter(address minter) onlyMasterMinter public returns (bool) {\n\n        minters[minter] = false;\n\n        minterAllowed[minter] = 0;\n\n        emit MinterRemoved(minter);\n\n        return true;\n",
                    "message": "FiatTokenV1.removeMinter (usdc.sol#583-588) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": 605,
                    "vulnerability_code": "    function burn(uint256 _amount) whenNotPaused onlyMinters notBlacklisted(msg.sender) public {\n\n        uint256 balance = balances[msg.sender];\n\n        require(_amount > 0);\n\n        require(balance >= _amount);\n\n\n\n        totalSupply_ = totalSupply_.sub(_amount);\n\n        balances[msg.sender] = balance.sub(_amount);\n\n        emit Burn(msg.sender, _amount);\n\n        emit Transfer(msg.sender, address(0), _amount);\n",
                    "message": "FiatTokenV1.burn (usdc.sol#596-605) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": 611,
                    "vulnerability_code": "    function updateMasterMinter(address _newMasterMinter) onlyOwner public {\n\n        require(_newMasterMinter != address(0));\n\n        masterMinter = _newMasterMinter;\n\n        emit MasterMinterChanged(masterMinter);\n",
                    "message": "FiatTokenV1.updateMasterMinter (usdc.sol#607-611) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isBlacklisted(address _account) public view returns (bool) {\n",
                    "message": "Parameter '_account' of Blacklistable.isBlacklisted (usdc.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function blacklist(address _account) public onlyBlacklister {\n",
                    "message": "Parameter '_account' of Blacklistable.blacklist (usdc.sol#163) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unBlacklist(address _account) public onlyBlacklister {\n",
                    "message": "Parameter '_account' of Blacklistable.unBlacklist (usdc.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateBlacklister(address _newBlacklister) public onlyOwner {\n",
                    "message": "Parameter '_newBlacklister' of Blacklistable.updateBlacklister (usdc.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePauser(address _newPauser) onlyOwner public {\n",
                    "message": "Parameter '_newPauser' of Pausable.updatePauser (usdc.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_to) public returns (bool) {\n",
                    "message": "Parameter '_to' of FiatTokenV1.transfer (usdc.sol#555) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_to) public returns (bool) {\n",
                    "message": "Parameter '_value' of FiatTokenV1.transfer (usdc.sol#555) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused notBlacklisted(_to) notBlacklisted(msg.sender) notBlacklisted(_from) public returns (bool) {\n",
                    "message": "Parameter '_from' of FiatTokenV1.transferFrom (usdc.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused notBlacklisted(_to) notBlacklisted(msg.sender) notBlacklisted(_from) public returns (bool) {\n",
                    "message": "Parameter '_to' of FiatTokenV1.transferFrom (usdc.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused notBlacklisted(_to) notBlacklisted(msg.sender) notBlacklisted(_from) public returns (bool) {\n",
                    "message": "Parameter '_value' of FiatTokenV1.transferFrom (usdc.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_spender) public returns (bool) {\n",
                    "message": "Parameter '_spender' of FiatTokenV1.approve (usdc.sol#524) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_spender) public returns (bool) {\n",
                    "message": "Parameter '_value' of FiatTokenV1.approve (usdc.sol#524) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _name,\n",
                    "message": "Parameter '_name' of FiatTokenV1.initialize (usdc.sol#417) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _symbol,\n",
                    "message": "Parameter '_symbol' of FiatTokenV1.initialize (usdc.sol#418) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _currency,\n",
                    "message": "Parameter '_currency' of FiatTokenV1.initialize (usdc.sol#419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of FiatTokenV1.initialize (usdc.sol#420) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _masterMinter,\n",
                    "message": "Parameter '_masterMinter' of FiatTokenV1.initialize (usdc.sol#421) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _pauser,\n",
                    "message": "Parameter '_pauser' of FiatTokenV1.initialize (usdc.sol#422) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _blacklister,\n",
                    "message": "Parameter '_blacklister' of FiatTokenV1.initialize (usdc.sol#423) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner\n",
                    "message": "Parameter '_owner' of FiatTokenV1.initialize (usdc.sol#424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _to, uint256 _amount) whenNotPaused onlyMinters notBlacklisted(msg.sender) notBlacklisted(_to) public returns (bool) {\n",
                    "message": "Parameter '_to' of FiatTokenV1.mint (usdc.sol#457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _to, uint256 _amount) whenNotPaused onlyMinters notBlacklisted(msg.sender) notBlacklisted(_to) public returns (bool) {\n",
                    "message": "Parameter '_amount' of FiatTokenV1.mint (usdc.sol#457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(uint256 _amount) whenNotPaused onlyMinters notBlacklisted(msg.sender) public {\n",
                    "message": "Parameter '_amount' of FiatTokenV1.burn (usdc.sol#596) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateMasterMinter(address _newMasterMinter) onlyOwner public {\n",
                    "message": "Parameter '_newMasterMinter' of FiatTokenV1.updateMasterMinter (usdc.sol#607) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_spender) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _currency,\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/erc20/usdc/usdc_wrap.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _setImplementation(_implementation);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _setAdmin(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_24"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "  function isContract(address addr) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(addr) }\n\n    return size > 0;\n",
                    "message": "AddressUtils.isContract (usdc_wrap.sol#91-102) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "UpgradeabilityProxy._implementation (usdc_wrap.sol#142-147) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "AdminUpgradeabilityProxy._admin (usdc_wrap.sol#274-279) is declared view but contains assembly code\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "UpgradeabilityProxy.constructor._implementation (local variable @ usdc_wrap.sol#132) shadows:\n\t- UpgradeabilityProxy._implementation (function @ usdc_wrap.sol#142-147)\n\t- Proxy._implementation (function @ usdc_wrap.sol#30)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\n",
                    "message": "AdminUpgradeabilityProxy.constructor._implementation (local variable @ usdc_wrap.sol#216) shadows:\n\t- UpgradeabilityProxy._implementation (function @ usdc_wrap.sol#142-147)\n\t- Proxy._implementation (function @ usdc_wrap.sol#30)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\n",
                    "message": "FiatTokenProxy.constructor._implementation (local variable @ usdc_wrap.sol#333) shadows:\n\t- UpgradeabilityProxy._implementation (function @ usdc_wrap.sol#142-147)\n\t- Proxy._implementation (function @ usdc_wrap.sol#30)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Proxy._delegate uses assembly (usdc_wrap.sol#38-57)\n\t- usdc_wrap.sol#39-57\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "  function isContract(address addr) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(addr) }\n\n    return size > 0;\n",
                    "message": "AddressUtils.isContract uses assembly (usdc_wrap.sol#91-102)\n\t- usdc_wrap.sol#100-101\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "UpgradeabilityProxy._implementation uses assembly (usdc_wrap.sol#142-147)\n\t- usdc_wrap.sol#144-147\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) private {\n\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "UpgradeabilityProxy._setImplementation uses assembly (usdc_wrap.sol#162-170)\n\t- usdc_wrap.sol#167-170\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "AdminUpgradeabilityProxy._admin uses assembly (usdc_wrap.sol#274-279)\n\t- usdc_wrap.sol#276-279\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "AdminUpgradeabilityProxy._setAdmin uses assembly (usdc_wrap.sol#285-291)\n\t- usdc_wrap.sol#288-291\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function upgradeToAndCall(address newImplementation, bytes data) payable external ifAdmin {\n\n    _upgradeTo(newImplementation);\n\n    require(address(this).call.value(msg.value)(data));\n",
                    "message": "Low level call in AdminUpgradeabilityProxy.upgradeToAndCall (usdc_wrap.sol#266-269):\n\t-require(bool)(address(this).call.value(msg.value)(data)) usdc_wrap.sol#268\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (usdc_wrap.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Function 'Proxy._delegate' (usdc_wrap.sol#38-57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "  function _willFallback() internal {\n",
                    "message": "Function 'Proxy._willFallback' (usdc_wrap.sol#64-65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "  function _fallback() internal {\n\n    _willFallback();\n\n    _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (usdc_wrap.sol#71-74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "Function 'UpgradeabilityProxy._implementation' (usdc_wrap.sol#142-147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "Parameter '_implementation' of UpgradeabilityProxy. (usdc_wrap.sol#132) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function _upgradeTo(address newImplementation) internal {\n\n    _setImplementation(newImplementation);\n\n    emit Upgraded(newImplementation);\n",
                    "message": "Function 'UpgradeabilityProxy._upgradeTo' (usdc_wrap.sol#153-156) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) private {\n\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "Function 'UpgradeabilityProxy._setImplementation' (usdc_wrap.sol#162-170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": 299,
                    "vulnerability_code": "  function _willFallback() internal {\n\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n\n    super._willFallback();\n",
                    "message": "Function 'AdminUpgradeabilityProxy._willFallback' (usdc_wrap.sol#296-299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "Function 'AdminUpgradeabilityProxy._admin' (usdc_wrap.sol#274-279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "Function 'AdminUpgradeabilityProxy._setAdmin' (usdc_wrap.sol#285-291) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address addr) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/erc20/usdc_wrap/usdc_wrap.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _setImplementation(_implementation);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _setAdmin(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_24"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "  function isContract(address addr) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(addr) }\n\n    return size > 0;\n",
                    "message": "AddressUtils.isContract (usdc_wrap.sol#91-102) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "UpgradeabilityProxy._implementation (usdc_wrap.sol#142-147) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "AdminUpgradeabilityProxy._admin (usdc_wrap.sol#274-279) is declared view but contains assembly code\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "UpgradeabilityProxy.constructor._implementation (local variable @ usdc_wrap.sol#132) shadows:\n\t- UpgradeabilityProxy._implementation (function @ usdc_wrap.sol#142-147)\n\t- Proxy._implementation (function @ usdc_wrap.sol#30)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\n",
                    "message": "AdminUpgradeabilityProxy.constructor._implementation (local variable @ usdc_wrap.sol#216) shadows:\n\t- UpgradeabilityProxy._implementation (function @ usdc_wrap.sol#142-147)\n\t- Proxy._implementation (function @ usdc_wrap.sol#30)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\n",
                    "message": "FiatTokenProxy.constructor._implementation (local variable @ usdc_wrap.sol#333) shadows:\n\t- UpgradeabilityProxy._implementation (function @ usdc_wrap.sol#142-147)\n\t- Proxy._implementation (function @ usdc_wrap.sol#30)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Proxy._delegate uses assembly (usdc_wrap.sol#38-57)\n\t- usdc_wrap.sol#39-57\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "  function isContract(address addr) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(addr) }\n\n    return size > 0;\n",
                    "message": "AddressUtils.isContract uses assembly (usdc_wrap.sol#91-102)\n\t- usdc_wrap.sol#100-101\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "UpgradeabilityProxy._implementation uses assembly (usdc_wrap.sol#142-147)\n\t- usdc_wrap.sol#144-147\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) private {\n\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "UpgradeabilityProxy._setImplementation uses assembly (usdc_wrap.sol#162-170)\n\t- usdc_wrap.sol#167-170\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "AdminUpgradeabilityProxy._admin uses assembly (usdc_wrap.sol#274-279)\n\t- usdc_wrap.sol#276-279\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "AdminUpgradeabilityProxy._setAdmin uses assembly (usdc_wrap.sol#285-291)\n\t- usdc_wrap.sol#288-291\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function upgradeToAndCall(address newImplementation, bytes data) payable external ifAdmin {\n\n    _upgradeTo(newImplementation);\n\n    require(address(this).call.value(msg.value)(data));\n",
                    "message": "Low level call in AdminUpgradeabilityProxy.upgradeToAndCall (usdc_wrap.sol#266-269):\n\t-require(bool)(address(this).call.value(msg.value)(data)) usdc_wrap.sol#268\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (usdc_wrap.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Function 'Proxy._delegate' (usdc_wrap.sol#38-57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "  function _willFallback() internal {\n",
                    "message": "Function 'Proxy._willFallback' (usdc_wrap.sol#64-65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "  function _fallback() internal {\n\n    _willFallback();\n\n    _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (usdc_wrap.sol#71-74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "Function 'UpgradeabilityProxy._implementation' (usdc_wrap.sol#142-147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "Parameter '_implementation' of UpgradeabilityProxy. (usdc_wrap.sol#132) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function _upgradeTo(address newImplementation) internal {\n\n    _setImplementation(newImplementation);\n\n    emit Upgraded(newImplementation);\n",
                    "message": "Function 'UpgradeabilityProxy._upgradeTo' (usdc_wrap.sol#153-156) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) private {\n\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "Function 'UpgradeabilityProxy._setImplementation' (usdc_wrap.sol#162-170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": 299,
                    "vulnerability_code": "  function _willFallback() internal {\n\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n\n    super._willFallback();\n",
                    "message": "Function 'AdminUpgradeabilityProxy._willFallback' (usdc_wrap.sol#296-299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "Function 'AdminUpgradeabilityProxy._admin' (usdc_wrap.sol#274-279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "Function 'AdminUpgradeabilityProxy._setAdmin' (usdc_wrap.sol#285-291) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address addr) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/erc20/fail/fail.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 initialSupply,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory tokenName,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimalUnits,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory tokenSymbol\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        totalSupply = initialSupply;                        // Update total supply\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = tokenName;                                   // Set the name for display purposes\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        symbol = tokenSymbol;                               // Set the symbol for display purposes\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-builtin",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "  function assert(bool assertion) internal {\n\n    if (!assertion) {\n\n      revert();\n\n    }\n",
                    "message": "SafeMath.assert (function @ fail.sol#37-41) shadows built-in symbol \"assert\"\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 92,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns(bool success) {\n\n        if (_to == address(0x0)) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n\n\t\tif (_value <= 0) revert();\n\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n\n        return false; // FAILLLLLLLL!!!!!\n",
                    "message": "FAIL.transfer (fail.sol#83-92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n\n\t\tif (_value <= 0) revert();\n\n        allowance[msg.sender][_spender] = _value;\n\n        return true;\n",
                    "message": "FAIL.approve (fail.sol#95-99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\n        if (_to == address(0x0)) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n\n\t\tif (_value <= 0) revert();\n\n        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n\n        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n\n        emit Transfer(_from, _to, _value);\n\n        return false; // FAILLLLLLLL!!!!!\n",
                    "message": "FAIL.transferFrom (fail.sol#103-114) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": 123,
                    "vulnerability_code": "    function burn(uint256 _value) public returns (bool success) {\n\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n\n\t\tif (_value <= 0) revert();\n\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n\n        emit Burn(msg.sender, _value);\n\n        return true;\n",
                    "message": "FAIL.burn (fail.sol#116-123) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "\tfunction freeze(uint256 _value) public returns (bool success) {\n\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n\n\t\tif (_value <= 0) revert();\n\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n\n        emit Freeze(msg.sender, _value);\n\n        return true;\n",
                    "message": "FAIL.freeze (fail.sol#125-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "\tfunction unfreeze(uint256 _value) public returns (bool success) {\n\n        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n\n\t\tif (_value <= 0) revert();\n\n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n\n        emit Unfreeze(msg.sender, _value);\n\n        return true;\n",
                    "message": "FAIL.unfreeze (fail.sol#134-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "\tfunction withdrawEther(uint256 amount) public {\n\n\t\tif(msg.sender != owner) revert();\n\n\t\towner.transfer(amount);\n",
                    "message": "FAIL.withdrawEther (fail.sol#144-147) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.8;\n",
                    "message": "Detected issues with version pragma in fail.sol:\n\t- pragma solidity^0.5.8 (fail.sol#7): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns(bool success) {\n",
                    "message": "Parameter '_to' of FAIL.transfer (fail.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns(bool success) {\n",
                    "message": "Parameter '_value' of FAIL.transfer (fail.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_spender' of FAIL.approve (fail.sol#95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of FAIL.approve (fail.sol#95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_from' of FAIL.transferFrom (fail.sol#103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_to' of FAIL.transferFrom (fail.sol#103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of FAIL.transferFrom (fail.sol#103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of FAIL.burn (fail.sol#116) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction freeze(uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of FAIL.freeze (fail.sol#125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction unfreeze(uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of FAIL.unfreeze (fail.sol#134) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_to == address(0x0)) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_to == address(0x0)) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.8;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (!assertion) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_to == address(0x0)) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_to == address(0x0)) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif(msg.sender != owner) revert();\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/erc20/dless/dless.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 initialSupply,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory tokenName,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory tokenSymbol\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        totalSupply = initialSupply;                        // Update total supply\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = tokenName;                                   // Set the name for display purposes\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        symbol = tokenSymbol;                               // Set the symbol for display purposes\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\towner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-builtin",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "  function assert(bool assertion) internal {\n\n    if (!assertion) {\n\n      revert();\n\n    }\n",
                    "message": "SafeMath.assert (function @ dless.sol#37-41) shadows built-in symbol \"assert\"\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns(bool success) {\n\n        if (_to == address(0x0)) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n\n\t\tif (_value <= 0) revert();\n\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n\n        return true;\n",
                    "message": "DLESS.transfer (dless.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": 100,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n\n\t\tif (_value <= 0) revert();\n\n        allowance[msg.sender][_spender] = _value;\n\n        return true;\n",
                    "message": "DLESS.approve (dless.sol#96-100) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\n        if (_to == address(0x0)) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n\n\t\tif (_value <= 0) revert();\n\n        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n\n        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n",
                    "message": "DLESS.transferFrom (dless.sol#104-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": 124,
                    "vulnerability_code": "    function burn(uint256 _value) public returns (bool success) {\n\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n\n\t\tif (_value <= 0) revert();\n\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n\n        emit Burn(msg.sender, _value);\n\n        return true;\n",
                    "message": "DLESS.burn (dless.sol#117-124) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 133,
                    "vulnerability_code": "\tfunction freeze(uint256 _value) public returns (bool success) {\n\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n\n\t\tif (_value <= 0) revert();\n\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n\n        emit Freeze(msg.sender, _value);\n\n        return true;\n",
                    "message": "DLESS.freeze (dless.sol#126-133) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 142,
                    "vulnerability_code": "\tfunction unfreeze(uint256 _value) public returns (bool success) {\n\n        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n\n\t\tif (_value <= 0) revert();\n\n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n\n        emit Unfreeze(msg.sender, _value);\n\n        return true;\n",
                    "message": "DLESS.unfreeze (dless.sol#135-142) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "\tfunction withdrawEther(uint256 amount) public {\n\n\t\tif(msg.sender != owner) revert();\n\n\t\towner.transfer(amount);\n",
                    "message": "DLESS.withdrawEther (dless.sol#145-148) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.8;\n",
                    "message": "Detected issues with version pragma in dless.sol:\n\t- pragma solidity^0.5.8 (dless.sol#7): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns(bool success) {\n",
                    "message": "Parameter '_to' of DLESS.transfer (dless.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns(bool success) {\n",
                    "message": "Parameter '_value' of DLESS.transfer (dless.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_spender' of DLESS.approve (dless.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of DLESS.approve (dless.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_from' of DLESS.transferFrom (dless.sol#104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_to' of DLESS.transferFrom (dless.sol#104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of DLESS.transferFrom (dless.sol#104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of DLESS.burn (dless.sol#117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction freeze(uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of DLESS.freeze (dless.sol#126) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction unfreeze(uint256 _value) public returns (bool success) {\n",
                    "message": "Parameter '_value' of DLESS.unfreeze (dless.sol#135) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_to == address(0x0)) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_to == address(0x0)) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.8;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (!assertion) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_to == address(0x0)) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_to == address(0x0)) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tif(msg.sender != owner) revert();\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/erc20/usdt/usdt.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract BasicToken is Ownable, ERC20Basic {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract BlackList is Ownable, BasicToken {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public basisPointsRate = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public maximumFee = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_52"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "contract ERC20Basic {\n\n    uint public _totalSupply;\n\n    function totalSupply() public constant returns (uint);\n\n    function balanceOf(address who) public constant returns (uint);\n\n    function transfer(address to, uint value) public;\n\n    event Transfer(address indexed from, address indexed to, uint value);\n",
                    "message": "ERC20Basic (usdt.sol#83-89) has incorrect ERC20 function interface(s):\n\t-transfer (usdt.sol#87)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 100,
                    "vulnerability_code": "contract ERC20 is ERC20Basic {\n\n    function allowance(address owner, address spender) public constant returns (uint);\n\n    function transferFrom(address from, address to, uint value) public;\n\n    function approve(address spender, uint value) public;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n",
                    "message": "ERC20 (usdt.sol#95-100) has incorrect ERC20 function interface(s):\n\t-transferFrom (usdt.sol#97)\n\t-approve (usdt.sol#98)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "contract BasicToken is Ownable, ERC20Basic {\n\n    using SafeMath for uint;\n\n\n\n    mapping(address => uint) public balances;\n\n\n\n    // additional variables for use if transaction fees ever became necessary\n\n    uint public basisPointsRate = 0;\n\n    uint public maximumFee = 0;\n\n\n\n    /**\n\n    * @dev Fix for the ERC20 short address attack.\n\n    */\n\n    modifier onlyPayloadSize(uint size) {\n\n        require(!(msg.data.length < size + 4));\n\n        _;\n\n    }\n\n\n\n    /**\n\n    * @dev transfer token for a specified address\n\n    * @param _to The address to transfer to.\n\n    * @param _value The amount to be transferred.\n\n    */\n\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\n\n        if (fee > maximumFee) {\n\n            fee = maximumFee;\n\n        }\n\n        uint sendAmount = _value.sub(fee);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(sendAmount);\n\n        if (fee > 0) {\n\n            balances[owner] = balances[owner].add(fee);\n\n            Transfer(msg.sender, owner, fee);\n\n        }\n\n        Transfer(msg.sender, _to, sendAmount);\n\n    }\n\n\n\n    /**\n\n    * @dev Gets the balance of the specified address.\n\n    * @param _owner The address to query the the balance of.\n\n    * @return An uint representing the amount owned by the passed address.\n\n    */\n\n    function balanceOf(address _owner) public constant returns (uint balance) {\n\n        return balances[_owner];\n\n    }\n\n\n",
                    "message": "BasicToken (usdt.sol#106-152) has incorrect ERC20 function interface(s):\n\t-transfer (usdt.sol#128-141)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": 223,
                    "vulnerability_code": "contract StandardToken is BasicToken, ERC20 {\n\n\n\n    mapping (address => mapping (address => uint)) public allowed;\n\n\n\n    uint public constant MAX_UINT = 2**256 - 1;\n\n\n\n    /**\n\n    * @dev Transfer tokens from one address to another\n\n    * @param _from address The address which you want to send tokens from\n\n    * @param _to address The address which you want to transfer to\n\n    * @param _value uint the amount of tokens to be transferred\n\n    */\n\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n\n        var _allowance = allowed[_from][msg.sender];\n\n\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n\n        // if (_value > _allowance) throw;\n\n\n\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\n\n        if (fee > maximumFee) {\n\n            fee = maximumFee;\n\n        }\n\n        if (_allowance < MAX_UINT) {\n\n            allowed[_from][msg.sender] = _allowance.sub(_value);\n\n        }\n\n        uint sendAmount = _value.sub(fee);\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(sendAmount);\n\n        if (fee > 0) {\n\n            balances[owner] = balances[owner].add(fee);\n\n            Transfer(_from, owner, fee);\n\n        }\n\n        Transfer(_from, _to, sendAmount);\n\n    }\n\n\n\n    /**\n\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\n    * @param _spender The address which will spend the funds.\n\n    * @param _value The amount of tokens to be spent.\n\n    */\n\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n\n\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n    }\n\n\n\n    /**\n\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\n\n    * @param _owner address The address which owns the funds.\n\n    * @param _spender address The address which will spend the funds.\n\n    * @return A uint specifying the amount of tokens still available for the spender.\n\n    */\n\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n\n        return allowed[_owner][_spender];\n\n    }\n\n\n",
                    "message": "StandardToken (usdt.sol#161-223) has incorrect ERC20 function interface(s):\n\t-transferFrom (usdt.sol#173-194)\n\t-approve (usdt.sol#201-211)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 453,
                    "vulnerability_code": "contract TetherToken is Pausable, StandardToken, BlackList {\n\n\n\n    string public name;\n\n    string public symbol;\n\n    uint public decimals;\n\n    address public upgradedAddress;\n\n    bool public deprecated;\n\n\n\n    //  The contract can be initialized with a number of tokens\n\n    //  All the tokens are deposited to the owner address\n\n    //\n\n    // @param _balance Initial supply of the contract\n\n    // @param _name Token Name\n\n    // @param _symbol Token symbol\n\n    // @param _decimals Token decimals\n\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n\n        _totalSupply = _initialSupply;\n\n        name = _name;\n\n        symbol = _symbol;\n\n        decimals = _decimals;\n\n        balances[owner] = _initialSupply;\n\n        deprecated = false;\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n    function transfer(address _to, uint _value) public whenNotPaused {\n\n        require(!isBlackListed[msg.sender]);\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\n\n        } else {\n\n            return super.transfer(_to, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\n\n        require(!isBlackListed[_from]);\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n\n        } else {\n\n            return super.transferFrom(_from, _to, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n    function balanceOf(address who) public constant returns (uint) {\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\n\n        } else {\n\n            return super.balanceOf(who);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\n\n        } else {\n\n            return super.approve(_spender, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\n\n        } else {\n\n            return super.allowance(_owner, _spender);\n\n        }\n\n    }\n\n\n\n    // deprecate current contract in favour of a new one\n\n    function deprecate(address _upgradedAddress) public onlyOwner {\n\n        deprecated = true;\n\n        upgradedAddress = _upgradedAddress;\n\n        Deprecate(_upgradedAddress);\n\n    }\n\n\n\n    // deprecate current contract if favour of a new one\n\n    function totalSupply() public constant returns (uint) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).totalSupply();\n\n        } else {\n\n            return _totalSupply;\n\n        }\n\n    }\n\n\n\n    // Issue a new amount of tokens\n\n    // these tokens are deposited into the owner address\n\n    //\n\n    // @param _amount Number of tokens to be issued\n\n    function issue(uint amount) public onlyOwner {\n\n        require(_totalSupply + amount > _totalSupply);\n\n        require(balances[owner] + amount > balances[owner]);\n\n\n\n        balances[owner] += amount;\n\n        _totalSupply += amount;\n\n        Issue(amount);\n\n    }\n\n\n\n    // Redeem tokens.\n\n    // These tokens are withdrawn from the owner address\n\n    // if the balance must be enough to cover the redeem\n\n    // or the call will fail.\n\n    // @param _amount Number of tokens to be issued\n\n    function redeem(uint amount) public onlyOwner {\n\n        require(_totalSupply >= amount);\n\n        require(balances[owner] >= amount);\n\n\n\n        _totalSupply -= amount;\n\n        balances[owner] -= amount;\n\n        Redeem(amount);\n\n    }\n\n\n\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\n\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\n\n        require(newBasisPoints < 20);\n\n        require(newMaxFee < 50);\n\n\n\n        basisPointsRate = newBasisPoints;\n\n        maximumFee = newMaxFee.mul(10**decimals);\n\n\n\n        Params(basisPointsRate, maximumFee);\n\n    }\n\n\n\n    // Called when new token are issued\n\n    event Issue(uint amount);\n\n\n\n    // Called when tokens are redeemed\n\n    event Redeem(uint amount);\n\n\n\n    // Called when contract is deprecated\n\n    event Deprecate(address newAddress);\n\n\n\n    // Called if contract ever adds fees\n\n    event Params(uint feeBasisPoints, uint maxFee);\n",
                    "message": "TetherToken (usdt.sol#317-453) has incorrect ERC20 function interface(s):\n\t-transfer (usdt.sol#342-349)\n\t-transferFrom (usdt.sol#352-359)\n\t-approve (usdt.sol#371-377)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        if (newOwner != address(0)) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Ownable.transferOwnership (usdt.sol#70-74) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": 402,
                    "vulnerability_code": "    function totalSupply() public constant returns (uint) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).totalSupply();\n\n        } else {\n\n            return _totalSupply;\n\n        }\n",
                    "message": "TetherToken.totalSupply (usdt.sol#396-402) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public constant returns (uint);\n",
                    "message": "ERC20Basic.totalSupply (usdt.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": 259,
                    "vulnerability_code": "  function pause() onlyOwner whenNotPaused public {\n\n    paused = true;\n\n    Pause();\n",
                    "message": "Pausable.pause (usdt.sol#256-259) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": 267,
                    "vulnerability_code": "  function unpause() onlyOwner whenPaused public {\n\n    paused = false;\n\n    Unpause();\n",
                    "message": "Pausable.unpause (usdt.sol#264-267) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 286,
                    "vulnerability_code": "    function addBlackList (address _evilUser) public onlyOwner {\n\n        isBlackListed[_evilUser] = true;\n\n        AddedBlackList(_evilUser);\n",
                    "message": "BlackList.addBlackList (usdt.sol#283-286) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "    function removeBlackList (address _clearedUser) public onlyOwner {\n\n        isBlackListed[_clearedUser] = false;\n\n        RemovedBlackList(_clearedUser);\n",
                    "message": "BlackList.removeBlackList (usdt.sol#288-291) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": 299,
                    "vulnerability_code": "    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\n\n        require(isBlackListed[_blackListedUser]);\n\n        uint dirtyFunds = balanceOf(_blackListedUser);\n\n        balances[_blackListedUser] = 0;\n\n        _totalSupply -= dirtyFunds;\n\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n",
                    "message": "BlackList.destroyBlackFunds (usdt.sol#293-299) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferByLegacy(address from, address to, uint value) public;\n",
                    "message": "UpgradedStandardToken.transferByLegacy (usdt.sol#312) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\n",
                    "message": "UpgradedStandardToken.transferFromByLegacy (usdt.sol#313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveByLegacy(address from, address spender, uint value) public;\n",
                    "message": "UpgradedStandardToken.approveByLegacy (usdt.sol#314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": 393,
                    "vulnerability_code": "    function deprecate(address _upgradedAddress) public onlyOwner {\n\n        deprecated = true;\n\n        upgradedAddress = _upgradedAddress;\n\n        Deprecate(_upgradedAddress);\n",
                    "message": "TetherToken.deprecate (usdt.sol#389-393) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": 415,
                    "vulnerability_code": "    function issue(uint amount) public onlyOwner {\n\n        require(_totalSupply + amount > _totalSupply);\n\n        require(balances[owner] + amount > balances[owner]);\n\n\n\n        balances[owner] += amount;\n\n        _totalSupply += amount;\n\n        Issue(amount);\n",
                    "message": "TetherToken.issue (usdt.sol#408-415) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "    function redeem(uint amount) public onlyOwner {\n\n        require(_totalSupply >= amount);\n\n        require(balances[owner] >= amount);\n\n\n\n        _totalSupply -= amount;\n\n        balances[owner] -= amount;\n\n        Redeem(amount);\n",
                    "message": "TetherToken.redeem (usdt.sol#422-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 440,
                    "vulnerability_code": "    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\n\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\n\n        require(newBasisPoints < 20);\n\n        require(newMaxFee < 50);\n\n\n\n        basisPointsRate = newBasisPoints;\n\n        maximumFee = newMaxFee.mul(10**decimals);\n\n\n\n        Params(basisPointsRate, maximumFee);\n",
                    "message": "TetherToken.setParams (usdt.sol#431-440) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.17;\n",
                    "message": "Detected issues with version pragma in usdt.sol:\n\t- pragma solidity^0.4.17 (usdt.sol#7): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function Ownable() public {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (usdt.sol#54-56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public _totalSupply;\n",
                    "message": "Variable 'ERC20Basic._totalSupply' (usdt.sol#84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (usdt.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (usdt.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (usdt.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (usdt.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (usdt.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (usdt.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (usdt.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (usdt.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (usdt.sol#201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (usdt.sol#201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlackListStatus(address _maker) external constant returns (bool) {\n",
                    "message": "Parameter '_maker' of BlackList.getBlackListStatus (usdt.sol#273) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addBlackList (address _evilUser) public onlyOwner {\n",
                    "message": "Parameter '_evilUser' of BlackList.addBlackList (usdt.sol#283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeBlackList (address _clearedUser) public onlyOwner {\n",
                    "message": "Parameter '_clearedUser' of BlackList.removeBlackList (usdt.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\n",
                    "message": "Parameter '_blackListedUser' of BlackList.destroyBlackFunds (usdt.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public whenNotPaused {\n",
                    "message": "Parameter '_to' of TetherToken.transfer (usdt.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public whenNotPaused {\n",
                    "message": "Parameter '_value' of TetherToken.transfer (usdt.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
                    "message": "Parameter '_owner' of TetherToken.allowance (usdt.sol#380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
                    "message": "Parameter '_spender' of TetherToken.allowance (usdt.sol#380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\n",
                    "message": "Parameter '_from' of TetherToken.transferFrom (usdt.sol#352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\n",
                    "message": "Parameter '_to' of TetherToken.transferFrom (usdt.sol#352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\n",
                    "message": "Parameter '_value' of TetherToken.transferFrom (usdt.sol#352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_spender' of TetherToken.approve (usdt.sol#371) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_value' of TetherToken.approve (usdt.sol#371) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": 339,
                    "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n\n        _totalSupply = _initialSupply;\n\n        name = _name;\n\n        symbol = _symbol;\n\n        decimals = _decimals;\n\n        balances[owner] = _initialSupply;\n\n        deprecated = false;\n",
                    "message": "Function 'TetherToken.TetherToken' (usdt.sol#332-339) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
                    "message": "Parameter '_initialSupply' of TetherToken.TetherToken (usdt.sol#332) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
                    "message": "Parameter '_name' of TetherToken.TetherToken (usdt.sol#332) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
                    "message": "Parameter '_symbol' of TetherToken.TetherToken (usdt.sol#332) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
                    "message": "Parameter '_decimals' of TetherToken.TetherToken (usdt.sol#332) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deprecate(address _upgradedAddress) public onlyOwner {\n",
                    "message": "Parameter '_upgradedAddress' of TetherToken.deprecate (usdt.sol#389) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public constant returns (uint);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) public constant returns (uint);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) public constant returns (uint);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlackListStatus(address _maker) external constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwner() external constant returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) public constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.17;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/bridge/contracts/IERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 92,
                    "vulnerability_code": "interface IERC20 {\n\n    /**\n\n     * @dev Returns the amount of tokens in existence.\n\n     */\n\n    function totalSupply() external view returns (uint);\n\n\n\n    /**\n\n     * @dev Returns the amount of tokens owned by `account`.\n\n     */\n\n    function balanceOf(address account) external view returns (uint);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\n     *\n\n     * Returns a boolean value indicating whether the operation succeeded.\n\n     *\n\n     * Emits a `Transfer` event.\n\n     */\n\n    function transfer(address recipient, uint amount) external;\n\n\n\n    /**\n\n     * @dev Returns the remaining number of tokens that `spender` will be\n\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n\n     * zero by default.\n\n     *\n\n     * This value changes when `approve` or `transferFrom` are called.\n\n     */\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\n     *\n\n     * Returns a boolean value indicating whether the operation succeeded.\n\n     *\n\n     * > Beware that changing an allowance with this method brings the risk\n\n     * that someone may use both the old and the new allowance by unfortunate\n\n     * transaction ordering. One possible solution to mitigate this race\n\n     * condition is to first reduce the spender's allowance to 0 and set the\n\n     * desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     *\n\n     * Emits an `Approval` event.\n\n     */\n\n    function approve(address spender, uint amount) external;\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\n     * allowance mechanism. `amount` is then deducted from the caller's\n\n     * allowance.\n\n     *\n\n     * Returns a boolean value indicating whether the operation succeeded.\n\n     *\n\n     * Emits a `Transfer` event.\n\n     */\n\n    function transferFrom(address sender, address recipient, uint amount) external;\n\n\n\n    /**\n\n     * @dev Returns the number of decimals used to get its user representation.\n\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n\n     *\n\n     * Tokens usually opt for a value of 18, imitating the relationship between\n\n     * Ether and Wei.\n\n     *\n\n     * NOTE: This information is only used for _display_ purposes: it in\n\n     * no way affects any of the arithmetic of the contract, including\n\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n\n     */\n\n    function decimals() external view returns (uint);\n\n\n\n    /**\n\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Note that `value` may be zero.\n\n     */\n\n    event Transfer(address indexed from, address indexed to, uint value);\n\n\n\n    /**\n\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\n     * a call to `approve`. `value` is the new allowance.\n\n     */\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n",
                    "message": "IERC20 (IERC20.sol#9-92) has incorrect ERC20 function interface(s):\n\t-transfer (IERC20.sol#27)\n\t-approve (IERC20.sol#52)\n\t-transferFrom (IERC20.sol#63)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": "Detected issues with version pragma in IERC20.sol:\n\t- pragma solidity^0.6.6 (IERC20.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/bridge/contracts/uniswap_trade.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(UniswapV2 _uniswapV2) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uniswapV2 = _uniswapV2;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wETH = uniswapV2.WETH();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(amounts[amounts.length - 1] >= amountOutMin && amounts[0] == srcQty);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tIERC20 constant public ETH_CONTRACT_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function checkSuccess() internal pure returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tassembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    receive() external payable {}\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/bridge/contracts/transparentUpgraded.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newSuccessor != address(0), \"TransparentUpgradeableProxy: successor is the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _successor(), \"TransparentUpgradeableProxy: unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_paused(), \"TransparentUpgradeableProxy: contract paused already\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_paused(), \"TransparentUpgradeableProxy: contract not paused\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newIncognito != address(0), \"TransparentUpgradeableProxy: incognito proxy is the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_paused(), \"TransparentUpgradeableProxy: contract is paused\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newSuccessor != address(0), \"TransparentUpgradeableProxy: successor is the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _successor(), \"TransparentUpgradeableProxy: unauthorized\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_paused(), \"TransparentUpgradeableProxy: contract paused already\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_paused(), \"TransparentUpgradeableProxy: contract not paused\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newIncognito != address(0), \"TransparentUpgradeableProxy: incognito proxy is the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_paused(), \"TransparentUpgradeableProxy: contract is paused\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_45"
            ],
            "vulnerability_findings": [
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n\n        _setImplementation(_logic);\n\n        if(_data.length > 0) {\n\n            // solhint-disable-next-line avoid-low-level-calls\n\n            (bool success,) = _logic.delegatecall(_data);\n\n            require(success);\n\n        }\n",
                    "message": "UpgradeableProxy.constructor (transparentUpgraded.sol#108-116) uses delegatecall to a input-controlled function id\n\t(success) = _logic.delegatecall(_data) (transparentUpgraded.sol#113)\n"
                },
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": 385,
                    "vulnerability_code": "    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n\n        _upgradeTo(newImplementation);\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success,) = newImplementation.delegatecall(data);\n\n        require(success);\n",
                    "message": "TransparentUpgradeableProxy.upgradeToAndCall (transparentUpgraded.sol#380-385) uses delegatecall to a input-controlled function id\n\t(success) = newImplementation.delegatecall(data) (transparentUpgraded.sol#383)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
                    "message": "UpgradeableProxy._implementation (transparentUpgraded.sol#133-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies on extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "UpgradeableProxy.isContract (transparentUpgraded.sol#182-191) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = _ADMIN_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._admin (transparentUpgraded.sol#390-396) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": 419,
                    "vulnerability_code": "    function _successor() internal view returns (address sor) {\n\n        bytes32 slot = _SUCCESSOR_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sor := sload(slot)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._successor (transparentUpgraded.sol#413-419) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": 442,
                    "vulnerability_code": "    function _paused() internal view returns (bool psd) {\n\n        bytes32 slot = _PAUSED_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            psd := sload(slot)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._paused (transparentUpgraded.sol#436-442) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": 465,
                    "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n\n        bytes32 slot = _INCOGNITO_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            icg := sload(slot)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._incognito (transparentUpgraded.sol#459-465) is declared view but contains assembly code\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _logic, address _admin, address _incognito, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\n",
                    "message": "TransparentUpgradeableProxy.constructor._admin (local variable @ transparentUpgraded.sol#226) shadows:\n\t- TransparentUpgradeableProxy._admin (function @ transparentUpgraded.sol#390-396)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _logic, address _admin, address _incognito, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\n",
                    "message": "TransparentUpgradeableProxy.constructor._incognito (local variable @ transparentUpgraded.sol#226) shadows:\n\t- TransparentUpgradeableProxy._incognito (function @ transparentUpgraded.sol#459-465)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
                    "message": "Proxy._delegate uses assembly (transparentUpgraded.sol#23-42)\n\t- transparentUpgraded.sol#24-41\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
                    "message": "UpgradeableProxy._implementation uses assembly (transparentUpgraded.sol#133-139)\n\t- transparentUpgraded.sol#136-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
                    "message": "UpgradeableProxy._setImplementation uses assembly (transparentUpgraded.sol#154-163)\n\t- transparentUpgraded.sol#160-162\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies on extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "UpgradeableProxy.isContract uses assembly (transparentUpgraded.sol#182-191)\n\t- transparentUpgraded.sol#189\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = _ADMIN_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._admin uses assembly (transparentUpgraded.sol#390-396)\n\t- transparentUpgraded.sol#393-395\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": 408,
                    "vulnerability_code": "    function _setAdmin(address newAdmin) private {\n\n        bytes32 slot = _ADMIN_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newAdmin)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._setAdmin uses assembly (transparentUpgraded.sol#401-408)\n\t- transparentUpgraded.sol#405-407\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": 419,
                    "vulnerability_code": "    function _successor() internal view returns (address sor) {\n\n        bytes32 slot = _SUCCESSOR_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sor := sload(slot)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._successor uses assembly (transparentUpgraded.sol#413-419)\n\t- transparentUpgraded.sol#416-418\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "    function _setSuccesor(address newSuccessor) private {\n\n        bytes32 slot = _SUCCESSOR_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newSuccessor)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._setSuccesor uses assembly (transparentUpgraded.sol#424-431)\n\t- transparentUpgraded.sol#428-430\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": 442,
                    "vulnerability_code": "    function _paused() internal view returns (bool psd) {\n\n        bytes32 slot = _PAUSED_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            psd := sload(slot)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._paused uses assembly (transparentUpgraded.sol#436-442)\n\t- transparentUpgraded.sol#439-441\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function _setPaused(bool psd) private {\n\n        bytes32 slot = _PAUSED_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, psd)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._setPaused uses assembly (transparentUpgraded.sol#447-454)\n\t- transparentUpgraded.sol#451-453\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": 465,
                    "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n\n        bytes32 slot = _INCOGNITO_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            icg := sload(slot)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._incognito uses assembly (transparentUpgraded.sol#459-465)\n\t- transparentUpgraded.sol#462-464\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "    function _setIncognito(address newIncognito) private {\n\n        bytes32 slot = _INCOGNITO_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newIncognito)\n\n        }\n",
                    "message": "TransparentUpgradeableProxy._setIncognito uses assembly (transparentUpgraded.sol#470-477)\n\t- transparentUpgraded.sol#474-476\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.6;\n",
                    "message": "Detected issues with version pragma in transparentUpgraded.sol:\n\t- pragma solidity0.6.6 (transparentUpgraded.sol#5): it allows old versions\n\t- pragma solidity0.6.6 (transparentUpgraded.sol#90): it allows old versions\n\t- pragma solidity0.6.6 (transparentUpgraded.sol#198): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n\n        _setImplementation(_logic);\n\n        if(_data.length > 0) {\n\n            // solhint-disable-next-line avoid-low-level-calls\n\n            (bool success,) = _logic.delegatecall(_data);\n\n            require(success);\n\n        }\n",
                    "message": "Low level call in UpgradeableProxy.constructor (transparentUpgraded.sol#108-116):\n\t-(success) = _logic.delegatecall(_data) transparentUpgraded.sol#113\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": 385,
                    "vulnerability_code": "    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n\n        _upgradeTo(newImplementation);\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success,) = newImplementation.delegatecall(data);\n\n        require(success);\n",
                    "message": "Low level call in TransparentUpgradeableProxy.upgradeToAndCall (transparentUpgraded.sol#380-385):\n\t-(success) = newImplementation.delegatecall(data) transparentUpgraded.sol#383\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
                    "message": "Function 'Proxy._delegate' (transparentUpgraded.sol#23-42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal virtual view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (transparentUpgraded.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "    function _fallback() internal {\n\n        _beforeFallback();\n\n        _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (transparentUpgraded.sol#55-58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "    function _beforeFallback() internal virtual {\n",
                    "message": "Function 'Proxy._beforeFallback' (transparentUpgraded.sol#82-83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
                    "message": "Function 'UpgradeableProxy._implementation' (transparentUpgraded.sol#133-139) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_logic' of UpgradeableProxy. (transparentUpgraded.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_data' of UpgradeableProxy. (transparentUpgraded.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": 149,
                    "vulnerability_code": "    function _upgradeTo(address newImplementation) internal {\n\n        _setImplementation(newImplementation);\n\n        emit Upgraded(newImplementation);\n",
                    "message": "Function 'UpgradeableProxy._upgradeTo' (transparentUpgraded.sol#146-149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
                    "message": "Function 'UpgradeableProxy._setImplementation' (transparentUpgraded.sol#154-163) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": 530,
                    "vulnerability_code": "    function _beforeFallback() internal override virtual {\n\n        require(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n\n        require(!_paused(), \"TransparentUpgradeableProxy: contract is paused\");\n\n        super._beforeFallback();\n",
                    "message": "Function 'TransparentUpgradeableProxy._beforeFallback' (transparentUpgraded.sol#526-530) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _logic, address _admin, address _incognito, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\n",
                    "message": "Parameter '_admin' of TransparentUpgradeableProxy. (transparentUpgraded.sol#226) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _logic, address _admin, address _incognito, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\n",
                    "message": "Parameter '_incognito' of TransparentUpgradeableProxy. (transparentUpgraded.sol#226) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = _ADMIN_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
                    "message": "Function 'TransparentUpgradeableProxy._admin' (transparentUpgraded.sol#390-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": 408,
                    "vulnerability_code": "    function _setAdmin(address newAdmin) private {\n\n        bytes32 slot = _ADMIN_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newAdmin)\n\n        }\n",
                    "message": "Function 'TransparentUpgradeableProxy._setAdmin' (transparentUpgraded.sol#401-408) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": 419,
                    "vulnerability_code": "    function _successor() internal view returns (address sor) {\n\n        bytes32 slot = _SUCCESSOR_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sor := sload(slot)\n\n        }\n",
                    "message": "Function 'TransparentUpgradeableProxy._successor' (transparentUpgraded.sol#413-419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "    function _setSuccesor(address newSuccessor) private {\n\n        bytes32 slot = _SUCCESSOR_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newSuccessor)\n\n        }\n",
                    "message": "Function 'TransparentUpgradeableProxy._setSuccesor' (transparentUpgraded.sol#424-431) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": 442,
                    "vulnerability_code": "    function _paused() internal view returns (bool psd) {\n\n        bytes32 slot = _PAUSED_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            psd := sload(slot)\n\n        }\n",
                    "message": "Function 'TransparentUpgradeableProxy._paused' (transparentUpgraded.sol#436-442) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function _setPaused(bool psd) private {\n\n        bytes32 slot = _PAUSED_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, psd)\n\n        }\n",
                    "message": "Function 'TransparentUpgradeableProxy._setPaused' (transparentUpgraded.sol#447-454) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": 465,
                    "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n\n        bytes32 slot = _INCOGNITO_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            icg := sload(slot)\n\n        }\n",
                    "message": "Function 'TransparentUpgradeableProxy._incognito' (transparentUpgraded.sol#459-465) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "    function _setIncognito(address newIncognito) private {\n\n        bytes32 slot = _INCOGNITO_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newIncognito)\n\n        }\n",
                    "message": "Function 'TransparentUpgradeableProxy._setIncognito' (transparentUpgraded.sol#470-477) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _successor() internal view returns (address sor) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _paused() internal view returns (bool psd) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract UpgradeableProxy is Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TransparentUpgradeableProxy is UpgradeableProxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private constant _SUCCESSOR_SLOT = 0x7b13fc932b1063ca775d428558b73e20eab6804d4d9b5a148d7cbae4488973f8;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private constant _PAUSED_SLOT = 0x8dea8703c3cf94703383ce38a9c894669dccd4ca8e65ddb43267aa0248711450;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private constant _INCOGNITO_SLOT = 0x62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _successor() internal view returns (address sor) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _paused() internal view returns (bool psd) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success,) = newImplementation.delegatecall(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    fallback () payable external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _fallback();\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/bridge/contracts/vault.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public isInitialized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            totalDepositedToSCAmount[assets[i]] = totalDepositedToSCAmount[assets[i]].safeAdd(amounts[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            totalDepositedToSCAmount[assets[i]] = totalDepositedToSCAmount[assets[i]].safeAdd(amounts[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j <= i; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c>=a && c>=b);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(prevVault) != address(0x0) && msg.sender == address(prevVault), errorToString(Errors.ONLY_PREVAULT));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(emitAmount <= 10 ** 18 && tokenBalance <= 10 ** 18 && emitAmount.safeAdd(tokenBalance) <= 10 ** 18, errorToString(Errors.VALUE_OVER_FLOW));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.meta == 241 && data.shard == 1); // Check instruction type\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(data.meta == 243 && data.shard == 1); // Check instruction type\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(returnedTokenAddress == recipientToken && balanceOf(recipientToken).safeSub(balanceBeforeTrade) == returnedAmount, errorToString(Errors.INVALID_RETURN_DATA));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (address(prevVault) != address(0x0) && !migration[owner][token]) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 681,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            withdrawRequests[owner][token] = withdrawRequests[owner][token].safeAdd(prevVault.getDepositedBalance(token, owner));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  \t        migration[owner][token] = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  \t   }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (address(prevVault) != address(0x0) && !migration[owner][token]) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": " \t        return withdrawRequests[owner][token].safeAdd(prevVault.getDepositedBalance(token, owner));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": " \t    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j <= i; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public ETH_TOKEN = 0x0000000000000000000000000000000000000000;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(prevVault) != address(0x0) && msg.sender == address(prevVault), errorToString(Errors.ONLY_PREVAULT));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private constant _INCOGNITO_SLOT = 0x62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function parseBurnInst(bytes memory inst) public pure returns (BurnInstData memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sigToAddress(bytes memory signData, bytes32 hash) public pure returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function requestWithdraw(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata signData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata timestamp\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address verifier = verifySignData(abi.encode(incognitoAddress, token, timestamp, amount), signData);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        migrateBalance(verifier, token);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        migrateBalance(verifier, token);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(withdrawRequests[verifier][token] >= amount, errorToString(Errors.WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(withdrawRequests[verifier][token] >= amount, errorToString(Errors.WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(withdrawRequests[verifier][token] >= amount, errorToString(Errors.WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(withdrawRequests[verifier][token] >= amount, errorToString(Errors.WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(withdrawRequests[verifier][token] >= amount, errorToString(Errors.WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 579,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        withdrawRequests[verifier][token] = withdrawRequests[verifier][token].safeSub(amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 579,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        withdrawRequests[verifier][token] = withdrawRequests[verifier][token].safeSub(amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 579,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        withdrawRequests[verifier][token] = withdrawRequests[verifier][token].safeSub(amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 579,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        withdrawRequests[verifier][token] = withdrawRequests[verifier][token].safeSub(amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        totalDepositedToSCAmount[token] = totalDepositedToSCAmount[token].safeSub(amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        totalDepositedToSCAmount[token] = totalDepositedToSCAmount[token].safeSub(amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        totalDepositedToSCAmount[token] = totalDepositedToSCAmount[token].safeSub(amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint emitAmount = amount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (token != ETH_TOKEN) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint8 decimals = getDecimals(token);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (decimals > 9) {\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/bridge/contracts/proxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    receive () payable external {\n\n        _fallback();\n",
                    "message": "Contract locking ether found in proxy.sol:\n\tContract Proxy has payable functions:\n\t - fallback (proxy.sol#72-74)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
                    "message": "Proxy._delegate uses assembly (proxy.sol#23-42)\n\t- proxy.sol#24-41\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.6;\n",
                    "message": "Detected issues with version pragma in proxy.sol:\n\t- pragma solidity0.6.6 (proxy.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
                    "message": "Function 'Proxy._delegate' (proxy.sol#23-42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal virtual view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (proxy.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "    function _fallback() internal {\n\n        _beforeFallback();\n\n        _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (proxy.sol#55-58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "    function _beforeFallback() internal virtual {\n",
                    "message": "Function 'Proxy._beforeFallback' (proxy.sol#82-83) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    fallback () payable external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _fallback();\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/bridge/contracts/trade_utils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tIERC20 constant public ETH_CONTRACT_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function checkSuccess() internal pure returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tassembly {\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/bridge/contracts/pause.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _admin) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        admin = _admin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        paused = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        expire = block.timestamp + 365 * 1 days;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == admin, \"not admin\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paused, \"not paused right now\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!paused, \"paused right now\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(block.timestamp < expire, \"expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == successor, \"unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n < 366, \"cannot extend for too long\"); // To prevent overflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function retire(address _successor) public onlyAdmin isNotExpired {\n\n        successor = _successor;\n",
                    "message": "AdminPausable.retire (pause.sol#42-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "    function claim() public isNotExpired {\n\n        require(msg.sender == successor, \"unauthorized\");\n\n        admin = successor;\n\n        emit Claim(admin);\n",
                    "message": "AdminPausable.claim (pause.sol#46-50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function extend(uint n) public onlyAdmin isNotExpired {\n\n        require(n < 366, \"cannot extend for too long\"); // To prevent overflow\n\n        expire = expire + n * 1 days;\n\n        emit Extend(n);\n",
                    "message": "AdminPausable.extend (pause.sol#52-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 61,
                    "vulnerability_code": "    function pause() public onlyAdmin isNotPaused isNotExpired {\n\n        paused = true;\n\n        emit Paused(msg.sender);\n",
                    "message": "AdminPausable.pause (pause.sol#58-61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 66,
                    "vulnerability_code": "    function unpause() public onlyAdmin isPaused {\n\n        paused = false;\n\n        emit Unpaused(msg.sender);\n",
                    "message": "AdminPausable.unpause (pause.sol#63-66) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": "Detected issues with version pragma in pause.sol:\n\t- pragma solidity^0.5.12 (pause.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _admin) public {\n",
                    "message": "Parameter '_admin' of AdminPausable. (pause.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function retire(address _successor) public onlyAdmin isNotExpired {\n",
                    "message": "Parameter '_successor' of AdminPausable.retire (pause.sol#42) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/bridge/contracts/upgradableProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n\n        _setImplementation(_logic);\n\n        if(_data.length > 0) {\n\n            // solhint-disable-next-line avoid-low-level-calls\n\n            (bool success,) = _logic.delegatecall(_data);\n\n            require(success);\n\n        }\n",
                    "message": "UpgradeableProxy.constructor (upgradableProxy.sol#108-116) uses delegatecall to a input-controlled function id\n\t(success) = _logic.delegatecall(_data) (upgradableProxy.sol#113)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
                    "message": "UpgradeableProxy._implementation (upgradableProxy.sol#133-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies on extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "UpgradeableProxy.isContract (upgradableProxy.sol#182-191) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
                    "message": "Proxy._delegate uses assembly (upgradableProxy.sol#23-42)\n\t- upgradableProxy.sol#24-41\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
                    "message": "UpgradeableProxy._implementation uses assembly (upgradableProxy.sol#133-139)\n\t- upgradableProxy.sol#136-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
                    "message": "UpgradeableProxy._setImplementation uses assembly (upgradableProxy.sol#154-163)\n\t- upgradableProxy.sol#160-162\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies on extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "UpgradeableProxy.isContract uses assembly (upgradableProxy.sol#182-191)\n\t- upgradableProxy.sol#189\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.6;\n",
                    "message": "Detected issues with version pragma in upgradableProxy.sol:\n\t- pragma solidity0.6.6 (upgradableProxy.sol#5): it allows old versions\n\t- pragma solidity0.6.6 (upgradableProxy.sol#90): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n\n        _setImplementation(_logic);\n\n        if(_data.length > 0) {\n\n            // solhint-disable-next-line avoid-low-level-calls\n\n            (bool success,) = _logic.delegatecall(_data);\n\n            require(success);\n\n        }\n",
                    "message": "Low level call in UpgradeableProxy.constructor (upgradableProxy.sol#108-116):\n\t-(success) = _logic.delegatecall(_data) upgradableProxy.sol#113\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
                    "message": "Function 'Proxy._delegate' (upgradableProxy.sol#23-42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal virtual view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (upgradableProxy.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "    function _fallback() internal {\n\n        _beforeFallback();\n\n        _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (upgradableProxy.sol#55-58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "    function _beforeFallback() internal virtual {\n",
                    "message": "Function 'Proxy._beforeFallback' (upgradableProxy.sol#82-83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
                    "message": "Function 'UpgradeableProxy._implementation' (upgradableProxy.sol#133-139) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_logic' of UpgradeableProxy. (upgradableProxy.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_data' of UpgradeableProxy. (upgradableProxy.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": 149,
                    "vulnerability_code": "    function _upgradeTo(address newImplementation) internal {\n\n        _setImplementation(newImplementation);\n\n        emit Upgraded(newImplementation);\n",
                    "message": "Function 'UpgradeableProxy._upgradeTo' (upgradableProxy.sol#146-149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
                    "message": "Function 'UpgradeableProxy._setImplementation' (upgradableProxy.sol#154-163) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract UpgradeableProxy is Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    fallback () payable external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _fallback();\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/bridge/contracts/incognito_proxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < sigIdx.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if ((i > 0 && sigIdx[i] <= sigIdx[i-1]) || sigIdx[i] >= signers.length) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < path.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < v.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _admin) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        admin = _admin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        paused = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        expire = block.timestamp + 365 * 1 days;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address admin,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] memory beaconCommittee,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] memory bridgeCommittee\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public AdminPausable(admin) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        beaconCommittees.push(Committee({\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            pubkeys: beaconCommittee,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            startBlock: 0\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (beaconCommittees[m].startBlock <= blkHeight) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (bridgeCommittees[m].startBlock <= blkHeight) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < sigIdx.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < path.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < numVals; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < v.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == admin, \"not admin\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paused, \"not paused right now\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!paused, \"paused right now\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(block.timestamp < expire, \"expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == successor, \"unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n < 366, \"cannot extend for too long\"); // To prevent overflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(startHeight > bridgeCommittees[bridgeCommittees.length-1].startBlock, \"cannot change old committee\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(startHeight > beaconCommittees[beaconCommittees.length-1].startBlock, \"cannot change old committee\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(meta == 71 && shard == 1);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(meta == 70 && shard == 1);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if ((i > 0 && sigIdx[i] <= sigIdx[i-1]) || sigIdx[i] >= signers.length) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < sigIdx.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < path.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < numVals; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < v.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": 430,
                    "vulnerability_code": "    function extractMetaFromInstruction(bytes memory inst) public pure returns(uint8, uint8, uint, uint) {\n\n        require(inst.length >= 0x42); // 0x02 bytes for meta and shard, 0x20 each for height and numVals\n\n        uint8 meta = uint8(inst[0]);\n\n        uint8 shard = uint8(inst[1]);\n\n        uint height;\n\n        uint numVals;\n\n        assembly {\n\n            // skip first 0x20 bytes (stored length of inst)\n\n            height := mload(add(inst, 0x22)) // [2:34]\n\n            numVals := mload(add(inst, 0x42)) // [34:66]\n\n        }\n\n        return (meta, shard, height, numVals);\n",
                    "message": "IncognitoProxy.extractMetaFromInstruction (incognito_proxy.sol#418-430) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": 451,
                    "vulnerability_code": "    function extractCommitteeFromInstruction(bytes memory inst, uint numVals) public pure returns (address[] memory) {\n\n        require(inst.length == 0x42 + numVals * 0x20);\n\n        address[] memory addr = new address[](numVals);\n\n        address tmp;\n\n        for (uint i = 0; i < numVals; i++) {\n\n            assembly {\n\n                // skip first 0x20 bytes (stored length of inst)\n\n                // also, skip the next 0x42 bytes (stored metadata)\n\n                tmp := mload(add(add(inst, 0x62), mul(i, 0x20))) // 67+i*32\n\n            }\n\n            addr[i] = tmp;\n\n        }\n\n        return addr;\n",
                    "message": "IncognitoProxy.extractCommitteeFromInstruction (incognito_proxy.sol#438-451) is declared view but contains assembly code\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address admin,\n",
                    "message": "IncognitoProxy.constructor.admin (local variable @ incognito_proxy.sol#107) shadows:\n\t- AdminPausable.admin (state variable @ incognito_proxy.sol#6)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": 430,
                    "vulnerability_code": "    function extractMetaFromInstruction(bytes memory inst) public pure returns(uint8, uint8, uint, uint) {\n\n        require(inst.length >= 0x42); // 0x02 bytes for meta and shard, 0x20 each for height and numVals\n\n        uint8 meta = uint8(inst[0]);\n\n        uint8 shard = uint8(inst[1]);\n\n        uint height;\n\n        uint numVals;\n\n        assembly {\n\n            // skip first 0x20 bytes (stored length of inst)\n\n            height := mload(add(inst, 0x22)) // [2:34]\n\n            numVals := mload(add(inst, 0x42)) // [34:66]\n\n        }\n\n        return (meta, shard, height, numVals);\n",
                    "message": "IncognitoProxy.extractMetaFromInstruction uses assembly (incognito_proxy.sol#418-430)\n\t- incognito_proxy.sol#424-428\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": 451,
                    "vulnerability_code": "    function extractCommitteeFromInstruction(bytes memory inst, uint numVals) public pure returns (address[] memory) {\n\n        require(inst.length == 0x42 + numVals * 0x20);\n\n        address[] memory addr = new address[](numVals);\n\n        address tmp;\n\n        for (uint i = 0; i < numVals; i++) {\n\n            assembly {\n\n                // skip first 0x20 bytes (stored length of inst)\n\n                // also, skip the next 0x42 bytes (stored metadata)\n\n                tmp := mload(add(add(inst, 0x62), mul(i, 0x20))) // 67+i*32\n\n            }\n\n            addr[i] = tmp;\n\n        }\n\n        return addr;\n",
                    "message": "IncognitoProxy.extractCommitteeFromInstruction uses assembly (incognito_proxy.sol#438-451)\n\t- incognito_proxy.sol#443-447\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": "Different versions of Solidity is used in incognito_proxy.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.12']\n\t- incognito_proxy.sol#3 declares pragma solidity^0.5.12\n\t- incognito_proxy.sol#72 declares pragma solidity^0.5.12\n\t- incognito_proxy.sol#73 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function retire(address _successor) public onlyAdmin isNotExpired {\n\n        successor = _successor;\n",
                    "message": "AdminPausable.retire (incognito_proxy.sol#42-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "    function claim() public isNotExpired {\n\n        require(msg.sender == successor, \"unauthorized\");\n\n        admin = successor;\n\n        emit Claim(admin);\n",
                    "message": "AdminPausable.claim (incognito_proxy.sol#46-50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function extend(uint n) public onlyAdmin isNotExpired {\n\n        require(n < 366, \"cannot extend for too long\"); // To prevent overflow\n\n        expire = expire + n * 1 days;\n\n        emit Extend(n);\n",
                    "message": "AdminPausable.extend (incognito_proxy.sol#52-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 61,
                    "vulnerability_code": "    function pause() public onlyAdmin isNotPaused isNotExpired {\n\n        paused = true;\n\n        emit Paused(msg.sender);\n",
                    "message": "AdminPausable.pause (incognito_proxy.sol#58-61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 66,
                    "vulnerability_code": "    function unpause() public onlyAdmin isPaused {\n\n        paused = false;\n\n        emit Unpaused(msg.sender);\n",
                    "message": "AdminPausable.unpause (incognito_proxy.sol#63-66) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 130,
                    "vulnerability_code": "    function getBeaconCommittee(uint i) public view returns(Committee memory) {\n\n        return beaconCommittees[i];\n",
                    "message": "IncognitoProxy.getBeaconCommittee (incognito_proxy.sol#128-130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 138,
                    "vulnerability_code": "    function getBridgeCommittee(uint i) public view returns(Committee memory) {\n\n        return bridgeCommittees[i];\n",
                    "message": "IncognitoProxy.getBridgeCommittee (incognito_proxy.sol#136-138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "    function swapBridgeCommittee(\n\n        bytes memory inst,\n\n        bytes32[][2] memory instPaths,\n\n        bool[][2] memory instPathIsLefts,\n\n        bytes32[2] memory instRoots,\n\n        bytes32[2] memory blkData,\n\n        uint[][2] memory sigIdxs,\n\n        uint8[][2] memory sigVs,\n\n        bytes32[][2] memory sigRs,\n\n        bytes32[][2] memory sigSs\n\n    ) public isNotPaused {\n\n        bytes32 instHash = keccak256(inst);\n\n\n\n        // Verify instruction on beacon\n\n        require(instructionApproved(\n\n            true,\n\n            instHash,\n\n            beaconCommittees[beaconCommittees.length-1].startBlock,\n\n            instPaths[0],\n\n            instPathIsLefts[0],\n\n            instRoots[0],\n\n            blkData[0],\n\n            sigIdxs[0],\n\n            sigVs[0],\n\n            sigRs[0],\n\n            sigSs[0]\n\n        ));\n\n\n\n        // Verify instruction on bridge\n\n        require(instructionApproved(\n\n            false,\n\n            instHash,\n\n            bridgeCommittees[bridgeCommittees.length-1].startBlock,\n\n            instPaths[1],\n\n            instPathIsLefts[1],\n\n            instRoots[1],\n\n            blkData[1],\n\n            sigIdxs[1],\n\n            sigVs[1],\n\n            sigRs[1],\n\n            sigSs[1]\n\n        ));\n\n\n\n        // Parse instruction and check metadata\n\n        (uint8 meta, uint8 shard, uint startHeight, uint numVals) = extractMetaFromInstruction(inst);\n\n        require(meta == 71 && shard == 1);\n\n\n\n        // Make sure 1 instruction can't be used twice (using startHeight)\n\n        require(startHeight > bridgeCommittees[bridgeCommittees.length-1].startBlock, \"cannot change old committee\");\n\n\n\n        // Swap committee\n\n        address[] memory pubkeys = extractCommitteeFromInstruction(inst, numVals);\n\n        bridgeCommittees.push(Committee({\n\n            pubkeys: pubkeys,\n\n            startBlock: startHeight\n\n        }));\n\n\n\n        emit BridgeCommitteeSwapped(bridgeCommittees.length, startHeight);\n",
                    "message": "IncognitoProxy.swapBridgeCommittee (incognito_proxy.sol#155-213) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": 265,
                    "vulnerability_code": "    function swapBeaconCommittee(\n\n        bytes memory inst,\n\n        bytes32[] memory instPath,\n\n        bool[] memory instPathIsLeft,\n\n        bytes32 instRoot,\n\n        bytes32 blkData,\n\n        uint[] memory sigIdx,\n\n        uint8[] memory sigV,\n\n        bytes32[] memory sigR,\n\n        bytes32[] memory sigS\n\n    ) public isNotPaused {\n\n        bytes32 instHash = keccak256(inst);\n\n\n\n        // Verify instruction on beacon\n\n        require(instructionApproved(\n\n            true,\n\n            instHash,\n\n            beaconCommittees[beaconCommittees.length-1].startBlock,\n\n            instPath,\n\n            instPathIsLeft,\n\n            instRoot,\n\n            blkData,\n\n            sigIdx,\n\n            sigV,\n\n            sigR,\n\n            sigS\n\n        ));\n\n\n\n        // Parse instruction and check metadata and shardID\n\n        (uint8 meta, uint8 shard, uint startHeight, uint numVals) = extractMetaFromInstruction(inst);\n\n        require(meta == 70 && shard == 1);\n\n\n\n        // Make sure 1 instruction can't be used twice (using startHeight)\n\n        require(startHeight > beaconCommittees[beaconCommittees.length-1].startBlock, \"cannot change old committee\");\n\n\n\n        // Swap committee\n\n        address[] memory pubkeys = extractCommitteeFromInstruction(inst, numVals);\n\n        beaconCommittees.push(Committee({\n\n            pubkeys: pubkeys,\n\n            startBlock: startHeight\n\n        }));\n\n\n\n        emit BeaconCommitteeSwapped(beaconCommittees.length, startHeight);\n",
                    "message": "IncognitoProxy.swapBeaconCommittee (incognito_proxy.sol#222-265) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": "Detected issues with version pragma in incognito_proxy.sol:\n\t- pragma solidity^0.5.12 (incognito_proxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.12 (incognito_proxy.sol#72): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _admin) public {\n",
                    "message": "Parameter '_admin' of AdminPausable. (incognito_proxy.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function retire(address _successor) public onlyAdmin isNotExpired {\n",
                    "message": "Parameter '_successor' of AdminPausable.retire (incognito_proxy.sol#42) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(inst.length >= 0x42); // 0x02 bytes for meta and shard, 0x20 each for height and numVals\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(inst.length == 0x42 + numVals * 0x20);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(inst.length == 0x42 + numVals * 0x20);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < sigIdx.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < path.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < v.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < sigIdx.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < path.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < v.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (l != r) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (l != r) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function extractMetaFromInstruction(bytes memory inst) public pure returns(uint8, uint8, uint, uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function extractCommitteeFromInstruction(bytes memory inst, uint numVals) public pure returns (address[] memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function findBeaconCommitteeFromHeight(uint blkHeight) public view returns (address[] memory, uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function findBridgeCommitteeFromHeight(uint blkHeight) public view returns (address[] memory, uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function extractMetaFromInstruction(bytes memory inst) public pure returns(uint8, uint8, uint, uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "bridge-eth-4879219669a38d601265582f815596b6775855b6/bridge/contracts/kbn_trade.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(KyberNetwork _kyberNetworkProxyContract) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        kyberNetworkProxyContract = _kyberNetworkProxyContract;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tIERC20 constant public ETH_CONTRACT_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 constant KYBER_ETH_TOKEN_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function checkSuccess() internal pure returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getExpectedRate(IERC20 src, IERC20 dest, uint srcQty) external view returns(uint expectedRate, uint slippageRate);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tassembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 constant KYBER_ETH_TOKEN_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    receive() external payable {}\n",
                    "message": null
                }
            ]
        }
    }
}