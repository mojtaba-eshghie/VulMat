{
    "BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 689,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_admin != address(0), \"LnAdminUpgradeable: zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 701,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == candidate, \"LnAdminUpgradeable: only candidate can become admin\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 708,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((msg.sender == admin), \"LnAdminUpgradeable: only the contract admin can perform this action\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(totalSupply().add(amount) <= MAX_SUPPLY, \"LinearFinance: max supply exceeded\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 701,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == candidate, \"LnAdminUpgradeable: only candidate can become admin\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 708,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((msg.sender == admin), \"LnAdminUpgradeable: only the contract admin can perform this action\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(totalSupply().add(amount) <= MAX_SUPPLY, \"LinearFinance: max supply exceeded\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_42"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-state",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[44] private __gap;\n",
                    "message": "ERC20Upgradeable.__gap (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#672) shadows:\n\t- ContextUpgradeable.__gap (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#263)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "    function _isConstructor() private view returns (bool) {\n\n        // extcodesize checks the size of the code stored in an address, and\n\n        // address returns the current address. Since the code is still not\n\n        // deployed when running a constructor, any checks on its code size will\n\n        // yield zero, making it an effective way to detect if a contract is\n\n        // under construction or not.\n\n        address self = address(this);\n\n        uint256 cs;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            cs := extcodesize(self)\n\n        }\n\n        return cs == 0;\n",
                    "message": "Initializable._isConstructor (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#221-234) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "    function _isConstructor() private view returns (bool) {\n\n        // extcodesize checks the size of the code stored in an address, and\n\n        // address returns the current address. Since the code is still not\n\n        // deployed when running a constructor, any checks on its code size will\n\n        // yield zero, making it an effective way to detect if a contract is\n\n        // under construction or not.\n\n        address self = address(this);\n\n        uint256 cs;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            cs := extcodesize(self)\n\n        }\n\n        return cs == 0;\n",
                    "message": "Initializable._isConstructor uses assembly (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#221-234)\n\t- BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#230-232\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address account) external view returns (uint256);\n",
                    "message": "IERC20Upgradeable.balanceOf (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#278) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "    function balanceOf(address account) public view override returns (uint256) {\n\n        return _balances[account];\n",
                    "message": "ERC20Upgradeable.balanceOf (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n\n        _transfer(_msgSender(), recipient, amount);\n\n        return true;\n",
                    "message": "ERC20Upgradeable.transfer (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#456-459) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20Upgradeable.transfer (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#287) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": 466,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n\n        return _allowances[owner][spender];\n",
                    "message": "ERC20Upgradeable.allowance (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#464-466) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
                    "message": "IERC20Upgradeable.allowance (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#296) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": 478,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n\n        _approve(_msgSender(), spender, amount);\n\n        return true;\n",
                    "message": "ERC20Upgradeable.approve (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#475-478) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
                    "message": "IERC20Upgradeable.approve (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#312) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": 505,
                    "vulnerability_code": "    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) public virtual override returns (bool) {\n\n        _transfer(sender, recipient, amount);\n\n        _approve(\n\n            sender,\n\n            _msgSender(),\n\n            _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")\n\n        );\n\n        return true;\n",
                    "message": "ERC20Upgradeable.transferFrom (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#493-505) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n",
                    "message": "IERC20Upgradeable.transferFrom (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#323-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "ERC20Upgradeable.name (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#404-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 414,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Upgradeable.symbol (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#412-414) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Upgradeable.decimals (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#429-431) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 519,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\n        return true;\n",
                    "message": "ERC20Upgradeable.increaseAllowance (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#519-522) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": 545,
                    "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n\n        _approve(\n\n            _msgSender(),\n\n            spender,\n\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\n\n        );\n\n        return true;\n",
                    "message": "ERC20Upgradeable.decreaseAllowance (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#538-545) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 721,
                    "vulnerability_to_line": 724,
                    "vulnerability_code": "    function __LinearFinance_init(address _admin) public initializer {\n\n        __ERC20_init(\"Linear Token\", \"LINA\");\n\n        __LnAdminUpgradeable_init(_admin);\n",
                    "message": "LinearFinance.__LinearFinance_init (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#721-724) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.8.0;\n",
                    "message": "Detected issues with version pragma in BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol:\n\t- pragma solidity>=0.6.0<0.8.0 (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#8): is has a complex pragma\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "    function _isConstructor() private view returns (bool) {\n\n        // extcodesize checks the size of the code stored in an address, and\n\n        // address returns the current address. Since the code is still not\n\n        // deployed when running a constructor, any checks on its code size will\n\n        // yield zero, making it an effective way to detect if a contract is\n\n        // under construction or not.\n\n        address self = address(this);\n\n        uint256 cs;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            cs := extcodesize(self)\n\n        }\n\n        return cs == 0;\n",
                    "message": "Function 'Initializable._isConstructor' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#221-234) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "    function __Context_init() internal initializer {\n\n        __Context_init_unchained();\n",
                    "message": "Function 'ContextUpgradeable.__Context_init' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#248-250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function __Context_init_unchained() internal initializer {}\n",
                    "message": "Function 'ContextUpgradeable.__Context_init_unchained' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": 256,
                    "vulnerability_code": "    function _msgSender() internal view virtual returns (address payable) {\n\n        return msg.sender;\n",
                    "message": "Function 'ContextUpgradeable._msgSender' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#254-256) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 261,
                    "vulnerability_code": "    function _msgData() internal view virtual returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
                    "message": "Function 'ContextUpgradeable._msgData' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#258-261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[50] private __gap;\n",
                    "message": "Variable 'ContextUpgradeable.__gap' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#263) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 393,
                    "vulnerability_code": "    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n\n        __Context_init_unchained();\n\n        __ERC20_init_unchained(name_, symbol_);\n",
                    "message": "Function 'ERC20Upgradeable.__ERC20_init' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#390-393) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": 399,
                    "vulnerability_code": "    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n\n        _name = name_;\n\n        _symbol = symbol_;\n\n        _decimals = 18;\n",
                    "message": "Function 'ERC20Upgradeable.__ERC20_init_unchained' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#395-399) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": 574,
                    "vulnerability_code": "    function _transfer(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) internal virtual {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n",
                    "message": "Function 'ERC20Upgradeable._transfer' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#561-574) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": 593,
                    "vulnerability_code": "    function _mint(address account, uint256 amount) internal virtual {\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n        emit Transfer(address(0), account, amount);\n",
                    "message": "Function 'ERC20Upgradeable._mint' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#585-593) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": 614,
                    "vulnerability_code": "    function _burn(address account, uint256 amount) internal virtual {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        emit Transfer(account, address(0), amount);\n",
                    "message": "Function 'ERC20Upgradeable._burn' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#606-614) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": 639,
                    "vulnerability_code": "    function _approve(\n\n        address owner,\n\n        address spender,\n\n        uint256 amount\n\n    ) internal virtual {\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n",
                    "message": "Function 'ERC20Upgradeable._approve' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#629-639) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": 650,
                    "vulnerability_code": "    function _setupDecimals(uint8 decimals_) internal {\n\n        _decimals = decimals_;\n",
                    "message": "Function 'ERC20Upgradeable._setupDecimals' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#648-650) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 666,
                    "vulnerability_to_line": 670,
                    "vulnerability_code": "    function _beforeTokenTransfer(\n\n        address from,\n\n        address to,\n\n        uint256 amount\n",
                    "message": "Function 'ERC20Upgradeable._beforeTokenTransfer' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#666-670) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[44] private __gap;\n",
                    "message": "Variable 'ERC20Upgradeable.__gap' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#672) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": 692,
                    "vulnerability_code": "    function __LnAdminUpgradeable_init(address _admin) public initializer {\n\n        require(_admin != address(0), \"LnAdminUpgradeable: zero address\");\n\n        admin = _admin;\n\n        emit AdminChanged(address(0), _admin);\n",
                    "message": "Function 'LnAdminUpgradeable.__LnAdminUpgradeable_init' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#688-692) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function __LnAdminUpgradeable_init(address _admin) public initializer {\n",
                    "message": "Parameter '_admin' of LnAdminUpgradeable.__LnAdminUpgradeable_init (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#688) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCandidate(address _candidate) external onlyAdmin {\n",
                    "message": "Parameter '_candidate' of LnAdminUpgradeable.setCandidate (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#694) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[48] private __gap;\n",
                    "message": "Variable 'LnAdminUpgradeable.__gap' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#713) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 721,
                    "vulnerability_to_line": 724,
                    "vulnerability_code": "    function __LinearFinance_init(address _admin) public initializer {\n\n        __ERC20_init(\"Linear Token\", \"LINA\");\n\n        __LnAdminUpgradeable_init(_admin);\n",
                    "message": "Function 'LinearFinance.__LinearFinance_init' (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#721-724) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 721,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function __LinearFinance_init(address _admin) public initializer {\n",
                    "message": "Parameter '_admin' of LinearFinance.__LinearFinance_init (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#721) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[48] private __gap;\n",
                    "message": "LnAdminUpgradeable.__gap (BSCSCAN-2ae9952c1038dA3DafebA026B96053F24CBc03b3.sol#713) is never used in LinearFinance\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _beforeTokenTransfer(address(0), account, amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _beforeTokenTransfer(account, address(0), amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.8.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.8.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _initialized;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _initializing;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[50] private __gap;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => uint256)) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[44] private __gap;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[48] private __gap;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isConstructor() private view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    }
}