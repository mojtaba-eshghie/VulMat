{
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/Array256Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf (Array256Lib.sol#87-129) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements uses assembly (Array256Lib.sol#37-45)\n\t- Array256Lib.sol#38-45\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax uses assembly (Array256Lib.sol#50-62)\n\t- Array256Lib.sol#51-62\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin uses assembly (Array256Lib.sol#67-79)\n\t- Array256Lib.sol#68-79\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf uses assembly (Array256Lib.sol#87-129)\n\t- Array256Lib.sol#91-129\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.heapSort (Array256Lib.sol#149-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array256Lib.uniq (Array256Lib.sol#211-230) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array256Lib.sol:\n\t- pragma solidity^0.4.18 (Array256Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/truffle/contracts/ArrayUtilsTestContractThree.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 678,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array256.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array128.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array64.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array32.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array16.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array8.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 737,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 752,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 983,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 984,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 985,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 996,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array256.length; i++){\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array256[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array128.length; i++){\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array128[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array64.length; i++){\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1641,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array64[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array32.length; i++){\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array32[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array16.length; i++){\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1677,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array16[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array8.length; i++){\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array8[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1716,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array8[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array16[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1762,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array32[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1785,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array64[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1808,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array128[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1831,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      r[i] = array256[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array256.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array128.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array64.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array32.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array16.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array8.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1715,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint8 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint16 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint32 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1784,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint64 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint128 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 748,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 978,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 979,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 778,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array256.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array128.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array64.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array32.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array16.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array8.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1715,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint8 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint16 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint32 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1784,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint64 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint128 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < arrayNewLength; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_83"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (ArrayUtilsTestContractThree.sol#37-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (ArrayUtilsTestContractThree.sol#50-62) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (ArrayUtilsTestContractThree.sol#67-79) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf (ArrayUtilsTestContractThree.sol#87-129) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements (ArrayUtilsTestContractThree.sol#269-290) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax (ArrayUtilsTestContractThree.sol#295-319) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin (ArrayUtilsTestContractThree.sol#324-351) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    uint256 term;\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n\n\n\n          switch mod(mid,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch lt(term,value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(term,value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n          term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n          switch mod(i,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch eq(term, value)\n\n          case 1 {\n\n            found := 1\n\n            index := i\n\n            i := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.indexOf (ArrayUtilsTestContractThree.sol#359-422) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements (ArrayUtilsTestContractThree.sol#562-583) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": 612,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax (ArrayUtilsTestContractThree.sol#588-612) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 645,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin (ArrayUtilsTestContractThree.sol#617-645) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements (ArrayUtilsTestContractThree.sol#822-843) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": 872,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax (ArrayUtilsTestContractThree.sol#848-872) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin (ArrayUtilsTestContractThree.sol#877-905) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements (ArrayUtilsTestContractThree.sol#1082-1103) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": 1132,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax (ArrayUtilsTestContractThree.sol#1108-1132) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": 1165,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin (ArrayUtilsTestContractThree.sol#1137-1165) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements (ArrayUtilsTestContractThree.sol#1342-1363) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1392,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax (ArrayUtilsTestContractThree.sol#1368-1392) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1424,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin (ArrayUtilsTestContractThree.sol#1397-1424) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements uses assembly (ArrayUtilsTestContractThree.sol#37-45)\n\t- ArrayUtilsTestContractThree.sol#38-45\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax uses assembly (ArrayUtilsTestContractThree.sol#50-62)\n\t- ArrayUtilsTestContractThree.sol#51-62\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin uses assembly (ArrayUtilsTestContractThree.sol#67-79)\n\t- ArrayUtilsTestContractThree.sol#68-79\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf uses assembly (ArrayUtilsTestContractThree.sol#87-129)\n\t- ArrayUtilsTestContractThree.sol#91-129\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements uses assembly (ArrayUtilsTestContractThree.sol#269-290)\n\t- ArrayUtilsTestContractThree.sol#273-290\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax uses assembly (ArrayUtilsTestContractThree.sol#295-319)\n\t- ArrayUtilsTestContractThree.sol#299-319\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin uses assembly (ArrayUtilsTestContractThree.sol#324-351)\n\t- ArrayUtilsTestContractThree.sol#328-351\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    uint256 term;\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n\n\n\n          switch mod(mid,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch lt(term,value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(term,value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n          term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n          switch mod(i,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch eq(term, value)\n\n          case 1 {\n\n            found := 1\n\n            index := i\n\n            i := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.indexOf uses assembly (ArrayUtilsTestContractThree.sol#359-422)\n\t- ArrayUtilsTestContractThree.sol#364-422\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements uses assembly (ArrayUtilsTestContractThree.sol#562-583)\n\t- ArrayUtilsTestContractThree.sol#566-583\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": 612,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax uses assembly (ArrayUtilsTestContractThree.sol#588-612)\n\t- ArrayUtilsTestContractThree.sol#592-612\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 645,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin uses assembly (ArrayUtilsTestContractThree.sol#617-645)\n\t- ArrayUtilsTestContractThree.sol#621-645\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements uses assembly (ArrayUtilsTestContractThree.sol#822-843)\n\t- ArrayUtilsTestContractThree.sol#826-843\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": 872,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax uses assembly (ArrayUtilsTestContractThree.sol#848-872)\n\t- ArrayUtilsTestContractThree.sol#852-872\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin uses assembly (ArrayUtilsTestContractThree.sol#877-905)\n\t- ArrayUtilsTestContractThree.sol#881-905\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements uses assembly (ArrayUtilsTestContractThree.sol#1082-1103)\n\t- ArrayUtilsTestContractThree.sol#1086-1103\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": 1132,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax uses assembly (ArrayUtilsTestContractThree.sol#1108-1132)\n\t- ArrayUtilsTestContractThree.sol#1112-1132\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": 1165,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin uses assembly (ArrayUtilsTestContractThree.sol#1137-1165)\n\t- ArrayUtilsTestContractThree.sol#1141-1165\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements uses assembly (ArrayUtilsTestContractThree.sol#1342-1363)\n\t- ArrayUtilsTestContractThree.sol#1346-1363\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1392,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax uses assembly (ArrayUtilsTestContractThree.sol#1368-1392)\n\t- ArrayUtilsTestContractThree.sol#1372-1392\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1424,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin uses assembly (ArrayUtilsTestContractThree.sol#1397-1424)\n\t- ArrayUtilsTestContractThree.sol#1401-1424\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (ArrayUtilsTestContractThree.sol#37-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (ArrayUtilsTestContractThree.sol#50-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (ArrayUtilsTestContractThree.sol#67-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.heapSort (ArrayUtilsTestContractThree.sol#149-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array256Lib.uniq (ArrayUtilsTestContractThree.sol#211-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements (ArrayUtilsTestContractThree.sol#269-290) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax (ArrayUtilsTestContractThree.sol#295-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin (ArrayUtilsTestContractThree.sol#324-351) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "  function heapSort(uint128[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint128 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.heapSort (ArrayUtilsTestContractThree.sol#442-500) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": 523,
                    "vulnerability_code": "  function uniq(uint128[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array128Lib.uniq (ArrayUtilsTestContractThree.sol#504-523) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements (ArrayUtilsTestContractThree.sol#562-583) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": 612,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax (ArrayUtilsTestContractThree.sol#588-612) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 645,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin (ArrayUtilsTestContractThree.sol#617-645) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 702,
                    "vulnerability_to_line": 760,
                    "vulnerability_code": "  function heapSort(uint64[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint64 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.heapSort (ArrayUtilsTestContractThree.sol#702-760) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": 783,
                    "vulnerability_code": "  function uniq(uint64[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array64Lib.uniq (ArrayUtilsTestContractThree.sol#764-783) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements (ArrayUtilsTestContractThree.sol#822-843) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": 872,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax (ArrayUtilsTestContractThree.sol#848-872) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin (ArrayUtilsTestContractThree.sol#877-905) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 962,
                    "vulnerability_to_line": 1020,
                    "vulnerability_code": "  function heapSort(uint32[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint32 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.heapSort (ArrayUtilsTestContractThree.sol#962-1020) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": 1043,
                    "vulnerability_code": "  function uniq(uint32[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array32Lib.uniq (ArrayUtilsTestContractThree.sol#1024-1043) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements (ArrayUtilsTestContractThree.sol#1082-1103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": 1132,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax (ArrayUtilsTestContractThree.sol#1108-1132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": 1165,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin (ArrayUtilsTestContractThree.sol#1137-1165) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1222,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "  function heapSort(uint16[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint16 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.heapSort (ArrayUtilsTestContractThree.sol#1222-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1284,
                    "vulnerability_to_line": 1303,
                    "vulnerability_code": "  function uniq(uint16[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array16Lib.uniq (ArrayUtilsTestContractThree.sol#1284-1303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements (ArrayUtilsTestContractThree.sol#1342-1363) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1392,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax (ArrayUtilsTestContractThree.sol#1368-1392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1424,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin (ArrayUtilsTestContractThree.sol#1397-1424) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1481,
                    "vulnerability_to_line": 1539,
                    "vulnerability_code": "  function heapSort(uint8[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint8 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.heapSort (ArrayUtilsTestContractThree.sol#1481-1539) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1543,
                    "vulnerability_to_line": 1562,
                    "vulnerability_code": "  function uniq(uint8[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array8Lib.uniq (ArrayUtilsTestContractThree.sol#1543-1562) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1591,
                    "vulnerability_to_line": 1607,
                    "vulnerability_code": "  function getHeapSort256() returns (uint256[10] memory r){\n\n    delete array256;\n\n    array256.push(3);\n\n    array256.push(1);\n\n    array256.push(9);\n\n    array256.push(7);\n\n    array256.push(4);\n\n    array256.push(4);\n\n    array256.push(0xff3);\n\n    array256.push(0);\n\n    array256.push(1095);\n\n    array256.push(1);\n\n    array256.heapSort();\n\n    for(uint256 i = 0; i<array256.length; i++){\n\n      r[i] = array256[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getHeapSort256 (ArrayUtilsTestContractThree.sol#1591-1607) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1609,
                    "vulnerability_to_line": 1625,
                    "vulnerability_code": "  function getHeapSort128() returns (uint128[10] memory r){\n\n    delete array128;\n\n    array128.push(3);\n\n    array128.push(1);\n\n    array128.push(9);\n\n    array128.push(7);\n\n    array128.push(4);\n\n    array128.push(4);\n\n    array128.push(0xff3);\n\n    array128.push(0);\n\n    array128.push(1095);\n\n    array128.push(1);\n\n    array128.heapSort();\n\n    for(uint256 i = 0; i<array128.length; i++){\n\n      r[i] = array128[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getHeapSort128 (ArrayUtilsTestContractThree.sol#1609-1625) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1627,
                    "vulnerability_to_line": 1643,
                    "vulnerability_code": "  function getHeapSort64() returns (uint64[10] memory r){\n\n    delete array64;\n\n    array64.push(3);\n\n    array64.push(1);\n\n    array64.push(9);\n\n    array64.push(7);\n\n    array64.push(4);\n\n    array64.push(4);\n\n    array64.push(0xff3);\n\n    array64.push(0);\n\n    array64.push(1095);\n\n    array64.push(1);\n\n    array64.heapSort();\n\n    for(uint256 i = 0; i<array64.length; i++){\n\n      r[i] = array64[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getHeapSort64 (ArrayUtilsTestContractThree.sol#1627-1643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1645,
                    "vulnerability_to_line": 1661,
                    "vulnerability_code": "  function getHeapSort32() returns (uint32[10] memory r){\n\n    delete array32;\n\n    array32.push(3);\n\n    array32.push(1);\n\n    array32.push(9);\n\n    array32.push(7);\n\n    array32.push(4);\n\n    array32.push(4);\n\n    array32.push(0xff3);\n\n    array32.push(0);\n\n    array32.push(1095);\n\n    array32.push(1);\n\n    array32.heapSort();\n\n    for(uint256 i = 0; i<array32.length; i++){\n\n      r[i] = array32[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getHeapSort32 (ArrayUtilsTestContractThree.sol#1645-1661) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1663,
                    "vulnerability_to_line": 1679,
                    "vulnerability_code": "  function getHeapSort16() returns (uint16[10] memory r){\n\n    delete array16;\n\n    array16.push(3);\n\n    array16.push(1);\n\n    array16.push(9);\n\n    array16.push(7);\n\n    array16.push(4);\n\n    array16.push(4);\n\n    array16.push(0xff3);\n\n    array16.push(0);\n\n    array16.push(1095);\n\n    array16.push(1);\n\n    array16.heapSort();\n\n    for(uint256 i = 0; i<array16.length; i++){\n\n      r[i] = array16[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getHeapSort16 (ArrayUtilsTestContractThree.sol#1663-1679) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1681,
                    "vulnerability_to_line": 1697,
                    "vulnerability_code": "  function getHeapSort8() returns (uint8[10] memory r){\n\n    delete array8;\n\n    array8.push(3);\n\n    array8.push(1);\n\n    array8.push(9);\n\n    array8.push(7);\n\n    array8.push(4);\n\n    array8.push(4);\n\n    array8.push(0xfe);\n\n    array8.push(0);\n\n    array8.push(109);\n\n    array8.push(1);\n\n    array8.heapSort();\n\n    for(uint256 i = 0; i<array8.length; i++){\n\n      r[i] = array8[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getHeapSort8 (ArrayUtilsTestContractThree.sol#1681-1697) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1699,
                    "vulnerability_to_line": 1718,
                    "vulnerability_code": "  function getUniq8() returns (uint8[5] memory r) {\n\n    uint arrayNewLength;\n\n\n\n    delete array8;\n\n\n\n    array8.push(1);\n\n    array8.push(1);\n\n    array8.push(2);\n\n    array8.push(7);\n\n    array8.push(4);\n\n    array8.push(4);\n\n    array8.push(0);\n\n    array8.push(1);\n\n\n\n    arrayNewLength = array8.uniq();\n\n\n\n    for (uint8 i = 0; i < arrayNewLength; i++) {\n\n      r[i] = array8[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getUniq8 (ArrayUtilsTestContractThree.sol#1699-1718) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1720,
                    "vulnerability_to_line": 1741,
                    "vulnerability_code": "  function getUniq16() returns (uint16[7] memory r) {\n\n    uint arrayNewLength;\n\n\n\n    delete array16;\n\n\n\n    array16.push(1);\n\n    array16.push(1);\n\n    array16.push(2);\n\n    array16.push(7);\n\n    array16.push(4);\n\n    array16.push(4);\n\n    array16.push(0);\n\n    array16.push(0xff3);\n\n    array16.push(1095);\n\n    array16.push(1);\n\n\n\n    arrayNewLength = array16.uniq();\n\n\n\n    for (uint16 i = 0; i < arrayNewLength; i++) {\n\n      r[i] = array16[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getUniq16 (ArrayUtilsTestContractThree.sol#1720-1741) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1743,
                    "vulnerability_to_line": 1764,
                    "vulnerability_code": "  function getUniq32() returns (uint32[7] memory r) {\n\n    uint arrayNewLength;\n\n\n\n    delete array32;\n\n\n\n    array32.push(1);\n\n    array32.push(1);\n\n    array32.push(2);\n\n    array32.push(7);\n\n    array32.push(4);\n\n    array32.push(4);\n\n    array32.push(0);\n\n    array32.push(0xff3);\n\n    array32.push(1095);\n\n    array32.push(1);\n\n\n\n    arrayNewLength = array32.uniq();\n\n\n\n    for (uint32 i = 0; i < arrayNewLength; i++) {\n\n      r[i] = array32[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getUniq32 (ArrayUtilsTestContractThree.sol#1743-1764) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1766,
                    "vulnerability_to_line": 1787,
                    "vulnerability_code": "  function getUniq64() returns (uint64[7] memory r) {\n\n    uint arrayNewLength;\n\n\n\n    delete array64;\n\n\n\n    array64.push(1);\n\n    array64.push(1);\n\n    array64.push(2);\n\n    array64.push(7);\n\n    array64.push(4);\n\n    array64.push(4);\n\n    array64.push(0);\n\n    array64.push(0xff3);\n\n    array64.push(1095);\n\n    array64.push(1);\n\n\n\n    arrayNewLength = array64.uniq();\n\n\n\n    for (uint64 i = 0; i < arrayNewLength; i++) {\n\n      r[i] = array64[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getUniq64 (ArrayUtilsTestContractThree.sol#1766-1787) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1789,
                    "vulnerability_to_line": 1810,
                    "vulnerability_code": "  function getUniq128() returns (uint128[7] memory r) {\n\n    uint arrayNewLength;\n\n\n\n    delete array128;\n\n\n\n    array128.push(1);\n\n    array128.push(1);\n\n    array128.push(2);\n\n    array128.push(7);\n\n    array128.push(4);\n\n    array128.push(4);\n\n    array128.push(0);\n\n    array128.push(0xff3);\n\n    array128.push(1095);\n\n    array128.push(1);\n\n\n\n    arrayNewLength = array128.uniq();\n\n\n\n    for (uint128 i = 0; i < arrayNewLength; i++) {\n\n      r[i] = array128[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getUniq128 (ArrayUtilsTestContractThree.sol#1789-1810) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1812,
                    "vulnerability_to_line": 1833,
                    "vulnerability_code": "  function getUniq256() returns (uint256[7] memory r) {\n\n    uint arrayNewLength;\n\n\n\n    delete array256;\n\n\n\n    array256.push(1);\n\n    array256.push(1);\n\n    array256.push(2);\n\n    array256.push(7);\n\n    array256.push(4);\n\n    array256.push(4);\n\n    array256.push(0);\n\n    array256.push(0xff3);\n\n    array256.push(1095);\n\n    array256.push(1);\n\n\n\n    arrayNewLength = array256.uniq();\n\n\n\n    for (uint256 i = 0; i < arrayNewLength; i++) {\n\n      r[i] = array256[i];\n\n    }\n",
                    "message": "ArrayUtilsTestContractThree.getUniq256 (ArrayUtilsTestContractThree.sol#1812-1833) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ArrayUtilsTestContractThree.sol:\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractThree.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractThree.sol#235): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractThree.sol#528): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractThree.sol#788): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractThree.sol#1048): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractThree.sol#1308): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractThree.sol#1567): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1599,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array256.push(0xff3);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array128.push(0xff3);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array64.push(0xff3);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array32.push(0xff3);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1671,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array16.push(0xff3);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1689,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array8.push(0xfe);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array16.push(0xff3);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array32.push(0xff3);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1778,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array64.push(0xff3);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array128.push(0xff3);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1824,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array256.push(0xff3);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 885,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1090,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array256.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array128.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array64.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array32.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array16.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array8.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array256.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array128.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array64.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array32.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array16.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<array8.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 921,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1086,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getHeapSort256() returns (uint256[10] memory r){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getHeapSort128() returns (uint128[10] memory r){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getHeapSort64() returns (uint64[10] memory r){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getHeapSort32() returns (uint32[10] memory r){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1663,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getHeapSort16() returns (uint16[10] memory r){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1681,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getHeapSort8() returns (uint8[10] memory r){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUniq8() returns (uint8[5] memory r) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1720,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUniq16() returns (uint16[7] memory r) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUniq32() returns (uint32[7] memory r) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1766,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUniq64() returns (uint64[7] memory r) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUniq128() returns (uint128[7] memory r) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1812,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUniq256() returns (uint256[7] memory r) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256[] array256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint128[] array128;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint64[] array64;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint32[] array32;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint16[] array16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8[] array8;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/truffle/contracts/Array64Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements (Array64Lib.sol#37-58) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax (Array64Lib.sol#63-87) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin (Array64Lib.sol#92-120) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements uses assembly (Array64Lib.sol#37-58)\n\t- Array64Lib.sol#41-58\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax uses assembly (Array64Lib.sol#63-87)\n\t- Array64Lib.sol#67-87\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin uses assembly (Array64Lib.sol#92-120)\n\t- Array64Lib.sol#96-120\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements (Array64Lib.sol#37-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax (Array64Lib.sol#63-87) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin (Array64Lib.sol#92-120) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "  function heapSort(uint64[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint64 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.heapSort (Array64Lib.sol#177-235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "  function uniq(uint64[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array64Lib.uniq (Array64Lib.sol#239-258) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array64Lib.sol:\n\t- pragma solidity^0.4.18 (Array64Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/truffle/contracts/Array128Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements (Array128Lib.sol#37-58) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax (Array128Lib.sol#63-87) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin (Array128Lib.sol#92-119) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    uint256 term;\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n\n\n\n          switch mod(mid,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch lt(term,value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(term,value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n          term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n          switch mod(i,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch eq(term, value)\n\n          case 1 {\n\n            found := 1\n\n            index := i\n\n            i := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.indexOf (Array128Lib.sol#127-190) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements uses assembly (Array128Lib.sol#37-58)\n\t- Array128Lib.sol#41-58\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax uses assembly (Array128Lib.sol#63-87)\n\t- Array128Lib.sol#67-87\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin uses assembly (Array128Lib.sol#92-119)\n\t- Array128Lib.sol#96-119\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    uint256 term;\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n\n\n\n          switch mod(mid,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch lt(term,value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(term,value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n          term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n          switch mod(i,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch eq(term, value)\n\n          case 1 {\n\n            found := 1\n\n            index := i\n\n            i := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.indexOf uses assembly (Array128Lib.sol#127-190)\n\t- Array128Lib.sol#132-190\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements (Array128Lib.sol#37-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax (Array128Lib.sol#63-87) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin (Array128Lib.sol#92-119) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 268,
                    "vulnerability_code": "  function heapSort(uint128[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint128 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.heapSort (Array128Lib.sol#210-268) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function uniq(uint128[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array128Lib.uniq (Array128Lib.sol#272-291) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array128Lib.sol:\n\t- pragma solidity^0.4.18 (Array128Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/truffle/contracts/Array256Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf (Array256Lib.sol#87-129) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements uses assembly (Array256Lib.sol#37-45)\n\t- Array256Lib.sol#38-45\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax uses assembly (Array256Lib.sol#50-62)\n\t- Array256Lib.sol#51-62\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin uses assembly (Array256Lib.sol#67-79)\n\t- Array256Lib.sol#68-79\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf uses assembly (Array256Lib.sol#87-129)\n\t- Array256Lib.sol#91-129\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.heapSort (Array256Lib.sol#149-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array256Lib.uniq (Array256Lib.sol#211-230) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array256Lib.sol:\n\t- pragma solidity^0.4.18 (Array256Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/truffle/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.4 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Migrations() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/truffle/contracts/Array16Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements (Array16Lib.sol#37-58) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax (Array16Lib.sol#63-87) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin (Array16Lib.sol#92-120) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements uses assembly (Array16Lib.sol#37-58)\n\t- Array16Lib.sol#41-58\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax uses assembly (Array16Lib.sol#63-87)\n\t- Array16Lib.sol#67-87\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin uses assembly (Array16Lib.sol#92-120)\n\t- Array16Lib.sol#96-120\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements (Array16Lib.sol#37-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax (Array16Lib.sol#63-87) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin (Array16Lib.sol#92-120) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "  function heapSort(uint16[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint16 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.heapSort (Array16Lib.sol#177-235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "  function uniq(uint16[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array16Lib.uniq (Array16Lib.sol#239-258) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array16Lib.sol:\n\t- pragma solidity^0.4.18 (Array16Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/truffle/contracts/Array32Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements (Array32Lib.sol#37-58) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax (Array32Lib.sol#63-87) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin (Array32Lib.sol#92-120) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements uses assembly (Array32Lib.sol#37-58)\n\t- Array32Lib.sol#41-58\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax uses assembly (Array32Lib.sol#63-87)\n\t- Array32Lib.sol#67-87\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin uses assembly (Array32Lib.sol#92-120)\n\t- Array32Lib.sol#96-120\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements (Array32Lib.sol#37-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax (Array32Lib.sol#63-87) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin (Array32Lib.sol#92-120) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "  function heapSort(uint32[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint32 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.heapSort (Array32Lib.sol#177-235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "  function uniq(uint32[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array32Lib.uniq (Array32Lib.sol#239-258) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array32Lib.sol:\n\t- pragma solidity^0.4.18 (Array32Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/truffle/contracts/ArrayUtilsTestContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 678,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 737,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 752,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 983,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 984,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 985,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 996,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 748,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 978,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 979,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 778,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_89"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (ArrayUtilsTestContract.sol#37-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (ArrayUtilsTestContract.sol#50-62) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (ArrayUtilsTestContract.sol#67-79) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf (ArrayUtilsTestContract.sol#87-129) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements (ArrayUtilsTestContract.sol#269-290) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax (ArrayUtilsTestContract.sol#295-319) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin (ArrayUtilsTestContract.sol#324-351) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    uint256 term;\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n\n\n\n          switch mod(mid,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch lt(term,value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(term,value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n          term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n          switch mod(i,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch eq(term, value)\n\n          case 1 {\n\n            found := 1\n\n            index := i\n\n            i := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.indexOf (ArrayUtilsTestContract.sol#359-422) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements (ArrayUtilsTestContract.sol#562-583) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": 612,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax (ArrayUtilsTestContract.sol#588-612) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 645,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin (ArrayUtilsTestContract.sol#617-645) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements (ArrayUtilsTestContract.sol#822-843) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": 872,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax (ArrayUtilsTestContract.sol#848-872) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin (ArrayUtilsTestContract.sol#877-905) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements (ArrayUtilsTestContract.sol#1082-1103) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": 1132,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax (ArrayUtilsTestContract.sol#1108-1132) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": 1165,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin (ArrayUtilsTestContract.sol#1137-1165) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements (ArrayUtilsTestContract.sol#1342-1363) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1392,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax (ArrayUtilsTestContract.sol#1368-1392) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1424,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin (ArrayUtilsTestContract.sol#1397-1424) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements uses assembly (ArrayUtilsTestContract.sol#37-45)\n\t- ArrayUtilsTestContract.sol#38-45\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax uses assembly (ArrayUtilsTestContract.sol#50-62)\n\t- ArrayUtilsTestContract.sol#51-62\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin uses assembly (ArrayUtilsTestContract.sol#67-79)\n\t- ArrayUtilsTestContract.sol#68-79\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf uses assembly (ArrayUtilsTestContract.sol#87-129)\n\t- ArrayUtilsTestContract.sol#91-129\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements uses assembly (ArrayUtilsTestContract.sol#269-290)\n\t- ArrayUtilsTestContract.sol#273-290\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax uses assembly (ArrayUtilsTestContract.sol#295-319)\n\t- ArrayUtilsTestContract.sol#299-319\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin uses assembly (ArrayUtilsTestContract.sol#324-351)\n\t- ArrayUtilsTestContract.sol#328-351\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    uint256 term;\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n\n\n\n          switch mod(mid,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch lt(term,value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(term,value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n          term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n          switch mod(i,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch eq(term, value)\n\n          case 1 {\n\n            found := 1\n\n            index := i\n\n            i := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.indexOf uses assembly (ArrayUtilsTestContract.sol#359-422)\n\t- ArrayUtilsTestContract.sol#364-422\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements uses assembly (ArrayUtilsTestContract.sol#562-583)\n\t- ArrayUtilsTestContract.sol#566-583\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": 612,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax uses assembly (ArrayUtilsTestContract.sol#588-612)\n\t- ArrayUtilsTestContract.sol#592-612\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 645,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin uses assembly (ArrayUtilsTestContract.sol#617-645)\n\t- ArrayUtilsTestContract.sol#621-645\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements uses assembly (ArrayUtilsTestContract.sol#822-843)\n\t- ArrayUtilsTestContract.sol#826-843\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": 872,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax uses assembly (ArrayUtilsTestContract.sol#848-872)\n\t- ArrayUtilsTestContract.sol#852-872\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin uses assembly (ArrayUtilsTestContract.sol#877-905)\n\t- ArrayUtilsTestContract.sol#881-905\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements uses assembly (ArrayUtilsTestContract.sol#1082-1103)\n\t- ArrayUtilsTestContract.sol#1086-1103\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": 1132,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax uses assembly (ArrayUtilsTestContract.sol#1108-1132)\n\t- ArrayUtilsTestContract.sol#1112-1132\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": 1165,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin uses assembly (ArrayUtilsTestContract.sol#1137-1165)\n\t- ArrayUtilsTestContract.sol#1141-1165\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements uses assembly (ArrayUtilsTestContract.sol#1342-1363)\n\t- ArrayUtilsTestContract.sol#1346-1363\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1392,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax uses assembly (ArrayUtilsTestContract.sol#1368-1392)\n\t- ArrayUtilsTestContract.sol#1372-1392\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1424,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin uses assembly (ArrayUtilsTestContract.sol#1397-1424)\n\t- ArrayUtilsTestContract.sol#1401-1424\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (ArrayUtilsTestContract.sol#37-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (ArrayUtilsTestContract.sol#50-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (ArrayUtilsTestContract.sol#67-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.heapSort (ArrayUtilsTestContract.sol#149-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array256Lib.uniq (ArrayUtilsTestContract.sol#211-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements (ArrayUtilsTestContract.sol#269-290) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax (ArrayUtilsTestContract.sol#295-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin (ArrayUtilsTestContract.sol#324-351) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "  function heapSort(uint128[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint128 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.heapSort (ArrayUtilsTestContract.sol#442-500) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": 523,
                    "vulnerability_code": "  function uniq(uint128[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array128Lib.uniq (ArrayUtilsTestContract.sol#504-523) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements (ArrayUtilsTestContract.sol#562-583) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": 612,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax (ArrayUtilsTestContract.sol#588-612) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 645,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin (ArrayUtilsTestContract.sol#617-645) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 702,
                    "vulnerability_to_line": 760,
                    "vulnerability_code": "  function heapSort(uint64[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint64 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.heapSort (ArrayUtilsTestContract.sol#702-760) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": 783,
                    "vulnerability_code": "  function uniq(uint64[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array64Lib.uniq (ArrayUtilsTestContract.sol#764-783) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements (ArrayUtilsTestContract.sol#822-843) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": 872,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax (ArrayUtilsTestContract.sol#848-872) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin (ArrayUtilsTestContract.sol#877-905) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 962,
                    "vulnerability_to_line": 1020,
                    "vulnerability_code": "  function heapSort(uint32[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint32 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.heapSort (ArrayUtilsTestContract.sol#962-1020) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": 1043,
                    "vulnerability_code": "  function uniq(uint32[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array32Lib.uniq (ArrayUtilsTestContract.sol#1024-1043) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements (ArrayUtilsTestContract.sol#1082-1103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": 1132,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax (ArrayUtilsTestContract.sol#1108-1132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": 1165,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin (ArrayUtilsTestContract.sol#1137-1165) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1222,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "  function heapSort(uint16[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint16 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.heapSort (ArrayUtilsTestContract.sol#1222-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1284,
                    "vulnerability_to_line": 1303,
                    "vulnerability_code": "  function uniq(uint16[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array16Lib.uniq (ArrayUtilsTestContract.sol#1284-1303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements (ArrayUtilsTestContract.sol#1342-1363) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1392,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax (ArrayUtilsTestContract.sol#1368-1392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1424,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin (ArrayUtilsTestContract.sol#1397-1424) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1481,
                    "vulnerability_to_line": 1539,
                    "vulnerability_code": "  function heapSort(uint8[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint8 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.heapSort (ArrayUtilsTestContract.sol#1481-1539) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1543,
                    "vulnerability_to_line": 1562,
                    "vulnerability_code": "  function uniq(uint8[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array8Lib.uniq (ArrayUtilsTestContract.sol#1543-1562) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1591,
                    "vulnerability_to_line": 1598,
                    "vulnerability_code": "  function getSumElements256() returns (uint256){\n\n    delete array256;\n\n    array256.push(2);\n\n    array256.push(10);\n\n    array256.push(0);\n\n    array256.push(10342);\n\n    return array256.sumElements();\n",
                    "message": "ArrayUtilsTestContract.getSumElements256 (ArrayUtilsTestContract.sol#1591-1598) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1600,
                    "vulnerability_to_line": 1607,
                    "vulnerability_code": "  function getGetMaxMiddle256() returns (uint256){\n\n    delete array256;\n\n    array256.push(2);\n\n    array256.push(0);\n\n    array256.push(1058939);\n\n    array256.push(0xfffff);\n\n    return array256.getMax();\n",
                    "message": "ArrayUtilsTestContract.getGetMaxMiddle256 (ArrayUtilsTestContract.sol#1600-1607) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1609,
                    "vulnerability_to_line": 1616,
                    "vulnerability_code": "  function getGetMinMiddle256() returns (uint256){\n\n    delete array256;\n\n    array256.push(1058939);\n\n    array256.push(17);\n\n    array256.push(21);\n\n    array256.push(0xfffff);\n\n    return array256.getMin();\n",
                    "message": "ArrayUtilsTestContract.getGetMinMiddle256 (ArrayUtilsTestContract.sol#1609-1616) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1618,
                    "vulnerability_to_line": 1626,
                    "vulnerability_code": "  function getSumElements128() returns (uint256 test){\n\n    delete array128;\n\n    array128.push(2);\n\n    array128.push(4);\n\n    array128.push(6);\n\n    array128.push(3);\n\n\n\n    return array128.sumElements();\n",
                    "message": "ArrayUtilsTestContract.getSumElements128 (ArrayUtilsTestContract.sol#1618-1626) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1628,
                    "vulnerability_to_line": 1636,
                    "vulnerability_code": "  function getSumElements64() returns (uint256 test){\n\n    delete array64;\n\n    array64.push(2);\n\n    array64.push(4);\n\n    array64.push(6);\n\n    array64.push(3);\n\n\n\n    return array64.sumElements();\n",
                    "message": "ArrayUtilsTestContract.getSumElements64 (ArrayUtilsTestContract.sol#1628-1636) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1638,
                    "vulnerability_to_line": 1646,
                    "vulnerability_code": "  function getSumElements32() returns (uint256 test){\n\n    delete array32;\n\n    array32.push(2);\n\n    array32.push(4);\n\n    array32.push(6);\n\n    array32.push(3);\n\n\n\n    return array32.sumElements();\n",
                    "message": "ArrayUtilsTestContract.getSumElements32 (ArrayUtilsTestContract.sol#1638-1646) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1648,
                    "vulnerability_to_line": 1656,
                    "vulnerability_code": "  function getSumElements16() returns (uint256 test){\n\n    delete array16;\n\n    array16.push(2);\n\n    array16.push(4);\n\n    array16.push(6);\n\n    array16.push(3);\n\n\n\n    return array16.sumElements();\n",
                    "message": "ArrayUtilsTestContract.getSumElements16 (ArrayUtilsTestContract.sol#1648-1656) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1658,
                    "vulnerability_to_line": 1666,
                    "vulnerability_code": "  function getSumElements8() returns (uint256 test){\n\n    delete array8;\n\n    array8.push(2);\n\n    array8.push(4);\n\n    array8.push(6);\n\n    array8.push(3);\n\n\n\n    return array8.sumElements();\n",
                    "message": "ArrayUtilsTestContract.getSumElements8 (ArrayUtilsTestContract.sol#1658-1666) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1668,
                    "vulnerability_to_line": 1677,
                    "vulnerability_code": "  function getGetMaxMiddle128() returns (uint128){\n\n    delete array128;\n\n    array128.push(2);\n\n    array128.push(29588383);\n\n    array128.push(0);\n\n    array128.push(0xfffff);\n\n\n\n\n\n    return array128.getMax();\n",
                    "message": "ArrayUtilsTestContract.getGetMaxMiddle128 (ArrayUtilsTestContract.sol#1668-1677) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1679,
                    "vulnerability_to_line": 1688,
                    "vulnerability_code": "  function getGetMaxMiddle64() returns (uint64){\n\n    delete array64;\n\n    array64.push(2);\n\n    array64.push(29588);\n\n    array64.push(0);\n\n    array64.push(0xff);\n\n\n\n\n\n    return array64.getMax();\n",
                    "message": "ArrayUtilsTestContract.getGetMaxMiddle64 (ArrayUtilsTestContract.sol#1679-1688) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1690,
                    "vulnerability_to_line": 1699,
                    "vulnerability_code": "  function getGetMaxMiddle32() returns (uint32){\n\n    delete array32;\n\n    array32.push(2);\n\n    array32.push(29588);\n\n    array32.push(0);\n\n    array32.push(0xff);\n\n\n\n\n\n    return array32.getMax();\n",
                    "message": "ArrayUtilsTestContract.getGetMaxMiddle32 (ArrayUtilsTestContract.sol#1690-1699) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1701,
                    "vulnerability_to_line": 1710,
                    "vulnerability_code": "  function getGetMaxMiddle16() returns (uint16){\n\n    delete array16;\n\n    array16.push(2);\n\n    array16.push(29588);\n\n    array16.push(0);\n\n    array16.push(0xff);\n\n\n\n\n\n    return array16.getMax();\n",
                    "message": "ArrayUtilsTestContract.getGetMaxMiddle16 (ArrayUtilsTestContract.sol#1701-1710) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1712,
                    "vulnerability_to_line": 1721,
                    "vulnerability_code": "  function getGetMaxMiddle8() returns (uint8){\n\n    delete array8;\n\n    array8.push(2);\n\n    array8.push(29);\n\n    array8.push(152);\n\n    array8.push(0xf);\n\n\n\n\n\n    return array8.getMax();\n",
                    "message": "ArrayUtilsTestContract.getGetMaxMiddle8 (ArrayUtilsTestContract.sol#1712-1721) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1723,
                    "vulnerability_to_line": 1730,
                    "vulnerability_code": "  function getGetMinMiddle128() returns (uint128){\n\n    delete array128;\n\n    array128.push(1058939);\n\n    array128.push(73);\n\n    array128.push(17);\n\n    array128.push(0xfffff);\n\n    return array128.getMin();\n",
                    "message": "ArrayUtilsTestContract.getGetMinMiddle128 (ArrayUtilsTestContract.sol#1723-1730) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1732,
                    "vulnerability_to_line": 1739,
                    "vulnerability_code": "  function getGetMinMiddle64() returns (uint64){\n\n    delete array64;\n\n    array64.push(1058939);\n\n    array64.push(73);\n\n    array64.push(17);\n\n    array64.push(0xfffff);\n\n    return array64.getMin();\n",
                    "message": "ArrayUtilsTestContract.getGetMinMiddle64 (ArrayUtilsTestContract.sol#1732-1739) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1741,
                    "vulnerability_to_line": 1748,
                    "vulnerability_code": "  function getGetMinMiddle32() returns (uint32){\n\n    delete array32;\n\n    array32.push(1058939);\n\n    array32.push(73);\n\n    array32.push(17);\n\n    array32.push(0xfffff);\n\n    return array32.getMin();\n",
                    "message": "ArrayUtilsTestContract.getGetMinMiddle32 (ArrayUtilsTestContract.sol#1741-1748) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1750,
                    "vulnerability_to_line": 1757,
                    "vulnerability_code": "  function getGetMinMiddle16() returns (uint16){\n\n    delete array16;\n\n    array16.push(10589);\n\n    array16.push(73);\n\n    array16.push(17);\n\n    array16.push(0xffff);\n\n    return array16.getMin();\n",
                    "message": "ArrayUtilsTestContract.getGetMinMiddle16 (ArrayUtilsTestContract.sol#1750-1757) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1759,
                    "vulnerability_to_line": 1766,
                    "vulnerability_code": "  function getGetMinMiddle8() returns (uint8){\n\n    delete array8;\n\n    array8.push(105);\n\n    array8.push(73);\n\n    array8.push(17);\n\n    array8.push(0xff);\n\n    return array8.getMin();\n",
                    "message": "ArrayUtilsTestContract.getGetMinMiddle8 (ArrayUtilsTestContract.sol#1759-1766) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ArrayUtilsTestContract.sol:\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContract.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContract.sol#235): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContract.sol#528): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContract.sol#788): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContract.sol#1048): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContract.sol#1308): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContract.sol#1567): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array256.push(0xfffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array256.push(0xfffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array128.push(0xfffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array64.push(0xff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array32.push(0xff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array16.push(0xff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array8.push(0xf);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1728,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array128.push(0xfffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1737,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array64.push(0xfffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array32.push(0xfffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array16.push(0xffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1764,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array8.push(0xff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 885,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1090,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 921,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1086,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSumElements256() returns (uint256){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMaxMiddle256() returns (uint256){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMinMiddle256() returns (uint256){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1618,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSumElements128() returns (uint256 test){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSumElements64() returns (uint256 test){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1638,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSumElements32() returns (uint256 test){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSumElements16() returns (uint256 test){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSumElements8() returns (uint256 test){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1668,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMaxMiddle128() returns (uint128){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMaxMiddle64() returns (uint64){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1690,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMaxMiddle32() returns (uint32){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1701,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMaxMiddle16() returns (uint16){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMaxMiddle8() returns (uint8){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMinMiddle128() returns (uint128){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMinMiddle64() returns (uint64){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1741,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMinMiddle32() returns (uint32){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1750,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMinMiddle16() returns (uint16){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1759,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGetMinMiddle8() returns (uint8){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256[] array256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint128[] array128;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint64[] array64;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint32[] array32;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint16[] array16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8[] array8;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/truffle/contracts/Array8Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements (Array8Lib.sol#37-58) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax (Array8Lib.sol#63-87) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin (Array8Lib.sol#92-119) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements uses assembly (Array8Lib.sol#37-58)\n\t- Array8Lib.sol#41-58\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax uses assembly (Array8Lib.sol#63-87)\n\t- Array8Lib.sol#67-87\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin uses assembly (Array8Lib.sol#92-119)\n\t- Array8Lib.sol#96-119\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements (Array8Lib.sol#37-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax (Array8Lib.sol#63-87) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin (Array8Lib.sol#92-119) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "  function heapSort(uint8[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint8 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.heapSort (Array8Lib.sol#176-234) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function uniq(uint8[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array8Lib.uniq (Array8Lib.sol#238-257) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array8Lib.sol:\n\t- pragma solidity^0.4.18 (Array8Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/ArrayUtilsLib/truffle/contracts/ArrayUtilsTestContractTwo.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 678,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          i = self.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 737,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 752,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 983,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 984,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 985,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 996,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 1533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 748,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 978,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 979,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 778,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_81"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (ArrayUtilsTestContractTwo.sol#37-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (ArrayUtilsTestContractTwo.sol#50-62) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (ArrayUtilsTestContractTwo.sol#67-79) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf (ArrayUtilsTestContractTwo.sol#87-129) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements (ArrayUtilsTestContractTwo.sol#269-290) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax (ArrayUtilsTestContractTwo.sol#295-319) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin (ArrayUtilsTestContractTwo.sol#324-351) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    uint256 term;\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n\n\n\n          switch mod(mid,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch lt(term,value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(term,value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n          term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n          switch mod(i,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch eq(term, value)\n\n          case 1 {\n\n            found := 1\n\n            index := i\n\n            i := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.indexOf (ArrayUtilsTestContractTwo.sol#359-422) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements (ArrayUtilsTestContractTwo.sol#562-583) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": 612,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax (ArrayUtilsTestContractTwo.sol#588-612) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 645,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin (ArrayUtilsTestContractTwo.sol#617-645) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements (ArrayUtilsTestContractTwo.sol#822-843) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": 872,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax (ArrayUtilsTestContractTwo.sol#848-872) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin (ArrayUtilsTestContractTwo.sol#877-905) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements (ArrayUtilsTestContractTwo.sol#1082-1103) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": 1132,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax (ArrayUtilsTestContractTwo.sol#1108-1132) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": 1165,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin (ArrayUtilsTestContractTwo.sol#1137-1165) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements (ArrayUtilsTestContractTwo.sol#1342-1363) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1392,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax (ArrayUtilsTestContractTwo.sol#1368-1392) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1424,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin (ArrayUtilsTestContractTwo.sol#1397-1424) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#37-45)\n\t- ArrayUtilsTestContractTwo.sol#38-45\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#50-62)\n\t- ArrayUtilsTestContractTwo.sol#51-62\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#67-79)\n\t- ArrayUtilsTestContractTwo.sol#68-79\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf uses assembly (ArrayUtilsTestContractTwo.sol#87-129)\n\t- ArrayUtilsTestContractTwo.sol#91-129\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#269-290)\n\t- ArrayUtilsTestContractTwo.sol#273-290\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#295-319)\n\t- ArrayUtilsTestContractTwo.sol#299-319\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#324-351)\n\t- ArrayUtilsTestContractTwo.sol#328-351\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    uint256 term;\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n\n\n\n          switch mod(mid,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch lt(term,value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(term,value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n          term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n          switch mod(i,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch eq(term, value)\n\n          case 1 {\n\n            found := 1\n\n            index := i\n\n            i := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.indexOf uses assembly (ArrayUtilsTestContractTwo.sol#359-422)\n\t- ArrayUtilsTestContractTwo.sol#364-422\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#562-583)\n\t- ArrayUtilsTestContractTwo.sol#566-583\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": 612,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#588-612)\n\t- ArrayUtilsTestContractTwo.sol#592-612\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 645,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#617-645)\n\t- ArrayUtilsTestContractTwo.sol#621-645\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#822-843)\n\t- ArrayUtilsTestContractTwo.sol#826-843\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": 872,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#848-872)\n\t- ArrayUtilsTestContractTwo.sol#852-872\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#877-905)\n\t- ArrayUtilsTestContractTwo.sol#881-905\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#1082-1103)\n\t- ArrayUtilsTestContractTwo.sol#1086-1103\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": 1132,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#1108-1132)\n\t- ArrayUtilsTestContractTwo.sol#1112-1132\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": 1165,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#1137-1165)\n\t- ArrayUtilsTestContractTwo.sol#1141-1165\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#1342-1363)\n\t- ArrayUtilsTestContractTwo.sol#1346-1363\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1392,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#1368-1392)\n\t- ArrayUtilsTestContractTwo.sol#1372-1392\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1424,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#1397-1424)\n\t- ArrayUtilsTestContractTwo.sol#1401-1424\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (ArrayUtilsTestContractTwo.sol#37-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (ArrayUtilsTestContractTwo.sol#50-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (ArrayUtilsTestContractTwo.sol#67-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.heapSort (ArrayUtilsTestContractTwo.sol#149-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array256Lib.uniq (ArrayUtilsTestContractTwo.sol#211-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array128Lib.sumElements (ArrayUtilsTestContractTwo.sol#269-290) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMax (ArrayUtilsTestContractTwo.sol#295-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.getMin (ArrayUtilsTestContractTwo.sol#324-351) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "  function heapSort(uint128[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint128 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array128Lib.heapSort (ArrayUtilsTestContractTwo.sol#442-500) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": 523,
                    "vulnerability_code": "  function uniq(uint128[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array128Lib.uniq (ArrayUtilsTestContractTwo.sol#504-523) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array64Lib.sumElements (ArrayUtilsTestContractTwo.sol#562-583) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": 612,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMax (ArrayUtilsTestContractTwo.sol#588-612) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 645,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.getMin (ArrayUtilsTestContractTwo.sol#617-645) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 702,
                    "vulnerability_to_line": 760,
                    "vulnerability_code": "  function heapSort(uint64[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint64 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array64Lib.heapSort (ArrayUtilsTestContractTwo.sol#702-760) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": 783,
                    "vulnerability_code": "  function uniq(uint64[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array64Lib.uniq (ArrayUtilsTestContractTwo.sol#764-783) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array32Lib.sumElements (ArrayUtilsTestContractTwo.sol#822-843) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": 872,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMax (ArrayUtilsTestContractTwo.sol#848-872) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.getMin (ArrayUtilsTestContractTwo.sol#877-905) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 962,
                    "vulnerability_to_line": 1020,
                    "vulnerability_code": "  function heapSort(uint32[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint32 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array32Lib.heapSort (ArrayUtilsTestContractTwo.sol#962-1020) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": 1043,
                    "vulnerability_code": "  function uniq(uint32[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array32Lib.uniq (ArrayUtilsTestContractTwo.sol#1024-1043) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array16Lib.sumElements (ArrayUtilsTestContractTwo.sol#1082-1103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": 1132,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMax (ArrayUtilsTestContractTwo.sol#1108-1132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": 1165,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.getMin (ArrayUtilsTestContractTwo.sol#1137-1165) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1222,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "  function heapSort(uint16[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint16 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array16Lib.heapSort (ArrayUtilsTestContractTwo.sol#1222-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1284,
                    "vulnerability_to_line": 1303,
                    "vulnerability_code": "  function uniq(uint16[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array16Lib.uniq (ArrayUtilsTestContractTwo.sol#1284-1303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
                    "message": "Array8Lib.sumElements (ArrayUtilsTestContractTwo.sol#1342-1363) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1392,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMax (ArrayUtilsTestContractTwo.sol#1368-1392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1424,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.getMin (ArrayUtilsTestContractTwo.sol#1397-1424) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1481,
                    "vulnerability_to_line": 1539,
                    "vulnerability_code": "  function heapSort(uint8[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint8 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array8Lib.heapSort (ArrayUtilsTestContractTwo.sol#1481-1539) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1543,
                    "vulnerability_to_line": 1562,
                    "vulnerability_code": "  function uniq(uint8[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array8Lib.uniq (ArrayUtilsTestContractTwo.sol#1543-1562) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1591,
                    "vulnerability_to_line": 1601,
                    "vulnerability_code": "  function getSortedIndexOf256(uint256 value) returns (bool,uint256){\n\n    delete array256;\n\n    array256.push(1);\n\n    array256.push(3);\n\n    array256.push(4);\n\n    array256.push(7);\n\n    array256.push(8);\n\n    array256.push(9);\n\n    array256.push(1095);\n\n    return array256.indexOf(value,true);\n",
                    "message": "ArrayUtilsTestContractTwo.getSortedIndexOf256 (ArrayUtilsTestContractTwo.sol#1591-1601) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1603,
                    "vulnerability_to_line": 1617,
                    "vulnerability_code": "  function getSortedIndexOf128(uint128 value) returns (bool,uint256) {\n\n    delete array128;\n\n    array128.push(0);\n\n    array128.push(1);\n\n    array128.push(2);\n\n    array128.push(3);\n\n    array128.push(4);\n\n    array128.push(5);\n\n    array128.push(6);\n\n    array128.push(7);\n\n    array128.push(8);\n\n    array128.push(9);\n\n    array128.push(1095);\n\n    return array128.indexOf(value,true);\n",
                    "message": "ArrayUtilsTestContractTwo.getSortedIndexOf128 (ArrayUtilsTestContractTwo.sol#1603-1617) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1619,
                    "vulnerability_to_line": 1633,
                    "vulnerability_code": "  function getSortedIndexOf64(uint64 value) returns (bool,uint256) {\n\n    delete array64;\n\n    array64.push(0);\n\n    array64.push(1);\n\n    array64.push(2);\n\n    array64.push(3);\n\n    array64.push(4);\n\n    array64.push(5);\n\n    array64.push(6);\n\n    array64.push(7);\n\n    array64.push(8);\n\n    array64.push(9);\n\n    array64.push(1095);\n\n    return array64.indexOf(value,true);\n",
                    "message": "ArrayUtilsTestContractTwo.getSortedIndexOf64 (ArrayUtilsTestContractTwo.sol#1619-1633) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1635,
                    "vulnerability_to_line": 1649,
                    "vulnerability_code": "  function getSortedIndexOf32(uint32 value) returns (bool,uint256) {\n\n    delete array32;\n\n    array32.push(0);\n\n    array32.push(1);\n\n    array32.push(2);\n\n    array32.push(3);\n\n    array32.push(4);\n\n    array32.push(5);\n\n    array32.push(6);\n\n    array32.push(7);\n\n    array32.push(8);\n\n    array32.push(9);\n\n    array32.push(1095);\n\n    return array32.indexOf(value,true);\n",
                    "message": "ArrayUtilsTestContractTwo.getSortedIndexOf32 (ArrayUtilsTestContractTwo.sol#1635-1649) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1651,
                    "vulnerability_to_line": 1665,
                    "vulnerability_code": "  function getSortedIndexOf16(uint16 value) returns (bool,uint256) {\n\n    delete array16;\n\n    array16.push(0);\n\n    array16.push(1);\n\n    array16.push(2);\n\n    array16.push(3);\n\n    array16.push(4);\n\n    array16.push(5);\n\n    array16.push(6);\n\n    array16.push(7);\n\n    array16.push(8);\n\n    array16.push(9);\n\n    array16.push(109);\n\n    return array16.indexOf(value,true);\n",
                    "message": "ArrayUtilsTestContractTwo.getSortedIndexOf16 (ArrayUtilsTestContractTwo.sol#1651-1665) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1667,
                    "vulnerability_to_line": 1681,
                    "vulnerability_code": "  function getSortedIndexOf8(uint8 value) returns (bool,uint256) {\n\n    delete array8;\n\n    array8.push(0);\n\n    array8.push(1);\n\n    array8.push(2);\n\n    array8.push(3);\n\n    array8.push(4);\n\n    array8.push(5);\n\n    array8.push(6);\n\n    array8.push(7);\n\n    array8.push(8);\n\n    array8.push(9);\n\n    array8.push(109);\n\n    return array8.indexOf(value,true);\n",
                    "message": "ArrayUtilsTestContractTwo.getSortedIndexOf8 (ArrayUtilsTestContractTwo.sol#1667-1681) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1683,
                    "vulnerability_to_line": 1692,
                    "vulnerability_code": "  function getUnsortedIndexOf256(uint256 value) returns (bool,uint256) {\n\n    delete array256;\n\n    array256.push(7);\n\n    array256.push(0xffff);\n\n    array256.push(3);\n\n    array256.push(1);\n\n    array256.push(9);\n\n    array256.push(1095);\n\n    return array256.indexOf(value,false);\n",
                    "message": "ArrayUtilsTestContractTwo.getUnsortedIndexOf256 (ArrayUtilsTestContractTwo.sol#1683-1692) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1694,
                    "vulnerability_to_line": 1703,
                    "vulnerability_code": "  function getUnsortedIndexOf64(uint64 value) returns (bool,uint256) {\n\n    delete array64;\n\n    array64.push(7);\n\n    array64.push(0xffff);\n\n    array64.push(3);\n\n    array64.push(1);\n\n    array64.push(9);\n\n    array64.push(1095);\n\n    return array64.indexOf(value,false);\n",
                    "message": "ArrayUtilsTestContractTwo.getUnsortedIndexOf64 (ArrayUtilsTestContractTwo.sol#1694-1703) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1705,
                    "vulnerability_to_line": 1714,
                    "vulnerability_code": "  function getNoIndexOf256(uint256 value, bool isSorted) returns (bool,uint256) {\n\n    delete array256;\n\n    array256.push(1);\n\n    array256.push(3);\n\n    array256.push(4);\n\n    array256.push(7);\n\n    array256.push(9);\n\n    array256.push(1095);\n\n    return array256.indexOf(value,isSorted);\n",
                    "message": "ArrayUtilsTestContractTwo.getNoIndexOf256 (ArrayUtilsTestContractTwo.sol#1705-1714) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1716,
                    "vulnerability_to_line": 1725,
                    "vulnerability_code": "  function getNoIndexOf64(uint64 value, bool isSorted) returns (bool,uint256) {\n\n    delete array64;\n\n    array64.push(1);\n\n    array64.push(3);\n\n    array64.push(4);\n\n    array64.push(7);\n\n    array64.push(9);\n\n    array64.push(1095);\n\n    return array64.indexOf(value,isSorted);\n",
                    "message": "ArrayUtilsTestContractTwo.getNoIndexOf64 (ArrayUtilsTestContractTwo.sol#1716-1725) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ArrayUtilsTestContractTwo.sol:\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#235): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#528): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#788): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#1048): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#1308): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#1567): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1686,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array256.push(0xffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1697,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array64.push(0xffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 885,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1090,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 768,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 921,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (low <= high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 1489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1086,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSortedIndexOf256(uint256 value) returns (bool,uint256){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSortedIndexOf128(uint128 value) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1619,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSortedIndexOf64(uint64 value) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSortedIndexOf32(uint32 value) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSortedIndexOf16(uint16 value) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSortedIndexOf8(uint8 value) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUnsortedIndexOf256(uint256 value) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUnsortedIndexOf64(uint64 value) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1705,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getNoIndexOf256(uint256 value, bool isSorted) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1716,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getNoIndexOf64(uint64 value, bool isSorted) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256[] array256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint128[] array128;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint64[] array64;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint32[] array32;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint16[] array16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8[] array8;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/CrowdsaleTestTokenEteenD.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_65"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleTestTokenEteenD.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleTestTokenEteenD.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleTestTokenEteenD.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleTestTokenEteenD.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (CrowdsaleTestTokenEteenD.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleTestTokenEteenD.CrowdsaleTestTokenEteenD.name (local variable @ CrowdsaleTestTokenEteenD.sol#401) shadows:\n\t- CrowdsaleTestTokenEteenD.name (function @ CrowdsaleTestTokenEteenD.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleTestTokenEteenD.CrowdsaleTestTokenEteenD.symbol (local variable @ CrowdsaleTestTokenEteenD.sol#402) shadows:\n\t- CrowdsaleTestTokenEteenD.symbol (function @ CrowdsaleTestTokenEteenD.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleTestTokenEteenD.CrowdsaleTestTokenEteenD.decimals (local variable @ CrowdsaleTestTokenEteenD.sol#403) shadows:\n\t- CrowdsaleTestTokenEteenD.decimals (function @ CrowdsaleTestTokenEteenD.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleTestTokenEteenD.CrowdsaleTestTokenEteenD.initialSupply (local variable @ CrowdsaleTestTokenEteenD.sol#404) shadows:\n\t- CrowdsaleTestTokenEteenD.initialSupply (function @ CrowdsaleTestTokenEteenD.sol#427-429)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (CrowdsaleTestTokenEteenD.sol#40-49)\n\t- CrowdsaleTestTokenEteenD.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (CrowdsaleTestTokenEteenD.sol#57-72)\n\t- CrowdsaleTestTokenEteenD.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (CrowdsaleTestTokenEteenD.sol#80-89)\n\t- CrowdsaleTestTokenEteenD.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (CrowdsaleTestTokenEteenD.sol#97-106)\n\t- CrowdsaleTestTokenEteenD.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleTestTokenEteenD.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleTestTokenEteenD.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleTestTokenEteenD.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleTestTokenEteenD.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (CrowdsaleTestTokenEteenD.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (CrowdsaleTestTokenEteenD.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (CrowdsaleTestTokenEteenD.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (CrowdsaleTestTokenEteenD.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (CrowdsaleTestTokenEteenD.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (CrowdsaleTestTokenEteenD.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (CrowdsaleTestTokenEteenD.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (CrowdsaleTestTokenEteenD.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (CrowdsaleTestTokenEteenD.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (CrowdsaleTestTokenEteenD.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (CrowdsaleTestTokenEteenD.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleTestTokenEteenD.name (CrowdsaleTestTokenEteenD.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleTestTokenEteenD.symbol (CrowdsaleTestTokenEteenD.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleTestTokenEteenD.decimals (CrowdsaleTestTokenEteenD.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleTestTokenEteenD.totalSupply (CrowdsaleTestTokenEteenD.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleTestTokenEteenD.initialSupply (CrowdsaleTestTokenEteenD.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleTestTokenEteenD.balanceOf (CrowdsaleTestTokenEteenD.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleTestTokenEteenD.allowance (CrowdsaleTestTokenEteenD.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleTestTokenEteenD.transfer (CrowdsaleTestTokenEteenD.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleTestTokenEteenD.transferFrom (CrowdsaleTestTokenEteenD.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleTestTokenEteenD.approve (CrowdsaleTestTokenEteenD.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleTestTokenEteenD.approveChange (CrowdsaleTestTokenEteenD.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleTestTokenEteenD.changeOwner (CrowdsaleTestTokenEteenD.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleTestTokenEteenD.burnToken (CrowdsaleTestTokenEteenD.sol#462-464) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CrowdsaleTestTokenEteenD.sol:\n\t- pragma solidity^0.4.18 (CrowdsaleTestTokenEteenD.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleTestTokenEteenD.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleTestTokenEteenD.sol#370): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (CrowdsaleTestTokenEteenD.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (CrowdsaleTestTokenEteenD.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (CrowdsaleTestTokenEteenD.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (CrowdsaleTestTokenEteenD.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (CrowdsaleTestTokenEteenD.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (CrowdsaleTestTokenEteenD.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (CrowdsaleTestTokenEteenD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (CrowdsaleTestTokenEteenD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (CrowdsaleTestTokenEteenD.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (CrowdsaleTestTokenEteenD.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (CrowdsaleTestTokenEteenD.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (CrowdsaleTestTokenEteenD.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (CrowdsaleTestTokenEteenD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (CrowdsaleTestTokenEteenD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (CrowdsaleTestTokenEteenD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (CrowdsaleTestTokenEteenD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (CrowdsaleTestTokenEteenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (CrowdsaleTestTokenEteenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (CrowdsaleTestTokenEteenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (CrowdsaleTestTokenEteenD.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (CrowdsaleTestTokenEteenD.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (CrowdsaleTestTokenEteenD.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleTestTokenEteenD(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleTestTokenEteenD.CrowdsaleTestTokenEteenD' (CrowdsaleTestTokenEteenD.sol#400-409) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/EvenDistroTestEteenD.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!self.staticCap) && (now >= self.base.startTime - 2 hours)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogRegError(_registrant, \"Can only register users earlier than 2 hours before the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 913,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!self.staticCap) && (now >= self.base.startTime - 2 hours)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 914,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogRegError(_registrant, \"Can only unregister users earlier than 2 hours before the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1001,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1003,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1005,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1006,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.base.currentMilestone += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1009,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1010,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_29"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (EvenDistroTestEteenD.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (EvenDistroTestEteenD.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (EvenDistroTestEteenD.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (EvenDistroTestEteenD.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1021,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _leftoverWei; //wei change for purchaser\n",
                    "message": "_leftoverWei in EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestEteenD.sol#1021) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (EvenDistroTestEteenD.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 index;\n",
                    "message": "index in CrowdsaleLib.getSaleData (EvenDistroTestEteenD.sol#730) is a local variable never initialiazed\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": 1076,
                    "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    require(self.isRegistered[msg.sender]);\n\n\n\n  \t// if the address cap increase interval has passed, update the current day and change the address cap\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n      {\n\n        self.base.currentMilestone += 1;\n\n      }\n\n\n\n      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n\n\n\n      self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n\n\n      LogAddressTokenCapChange(self.addressTokenCap, \"Address cap has increased!\");\n\n      LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n  \t}\n\n\n\n    uint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    uint256 _allowedWei;  // tells how much more the buyer can contribute up to their cap\n\n    bool err;\n\n\n\n    if(self.addressTokenCap > 0) {\n\n      //_allowedWei represents tokens first, recycle variable to prevent stack depth issues\n\n      _allowedWei = self.addressTokenCap - self.tokensBought[msg.sender];\n\n\n\n      (err, _allowedWei) = _allowedWei.times(1000000000000000000);\n\n      require(!err);\n\n\n\n      _allowedWei = _allowedWei/self.base.tokensPerEth;\n\n    } else {\n\n      // if addressTokenCap is zero then there is no cap\n\n      _allowedWei = _amount;\n\n    }\n\n    require(_allowedWei > 0);\n\n    _allowedWei = getMin(_amount,_allowedWei);\n\n    _leftoverWei = _leftoverWei + (_amount - _allowedWei);\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _allowedWei.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei = _leftoverWei + _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _allowedWei - _remainder;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n    self.tokensBought[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n    LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestEteenD.sol#992-1076) does not use the value returned by external calls:\n\t-self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]) (EvenDistroTestEteenD.sol#1012)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ EvenDistroTestEteenD.sol#401) shadows:\n\t- CrowdsaleToken.name (function @ EvenDistroTestEteenD.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ EvenDistroTestEteenD.sol#402) shadows:\n\t- CrowdsaleToken.symbol (function @ EvenDistroTestEteenD.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ EvenDistroTestEteenD.sol#403) shadows:\n\t- CrowdsaleToken.decimals (function @ EvenDistroTestEteenD.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ EvenDistroTestEteenD.sol#404) shadows:\n\t- CrowdsaleToken.initialSupply (function @ EvenDistroTestEteenD.sol#427-429)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleTestTokenEteenD.CrowdsaleTestTokenEteenD.name (local variable @ EvenDistroTestEteenD.sol#1151) shadows:\n\t- CrowdsaleTestTokenEteenD.name (function @ EvenDistroTestEteenD.sol#1161-1163)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleTestTokenEteenD.CrowdsaleTestTokenEteenD.symbol (local variable @ EvenDistroTestEteenD.sol#1152) shadows:\n\t- CrowdsaleTestTokenEteenD.symbol (function @ EvenDistroTestEteenD.sol#1165-1167)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleTestTokenEteenD.CrowdsaleTestTokenEteenD.decimals (local variable @ EvenDistroTestEteenD.sol#1153) shadows:\n\t- CrowdsaleTestTokenEteenD.decimals (function @ EvenDistroTestEteenD.sol#1169-1171)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleTestTokenEteenD.CrowdsaleTestTokenEteenD.initialSupply (local variable @ EvenDistroTestEteenD.sol#1154) shadows:\n\t- CrowdsaleTestTokenEteenD.initialSupply (function @ EvenDistroTestEteenD.sol#1177-1179)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (EvenDistroTestEteenD.sol#40-49)\n\t- EvenDistroTestEteenD.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (EvenDistroTestEteenD.sol#57-72)\n\t- EvenDistroTestEteenD.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (EvenDistroTestEteenD.sol#80-89)\n\t- EvenDistroTestEteenD.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (EvenDistroTestEteenD.sol#97-106)\n\t- EvenDistroTestEteenD.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (EvenDistroTestEteenD.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (EvenDistroTestEteenD.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (EvenDistroTestEteenD.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (EvenDistroTestEteenD.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (EvenDistroTestEteenD.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (EvenDistroTestEteenD.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (EvenDistroTestEteenD.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (EvenDistroTestEteenD.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (EvenDistroTestEteenD.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (EvenDistroTestEteenD.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (EvenDistroTestEteenD.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (EvenDistroTestEteenD.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (EvenDistroTestEteenD.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (EvenDistroTestEteenD.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (EvenDistroTestEteenD.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (EvenDistroTestEteenD.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (EvenDistroTestEteenD.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (EvenDistroTestEteenD.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (EvenDistroTestEteenD.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (EvenDistroTestEteenD.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (EvenDistroTestEteenD.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (EvenDistroTestEteenD.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (EvenDistroTestEteenD.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (EvenDistroTestEteenD.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (EvenDistroTestEteenD.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (EvenDistroTestEteenD.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (EvenDistroTestEteenD.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (EvenDistroTestEteenD.sol#462-464) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
                    "message": "CrowdsaleLib.init (EvenDistroTestEteenD.sol#556-588) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": 648,
                    "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawTokens (EvenDistroTestEteenD.sol#620-648) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 664,
                    "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawLeftoverWei (EvenDistroTestEteenD.sol#653-664) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": 684,
                    "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawOwnerEth (EvenDistroTestEteenD.sol#669-684) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": 718,
                    "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.setTokens (EvenDistroTestEteenD.sol#705-718) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": 742,
                    "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
                    "message": "CrowdsaleLib.getSaleData (EvenDistroTestEteenD.sol#724-742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 749,
                    "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
                    "message": "CrowdsaleLib.getTokensSold (EvenDistroTestEteenD.sol#747-749) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": 855,
                    "vulnerability_code": "  function init(EvenDistroCrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                uint256 _initialAddressTokenCap,\n\n                bool _staticCap,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \tself.base.init(_owner,\n\n                   _saleData,\n\n                   _endTime,\n\n                   _percentBurn,\n\n                   _token);\n\n\n\n    self.addressTokenCap = _initialAddressTokenCap;\n\n    self.staticCap = _staticCap;\n",
                    "message": "EvenDistroCrowdsaleLib.init (EvenDistroTestEteenD.sol#837-855) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": 903,
                    "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    require(msg.sender == self.base.owner);\n\n\n\n    for (uint256 i = 0; i < _registrants.length; i++) {\n\n      registerUser(self,_registrants[i]);\n\n    }\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.registerUsers (EvenDistroTestEteenD.sol#893-903) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": 948,
                    "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender == self.base.owner);\n\n\n\n    for (uint256 i = 0; i < _registrants.length; i++) {\n\n      unregisterUser(self,_registrants[i]);\n\n    }\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.unregisterUsers (EvenDistroTestEteenD.sol#938-948) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": 1076,
                    "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    require(self.isRegistered[msg.sender]);\n\n\n\n  \t// if the address cap increase interval has passed, update the current day and change the address cap\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n      {\n\n        self.base.currentMilestone += 1;\n\n      }\n\n\n\n      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n\n\n\n      self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n\n\n      LogAddressTokenCapChange(self.addressTokenCap, \"Address cap has increased!\");\n\n      LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n  \t}\n\n\n\n    uint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    uint256 _allowedWei;  // tells how much more the buyer can contribute up to their cap\n\n    bool err;\n\n\n\n    if(self.addressTokenCap > 0) {\n\n      //_allowedWei represents tokens first, recycle variable to prevent stack depth issues\n\n      _allowedWei = self.addressTokenCap - self.tokensBought[msg.sender];\n\n\n\n      (err, _allowedWei) = _allowedWei.times(1000000000000000000);\n\n      require(!err);\n\n\n\n      _allowedWei = _allowedWei/self.base.tokensPerEth;\n\n    } else {\n\n      // if addressTokenCap is zero then there is no cap\n\n      _allowedWei = _amount;\n\n    }\n\n    require(_allowedWei > 0);\n\n    _allowedWei = getMin(_amount,_allowedWei);\n\n    _leftoverWei = _leftoverWei + (_amount - _allowedWei);\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _allowedWei.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei = _leftoverWei + _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _allowedWei - _remainder;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n    self.tokensBought[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n    LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestEteenD.sol#992-1076) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1080,
                    "vulnerability_to_line": 1083,
                    "vulnerability_code": "  function setTokens(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    calculateAddressTokenCap(self);\n\n    return self.base.setTokens();\n",
                    "message": "EvenDistroCrowdsaleLib.setTokens (EvenDistroTestEteenD.sol#1080-1083) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1085,
                    "vulnerability_to_line": 1087,
                    "vulnerability_code": "  function withdrawTokens(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawTokens();\n",
                    "message": "EvenDistroCrowdsaleLib.withdrawTokens (EvenDistroTestEteenD.sol#1085-1087) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1089,
                    "vulnerability_to_line": 1091,
                    "vulnerability_code": "  function withdrawLeftoverWei(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawLeftoverWei();\n",
                    "message": "EvenDistroCrowdsaleLib.withdrawLeftoverWei (EvenDistroTestEteenD.sol#1089-1091) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1093,
                    "vulnerability_to_line": 1095,
                    "vulnerability_code": "  function withdrawOwnerEth(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawOwnerEth();\n",
                    "message": "EvenDistroCrowdsaleLib.withdrawOwnerEth (EvenDistroTestEteenD.sol#1093-1095) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1097,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function getSaleData(EvenDistroCrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    return self.base.getSaleData(timestamp);\n",
                    "message": "EvenDistroCrowdsaleLib.getSaleData (EvenDistroTestEteenD.sol#1097-1103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1105,
                    "vulnerability_to_line": 1107,
                    "vulnerability_code": "  function getTokensSold(EvenDistroCrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.base.getTokensSold();\n",
                    "message": "EvenDistroCrowdsaleLib.getTokensSold (EvenDistroTestEteenD.sol#1105-1107) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": 1111,
                    "vulnerability_code": "  function crowdsaleActive(EvenDistroCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleActive();\n",
                    "message": "EvenDistroCrowdsaleLib.crowdsaleActive (EvenDistroTestEteenD.sol#1109-1111) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1113,
                    "vulnerability_to_line": 1115,
                    "vulnerability_code": "  function crowdsaleEnded(EvenDistroCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleEnded();\n",
                    "message": "EvenDistroCrowdsaleLib.crowdsaleEnded (EvenDistroTestEteenD.sol#1113-1115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": 1163,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleTestTokenEteenD.name (EvenDistroTestEteenD.sol#1161-1163) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1165,
                    "vulnerability_to_line": 1167,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleTestTokenEteenD.symbol (EvenDistroTestEteenD.sol#1165-1167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1169,
                    "vulnerability_to_line": 1171,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleTestTokenEteenD.decimals (EvenDistroTestEteenD.sol#1169-1171) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": 1175,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleTestTokenEteenD.totalSupply (EvenDistroTestEteenD.sol#1173-1175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1177,
                    "vulnerability_to_line": 1179,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleTestTokenEteenD.initialSupply (EvenDistroTestEteenD.sol#1177-1179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": 1183,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleTestTokenEteenD.balanceOf (EvenDistroTestEteenD.sol#1181-1183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1185,
                    "vulnerability_to_line": 1187,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleTestTokenEteenD.allowance (EvenDistroTestEteenD.sol#1185-1187) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1189,
                    "vulnerability_to_line": 1191,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleTestTokenEteenD.transfer (EvenDistroTestEteenD.sol#1189-1191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1193,
                    "vulnerability_to_line": 1195,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleTestTokenEteenD.transferFrom (EvenDistroTestEteenD.sol#1193-1195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1197,
                    "vulnerability_to_line": 1199,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleTestTokenEteenD.approve (EvenDistroTestEteenD.sol#1197-1199) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": 1206,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleTestTokenEteenD.approveChange (EvenDistroTestEteenD.sol#1201-1206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": 1210,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleTestTokenEteenD.changeOwner (EvenDistroTestEteenD.sol#1208-1210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1212,
                    "vulnerability_to_line": 1214,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleTestTokenEteenD.burnToken (EvenDistroTestEteenD.sol#1212-1214) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1273,
                    "vulnerability_to_line": 1275,
                    "vulnerability_code": "  function () payable {\n\n    sendPurchase();\n",
                    "message": "EvenDistroTestEteenD.fallback (EvenDistroTestEteenD.sol#1273-1275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": 1283,
                    "vulnerability_code": "  function registerUser(address _registrant) returns (bool) {\n\n    return sale.registerUser(_registrant);\n",
                    "message": "EvenDistroTestEteenD.registerUser (EvenDistroTestEteenD.sol#1281-1283) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1285,
                    "vulnerability_to_line": 1287,
                    "vulnerability_code": "  function registerUsers(address[] _registrants) returns (bool) {\n\n    return sale.registerUsers(_registrants);\n",
                    "message": "EvenDistroTestEteenD.registerUsers (EvenDistroTestEteenD.sol#1285-1287) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1289,
                    "vulnerability_to_line": 1291,
                    "vulnerability_code": "  function unregisterUser(address _registrant) returns (bool) {\n\n    return sale.unregisterUser(_registrant);\n",
                    "message": "EvenDistroTestEteenD.unregisterUser (EvenDistroTestEteenD.sol#1289-1291) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1293,
                    "vulnerability_to_line": 1295,
                    "vulnerability_code": "  function unregisterUsers(address[] _registrants) returns (bool) {\n\n    return sale.unregisterUsers(_registrants);\n",
                    "message": "EvenDistroTestEteenD.unregisterUsers (EvenDistroTestEteenD.sol#1293-1295) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": 1299,
                    "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n\n    return sale.isRegistered[_registrant];\n",
                    "message": "EvenDistroTestEteenD.isRegistered (EvenDistroTestEteenD.sol#1297-1299) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1301,
                    "vulnerability_to_line": 1303,
                    "vulnerability_code": "  function withdrawTokens() returns (bool) {\n\n    return sale.withdrawTokens();\n",
                    "message": "EvenDistroTestEteenD.withdrawTokens (EvenDistroTestEteenD.sol#1301-1303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1305,
                    "vulnerability_to_line": 1307,
                    "vulnerability_code": "  function withdrawLeftoverWei() returns (bool) {\n\n    return sale.withdrawLeftoverWei();\n",
                    "message": "EvenDistroTestEteenD.withdrawLeftoverWei (EvenDistroTestEteenD.sol#1305-1307) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1309,
                    "vulnerability_to_line": 1311,
                    "vulnerability_code": "  function withdrawOwnerEth() returns (bool) {\n\n  \treturn sale.withdrawOwnerEth();\n",
                    "message": "EvenDistroTestEteenD.withdrawOwnerEth (EvenDistroTestEteenD.sol#1309-1311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1313,
                    "vulnerability_to_line": 1315,
                    "vulnerability_code": "  function crowdsaleActive() constant returns (bool) {\n\n  \treturn sale.crowdsaleActive();\n",
                    "message": "EvenDistroTestEteenD.crowdsaleActive (EvenDistroTestEteenD.sol#1313-1315) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1317,
                    "vulnerability_to_line": 1319,
                    "vulnerability_code": "  function crowdsaleEnded() constant returns (bool) {\n\n  \treturn sale.crowdsaleEnded();\n",
                    "message": "EvenDistroTestEteenD.crowdsaleEnded (EvenDistroTestEteenD.sol#1317-1319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": 1323,
                    "vulnerability_code": "  function setTokens() returns (bool) {\n\n    return sale.setTokens();\n",
                    "message": "EvenDistroTestEteenD.setTokens (EvenDistroTestEteenD.sol#1321-1323) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1325,
                    "vulnerability_to_line": 1327,
                    "vulnerability_code": "  function getOwner() constant returns (address) {\n\n    return sale.base.owner;\n",
                    "message": "EvenDistroTestEteenD.getOwner (EvenDistroTestEteenD.sol#1325-1327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1329,
                    "vulnerability_to_line": 1331,
                    "vulnerability_code": "  function getTokensPerEth() constant returns (uint256) {\n\n    return sale.base.tokensPerEth;\n",
                    "message": "EvenDistroTestEteenD.getTokensPerEth (EvenDistroTestEteenD.sol#1329-1331) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1333,
                    "vulnerability_to_line": 1335,
                    "vulnerability_code": "  function getStartTime() constant returns (uint256) {\n\n    return sale.base.startTime;\n",
                    "message": "EvenDistroTestEteenD.getStartTime (EvenDistroTestEteenD.sol#1333-1335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1337,
                    "vulnerability_to_line": 1339,
                    "vulnerability_code": "  function getEndTime() constant returns (uint256) {\n\n    return sale.base.endTime;\n",
                    "message": "EvenDistroTestEteenD.getEndTime (EvenDistroTestEteenD.sol#1337-1339) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1341,
                    "vulnerability_to_line": 1343,
                    "vulnerability_code": "  function getEthRaised() constant returns (uint256) {\n\n    return sale.base.ownerBalance;\n",
                    "message": "EvenDistroTestEteenD.getEthRaised (EvenDistroTestEteenD.sol#1341-1343) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": 1347,
                    "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n\n    return sale.base.hasContributed[_buyer];\n",
                    "message": "EvenDistroTestEteenD.getContribution (EvenDistroTestEteenD.sol#1345-1347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": 1351,
                    "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n\n    return sale.base.withdrawTokensMap[_buyer];\n",
                    "message": "EvenDistroTestEteenD.getTokenPurchase (EvenDistroTestEteenD.sol#1349-1351) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": 1355,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n\n    return sale.base.leftoverWei[_buyer];\n",
                    "message": "EvenDistroTestEteenD.getLeftoverWei (EvenDistroTestEteenD.sol#1353-1355) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1359,
                    "vulnerability_code": "  function getSaleData(uint256 timestamp) constant returns (uint256[3]) {\n\n    return sale.getSaleData(timestamp);\n",
                    "message": "EvenDistroTestEteenD.getSaleData (EvenDistroTestEteenD.sol#1357-1359) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function getTokensSold() constant returns (uint256) {\n\n    return sale.getTokensSold();\n",
                    "message": "EvenDistroTestEteenD.getTokensSold (EvenDistroTestEteenD.sol#1361-1363) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": 1367,
                    "vulnerability_code": "  function getPercentBurn() constant returns (uint256) {\n\n    return sale.base.percentBurn;\n",
                    "message": "EvenDistroTestEteenD.getPercentBurn (EvenDistroTestEteenD.sol#1365-1367) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1369,
                    "vulnerability_to_line": 1371,
                    "vulnerability_code": "  function getAddressTokenCap() constant returns (uint256) {\n\n    return sale.addressTokenCap;\n",
                    "message": "EvenDistroTestEteenD.getAddressTokenCap (EvenDistroTestEteenD.sol#1369-1371) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": 1375,
                    "vulnerability_code": "  function getNumRegistered() constant returns (uint256) {\n\n    return sale.numRegistered;\n",
                    "message": "EvenDistroTestEteenD.getNumRegistered (EvenDistroTestEteenD.sol#1373-1375) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in EvenDistroTestEteenD.sol:\n\t- pragma solidity^0.4.18 (EvenDistroTestEteenD.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestEteenD.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestEteenD.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestEteenD.sol#469): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestEteenD.sol#754): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestEteenD.sol#1120): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestEteenD.sol#1219): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (EvenDistroTestEteenD.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (EvenDistroTestEteenD.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (EvenDistroTestEteenD.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (EvenDistroTestEteenD.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (EvenDistroTestEteenD.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (EvenDistroTestEteenD.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (EvenDistroTestEteenD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (EvenDistroTestEteenD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (EvenDistroTestEteenD.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (EvenDistroTestEteenD.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (EvenDistroTestEteenD.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (EvenDistroTestEteenD.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (EvenDistroTestEteenD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (EvenDistroTestEteenD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (EvenDistroTestEteenD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (EvenDistroTestEteenD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (EvenDistroTestEteenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (EvenDistroTestEteenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (EvenDistroTestEteenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (EvenDistroTestEteenD.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (EvenDistroTestEteenD.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (EvenDistroTestEteenD.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (EvenDistroTestEteenD.sol#400-409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of CrowdsaleLib.init (EvenDistroTestEteenD.sol#557) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of CrowdsaleLib.init (EvenDistroTestEteenD.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of CrowdsaleLib.init (EvenDistroTestEteenD.sol#559) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of CrowdsaleLib.init (EvenDistroTestEteenD.sol#560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of CrowdsaleLib.init (EvenDistroTestEteenD.sol#561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            uint256 _tokensPerEth)\n",
                    "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (EvenDistroTestEteenD.sol#691) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of EvenDistroCrowdsaleLib.init (EvenDistroTestEteenD.sol#838) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of EvenDistroCrowdsaleLib.init (EvenDistroTestEteenD.sol#839) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of EvenDistroCrowdsaleLib.init (EvenDistroTestEteenD.sol#840) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of EvenDistroCrowdsaleLib.init (EvenDistroTestEteenD.sol#841) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 842,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initialAddressTokenCap,\n",
                    "message": "Parameter '_initialAddressTokenCap' of EvenDistroCrowdsaleLib.init (EvenDistroTestEteenD.sol#842) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 843,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _staticCap,\n",
                    "message": "Parameter '_staticCap' of EvenDistroCrowdsaleLib.init (EvenDistroTestEteenD.sol#843) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of EvenDistroCrowdsaleLib.init (EvenDistroTestEteenD.sol#844) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 861,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUser(EvenDistroCrowdsaleStorage storage self, address _registrant)\n",
                    "message": "Parameter '_registrant' of EvenDistroCrowdsaleLib.registerUser (EvenDistroTestEteenD.sol#861) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": "Parameter '_registrants' of EvenDistroCrowdsaleLib.registerUsers (EvenDistroTestEteenD.sol#893) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUser(EvenDistroCrowdsaleStorage storage self, address _registrant)\n",
                    "message": "Parameter '_registrant' of EvenDistroCrowdsaleLib.unregisterUser (EvenDistroTestEteenD.sol#908) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": "Parameter '_registrants' of EvenDistroCrowdsaleLib.unregisterUsers (EvenDistroTestEteenD.sol#938) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n",
                    "message": "Parameter '_amount' of EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestEteenD.sol#992) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1150,
                    "vulnerability_to_line": 1159,
                    "vulnerability_code": "  function CrowdsaleTestTokenEteenD(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleTestTokenEteenD.CrowdsaleTestTokenEteenD' (EvenDistroTestEteenD.sol#1150-1159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": 1257,
                    "vulnerability_code": "  function EvenDistroTestEteenD(\n\n    address owner,\n\n    uint256[] saleData,\n\n    uint256 endTime,\n\n    uint8 percentBurn,\n\n    uint256 initialAddressTokenCap,\n\n    bool staticCap,\n\n    CrowdsaleToken token)\n\n  {\n\n  \tsale.init(owner, saleData, endTime, percentBurn, initialAddressTokenCap, staticCap, token);\n",
                    "message": "Function 'EvenDistroTestEteenD.EvenDistroTestEteenD' (EvenDistroTestEteenD.sol#1247-1257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUser(address _registrant) returns (bool) {\n",
                    "message": "Parameter '_registrant' of EvenDistroTestEteenD.registerUser (EvenDistroTestEteenD.sol#1281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUsers(address[] _registrants) returns (bool) {\n",
                    "message": "Parameter '_registrants' of EvenDistroTestEteenD.registerUsers (EvenDistroTestEteenD.sol#1285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUser(address _registrant) returns (bool) {\n",
                    "message": "Parameter '_registrant' of EvenDistroTestEteenD.unregisterUser (EvenDistroTestEteenD.sol#1289) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUsers(address[] _registrants) returns (bool) {\n",
                    "message": "Parameter '_registrants' of EvenDistroTestEteenD.unregisterUsers (EvenDistroTestEteenD.sol#1293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n",
                    "message": "Parameter '_registrant' of EvenDistroTestEteenD.isRegistered (EvenDistroTestEteenD.sol#1297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n",
                    "message": "Parameter '_buyer' of EvenDistroTestEteenD.getContribution (EvenDistroTestEteenD.sol#1345) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n",
                    "message": "Parameter '_buyer' of EvenDistroTestEteenD.getTokenPurchase (EvenDistroTestEteenD.sol#1349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n",
                    "message": "Parameter '_buyer' of EvenDistroTestEteenD.getLeftoverWei (EvenDistroTestEteenD.sol#1353) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function crowdsaleActive() constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function crowdsaleEnded() constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getOwner() constant returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensPerEth() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getStartTime() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getEndTime() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getEthRaised() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSaleData(uint256 timestamp) constant returns (uint256[3]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPercentBurn() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAddressTokenCap() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getNumRegistered() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 1197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 1242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract EvenDistroTestEteenD {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 1274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    sendPurchase();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function EvenDistroTestEteenD(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sendPurchase() payable returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUser(address _registrant) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUsers(address[] _registrants) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUser(address _registrant) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUsers(address[] _registrants) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawTokens() returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawLeftoverWei() returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawOwnerEth() returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function crowdsaleActive() constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function crowdsaleEnded() constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTokens() returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getOwner() constant returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensPerEth() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getStartTime() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getEndTime() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getEthRaised() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSaleData(uint256 timestamp) constant returns (uint256[3]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPercentBurn() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAddressTokenCap() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getNumRegistered() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  EvenDistroCrowdsaleLib.EvenDistroCrowdsaleStorage sale;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/Array256Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf (Array256Lib.sol#87-129) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements uses assembly (Array256Lib.sol#37-45)\n\t- Array256Lib.sol#38-45\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax uses assembly (Array256Lib.sol#50-62)\n\t- Array256Lib.sol#51-62\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin uses assembly (Array256Lib.sol#67-79)\n\t- Array256Lib.sol#68-79\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf uses assembly (Array256Lib.sol#87-129)\n\t- Array256Lib.sol#91-129\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.heapSort (Array256Lib.sol#149-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array256Lib.uniq (Array256Lib.sol#211-230) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array256Lib.sol:\n\t- pragma solidity^0.4.18 (Array256Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Migrations() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/BasicMathLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (BasicMathLib.sol#40-49)\n\t- BasicMathLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (BasicMathLib.sol#57-72)\n\t- BasicMathLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (BasicMathLib.sol#80-89)\n\t- BasicMathLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (BasicMathLib.sol#97-106)\n\t- BasicMathLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BasicMathLib.sol:\n\t- pragma solidity^0.4.18 (BasicMathLib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/CrowdsaleToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_65"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleToken.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleToken.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleToken.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleToken.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (CrowdsaleToken.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ CrowdsaleToken.sol#401) shadows:\n\t- CrowdsaleToken.name (function @ CrowdsaleToken.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ CrowdsaleToken.sol#402) shadows:\n\t- CrowdsaleToken.symbol (function @ CrowdsaleToken.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ CrowdsaleToken.sol#403) shadows:\n\t- CrowdsaleToken.decimals (function @ CrowdsaleToken.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ CrowdsaleToken.sol#404) shadows:\n\t- CrowdsaleToken.initialSupply (function @ CrowdsaleToken.sol#427-429)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (CrowdsaleToken.sol#40-49)\n\t- CrowdsaleToken.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (CrowdsaleToken.sol#57-72)\n\t- CrowdsaleToken.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (CrowdsaleToken.sol#80-89)\n\t- CrowdsaleToken.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (CrowdsaleToken.sol#97-106)\n\t- CrowdsaleToken.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleToken.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleToken.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleToken.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleToken.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (CrowdsaleToken.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (CrowdsaleToken.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (CrowdsaleToken.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (CrowdsaleToken.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (CrowdsaleToken.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (CrowdsaleToken.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (CrowdsaleToken.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (CrowdsaleToken.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (CrowdsaleToken.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (CrowdsaleToken.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (CrowdsaleToken.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (CrowdsaleToken.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (CrowdsaleToken.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (CrowdsaleToken.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (CrowdsaleToken.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (CrowdsaleToken.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (CrowdsaleToken.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (CrowdsaleToken.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (CrowdsaleToken.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (CrowdsaleToken.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (CrowdsaleToken.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (CrowdsaleToken.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (CrowdsaleToken.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (CrowdsaleToken.sol#462-464) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CrowdsaleToken.sol:\n\t- pragma solidity^0.4.18 (CrowdsaleToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleToken.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleToken.sol#370): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (CrowdsaleToken.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (CrowdsaleToken.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (CrowdsaleToken.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (CrowdsaleToken.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (CrowdsaleToken.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (CrowdsaleToken.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (CrowdsaleToken.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (CrowdsaleToken.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (CrowdsaleToken.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (CrowdsaleToken.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (CrowdsaleToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (CrowdsaleToken.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (CrowdsaleToken.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (CrowdsaleToken.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (CrowdsaleToken.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (CrowdsaleToken.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (CrowdsaleToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (CrowdsaleToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (CrowdsaleToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (CrowdsaleToken.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (CrowdsaleToken.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (CrowdsaleToken.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (CrowdsaleToken.sol#400-409) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/CrowdsaleTestTokenTenD.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_65"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleTestTokenTenD.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleTestTokenTenD.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleTestTokenTenD.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleTestTokenTenD.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (CrowdsaleTestTokenTenD.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.name (local variable @ CrowdsaleTestTokenTenD.sol#401) shadows:\n\t- CrowdsaleTestTokenTenD.name (function @ CrowdsaleTestTokenTenD.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.symbol (local variable @ CrowdsaleTestTokenTenD.sol#402) shadows:\n\t- CrowdsaleTestTokenTenD.symbol (function @ CrowdsaleTestTokenTenD.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.decimals (local variable @ CrowdsaleTestTokenTenD.sol#403) shadows:\n\t- CrowdsaleTestTokenTenD.decimals (function @ CrowdsaleTestTokenTenD.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.initialSupply (local variable @ CrowdsaleTestTokenTenD.sol#404) shadows:\n\t- CrowdsaleTestTokenTenD.initialSupply (function @ CrowdsaleTestTokenTenD.sol#427-429)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (CrowdsaleTestTokenTenD.sol#40-49)\n\t- CrowdsaleTestTokenTenD.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (CrowdsaleTestTokenTenD.sol#57-72)\n\t- CrowdsaleTestTokenTenD.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (CrowdsaleTestTokenTenD.sol#80-89)\n\t- CrowdsaleTestTokenTenD.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (CrowdsaleTestTokenTenD.sol#97-106)\n\t- CrowdsaleTestTokenTenD.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleTestTokenTenD.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleTestTokenTenD.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleTestTokenTenD.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleTestTokenTenD.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (CrowdsaleTestTokenTenD.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (CrowdsaleTestTokenTenD.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (CrowdsaleTestTokenTenD.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (CrowdsaleTestTokenTenD.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (CrowdsaleTestTokenTenD.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (CrowdsaleTestTokenTenD.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (CrowdsaleTestTokenTenD.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (CrowdsaleTestTokenTenD.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (CrowdsaleTestTokenTenD.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (CrowdsaleTestTokenTenD.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (CrowdsaleTestTokenTenD.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleTestTokenTenD.name (CrowdsaleTestTokenTenD.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleTestTokenTenD.symbol (CrowdsaleTestTokenTenD.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleTestTokenTenD.decimals (CrowdsaleTestTokenTenD.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleTestTokenTenD.totalSupply (CrowdsaleTestTokenTenD.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleTestTokenTenD.initialSupply (CrowdsaleTestTokenTenD.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleTestTokenTenD.balanceOf (CrowdsaleTestTokenTenD.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleTestTokenTenD.allowance (CrowdsaleTestTokenTenD.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleTestTokenTenD.transfer (CrowdsaleTestTokenTenD.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleTestTokenTenD.transferFrom (CrowdsaleTestTokenTenD.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleTestTokenTenD.approve (CrowdsaleTestTokenTenD.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleTestTokenTenD.approveChange (CrowdsaleTestTokenTenD.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleTestTokenTenD.changeOwner (CrowdsaleTestTokenTenD.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleTestTokenTenD.burnToken (CrowdsaleTestTokenTenD.sol#462-464) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CrowdsaleTestTokenTenD.sol:\n\t- pragma solidity^0.4.18 (CrowdsaleTestTokenTenD.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleTestTokenTenD.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleTestTokenTenD.sol#370): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (CrowdsaleTestTokenTenD.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (CrowdsaleTestTokenTenD.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (CrowdsaleTestTokenTenD.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (CrowdsaleTestTokenTenD.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (CrowdsaleTestTokenTenD.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (CrowdsaleTestTokenTenD.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (CrowdsaleTestTokenTenD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (CrowdsaleTestTokenTenD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (CrowdsaleTestTokenTenD.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (CrowdsaleTestTokenTenD.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (CrowdsaleTestTokenTenD.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (CrowdsaleTestTokenTenD.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (CrowdsaleTestTokenTenD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (CrowdsaleTestTokenTenD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (CrowdsaleTestTokenTenD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (CrowdsaleTestTokenTenD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (CrowdsaleTestTokenTenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (CrowdsaleTestTokenTenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (CrowdsaleTestTokenTenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (CrowdsaleTestTokenTenD.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (CrowdsaleTestTokenTenD.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (CrowdsaleTestTokenTenD.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleTestTokenTenD(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD' (CrowdsaleTestTokenTenD.sol#400-409) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/EvenDistroCrowdsaleLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!self.staticCap) && (now >= self.base.startTime - 2 hours)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogRegError(_registrant, \"Can only register users earlier than 2 hours before the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 913,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!self.staticCap) && (now >= self.base.startTime - 2 hours)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 914,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogRegError(_registrant, \"Can only unregister users earlier than 2 hours before the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1001,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1003,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1005,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1006,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.base.currentMilestone += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1009,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1010,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_105"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (EvenDistroCrowdsaleLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (EvenDistroCrowdsaleLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (EvenDistroCrowdsaleLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (EvenDistroCrowdsaleLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1021,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _leftoverWei; //wei change for purchaser\n",
                    "message": "_leftoverWei in EvenDistroCrowdsaleLib.receivePurchase (EvenDistroCrowdsaleLib.sol#1021) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 index;\n",
                    "message": "index in CrowdsaleLib.getSaleData (EvenDistroCrowdsaleLib.sol#730) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (EvenDistroCrowdsaleLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": 1076,
                    "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    require(self.isRegistered[msg.sender]);\n\n\n\n  \t// if the address cap increase interval has passed, update the current day and change the address cap\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n      {\n\n        self.base.currentMilestone += 1;\n\n      }\n\n\n\n      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n\n\n\n      self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n\n\n      LogAddressTokenCapChange(self.addressTokenCap, \"Address cap has increased!\");\n\n      LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n  \t}\n\n\n\n    uint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    uint256 _allowedWei;  // tells how much more the buyer can contribute up to their cap\n\n    bool err;\n\n\n\n    if(self.addressTokenCap > 0) {\n\n      //_allowedWei represents tokens first, recycle variable to prevent stack depth issues\n\n      _allowedWei = self.addressTokenCap - self.tokensBought[msg.sender];\n\n\n\n      (err, _allowedWei) = _allowedWei.times(1000000000000000000);\n\n      require(!err);\n\n\n\n      _allowedWei = _allowedWei/self.base.tokensPerEth;\n\n    } else {\n\n      // if addressTokenCap is zero then there is no cap\n\n      _allowedWei = _amount;\n\n    }\n\n    require(_allowedWei > 0);\n\n    _allowedWei = getMin(_amount,_allowedWei);\n\n    _leftoverWei = _leftoverWei + (_amount - _allowedWei);\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _allowedWei.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei = _leftoverWei + _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _allowedWei - _remainder;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n    self.tokensBought[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n    LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.receivePurchase (EvenDistroCrowdsaleLib.sol#992-1076) does not use the value returned by external calls:\n\t-self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]) (EvenDistroCrowdsaleLib.sol#1012)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ EvenDistroCrowdsaleLib.sol#401) shadows:\n\t- CrowdsaleToken.name (function @ EvenDistroCrowdsaleLib.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ EvenDistroCrowdsaleLib.sol#402) shadows:\n\t- CrowdsaleToken.symbol (function @ EvenDistroCrowdsaleLib.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ EvenDistroCrowdsaleLib.sol#403) shadows:\n\t- CrowdsaleToken.decimals (function @ EvenDistroCrowdsaleLib.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ EvenDistroCrowdsaleLib.sol#404) shadows:\n\t- CrowdsaleToken.initialSupply (function @ EvenDistroCrowdsaleLib.sol#427-429)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (EvenDistroCrowdsaleLib.sol#40-49)\n\t- EvenDistroCrowdsaleLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (EvenDistroCrowdsaleLib.sol#57-72)\n\t- EvenDistroCrowdsaleLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (EvenDistroCrowdsaleLib.sol#80-89)\n\t- EvenDistroCrowdsaleLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (EvenDistroCrowdsaleLib.sol#97-106)\n\t- EvenDistroCrowdsaleLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (EvenDistroCrowdsaleLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (EvenDistroCrowdsaleLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (EvenDistroCrowdsaleLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (EvenDistroCrowdsaleLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (EvenDistroCrowdsaleLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (EvenDistroCrowdsaleLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (EvenDistroCrowdsaleLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (EvenDistroCrowdsaleLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (EvenDistroCrowdsaleLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (EvenDistroCrowdsaleLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (EvenDistroCrowdsaleLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (EvenDistroCrowdsaleLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (EvenDistroCrowdsaleLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (EvenDistroCrowdsaleLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (EvenDistroCrowdsaleLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (EvenDistroCrowdsaleLib.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (EvenDistroCrowdsaleLib.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (EvenDistroCrowdsaleLib.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (EvenDistroCrowdsaleLib.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (EvenDistroCrowdsaleLib.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (EvenDistroCrowdsaleLib.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (EvenDistroCrowdsaleLib.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (EvenDistroCrowdsaleLib.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (EvenDistroCrowdsaleLib.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (EvenDistroCrowdsaleLib.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (EvenDistroCrowdsaleLib.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (EvenDistroCrowdsaleLib.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (EvenDistroCrowdsaleLib.sol#462-464) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
                    "message": "CrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#556-588) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": 648,
                    "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawTokens (EvenDistroCrowdsaleLib.sol#620-648) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 664,
                    "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawLeftoverWei (EvenDistroCrowdsaleLib.sol#653-664) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": 684,
                    "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawOwnerEth (EvenDistroCrowdsaleLib.sol#669-684) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": 718,
                    "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.setTokens (EvenDistroCrowdsaleLib.sol#705-718) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": 742,
                    "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
                    "message": "CrowdsaleLib.getSaleData (EvenDistroCrowdsaleLib.sol#724-742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 749,
                    "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
                    "message": "CrowdsaleLib.getTokensSold (EvenDistroCrowdsaleLib.sol#747-749) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": 855,
                    "vulnerability_code": "  function init(EvenDistroCrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                uint256 _initialAddressTokenCap,\n\n                bool _staticCap,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \tself.base.init(_owner,\n\n                   _saleData,\n\n                   _endTime,\n\n                   _percentBurn,\n\n                   _token);\n\n\n\n    self.addressTokenCap = _initialAddressTokenCap;\n\n    self.staticCap = _staticCap;\n",
                    "message": "EvenDistroCrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#837-855) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": 903,
                    "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    require(msg.sender == self.base.owner);\n\n\n\n    for (uint256 i = 0; i < _registrants.length; i++) {\n\n      registerUser(self,_registrants[i]);\n\n    }\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.registerUsers (EvenDistroCrowdsaleLib.sol#893-903) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": 948,
                    "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender == self.base.owner);\n\n\n\n    for (uint256 i = 0; i < _registrants.length; i++) {\n\n      unregisterUser(self,_registrants[i]);\n\n    }\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.unregisterUsers (EvenDistroCrowdsaleLib.sol#938-948) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": 1076,
                    "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    require(self.isRegistered[msg.sender]);\n\n\n\n  \t// if the address cap increase interval has passed, update the current day and change the address cap\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n      {\n\n        self.base.currentMilestone += 1;\n\n      }\n\n\n\n      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n\n\n\n      self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n\n\n      LogAddressTokenCapChange(self.addressTokenCap, \"Address cap has increased!\");\n\n      LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n  \t}\n\n\n\n    uint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    uint256 _allowedWei;  // tells how much more the buyer can contribute up to their cap\n\n    bool err;\n\n\n\n    if(self.addressTokenCap > 0) {\n\n      //_allowedWei represents tokens first, recycle variable to prevent stack depth issues\n\n      _allowedWei = self.addressTokenCap - self.tokensBought[msg.sender];\n\n\n\n      (err, _allowedWei) = _allowedWei.times(1000000000000000000);\n\n      require(!err);\n\n\n\n      _allowedWei = _allowedWei/self.base.tokensPerEth;\n\n    } else {\n\n      // if addressTokenCap is zero then there is no cap\n\n      _allowedWei = _amount;\n\n    }\n\n    require(_allowedWei > 0);\n\n    _allowedWei = getMin(_amount,_allowedWei);\n\n    _leftoverWei = _leftoverWei + (_amount - _allowedWei);\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _allowedWei.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei = _leftoverWei + _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _allowedWei - _remainder;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n    self.tokensBought[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n    LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.receivePurchase (EvenDistroCrowdsaleLib.sol#992-1076) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1080,
                    "vulnerability_to_line": 1083,
                    "vulnerability_code": "  function setTokens(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    calculateAddressTokenCap(self);\n\n    return self.base.setTokens();\n",
                    "message": "EvenDistroCrowdsaleLib.setTokens (EvenDistroCrowdsaleLib.sol#1080-1083) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1085,
                    "vulnerability_to_line": 1087,
                    "vulnerability_code": "  function withdrawTokens(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawTokens();\n",
                    "message": "EvenDistroCrowdsaleLib.withdrawTokens (EvenDistroCrowdsaleLib.sol#1085-1087) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1089,
                    "vulnerability_to_line": 1091,
                    "vulnerability_code": "  function withdrawLeftoverWei(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawLeftoverWei();\n",
                    "message": "EvenDistroCrowdsaleLib.withdrawLeftoverWei (EvenDistroCrowdsaleLib.sol#1089-1091) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1093,
                    "vulnerability_to_line": 1095,
                    "vulnerability_code": "  function withdrawOwnerEth(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawOwnerEth();\n",
                    "message": "EvenDistroCrowdsaleLib.withdrawOwnerEth (EvenDistroCrowdsaleLib.sol#1093-1095) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1097,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function getSaleData(EvenDistroCrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    return self.base.getSaleData(timestamp);\n",
                    "message": "EvenDistroCrowdsaleLib.getSaleData (EvenDistroCrowdsaleLib.sol#1097-1103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1105,
                    "vulnerability_to_line": 1107,
                    "vulnerability_code": "  function getTokensSold(EvenDistroCrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.base.getTokensSold();\n",
                    "message": "EvenDistroCrowdsaleLib.getTokensSold (EvenDistroCrowdsaleLib.sol#1105-1107) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": 1111,
                    "vulnerability_code": "  function crowdsaleActive(EvenDistroCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleActive();\n",
                    "message": "EvenDistroCrowdsaleLib.crowdsaleActive (EvenDistroCrowdsaleLib.sol#1109-1111) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1113,
                    "vulnerability_to_line": 1115,
                    "vulnerability_code": "  function crowdsaleEnded(EvenDistroCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleEnded();\n",
                    "message": "EvenDistroCrowdsaleLib.crowdsaleEnded (EvenDistroCrowdsaleLib.sol#1113-1115) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in EvenDistroCrowdsaleLib.sol:\n\t- pragma solidity^0.4.18 (EvenDistroCrowdsaleLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroCrowdsaleLib.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroCrowdsaleLib.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroCrowdsaleLib.sol#469): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroCrowdsaleLib.sol#754): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (EvenDistroCrowdsaleLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (EvenDistroCrowdsaleLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (EvenDistroCrowdsaleLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (EvenDistroCrowdsaleLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (EvenDistroCrowdsaleLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (EvenDistroCrowdsaleLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (EvenDistroCrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (EvenDistroCrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (EvenDistroCrowdsaleLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (EvenDistroCrowdsaleLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (EvenDistroCrowdsaleLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (EvenDistroCrowdsaleLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (EvenDistroCrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (EvenDistroCrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (EvenDistroCrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (EvenDistroCrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (EvenDistroCrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (EvenDistroCrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (EvenDistroCrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (EvenDistroCrowdsaleLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (EvenDistroCrowdsaleLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (EvenDistroCrowdsaleLib.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (EvenDistroCrowdsaleLib.sol#400-409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of CrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#557) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of CrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of CrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#559) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of CrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of CrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            uint256 _tokensPerEth)\n",
                    "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (EvenDistroCrowdsaleLib.sol#691) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of EvenDistroCrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#838) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of EvenDistroCrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#839) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of EvenDistroCrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#840) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of EvenDistroCrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#841) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 842,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initialAddressTokenCap,\n",
                    "message": "Parameter '_initialAddressTokenCap' of EvenDistroCrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#842) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 843,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _staticCap,\n",
                    "message": "Parameter '_staticCap' of EvenDistroCrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#843) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of EvenDistroCrowdsaleLib.init (EvenDistroCrowdsaleLib.sol#844) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 861,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUser(EvenDistroCrowdsaleStorage storage self, address _registrant)\n",
                    "message": "Parameter '_registrant' of EvenDistroCrowdsaleLib.registerUser (EvenDistroCrowdsaleLib.sol#861) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": "Parameter '_registrants' of EvenDistroCrowdsaleLib.registerUsers (EvenDistroCrowdsaleLib.sol#893) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUser(EvenDistroCrowdsaleStorage storage self, address _registrant)\n",
                    "message": "Parameter '_registrant' of EvenDistroCrowdsaleLib.unregisterUser (EvenDistroCrowdsaleLib.sol#908) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": "Parameter '_registrants' of EvenDistroCrowdsaleLib.unregisterUsers (EvenDistroCrowdsaleLib.sol#938) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n",
                    "message": "Parameter '_amount' of EvenDistroCrowdsaleLib.receivePurchase (EvenDistroCrowdsaleLib.sol#992) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/TokenLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_47"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (TokenLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (TokenLib.sol#40-49)\n\t- TokenLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (TokenLib.sol#57-72)\n\t- TokenLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (TokenLib.sol#80-89)\n\t- TokenLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (TokenLib.sol#97-106)\n\t- TokenLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (TokenLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (TokenLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (TokenLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (TokenLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (TokenLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (TokenLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (TokenLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (TokenLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (TokenLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (TokenLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (TokenLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TokenLib.sol:\n\t- pragma solidity^0.4.18 (TokenLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenLib.sol#111): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (TokenLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (TokenLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (TokenLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (TokenLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (TokenLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (TokenLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (TokenLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (TokenLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (TokenLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (TokenLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (TokenLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (TokenLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (TokenLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (TokenLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (TokenLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (TokenLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (TokenLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (TokenLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (TokenLib.sol#353) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/EvenDistroTestTenD.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!self.staticCap) && (now >= self.base.startTime - 2 hours)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogRegError(_registrant, \"Can only register users earlier than 2 hours before the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 913,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!self.staticCap) && (now >= self.base.startTime - 2 hours)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 914,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogRegError(_registrant, \"Can only unregister users earlier than 2 hours before the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1001,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1003,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1005,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1006,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.base.currentMilestone += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1009,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1010,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_29"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (EvenDistroTestTenD.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (EvenDistroTestTenD.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (EvenDistroTestTenD.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (EvenDistroTestTenD.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 index;\n",
                    "message": "index in CrowdsaleLib.getSaleData (EvenDistroTestTenD.sol#730) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (EvenDistroTestTenD.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1021,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _leftoverWei; //wei change for purchaser\n",
                    "message": "_leftoverWei in EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestTenD.sol#1021) is a local variable never initialiazed\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": 1076,
                    "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    require(self.isRegistered[msg.sender]);\n\n\n\n  \t// if the address cap increase interval has passed, update the current day and change the address cap\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n      {\n\n        self.base.currentMilestone += 1;\n\n      }\n\n\n\n      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n\n\n\n      self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n\n\n      LogAddressTokenCapChange(self.addressTokenCap, \"Address cap has increased!\");\n\n      LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n  \t}\n\n\n\n    uint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    uint256 _allowedWei;  // tells how much more the buyer can contribute up to their cap\n\n    bool err;\n\n\n\n    if(self.addressTokenCap > 0) {\n\n      //_allowedWei represents tokens first, recycle variable to prevent stack depth issues\n\n      _allowedWei = self.addressTokenCap - self.tokensBought[msg.sender];\n\n\n\n      (err, _allowedWei) = _allowedWei.times(1000000000000000000);\n\n      require(!err);\n\n\n\n      _allowedWei = _allowedWei/self.base.tokensPerEth;\n\n    } else {\n\n      // if addressTokenCap is zero then there is no cap\n\n      _allowedWei = _amount;\n\n    }\n\n    require(_allowedWei > 0);\n\n    _allowedWei = getMin(_amount,_allowedWei);\n\n    _leftoverWei = _leftoverWei + (_amount - _allowedWei);\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _allowedWei.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei = _leftoverWei + _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _allowedWei - _remainder;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n    self.tokensBought[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n    LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestTenD.sol#992-1076) does not use the value returned by external calls:\n\t-self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]) (EvenDistroTestTenD.sol#1012)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ EvenDistroTestTenD.sol#401) shadows:\n\t- CrowdsaleToken.name (function @ EvenDistroTestTenD.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ EvenDistroTestTenD.sol#402) shadows:\n\t- CrowdsaleToken.symbol (function @ EvenDistroTestTenD.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ EvenDistroTestTenD.sol#403) shadows:\n\t- CrowdsaleToken.decimals (function @ EvenDistroTestTenD.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ EvenDistroTestTenD.sol#404) shadows:\n\t- CrowdsaleToken.initialSupply (function @ EvenDistroTestTenD.sol#427-429)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.name (local variable @ EvenDistroTestTenD.sol#1151) shadows:\n\t- CrowdsaleTestTokenTenD.name (function @ EvenDistroTestTenD.sol#1161-1163)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.symbol (local variable @ EvenDistroTestTenD.sol#1152) shadows:\n\t- CrowdsaleTestTokenTenD.symbol (function @ EvenDistroTestTenD.sol#1165-1167)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.decimals (local variable @ EvenDistroTestTenD.sol#1153) shadows:\n\t- CrowdsaleTestTokenTenD.decimals (function @ EvenDistroTestTenD.sol#1169-1171)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.initialSupply (local variable @ EvenDistroTestTenD.sol#1154) shadows:\n\t- CrowdsaleTestTokenTenD.initialSupply (function @ EvenDistroTestTenD.sol#1177-1179)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (EvenDistroTestTenD.sol#40-49)\n\t- EvenDistroTestTenD.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (EvenDistroTestTenD.sol#57-72)\n\t- EvenDistroTestTenD.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (EvenDistroTestTenD.sol#80-89)\n\t- EvenDistroTestTenD.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (EvenDistroTestTenD.sol#97-106)\n\t- EvenDistroTestTenD.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (EvenDistroTestTenD.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (EvenDistroTestTenD.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (EvenDistroTestTenD.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (EvenDistroTestTenD.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (EvenDistroTestTenD.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (EvenDistroTestTenD.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (EvenDistroTestTenD.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (EvenDistroTestTenD.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (EvenDistroTestTenD.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (EvenDistroTestTenD.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (EvenDistroTestTenD.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (EvenDistroTestTenD.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (EvenDistroTestTenD.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (EvenDistroTestTenD.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (EvenDistroTestTenD.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (EvenDistroTestTenD.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (EvenDistroTestTenD.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (EvenDistroTestTenD.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (EvenDistroTestTenD.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (EvenDistroTestTenD.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (EvenDistroTestTenD.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (EvenDistroTestTenD.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (EvenDistroTestTenD.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (EvenDistroTestTenD.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (EvenDistroTestTenD.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (EvenDistroTestTenD.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (EvenDistroTestTenD.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (EvenDistroTestTenD.sol#462-464) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
                    "message": "CrowdsaleLib.init (EvenDistroTestTenD.sol#556-588) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": 648,
                    "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawTokens (EvenDistroTestTenD.sol#620-648) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 664,
                    "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawLeftoverWei (EvenDistroTestTenD.sol#653-664) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": 684,
                    "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawOwnerEth (EvenDistroTestTenD.sol#669-684) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": 718,
                    "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.setTokens (EvenDistroTestTenD.sol#705-718) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": 742,
                    "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
                    "message": "CrowdsaleLib.getSaleData (EvenDistroTestTenD.sol#724-742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 749,
                    "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
                    "message": "CrowdsaleLib.getTokensSold (EvenDistroTestTenD.sol#747-749) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": 855,
                    "vulnerability_code": "  function init(EvenDistroCrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                uint256 _initialAddressTokenCap,\n\n                bool _staticCap,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \tself.base.init(_owner,\n\n                   _saleData,\n\n                   _endTime,\n\n                   _percentBurn,\n\n                   _token);\n\n\n\n    self.addressTokenCap = _initialAddressTokenCap;\n\n    self.staticCap = _staticCap;\n",
                    "message": "EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#837-855) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": 903,
                    "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    require(msg.sender == self.base.owner);\n\n\n\n    for (uint256 i = 0; i < _registrants.length; i++) {\n\n      registerUser(self,_registrants[i]);\n\n    }\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.registerUsers (EvenDistroTestTenD.sol#893-903) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": 948,
                    "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender == self.base.owner);\n\n\n\n    for (uint256 i = 0; i < _registrants.length; i++) {\n\n      unregisterUser(self,_registrants[i]);\n\n    }\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.unregisterUsers (EvenDistroTestTenD.sol#938-948) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": 1076,
                    "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    require(self.isRegistered[msg.sender]);\n\n\n\n  \t// if the address cap increase interval has passed, update the current day and change the address cap\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n      {\n\n        self.base.currentMilestone += 1;\n\n      }\n\n\n\n      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n\n\n\n      self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n\n\n      LogAddressTokenCapChange(self.addressTokenCap, \"Address cap has increased!\");\n\n      LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n  \t}\n\n\n\n    uint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    uint256 _allowedWei;  // tells how much more the buyer can contribute up to their cap\n\n    bool err;\n\n\n\n    if(self.addressTokenCap > 0) {\n\n      //_allowedWei represents tokens first, recycle variable to prevent stack depth issues\n\n      _allowedWei = self.addressTokenCap - self.tokensBought[msg.sender];\n\n\n\n      (err, _allowedWei) = _allowedWei.times(1000000000000000000);\n\n      require(!err);\n\n\n\n      _allowedWei = _allowedWei/self.base.tokensPerEth;\n\n    } else {\n\n      // if addressTokenCap is zero then there is no cap\n\n      _allowedWei = _amount;\n\n    }\n\n    require(_allowedWei > 0);\n\n    _allowedWei = getMin(_amount,_allowedWei);\n\n    _leftoverWei = _leftoverWei + (_amount - _allowedWei);\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _allowedWei.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei = _leftoverWei + _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _allowedWei - _remainder;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n    self.tokensBought[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n    LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
                    "message": "EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestTenD.sol#992-1076) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1080,
                    "vulnerability_to_line": 1083,
                    "vulnerability_code": "  function setTokens(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    calculateAddressTokenCap(self);\n\n    return self.base.setTokens();\n",
                    "message": "EvenDistroCrowdsaleLib.setTokens (EvenDistroTestTenD.sol#1080-1083) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1085,
                    "vulnerability_to_line": 1087,
                    "vulnerability_code": "  function withdrawTokens(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawTokens();\n",
                    "message": "EvenDistroCrowdsaleLib.withdrawTokens (EvenDistroTestTenD.sol#1085-1087) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1089,
                    "vulnerability_to_line": 1091,
                    "vulnerability_code": "  function withdrawLeftoverWei(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawLeftoverWei();\n",
                    "message": "EvenDistroCrowdsaleLib.withdrawLeftoverWei (EvenDistroTestTenD.sol#1089-1091) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1093,
                    "vulnerability_to_line": 1095,
                    "vulnerability_code": "  function withdrawOwnerEth(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawOwnerEth();\n",
                    "message": "EvenDistroCrowdsaleLib.withdrawOwnerEth (EvenDistroTestTenD.sol#1093-1095) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1097,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function getSaleData(EvenDistroCrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    return self.base.getSaleData(timestamp);\n",
                    "message": "EvenDistroCrowdsaleLib.getSaleData (EvenDistroTestTenD.sol#1097-1103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1105,
                    "vulnerability_to_line": 1107,
                    "vulnerability_code": "  function getTokensSold(EvenDistroCrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.base.getTokensSold();\n",
                    "message": "EvenDistroCrowdsaleLib.getTokensSold (EvenDistroTestTenD.sol#1105-1107) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": 1111,
                    "vulnerability_code": "  function crowdsaleActive(EvenDistroCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleActive();\n",
                    "message": "EvenDistroCrowdsaleLib.crowdsaleActive (EvenDistroTestTenD.sol#1109-1111) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1113,
                    "vulnerability_to_line": 1115,
                    "vulnerability_code": "  function crowdsaleEnded(EvenDistroCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleEnded();\n",
                    "message": "EvenDistroCrowdsaleLib.crowdsaleEnded (EvenDistroTestTenD.sol#1113-1115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": 1163,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleTestTokenTenD.name (EvenDistroTestTenD.sol#1161-1163) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1165,
                    "vulnerability_to_line": 1167,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleTestTokenTenD.symbol (EvenDistroTestTenD.sol#1165-1167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1169,
                    "vulnerability_to_line": 1171,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleTestTokenTenD.decimals (EvenDistroTestTenD.sol#1169-1171) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": 1175,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleTestTokenTenD.totalSupply (EvenDistroTestTenD.sol#1173-1175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1177,
                    "vulnerability_to_line": 1179,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleTestTokenTenD.initialSupply (EvenDistroTestTenD.sol#1177-1179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": 1183,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleTestTokenTenD.balanceOf (EvenDistroTestTenD.sol#1181-1183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1185,
                    "vulnerability_to_line": 1187,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleTestTokenTenD.allowance (EvenDistroTestTenD.sol#1185-1187) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1189,
                    "vulnerability_to_line": 1191,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleTestTokenTenD.transfer (EvenDistroTestTenD.sol#1189-1191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1193,
                    "vulnerability_to_line": 1195,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleTestTokenTenD.transferFrom (EvenDistroTestTenD.sol#1193-1195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1197,
                    "vulnerability_to_line": 1199,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleTestTokenTenD.approve (EvenDistroTestTenD.sol#1197-1199) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": 1206,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleTestTokenTenD.approveChange (EvenDistroTestTenD.sol#1201-1206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": 1210,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleTestTokenTenD.changeOwner (EvenDistroTestTenD.sol#1208-1210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1212,
                    "vulnerability_to_line": 1214,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleTestTokenTenD.burnToken (EvenDistroTestTenD.sol#1212-1214) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1273,
                    "vulnerability_to_line": 1275,
                    "vulnerability_code": "  function () payable {\n\n    sendPurchase();\n",
                    "message": "EvenDistroTestTenD.fallback (EvenDistroTestTenD.sol#1273-1275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": 1283,
                    "vulnerability_code": "  function registerUser(address _registrant) returns (bool) {\n\n    return sale.registerUser(_registrant);\n",
                    "message": "EvenDistroTestTenD.registerUser (EvenDistroTestTenD.sol#1281-1283) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1285,
                    "vulnerability_to_line": 1287,
                    "vulnerability_code": "  function registerUsers(address[] _registrants) returns (bool) {\n\n    return sale.registerUsers(_registrants);\n",
                    "message": "EvenDistroTestTenD.registerUsers (EvenDistroTestTenD.sol#1285-1287) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1289,
                    "vulnerability_to_line": 1291,
                    "vulnerability_code": "  function unregisterUser(address _registrant) returns (bool) {\n\n    return sale.unregisterUser(_registrant);\n",
                    "message": "EvenDistroTestTenD.unregisterUser (EvenDistroTestTenD.sol#1289-1291) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1293,
                    "vulnerability_to_line": 1295,
                    "vulnerability_code": "  function unregisterUsers(address[] _registrants) returns (bool) {\n\n    return sale.unregisterUsers(_registrants);\n",
                    "message": "EvenDistroTestTenD.unregisterUsers (EvenDistroTestTenD.sol#1293-1295) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": 1299,
                    "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n\n    return sale.isRegistered[_registrant];\n",
                    "message": "EvenDistroTestTenD.isRegistered (EvenDistroTestTenD.sol#1297-1299) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1301,
                    "vulnerability_to_line": 1303,
                    "vulnerability_code": "  function withdrawTokens() returns (bool) {\n\n    return sale.withdrawTokens();\n",
                    "message": "EvenDistroTestTenD.withdrawTokens (EvenDistroTestTenD.sol#1301-1303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1305,
                    "vulnerability_to_line": 1307,
                    "vulnerability_code": "  function withdrawLeftoverWei() returns (bool) {\n\n    return sale.withdrawLeftoverWei();\n",
                    "message": "EvenDistroTestTenD.withdrawLeftoverWei (EvenDistroTestTenD.sol#1305-1307) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1309,
                    "vulnerability_to_line": 1311,
                    "vulnerability_code": "  function withdrawOwnerEth() returns (bool) {\n\n  \treturn sale.withdrawOwnerEth();\n",
                    "message": "EvenDistroTestTenD.withdrawOwnerEth (EvenDistroTestTenD.sol#1309-1311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1313,
                    "vulnerability_to_line": 1315,
                    "vulnerability_code": "  function crowdsaleActive() constant returns (bool) {\n\n  \treturn sale.crowdsaleActive();\n",
                    "message": "EvenDistroTestTenD.crowdsaleActive (EvenDistroTestTenD.sol#1313-1315) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1317,
                    "vulnerability_to_line": 1319,
                    "vulnerability_code": "  function crowdsaleEnded() constant returns (bool) {\n\n  \treturn sale.crowdsaleEnded();\n",
                    "message": "EvenDistroTestTenD.crowdsaleEnded (EvenDistroTestTenD.sol#1317-1319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": 1323,
                    "vulnerability_code": "  function setTokens() returns (bool) {\n\n    return sale.setTokens();\n",
                    "message": "EvenDistroTestTenD.setTokens (EvenDistroTestTenD.sol#1321-1323) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1325,
                    "vulnerability_to_line": 1327,
                    "vulnerability_code": "  function getOwner() constant returns (address) {\n\n    return sale.base.owner;\n",
                    "message": "EvenDistroTestTenD.getOwner (EvenDistroTestTenD.sol#1325-1327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1329,
                    "vulnerability_to_line": 1331,
                    "vulnerability_code": "  function getTokensPerEth() constant returns (uint256) {\n\n    return sale.base.tokensPerEth;\n",
                    "message": "EvenDistroTestTenD.getTokensPerEth (EvenDistroTestTenD.sol#1329-1331) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1333,
                    "vulnerability_to_line": 1335,
                    "vulnerability_code": "  function getStartTime() constant returns (uint256) {\n\n    return sale.base.startTime;\n",
                    "message": "EvenDistroTestTenD.getStartTime (EvenDistroTestTenD.sol#1333-1335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1337,
                    "vulnerability_to_line": 1339,
                    "vulnerability_code": "  function getEndTime() constant returns (uint256) {\n\n    return sale.base.endTime;\n",
                    "message": "EvenDistroTestTenD.getEndTime (EvenDistroTestTenD.sol#1337-1339) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1341,
                    "vulnerability_to_line": 1343,
                    "vulnerability_code": "  function getEthRaised() constant returns (uint256) {\n\n    return sale.base.ownerBalance;\n",
                    "message": "EvenDistroTestTenD.getEthRaised (EvenDistroTestTenD.sol#1341-1343) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": 1347,
                    "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n\n    return sale.base.hasContributed[_buyer];\n",
                    "message": "EvenDistroTestTenD.getContribution (EvenDistroTestTenD.sol#1345-1347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": 1351,
                    "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n\n    return sale.base.withdrawTokensMap[_buyer];\n",
                    "message": "EvenDistroTestTenD.getTokenPurchase (EvenDistroTestTenD.sol#1349-1351) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": 1355,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n\n    return sale.base.leftoverWei[_buyer];\n",
                    "message": "EvenDistroTestTenD.getLeftoverWei (EvenDistroTestTenD.sol#1353-1355) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1359,
                    "vulnerability_code": "  function getSaleData(uint256 timestamp) constant returns (uint256[3]) {\n\n    return sale.getSaleData(timestamp);\n",
                    "message": "EvenDistroTestTenD.getSaleData (EvenDistroTestTenD.sol#1357-1359) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function getTokensSold() constant returns (uint256) {\n\n    return sale.getTokensSold();\n",
                    "message": "EvenDistroTestTenD.getTokensSold (EvenDistroTestTenD.sol#1361-1363) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": 1367,
                    "vulnerability_code": "  function getPercentBurn() constant returns (uint256) {\n\n    return sale.base.percentBurn;\n",
                    "message": "EvenDistroTestTenD.getPercentBurn (EvenDistroTestTenD.sol#1365-1367) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1369,
                    "vulnerability_to_line": 1371,
                    "vulnerability_code": "  function getAddressTokenCap() constant returns (uint256) {\n\n    return sale.addressTokenCap;\n",
                    "message": "EvenDistroTestTenD.getAddressTokenCap (EvenDistroTestTenD.sol#1369-1371) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": 1375,
                    "vulnerability_code": "  function getNumRegistered() constant returns (uint256) {\n\n    return sale.numRegistered;\n",
                    "message": "EvenDistroTestTenD.getNumRegistered (EvenDistroTestTenD.sol#1373-1375) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in EvenDistroTestTenD.sol:\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#469): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#754): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#1120): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#1219): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (EvenDistroTestTenD.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (EvenDistroTestTenD.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (EvenDistroTestTenD.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (EvenDistroTestTenD.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (EvenDistroTestTenD.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (EvenDistroTestTenD.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (EvenDistroTestTenD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (EvenDistroTestTenD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (EvenDistroTestTenD.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (EvenDistroTestTenD.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (EvenDistroTestTenD.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (EvenDistroTestTenD.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (EvenDistroTestTenD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (EvenDistroTestTenD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (EvenDistroTestTenD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (EvenDistroTestTenD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (EvenDistroTestTenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (EvenDistroTestTenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (EvenDistroTestTenD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (EvenDistroTestTenD.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (EvenDistroTestTenD.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (EvenDistroTestTenD.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (EvenDistroTestTenD.sol#400-409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of CrowdsaleLib.init (EvenDistroTestTenD.sol#557) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of CrowdsaleLib.init (EvenDistroTestTenD.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of CrowdsaleLib.init (EvenDistroTestTenD.sol#559) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of CrowdsaleLib.init (EvenDistroTestTenD.sol#560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of CrowdsaleLib.init (EvenDistroTestTenD.sol#561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            uint256 _tokensPerEth)\n",
                    "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (EvenDistroTestTenD.sol#691) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#838) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#839) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#840) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#841) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 842,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initialAddressTokenCap,\n",
                    "message": "Parameter '_initialAddressTokenCap' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#842) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 843,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _staticCap,\n",
                    "message": "Parameter '_staticCap' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#843) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#844) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 861,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUser(EvenDistroCrowdsaleStorage storage self, address _registrant)\n",
                    "message": "Parameter '_registrant' of EvenDistroCrowdsaleLib.registerUser (EvenDistroTestTenD.sol#861) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": "Parameter '_registrants' of EvenDistroCrowdsaleLib.registerUsers (EvenDistroTestTenD.sol#893) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUser(EvenDistroCrowdsaleStorage storage self, address _registrant)\n",
                    "message": "Parameter '_registrant' of EvenDistroCrowdsaleLib.unregisterUser (EvenDistroTestTenD.sol#908) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": "Parameter '_registrants' of EvenDistroCrowdsaleLib.unregisterUsers (EvenDistroTestTenD.sol#938) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n",
                    "message": "Parameter '_amount' of EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestTenD.sol#992) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1150,
                    "vulnerability_to_line": 1159,
                    "vulnerability_code": "  function CrowdsaleTestTokenTenD(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD' (EvenDistroTestTenD.sol#1150-1159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": 1257,
                    "vulnerability_code": "  function EvenDistroTestTenD(\n\n    address owner,\n\n    uint256[] saleData,\n\n    uint256 endTime,\n\n    uint8 percentBurn,\n\n    uint256 initialAddressTokenCap,\n\n    bool staticCap,\n\n    CrowdsaleToken token)\n\n  {\n\n  \tsale.init(owner, saleData, endTime, percentBurn, initialAddressTokenCap, staticCap, token);\n",
                    "message": "Function 'EvenDistroTestTenD.EvenDistroTestTenD' (EvenDistroTestTenD.sol#1247-1257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUser(address _registrant) returns (bool) {\n",
                    "message": "Parameter '_registrant' of EvenDistroTestTenD.registerUser (EvenDistroTestTenD.sol#1281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUsers(address[] _registrants) returns (bool) {\n",
                    "message": "Parameter '_registrants' of EvenDistroTestTenD.registerUsers (EvenDistroTestTenD.sol#1285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUser(address _registrant) returns (bool) {\n",
                    "message": "Parameter '_registrant' of EvenDistroTestTenD.unregisterUser (EvenDistroTestTenD.sol#1289) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUsers(address[] _registrants) returns (bool) {\n",
                    "message": "Parameter '_registrants' of EvenDistroTestTenD.unregisterUsers (EvenDistroTestTenD.sol#1293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n",
                    "message": "Parameter '_registrant' of EvenDistroTestTenD.isRegistered (EvenDistroTestTenD.sol#1297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n",
                    "message": "Parameter '_buyer' of EvenDistroTestTenD.getContribution (EvenDistroTestTenD.sol#1345) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n",
                    "message": "Parameter '_buyer' of EvenDistroTestTenD.getTokenPurchase (EvenDistroTestTenD.sol#1349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n",
                    "message": "Parameter '_buyer' of EvenDistroTestTenD.getLeftoverWei (EvenDistroTestTenD.sol#1353) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function crowdsaleActive() constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function crowdsaleEnded() constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getOwner() constant returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensPerEth() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getStartTime() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getEndTime() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getEthRaised() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSaleData(uint256 timestamp) constant returns (uint256[3]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPercentBurn() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAddressTokenCap() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getNumRegistered() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 1197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1004,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 1242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract EvenDistroTestTenD {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 1274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    sendPurchase();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function EvenDistroTestTenD(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sendPurchase() payable returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUser(address _registrant) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerUsers(address[] _registrants) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUser(address _registrant) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unregisterUsers(address[] _registrants) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawTokens() returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawLeftoverWei() returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawOwnerEth() returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function crowdsaleActive() constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function crowdsaleEnded() constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTokens() returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getOwner() constant returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensPerEth() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getStartTime() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getEndTime() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getEthRaised() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSaleData(uint256 timestamp) constant returns (uint256[3]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPercentBurn() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAddressTokenCap() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getNumRegistered() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  EvenDistroCrowdsaleLib.EvenDistroCrowdsaleStorage sale;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/EvenDistroCrowdsale/truffle/contracts/CrowdsaleLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_79"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (CrowdsaleLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 index;\n",
                    "message": "index in CrowdsaleLib.getSaleData (CrowdsaleLib.sol#730) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ CrowdsaleLib.sol#401) shadows:\n\t- CrowdsaleToken.name (function @ CrowdsaleLib.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ CrowdsaleLib.sol#402) shadows:\n\t- CrowdsaleToken.symbol (function @ CrowdsaleLib.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ CrowdsaleLib.sol#403) shadows:\n\t- CrowdsaleToken.decimals (function @ CrowdsaleLib.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ CrowdsaleLib.sol#404) shadows:\n\t- CrowdsaleToken.initialSupply (function @ CrowdsaleLib.sol#427-429)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (CrowdsaleLib.sol#40-49)\n\t- CrowdsaleLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (CrowdsaleLib.sol#57-72)\n\t- CrowdsaleLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (CrowdsaleLib.sol#80-89)\n\t- CrowdsaleLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (CrowdsaleLib.sol#97-106)\n\t- CrowdsaleLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (CrowdsaleLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (CrowdsaleLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (CrowdsaleLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (CrowdsaleLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (CrowdsaleLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (CrowdsaleLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (CrowdsaleLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (CrowdsaleLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (CrowdsaleLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (CrowdsaleLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (CrowdsaleLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (CrowdsaleLib.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (CrowdsaleLib.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (CrowdsaleLib.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (CrowdsaleLib.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (CrowdsaleLib.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (CrowdsaleLib.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (CrowdsaleLib.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (CrowdsaleLib.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (CrowdsaleLib.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (CrowdsaleLib.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (CrowdsaleLib.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (CrowdsaleLib.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (CrowdsaleLib.sol#462-464) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
                    "message": "CrowdsaleLib.init (CrowdsaleLib.sol#556-588) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": 648,
                    "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawTokens (CrowdsaleLib.sol#620-648) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 664,
                    "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawLeftoverWei (CrowdsaleLib.sol#653-664) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": 684,
                    "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawOwnerEth (CrowdsaleLib.sol#669-684) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": 718,
                    "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.setTokens (CrowdsaleLib.sol#705-718) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": 742,
                    "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
                    "message": "CrowdsaleLib.getSaleData (CrowdsaleLib.sol#724-742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 749,
                    "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
                    "message": "CrowdsaleLib.getTokensSold (CrowdsaleLib.sol#747-749) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CrowdsaleLib.sol:\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#469): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (CrowdsaleLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (CrowdsaleLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (CrowdsaleLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (CrowdsaleLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (CrowdsaleLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (CrowdsaleLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (CrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (CrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (CrowdsaleLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (CrowdsaleLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (CrowdsaleLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (CrowdsaleLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (CrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (CrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (CrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (CrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (CrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (CrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (CrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (CrowdsaleLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (CrowdsaleLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (CrowdsaleLib.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (CrowdsaleLib.sol#400-409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of CrowdsaleLib.init (CrowdsaleLib.sol#557) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of CrowdsaleLib.init (CrowdsaleLib.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of CrowdsaleLib.init (CrowdsaleLib.sol#559) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of CrowdsaleLib.init (CrowdsaleLib.sol#560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of CrowdsaleLib.init (CrowdsaleLib.sol#561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            uint256 _tokensPerEth)\n",
                    "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (CrowdsaleLib.sol#691) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/IICOLib/truffle/contracts/InteractiveCrowdsaleLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.personalCaps[msg.sender] == 0) && (self.base.hasContributed[msg.sender] == 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 681,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 829,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (self.list[HEAD][NEXT] == _node) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 831,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 833,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 834,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 836,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 913,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 914,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 c = self.list[_node][_direction];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _node, _new, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _new, c, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 917,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 918,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 920,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            numElements++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _digits++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (InteractiveCrowdsaleLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (InteractiveCrowdsaleLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (InteractiveCrowdsaleLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (InteractiveCrowdsaleLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool loop;\n",
                    "message": "loop in InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleLib.sol#1250) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool loop;\n",
                    "message": "loop in InteractiveCrowdsaleLib.withdrawBid (InteractiveCrowdsaleLib.sol#1366) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 741,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 index;\n",
                    "message": "index in CrowdsaleLib.getSaleData (InteractiveCrowdsaleLib.sol#741) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _proposedValue;\n",
                    "message": "_proposedValue in InteractiveCrowdsaleLib.withdrawBid (InteractiveCrowdsaleLib.sol#1364) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (InteractiveCrowdsaleLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _bonusPercent;\n",
                    "message": "_bonusPercent in InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleLib.sol#1210) is a local variable never initialiazed\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1200,
                    "vulnerability_to_line": 1307,
                    "vulnerability_code": "  function submitBid(InteractiveCrowdsaleStorage storage self,\n\n                      uint256 _amount,\n\n                      uint256 _personalCap,\n\n                      uint256 _valuePredict) public returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    // bidder can't have already bid\n\n    require((self.personalCaps[msg.sender] == 0) && (self.base.hasContributed[msg.sender] == 0));\n\n\n\n    uint256 _bonusPercent;\n\n    // token purchase bonus only applies before the withdrawal lock\n\n    if (now < self.endWithdrawalTime) {\n\n      require(_personalCap > _amount);\n\n      _bonusPercent = getCurrentBonus(self);\n\n    } else {\n\n      // The personal valuation submitted must be greater than the current\n\n      // valuation plus the bid if after the withdrawal lock.\n\n      require(_personalCap >= self.totalValuation + _amount);\n\n    }\n\n\n\n    // personal valuation and minimum should be set to the proper granularity,\n\n    // only three most significant values can be non-zero. reduces the number of possible\n\n    // valuation buckets in the linked list\n\n    uint256 digits = numDigits(_personalCap);\n\n    if(digits > 3) {\n\n      require((_personalCap % (10**(digits - 3))) == 0);\n\n    }\n\n\n\n    // add the bid to the sorted valuations list\n\n    // duplicate personal valuation caps share a spot in the linked list\n\n    uint256 _listSpot;\n\n    if(!self.valuationsList.nodeExists(_personalCap)){\n\n        _listSpot = self.valuationsList.getSortedSpot(_valuePredict,_personalCap,NEXT);\n\n        self.valuationsList.insert(_listSpot,_personalCap,PREV);\n\n    }\n\n\n\n    // add the bid to the address => cap mapping\n\n    self.personalCaps[msg.sender] = _personalCap;\n\n\n\n    // add the bid to the sum of bids at this valuation. Needed for calculating correct valuation pointer\n\n    self.valuationSums[_personalCap] += _amount;\n\n    self.numBidsAtValuation[_personalCap] += 1;\n\n\n\n    // add the bid to bidder's contribution amount\n\n    self.base.hasContributed[msg.sender] += _amount;\n\n\n\n    // temp variables for calculation\n\n    uint256 _proposedCommit;\n\n    uint256 _currentBucket;\n\n    bool loop;\n\n    bool exists;\n\n\n\n    // we only affect the pointer if we are coming in above it\n\n    if(_personalCap > self.currentBucket){\n\n\n\n      // if our valuation is sitting at the current bucket then we are using\n\n      // commitments right at their cap\n\n      if (self.totalValuation == self.currentBucket) {\n\n        // we are going to drop those commitments to see if we are going to be\n\n        // greater than the current bucket without them\n\n        _proposedCommit = (self.valueCommitted - self.valuationSums[self.currentBucket]) + _amount;\n\n        if(_proposedCommit > self.currentBucket){ loop = true; }\n\n      } else {\n\n        // else we're sitting in between buckets and have already dropped the\n\n        // previous commitments\n\n        _proposedCommit = self.totalValuation + _amount;\n\n        loop = true;\n\n      }\n\n\n\n      if(loop){\n\n        // if we're going to loop we move to the next bucket\n\n        (exists,_currentBucket) = self.valuationsList.getAdjacent(self.currentBucket, NEXT);\n\n\n\n        while(_proposedCommit >= _currentBucket){\n\n          // while we are proposed higher than the next bucket we drop commitments\n\n          // and iterate to the next\n\n          _proposedCommit = _proposedCommit - self.valuationSums[_currentBucket];\n\n          (exists,_currentBucket) = self.valuationsList.getAdjacent(_currentBucket, NEXT);\n\n        }\n\n        // once we've reached a bucket too high we move back to the last bucket and set it\n\n        (exists, _currentBucket) = self.valuationsList.getAdjacent(_currentBucket, PREV);\n\n        self.currentBucket = _currentBucket;\n\n      } else {\n\n        // else we're staying at the current bucket\n\n        _currentBucket = self.currentBucket;\n\n      }\n\n      // if our proposed commitment is less than or equal to the bucket\n\n      if(_proposedCommit <= _currentBucket){\n\n        // we add the commitments in that bucket\n\n        _proposedCommit += self.valuationSums[_currentBucket];\n\n        // and our value is capped at that bucket\n\n        self.totalValuation = _currentBucket;\n\n      } else {\n\n        // else our total value is in between buckets and it equals the total commitements\n\n        self.totalValuation = _proposedCommit;\n\n      }\n\n\n\n      self.valueCommitted = _proposedCommit;\n\n    } else if(_personalCap == self.totalValuation){\n\n      self.valueCommitted += _amount;\n\n    }\n\n\n\n    self.pricePurchasedAt[msg.sender] = (self.base.tokensPerEth * (100 + _bonusPercent))/100;\n\n    LogBidAccepted(msg.sender, _amount, _personalCap);\n\n    BucketAndValuationAndCommitted(self.currentBucket, self.totalValuation, self.valueCommitted);\n\n    return true;\n",
                    "message": "InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleLib.sol#1200-1307) does not use the value returned by external calls:\n\t-self.valuationsList.insert(_listSpot,_personalCap,PREV) (InteractiveCrowdsaleLib.sol#1234)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1456,
                    "vulnerability_to_line": 1490,
                    "vulnerability_code": "  function launchToken(InteractiveCrowdsaleStorage storage self) internal returns (bool) {\n\n    // total valuation of all the tokens not including the bonus\n\n    uint256 _fullValue = (self.totalValuation*100)/uint256(self.percentBeingSold);\n\n    // total valuation of bonus tokens\n\n    uint256 _bonusValue = ((self.totalValuation * (100 + self.priceBonusPercent))/100) - self.totalValuation;\n\n    // total supply of all tokens not including the bonus\n\n    uint256 _supply = (_fullValue * self.base.tokensPerEth)/1000000000000000000;\n\n    // total number of bonus tokens\n\n    uint256 _bonusTokens = (_bonusValue * self.base.tokensPerEth)/1000000000000000000;\n\n    // tokens allocated to the owner of the sale\n\n    uint256 _ownerTokens = _supply - ((_supply * uint256(self.percentBeingSold))/100);\n\n    // total supply of tokens not including the bonus tokens\n\n    uint256 _totalSupply = _supply + _bonusTokens;\n\n\n\n    // deploy new token contract with total number of tokens\n\n    self.base.token = new CrowdsaleToken(address(this),\n\n                                         self.tokenInfo.name,\n\n                                         self.tokenInfo.symbol,\n\n                                         self.tokenInfo.decimals,\n\n                                         _totalSupply,\n\n                                         self.tokenInfo.stillMinting);\n\n\n\n    // if the sale got canceled, then all the tokens go to the owner and bonus tokens are burned\n\n    if(!self.isCanceled){\n\n      self.base.token.transfer(self.base.owner, _ownerTokens);\n\n    } else {\n\n      self.base.token.transfer(self.base.owner, _supply);\n\n      self.base.token.burnToken(_bonusTokens);\n\n    }\n\n    // the owner of the crowdsale becomes the new owner of the token contract\n\n    self.base.token.changeOwner(self.base.owner);\n\n    self.base.startingTokenBalance = _supply - _ownerTokens;\n\n\n\n    return true;\n",
                    "message": "InteractiveCrowdsaleLib.launchToken (InteractiveCrowdsaleLib.sol#1456-1490) does not use the value returned by external calls:\n\t-self.base.token.transfer(self.base.owner,_ownerTokens) (InteractiveCrowdsaleLib.sol#1480)\n\t-self.base.token.transfer(self.base.owner,_supply) (InteractiveCrowdsaleLib.sol#1482)\n\t-self.base.token.burnToken(_bonusTokens) (InteractiveCrowdsaleLib.sol#1483)\n\t-self.base.token.changeOwner(self.base.owner) (InteractiveCrowdsaleLib.sol#1486)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1509,
                    "vulnerability_to_line": 1577,
                    "vulnerability_code": "  function retreiveFinalResult(InteractiveCrowdsaleStorage storage self) public returns (bool) {\n\n    require(now > self.base.endTime);\n\n    require(self.personalCaps[msg.sender] > 0);\n\n\n\n    uint256 numTokens;\n\n    uint256 remainder;\n\n\n\n    if(!self.isFinalized){\n\n      require(setCanceled(self));\n\n      require(self.isCanceled);\n\n    }\n\n\n\n    if (self.isCanceled) {\n\n      // if the sale was canceled, everyone gets a full refund\n\n      self.base.leftoverWei[msg.sender] += self.base.hasContributed[msg.sender];\n\n      self.base.hasContributed[msg.sender] = 0;\n\n      LogErrorMsg(self.totalValuation, \"Sale is canceled, all bids have been refunded!\");\n\n      return true;\n\n    }\n\n\n\n    if (self.personalCaps[msg.sender] < self.totalValuation) {\n\n\n\n      // full refund if personal cap is less than total valuation\n\n      self.base.leftoverWei[msg.sender] += self.base.hasContributed[msg.sender];\n\n\n\n      // set hasContributed to 0 to prevent participant from calling this over and over\n\n      self.base.hasContributed[msg.sender] = 0;\n\n\n\n      return self.base.withdrawLeftoverWei();\n\n\n\n    } else if (self.personalCaps[msg.sender] == self.totalValuation) {\n\n\n\n      // calculate the portion that this address has to take out of their bid\n\n      uint256 refundAmount = (self.q*self.base.hasContributed[msg.sender])/100;\n\n\n\n      // refund that amount of wei to the address\n\n      self.base.leftoverWei[msg.sender] += refundAmount;\n\n\n\n      // subtract that amount the address' contribution\n\n      self.base.hasContributed[msg.sender] -= refundAmount;\n\n    }\n\n\n\n    LogErrorMsg(self.base.hasContributed[msg.sender],\"contribution\");\n\n    LogErrorMsg(self.pricePurchasedAt[msg.sender],\"price\");\n\n    LogErrorMsg(self.q,\"percentage\");\n\n    // calculate the number of tokens that the bidder purchased\n\n    (numTokens, remainder) = calculateTokenPurchase(self.base.hasContributed[msg.sender],\n\n                                                    self.pricePurchasedAt[msg.sender]);\n\n\n\n    // add tokens to the bidders purchase.  can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += numTokens;\n\n    self.valueCommitted = self.valueCommitted - remainder;\n\n    self.base.leftoverWei[msg.sender] += remainder;\n\n\n\n    // burn any extra bonus tokens\n\n    uint256 _fullBonus;\n\n    uint256 _fullBonusPrice = (self.base.tokensPerEth*(100 + self.priceBonusPercent))/100;\n\n    (_fullBonus, remainder) = calculateTokenPurchase(self.base.hasContributed[msg.sender], _fullBonusPrice);\n\n    uint256 _leftoverBonus = _fullBonus - numTokens;\n\n    self.base.token.burnToken(_leftoverBonus);\n\n\n\n    self.base.hasContributed[msg.sender] = 0;\n\n\n\n    // send tokens and leftoverWei to the address calling the function\n\n    self.base.withdrawTokens();\n\n\n\n    self.base.withdrawLeftoverWei();\n\n\n",
                    "message": "InteractiveCrowdsaleLib.retreiveFinalResult (InteractiveCrowdsaleLib.sol#1509-1577) does not use the value returned by external calls:\n\t-self.base.token.burnToken(_leftoverBonus) (InteractiveCrowdsaleLib.sol#1568)\n\t-self.base.withdrawTokens() (InteractiveCrowdsaleLib.sol#1573)\n\t-self.base.withdrawLeftoverWei() (InteractiveCrowdsaleLib.sol#1575)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ InteractiveCrowdsaleLib.sol#406) shadows:\n\t- CrowdsaleToken.name (function @ InteractiveCrowdsaleLib.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ InteractiveCrowdsaleLib.sol#407) shadows:\n\t- CrowdsaleToken.symbol (function @ InteractiveCrowdsaleLib.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ InteractiveCrowdsaleLib.sol#408) shadows:\n\t- CrowdsaleToken.decimals (function @ InteractiveCrowdsaleLib.sol#423-425)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ InteractiveCrowdsaleLib.sol#409) shadows:\n\t- CrowdsaleToken.initialSupply (function @ InteractiveCrowdsaleLib.sol#431-433)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (InteractiveCrowdsaleLib.sol#40-49)\n\t- InteractiveCrowdsaleLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (InteractiveCrowdsaleLib.sol#57-72)\n\t- InteractiveCrowdsaleLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (InteractiveCrowdsaleLib.sol#80-89)\n\t- InteractiveCrowdsaleLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (InteractiveCrowdsaleLib.sol#97-106)\n\t- InteractiveCrowdsaleLib.sol#98-106\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in InteractiveCrowdsaleLib.sol:\n\t- Version used: ['^0.4.15', '^0.4.18']\n\t- InteractiveCrowdsaleLib.sol#3 declares pragma solidity^0.4.18\n\t- InteractiveCrowdsaleLib.sol#111 declares pragma solidity^0.4.18\n\t- InteractiveCrowdsaleLib.sol#370 declares pragma solidity^0.4.15\n\t- InteractiveCrowdsaleLib.sol#480 declares pragma solidity^0.4.18\n\t- InteractiveCrowdsaleLib.sol#765 declares pragma solidity^0.4.18\n\t- InteractiveCrowdsaleLib.sol#957 declares pragma solidity^0.4.18\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (InteractiveCrowdsaleLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (InteractiveCrowdsaleLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (InteractiveCrowdsaleLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (InteractiveCrowdsaleLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (InteractiveCrowdsaleLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (InteractiveCrowdsaleLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (InteractiveCrowdsaleLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (InteractiveCrowdsaleLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (InteractiveCrowdsaleLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (InteractiveCrowdsaleLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (InteractiveCrowdsaleLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (InteractiveCrowdsaleLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (InteractiveCrowdsaleLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (InteractiveCrowdsaleLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (InteractiveCrowdsaleLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (InteractiveCrowdsaleLib.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (InteractiveCrowdsaleLib.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (InteractiveCrowdsaleLib.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (InteractiveCrowdsaleLib.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (InteractiveCrowdsaleLib.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (InteractiveCrowdsaleLib.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (InteractiveCrowdsaleLib.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transfer(address to, uint value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (InteractiveCrowdsaleLib.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (InteractiveCrowdsaleLib.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 453,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (InteractiveCrowdsaleLib.sol#451-453) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public returns (bool ok)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (InteractiveCrowdsaleLib.sol#455-459) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 463,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (InteractiveCrowdsaleLib.sol#461-463) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "  function mintToken(uint256 amount) public returns (bool ok) {\n\n    return token.mintToken(amount);\n",
                    "message": "CrowdsaleToken.mintToken (InteractiveCrowdsaleLib.sol#465-467) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": 471,
                    "vulnerability_code": "  function closeMint() public returns (bool ok) {\n\n    return token.closeMint();\n",
                    "message": "CrowdsaleToken.closeMint (InteractiveCrowdsaleLib.sol#469-471) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": 475,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (InteractiveCrowdsaleLib.sol#473-475) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": 599,
                    "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
                    "message": "CrowdsaleLib.init (InteractiveCrowdsaleLib.sol#567-599) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawTokens (InteractiveCrowdsaleLib.sol#631-659) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": 675,
                    "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawLeftoverWei (InteractiveCrowdsaleLib.sol#664-675) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": 695,
                    "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawOwnerEth (InteractiveCrowdsaleLib.sol#680-695) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 716,
                    "vulnerability_to_line": 729,
                    "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.setTokens (InteractiveCrowdsaleLib.sol#716-729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 735,
                    "vulnerability_to_line": 753,
                    "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
                    "message": "CrowdsaleLib.getSaleData (InteractiveCrowdsaleLib.sol#735-753) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": 760,
                    "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
                    "message": "CrowdsaleLib.getTokensSold (InteractiveCrowdsaleLib.sol#758-760) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1098,
                    "vulnerability_to_line": 1133,
                    "vulnerability_code": "  function init(InteractiveCrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _priceBonusPercent,\n\n                uint256 _minimumRaise,\n\n                uint256 _endWithdrawalTime,\n\n                uint256 _endTime,\n\n                uint8 _percentBeingSold,\n\n                string _tokenName,\n\n                string _tokenSymbol,\n\n                uint8 _tokenDecimals,\n\n                bool _allowMinting) public\n\n  {\n\n    self.base.init(_owner,\n\n                _saleData,\n\n                _endTime,\n\n                0, // no token burning for iico\n\n                CrowdsaleToken(0)); // no tokens created prior to iico\n\n\n\n    require(_endWithdrawalTime < _endTime);\n\n    require(_endWithdrawalTime > _saleData[0]);\n\n    require(_minimumRaise > 0);\n\n    require(_percentBeingSold > 0);\n\n    require(_percentBeingSold <= 100);\n\n    require(_priceBonusPercent > 0);\n\n\n\n    self.minimumRaise = _minimumRaise;\n\n    self.endWithdrawalTime = _endWithdrawalTime;\n\n    self.percentBeingSold = _percentBeingSold;\n\n    self.priceBonusPercent = _priceBonusPercent;\n\n\n\n    self.tokenInfo.name = _tokenName;\n\n    self.tokenInfo.symbol = _tokenSymbol;\n\n    self.tokenInfo.decimals = _tokenDecimals;\n\n    self.tokenInfo.stillMinting = _allowMinting;\n",
                    "message": "InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1098-1133) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1200,
                    "vulnerability_to_line": 1307,
                    "vulnerability_code": "  function submitBid(InteractiveCrowdsaleStorage storage self,\n\n                      uint256 _amount,\n\n                      uint256 _personalCap,\n\n                      uint256 _valuePredict) public returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    // bidder can't have already bid\n\n    require((self.personalCaps[msg.sender] == 0) && (self.base.hasContributed[msg.sender] == 0));\n\n\n\n    uint256 _bonusPercent;\n\n    // token purchase bonus only applies before the withdrawal lock\n\n    if (now < self.endWithdrawalTime) {\n\n      require(_personalCap > _amount);\n\n      _bonusPercent = getCurrentBonus(self);\n\n    } else {\n\n      // The personal valuation submitted must be greater than the current\n\n      // valuation plus the bid if after the withdrawal lock.\n\n      require(_personalCap >= self.totalValuation + _amount);\n\n    }\n\n\n\n    // personal valuation and minimum should be set to the proper granularity,\n\n    // only three most significant values can be non-zero. reduces the number of possible\n\n    // valuation buckets in the linked list\n\n    uint256 digits = numDigits(_personalCap);\n\n    if(digits > 3) {\n\n      require((_personalCap % (10**(digits - 3))) == 0);\n\n    }\n\n\n\n    // add the bid to the sorted valuations list\n\n    // duplicate personal valuation caps share a spot in the linked list\n\n    uint256 _listSpot;\n\n    if(!self.valuationsList.nodeExists(_personalCap)){\n\n        _listSpot = self.valuationsList.getSortedSpot(_valuePredict,_personalCap,NEXT);\n\n        self.valuationsList.insert(_listSpot,_personalCap,PREV);\n\n    }\n\n\n\n    // add the bid to the address => cap mapping\n\n    self.personalCaps[msg.sender] = _personalCap;\n\n\n\n    // add the bid to the sum of bids at this valuation. Needed for calculating correct valuation pointer\n\n    self.valuationSums[_personalCap] += _amount;\n\n    self.numBidsAtValuation[_personalCap] += 1;\n\n\n\n    // add the bid to bidder's contribution amount\n\n    self.base.hasContributed[msg.sender] += _amount;\n\n\n\n    // temp variables for calculation\n\n    uint256 _proposedCommit;\n\n    uint256 _currentBucket;\n\n    bool loop;\n\n    bool exists;\n\n\n\n    // we only affect the pointer if we are coming in above it\n\n    if(_personalCap > self.currentBucket){\n\n\n\n      // if our valuation is sitting at the current bucket then we are using\n\n      // commitments right at their cap\n\n      if (self.totalValuation == self.currentBucket) {\n\n        // we are going to drop those commitments to see if we are going to be\n\n        // greater than the current bucket without them\n\n        _proposedCommit = (self.valueCommitted - self.valuationSums[self.currentBucket]) + _amount;\n\n        if(_proposedCommit > self.currentBucket){ loop = true; }\n\n      } else {\n\n        // else we're sitting in between buckets and have already dropped the\n\n        // previous commitments\n\n        _proposedCommit = self.totalValuation + _amount;\n\n        loop = true;\n\n      }\n\n\n\n      if(loop){\n\n        // if we're going to loop we move to the next bucket\n\n        (exists,_currentBucket) = self.valuationsList.getAdjacent(self.currentBucket, NEXT);\n\n\n\n        while(_proposedCommit >= _currentBucket){\n\n          // while we are proposed higher than the next bucket we drop commitments\n\n          // and iterate to the next\n\n          _proposedCommit = _proposedCommit - self.valuationSums[_currentBucket];\n\n          (exists,_currentBucket) = self.valuationsList.getAdjacent(_currentBucket, NEXT);\n\n        }\n\n        // once we've reached a bucket too high we move back to the last bucket and set it\n\n        (exists, _currentBucket) = self.valuationsList.getAdjacent(_currentBucket, PREV);\n\n        self.currentBucket = _currentBucket;\n\n      } else {\n\n        // else we're staying at the current bucket\n\n        _currentBucket = self.currentBucket;\n\n      }\n\n      // if our proposed commitment is less than or equal to the bucket\n\n      if(_proposedCommit <= _currentBucket){\n\n        // we add the commitments in that bucket\n\n        _proposedCommit += self.valuationSums[_currentBucket];\n\n        // and our value is capped at that bucket\n\n        self.totalValuation = _currentBucket;\n\n      } else {\n\n        // else our total value is in between buckets and it equals the total commitements\n\n        self.totalValuation = _proposedCommit;\n\n      }\n\n\n\n      self.valueCommitted = _proposedCommit;\n\n    } else if(_personalCap == self.totalValuation){\n\n      self.valueCommitted += _amount;\n\n    }\n\n\n\n    self.pricePurchasedAt[msg.sender] = (self.base.tokensPerEth * (100 + _bonusPercent))/100;\n\n    LogBidAccepted(msg.sender, _amount, _personalCap);\n\n    BucketAndValuationAndCommitted(self.currentBucket, self.totalValuation, self.valueCommitted);\n\n    return true;\n",
                    "message": "InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleLib.sol#1200-1307) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": 1423,
                    "vulnerability_code": "  function withdrawBid(InteractiveCrowdsaleStorage storage self) public returns (bool) {\n\n    // The sender has to have already bid on the sale\n\n    require(self.personalCaps[msg.sender] > 0);\n\n\n\n    uint256 refundWei;\n\n    // cannot withdraw after compulsory withdraw period is over unless the bid's\n\n    // valuation is below the cutoff\n\n    if (now >= self.endWithdrawalTime) {\n\n      require(self.personalCaps[msg.sender] < self.totalValuation);\n\n\n\n      // full refund because their bid no longer affects the total sale valuation\n\n      refundWei = self.base.hasContributed[msg.sender];\n\n\n\n    } else {\n\n      require(!self.hasManuallyWithdrawn[msg.sender]);  // manual withdrawals are only allowed once\n\n      /***********************************************************************\n\n      The following lines were commented out due to stack depth, but they represent\n\n      the variables and calculations from the paper. The actual code is the same\n\n      thing spelled out using current variables.  See section 4 of the white paper for formula used\n\n      ************************************************************************/\n\n      //uint256 t = self.endWithdrawalTime - self.base.startTime;\n\n      //uint256 s = now - self.base.startTime;\n\n      //uint256 pa = self.pricePurchasedAt[msg.sender];\n\n      //uint256 pu = self.base.tokensPerEth;\n\n      //uint256 multiplierPercent =  (100*(t - s))/t;\n\n      //self.pricePurchasedAt = pa-((pa-pu)/3)\n\n\n\n      uint256 multiplierPercent = (100 * (self.endWithdrawalTime - now)) /\n\n                                  (self.endWithdrawalTime - self.base.startTime);\n\n      refundWei = (multiplierPercent * self.base.hasContributed[msg.sender]) / 100;\n\n\n\n// SWC-Integer Overflow and Underflow: L392 - L393\n\n      self.valuationSums[self.personalCaps[msg.sender]] -= refundWei;\n\n      self.numBidsAtValuation[self.personalCaps[msg.sender]] -= 1;\n\n\n\n      self.pricePurchasedAt[msg.sender] = self.pricePurchasedAt[msg.sender] -\n\n                                          ((self.pricePurchasedAt[msg.sender] - self.base.tokensPerEth) / 3);\n\n\n\n      self.hasManuallyWithdrawn[msg.sender] = true;\n\n\n\n    }\n\n\n\n    // Put the sender's contributed wei into the leftoverWei mapping for later withdrawal\n\n    self.base.leftoverWei[msg.sender] += refundWei;\n\n\n\n    // subtract the bidder's refund from its total contribution\n\n    self.base.hasContributed[msg.sender] -= refundWei;\n\n\n\n\n\n    uint256 _proposedCommit;\n\n    uint256 _proposedValue;\n\n    uint256 _currentBucket;\n\n    bool loop;\n\n    bool exists;\n\n\n\n    // bidder's withdrawal only affects the pointer if the personal cap is at or\n\n    // above the current valuation\n\n    if(self.personalCaps[msg.sender] >= self.totalValuation){\n\n\n\n      // first we remove the refundWei from the committed value\n\n      _proposedCommit = self.valueCommitted - refundWei;\n\n\n\n      // if we've dropped below the current bucket\n\n      if(_proposedCommit <= self.currentBucket){\n\n        // and current valuation is above the bucket\n\n        if(self.totalValuation > self.currentBucket){\n\n          _proposedCommit += self.valuationSums[self.currentBucket];\n\n        }\n\n\n\n        if(_proposedCommit >= self.currentBucket){\n\n          _proposedValue = self.currentBucket;\n\n        } else {\n\n          // if we are still below the current bucket then we need to iterate\n\n          loop = true;\n\n        }\n\n      } else {\n\n        if(self.totalValuation == self.currentBucket){\n\n          _proposedValue = self.totalValuation;\n\n        } else {\n\n          _proposedValue = _proposedCommit;\n\n        }\n\n      }\n\n\n\n      if(loop){\n\n        // if we're going to loop we move to the previous bucket\n\n        (exists,_currentBucket) = self.valuationsList.getAdjacent(self.currentBucket, PREV);\n\n        while(_proposedCommit <= _currentBucket){\n\n          // while we are proposed lower than the previous bucket we add commitments\n\n          _proposedCommit += self.valuationSums[_currentBucket];\n\n          // and iterate to the previous\n\n          if(_proposedCommit >= _currentBucket){\n\n            _proposedValue = _currentBucket;\n\n          } else {\n\n            (exists,_currentBucket) = self.valuationsList.getAdjacent(_currentBucket, PREV);\n\n          }\n\n        }\n\n\n\n        if(_proposedValue == 0) { _proposedValue = _proposedCommit; }\n\n\n\n        self.currentBucket = _currentBucket;\n\n      }\n\n\n\n      self.totalValuation = _proposedValue;\n\n      self.valueCommitted = _proposedCommit;\n\n    }\n\n\n\n    LogBidWithdrawn(msg.sender, refundWei, self.personalCaps[msg.sender]);\n\n    BucketAndValuationAndCommitted(self.currentBucket, self.totalValuation, self.valueCommitted);\n\n    return true;\n",
                    "message": "InteractiveCrowdsaleLib.withdrawBid (InteractiveCrowdsaleLib.sol#1314-1423) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1428,
                    "vulnerability_to_line": 1450,
                    "vulnerability_code": "  function finalizeSale(InteractiveCrowdsaleStorage storage self) public returns (bool) {\n\n    require(now >= self.base.endTime);\n\n    require(!self.isFinalized); // can only be called once\n\n    require(setCanceled(self));\n\n\n\n    self.isFinalized = true;\n\n    require(launchToken(self));\n\n    // may need to be computed due to EVM rounding errors\n\n    uint256 computedValue;\n\n\n\n    if(!self.isCanceled){\n\n      if(self.totalValuation == self.currentBucket){\n\n        // calculate the fraction of each minimal valuation bidders ether and tokens to refund\n\n        self.q = (100*(self.valueCommitted - self.totalValuation)/(self.valuationSums[self.totalValuation])) + 1;\n\n        computedValue = self.valueCommitted - self.valuationSums[self.totalValuation];\n\n        computedValue += (self.q * self.valuationSums[self.totalValuation])/100;\n\n      } else {\n\n        // no computation necessary\n\n        computedValue = self.totalValuation;\n\n      }\n\n      self.base.ownerBalance = computedValue;  // sets ETH raised in the sale to be ready for withdrawal\n\n    }\n",
                    "message": "InteractiveCrowdsaleLib.finalizeSale (InteractiveCrowdsaleLib.sol#1428-1450) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1509,
                    "vulnerability_to_line": 1577,
                    "vulnerability_code": "  function retreiveFinalResult(InteractiveCrowdsaleStorage storage self) public returns (bool) {\n\n    require(now > self.base.endTime);\n\n    require(self.personalCaps[msg.sender] > 0);\n\n\n\n    uint256 numTokens;\n\n    uint256 remainder;\n\n\n\n    if(!self.isFinalized){\n\n      require(setCanceled(self));\n\n      require(self.isCanceled);\n\n    }\n\n\n\n    if (self.isCanceled) {\n\n      // if the sale was canceled, everyone gets a full refund\n\n      self.base.leftoverWei[msg.sender] += self.base.hasContributed[msg.sender];\n\n      self.base.hasContributed[msg.sender] = 0;\n\n      LogErrorMsg(self.totalValuation, \"Sale is canceled, all bids have been refunded!\");\n\n      return true;\n\n    }\n\n\n\n    if (self.personalCaps[msg.sender] < self.totalValuation) {\n\n\n\n      // full refund if personal cap is less than total valuation\n\n      self.base.leftoverWei[msg.sender] += self.base.hasContributed[msg.sender];\n\n\n\n      // set hasContributed to 0 to prevent participant from calling this over and over\n\n      self.base.hasContributed[msg.sender] = 0;\n\n\n\n      return self.base.withdrawLeftoverWei();\n\n\n\n    } else if (self.personalCaps[msg.sender] == self.totalValuation) {\n\n\n\n      // calculate the portion that this address has to take out of their bid\n\n      uint256 refundAmount = (self.q*self.base.hasContributed[msg.sender])/100;\n\n\n\n      // refund that amount of wei to the address\n\n      self.base.leftoverWei[msg.sender] += refundAmount;\n\n\n\n      // subtract that amount the address' contribution\n\n      self.base.hasContributed[msg.sender] -= refundAmount;\n\n    }\n\n\n\n    LogErrorMsg(self.base.hasContributed[msg.sender],\"contribution\");\n\n    LogErrorMsg(self.pricePurchasedAt[msg.sender],\"price\");\n\n    LogErrorMsg(self.q,\"percentage\");\n\n    // calculate the number of tokens that the bidder purchased\n\n    (numTokens, remainder) = calculateTokenPurchase(self.base.hasContributed[msg.sender],\n\n                                                    self.pricePurchasedAt[msg.sender]);\n\n\n\n    // add tokens to the bidders purchase.  can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += numTokens;\n\n    self.valueCommitted = self.valueCommitted - remainder;\n\n    self.base.leftoverWei[msg.sender] += remainder;\n\n\n\n    // burn any extra bonus tokens\n\n    uint256 _fullBonus;\n\n    uint256 _fullBonusPrice = (self.base.tokensPerEth*(100 + self.priceBonusPercent))/100;\n\n    (_fullBonus, remainder) = calculateTokenPurchase(self.base.hasContributed[msg.sender], _fullBonusPrice);\n\n    uint256 _leftoverBonus = _fullBonus - numTokens;\n\n    self.base.token.burnToken(_leftoverBonus);\n\n\n\n    self.base.hasContributed[msg.sender] = 0;\n\n\n\n    // send tokens and leftoverWei to the address calling the function\n\n    self.base.withdrawTokens();\n\n\n\n    self.base.withdrawLeftoverWei();\n\n\n",
                    "message": "InteractiveCrowdsaleLib.retreiveFinalResult (InteractiveCrowdsaleLib.sol#1509-1577) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in InteractiveCrowdsaleLib.sol:\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleLib.sol#111): it allows old versions\n\t- pragma solidity^0.4.15 (InteractiveCrowdsaleLib.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleLib.sol#480): it allows old versions\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleLib.sol#765): it allows old versions\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleLib.sol#957): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (InteractiveCrowdsaleLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (InteractiveCrowdsaleLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (InteractiveCrowdsaleLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (InteractiveCrowdsaleLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (InteractiveCrowdsaleLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (InteractiveCrowdsaleLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (InteractiveCrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (InteractiveCrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (InteractiveCrowdsaleLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (InteractiveCrowdsaleLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (InteractiveCrowdsaleLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (InteractiveCrowdsaleLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (InteractiveCrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (InteractiveCrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (InteractiveCrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (InteractiveCrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (InteractiveCrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (InteractiveCrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (InteractiveCrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (InteractiveCrowdsaleLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (InteractiveCrowdsaleLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (InteractiveCrowdsaleLib.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                          string name,\n\n                          string symbol,\n\n                          uint8 decimals,\n\n                          uint256 initialSupply,\n\n                          bool allowMinting) public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (InteractiveCrowdsaleLib.sol#405-413) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of CrowdsaleLib.init (InteractiveCrowdsaleLib.sol#568) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of CrowdsaleLib.init (InteractiveCrowdsaleLib.sol#569) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of CrowdsaleLib.init (InteractiveCrowdsaleLib.sol#570) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of CrowdsaleLib.init (InteractiveCrowdsaleLib.sol#571) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 572,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of CrowdsaleLib.init (InteractiveCrowdsaleLib.sol#572) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            uint256 _tokensPerEth)\n",
                    "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (InteractiveCrowdsaleLib.sol#702) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nodeExists(LinkedList storage self, uint256 _node) \n",
                    "message": "Parameter '_node' of LinkedListLib.nodeExists (InteractiveCrowdsaleLib.sol#825) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 856,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getNode(LinkedList storage self, uint256 _node)\n",
                    "message": "Parameter '_node' of LinkedListLib.getNode (InteractiveCrowdsaleLib.sol#856) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getAdjacent (InteractiveCrowdsaleLib.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getAdjacent (InteractiveCrowdsaleLib.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 886,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getSortedSpot (InteractiveCrowdsaleLib.sol#886) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 886,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_value' of LinkedListLib.getSortedSpot (InteractiveCrowdsaleLib.sol#886) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 886,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getSortedSpot (InteractiveCrowdsaleLib.sol#886) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.createLink (InteractiveCrowdsaleLib.sol#902) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_link' of LinkedListLib.createLink (InteractiveCrowdsaleLib.sol#902) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.createLink (InteractiveCrowdsaleLib.sol#902) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_node' of LinkedListLib.insert (InteractiveCrowdsaleLib.sol#912) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_new' of LinkedListLib.insert (InteractiveCrowdsaleLib.sol#912) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.insert (InteractiveCrowdsaleLib.sol#912) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 926,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\n",
                    "message": "Parameter '_node' of LinkedListLib.remove (InteractiveCrowdsaleLib.sol#926) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.push (InteractiveCrowdsaleLib.sol#938) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.push (InteractiveCrowdsaleLib.sol#938) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 945,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.pop (InteractiveCrowdsaleLib.sol#945) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1099) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1100) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _priceBonusPercent,\n",
                    "message": "Parameter '_priceBonusPercent' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _minimumRaise,\n",
                    "message": "Parameter '_minimumRaise' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endWithdrawalTime,\n",
                    "message": "Parameter '_endWithdrawalTime' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBeingSold,\n",
                    "message": "Parameter '_percentBeingSold' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1105) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _tokenName,\n",
                    "message": "Parameter '_tokenName' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1106) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _tokenDecimals,\n",
                    "message": "Parameter '_tokenDecimals' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting) public\n",
                    "message": "Parameter '_allowMinting' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleLib.sol#1109) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function numDigits(uint256 _number) public pure returns (uint256) {\n",
                    "message": "Parameter '_number' of InteractiveCrowdsaleLib.numDigits (InteractiveCrowdsaleLib.sol#1138) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateTokenPurchase(uint256 _amount,\n",
                    "message": "Parameter '_amount' of InteractiveCrowdsaleLib.calculateTokenPurchase (InteractiveCrowdsaleLib.sol#1153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                  uint256 _price)\n",
                    "message": "Parameter '_price' of InteractiveCrowdsaleLib.calculateTokenPurchase (InteractiveCrowdsaleLib.sol#1154) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                      uint256 _amount,\n",
                    "message": "Parameter '_amount' of InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleLib.sol#1201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                      uint256 _personalCap,\n",
                    "message": "Parameter '_personalCap' of InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleLib.sol#1202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                      uint256 _valuePredict) public returns (bool)\n",
                    "message": "Parameter '_valuePredict' of InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleLib.sol#1203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1601,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPersonalCap(InteractiveCrowdsaleStorage storage self, address _bidder) internal view returns (uint256) {\n",
                    "message": "Parameter '_bidder' of InteractiveCrowdsaleLib.getPersonalCap (InteractiveCrowdsaleLib.sol#1601) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 constant NULL = 0;\n",
                    "message": "InteractiveCrowdsaleLib.NULL (InteractiveCrowdsaleLib.sol#997) is never used in InteractiveCrowdsaleLib\nInteractiveCrowdsaleLib.HEAD (InteractiveCrowdsaleLib.sol#998) is never used in InteractiveCrowdsaleLib\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeSale(InteractiveCrowdsaleStorage storage self) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 846,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (i != HEAD) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 894,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while(_proposedCommit >= _currentBucket){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while(_proposedCommit <= _currentBucket){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 765,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 957,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                  returns (uint256,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _tokenName,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _tokenSymbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant NULL = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant HEAD = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant PREV = false;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant NEXT = true;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 constant NULL = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 constant HEAD = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 999,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool constant PREV = false;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1000,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool constant NEXT = true;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/IICOLib/truffle/contracts/LinkedListLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (self.list[HEAD][NEXT] == _node) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 c = self.list[_node][_direction];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _node, _new, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _new, c, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            numElements++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in LinkedListLib.sol:\n\t- pragma solidity^0.4.18 (LinkedListLib.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nodeExists(LinkedList storage self, uint256 _node) \n",
                    "message": "Parameter '_node' of LinkedListLib.nodeExists (LinkedListLib.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getNode(LinkedList storage self, uint256 _node)\n",
                    "message": "Parameter '_node' of LinkedListLib.getNode (LinkedListLib.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getAdjacent (LinkedListLib.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getAdjacent (LinkedListLib.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getSortedSpot (LinkedListLib.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_value' of LinkedListLib.getSortedSpot (LinkedListLib.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getSortedSpot (LinkedListLib.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.createLink (LinkedListLib.sol#140) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_link' of LinkedListLib.createLink (LinkedListLib.sol#140) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.createLink (LinkedListLib.sol#140) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_node' of LinkedListLib.insert (LinkedListLib.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_new' of LinkedListLib.insert (LinkedListLib.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.insert (LinkedListLib.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\n",
                    "message": "Parameter '_node' of LinkedListLib.remove (LinkedListLib.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.push (LinkedListLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.push (LinkedListLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.pop (LinkedListLib.sol#183) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (i != HEAD) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant NULL = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant HEAD = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant PREV = false;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant NEXT = true;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/IICOLib/truffle/contracts/InteractiveCrowdsaleTestContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.personalCaps[msg.sender] == 0) && (self.base.hasContributed[msg.sender] == 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 681,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 829,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (self.list[HEAD][NEXT] == _node) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 831,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 833,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 834,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 836,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 913,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 914,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 c = self.list[_node][_direction];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _node, _new, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _new, c, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 917,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 918,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 920,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            numElements++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _digits++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_36"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (InteractiveCrowdsaleTestContract.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (InteractiveCrowdsaleTestContract.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (InteractiveCrowdsaleTestContract.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (InteractiveCrowdsaleTestContract.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _proposedValue;\n",
                    "message": "_proposedValue in InteractiveCrowdsaleLib.withdrawBid (InteractiveCrowdsaleTestContract.sol#1364) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool loop;\n",
                    "message": "loop in InteractiveCrowdsaleLib.withdrawBid (InteractiveCrowdsaleTestContract.sol#1366) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (InteractiveCrowdsaleTestContract.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool loop;\n",
                    "message": "loop in InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleTestContract.sol#1250) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 741,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 index;\n",
                    "message": "index in CrowdsaleLib.getSaleData (InteractiveCrowdsaleTestContract.sol#741) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _bonusPercent;\n",
                    "message": "_bonusPercent in InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleTestContract.sol#1210) is a local variable never initialiazed\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1200,
                    "vulnerability_to_line": 1307,
                    "vulnerability_code": "  function submitBid(InteractiveCrowdsaleStorage storage self,\n\n                      uint256 _amount,\n\n                      uint256 _personalCap,\n\n                      uint256 _valuePredict) public returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    // bidder can't have already bid\n\n    require((self.personalCaps[msg.sender] == 0) && (self.base.hasContributed[msg.sender] == 0));\n\n\n\n    uint256 _bonusPercent;\n\n    // token purchase bonus only applies before the withdrawal lock\n\n    if (now < self.endWithdrawalTime) {\n\n      require(_personalCap > _amount);\n\n      _bonusPercent = getCurrentBonus(self);\n\n    } else {\n\n      // The personal valuation submitted must be greater than the current\n\n      // valuation plus the bid if after the withdrawal lock.\n\n      require(_personalCap >= self.totalValuation + _amount);\n\n    }\n\n\n\n    // personal valuation and minimum should be set to the proper granularity,\n\n    // only three most significant values can be non-zero. reduces the number of possible\n\n    // valuation buckets in the linked list\n\n    uint256 digits = numDigits(_personalCap);\n\n    if(digits > 3) {\n\n      require((_personalCap % (10**(digits - 3))) == 0);\n\n    }\n\n\n\n    // add the bid to the sorted valuations list\n\n    // duplicate personal valuation caps share a spot in the linked list\n\n    uint256 _listSpot;\n\n    if(!self.valuationsList.nodeExists(_personalCap)){\n\n        _listSpot = self.valuationsList.getSortedSpot(_valuePredict,_personalCap,NEXT);\n\n        self.valuationsList.insert(_listSpot,_personalCap,PREV);\n\n    }\n\n\n\n    // add the bid to the address => cap mapping\n\n    self.personalCaps[msg.sender] = _personalCap;\n\n\n\n    // add the bid to the sum of bids at this valuation. Needed for calculating correct valuation pointer\n\n    self.valuationSums[_personalCap] += _amount;\n\n    self.numBidsAtValuation[_personalCap] += 1;\n\n\n\n    // add the bid to bidder's contribution amount\n\n    self.base.hasContributed[msg.sender] += _amount;\n\n\n\n    // temp variables for calculation\n\n    uint256 _proposedCommit;\n\n    uint256 _currentBucket;\n\n    bool loop;\n\n    bool exists;\n\n\n\n    // we only affect the pointer if we are coming in above it\n\n    if(_personalCap > self.currentBucket){\n\n\n\n      // if our valuation is sitting at the current bucket then we are using\n\n      // commitments right at their cap\n\n      if (self.totalValuation == self.currentBucket) {\n\n        // we are going to drop those commitments to see if we are going to be\n\n        // greater than the current bucket without them\n\n        _proposedCommit = (self.valueCommitted - self.valuationSums[self.currentBucket]) + _amount;\n\n        if(_proposedCommit > self.currentBucket){ loop = true; }\n\n      } else {\n\n        // else we're sitting in between buckets and have already dropped the\n\n        // previous commitments\n\n        _proposedCommit = self.totalValuation + _amount;\n\n        loop = true;\n\n      }\n\n\n\n      if(loop){\n\n        // if we're going to loop we move to the next bucket\n\n        (exists,_currentBucket) = self.valuationsList.getAdjacent(self.currentBucket, NEXT);\n\n\n\n        while(_proposedCommit >= _currentBucket){\n\n          // while we are proposed higher than the next bucket we drop commitments\n\n          // and iterate to the next\n\n          _proposedCommit = _proposedCommit - self.valuationSums[_currentBucket];\n\n          (exists,_currentBucket) = self.valuationsList.getAdjacent(_currentBucket, NEXT);\n\n        }\n\n        // once we've reached a bucket too high we move back to the last bucket and set it\n\n        (exists, _currentBucket) = self.valuationsList.getAdjacent(_currentBucket, PREV);\n\n        self.currentBucket = _currentBucket;\n\n      } else {\n\n        // else we're staying at the current bucket\n\n        _currentBucket = self.currentBucket;\n\n      }\n\n      // if our proposed commitment is less than or equal to the bucket\n\n      if(_proposedCommit <= _currentBucket){\n\n        // we add the commitments in that bucket\n\n        _proposedCommit += self.valuationSums[_currentBucket];\n\n        // and our value is capped at that bucket\n\n        self.totalValuation = _currentBucket;\n\n      } else {\n\n        // else our total value is in between buckets and it equals the total commitements\n\n        self.totalValuation = _proposedCommit;\n\n      }\n\n\n\n      self.valueCommitted = _proposedCommit;\n\n    } else if(_personalCap == self.totalValuation){\n\n      self.valueCommitted += _amount;\n\n    }\n\n\n\n    self.pricePurchasedAt[msg.sender] = (self.base.tokensPerEth * (100 + _bonusPercent))/100;\n\n    LogBidAccepted(msg.sender, _amount, _personalCap);\n\n    BucketAndValuationAndCommitted(self.currentBucket, self.totalValuation, self.valueCommitted);\n\n    return true;\n",
                    "message": "InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleTestContract.sol#1200-1307) does not use the value returned by external calls:\n\t-self.valuationsList.insert(_listSpot,_personalCap,PREV) (InteractiveCrowdsaleTestContract.sol#1234)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1456,
                    "vulnerability_to_line": 1490,
                    "vulnerability_code": "  function launchToken(InteractiveCrowdsaleStorage storage self) internal returns (bool) {\n\n    // total valuation of all the tokens not including the bonus\n\n    uint256 _fullValue = (self.totalValuation*100)/uint256(self.percentBeingSold);\n\n    // total valuation of bonus tokens\n\n    uint256 _bonusValue = ((self.totalValuation * (100 + self.priceBonusPercent))/100) - self.totalValuation;\n\n    // total supply of all tokens not including the bonus\n\n    uint256 _supply = (_fullValue * self.base.tokensPerEth)/1000000000000000000;\n\n    // total number of bonus tokens\n\n    uint256 _bonusTokens = (_bonusValue * self.base.tokensPerEth)/1000000000000000000;\n\n    // tokens allocated to the owner of the sale\n\n    uint256 _ownerTokens = _supply - ((_supply * uint256(self.percentBeingSold))/100);\n\n    // total supply of tokens not including the bonus tokens\n\n    uint256 _totalSupply = _supply + _bonusTokens;\n\n\n\n    // deploy new token contract with total number of tokens\n\n    self.base.token = new CrowdsaleToken(address(this),\n\n                                         self.tokenInfo.name,\n\n                                         self.tokenInfo.symbol,\n\n                                         self.tokenInfo.decimals,\n\n                                         _totalSupply,\n\n                                         self.tokenInfo.stillMinting);\n\n\n\n    // if the sale got canceled, then all the tokens go to the owner and bonus tokens are burned\n\n    if(!self.isCanceled){\n\n      self.base.token.transfer(self.base.owner, _ownerTokens);\n\n    } else {\n\n      self.base.token.transfer(self.base.owner, _supply);\n\n      self.base.token.burnToken(_bonusTokens);\n\n    }\n\n    // the owner of the crowdsale becomes the new owner of the token contract\n\n    self.base.token.changeOwner(self.base.owner);\n\n    self.base.startingTokenBalance = _supply - _ownerTokens;\n\n\n\n    return true;\n",
                    "message": "InteractiveCrowdsaleLib.launchToken (InteractiveCrowdsaleTestContract.sol#1456-1490) does not use the value returned by external calls:\n\t-self.base.token.transfer(self.base.owner,_ownerTokens) (InteractiveCrowdsaleTestContract.sol#1480)\n\t-self.base.token.transfer(self.base.owner,_supply) (InteractiveCrowdsaleTestContract.sol#1482)\n\t-self.base.token.burnToken(_bonusTokens) (InteractiveCrowdsaleTestContract.sol#1483)\n\t-self.base.token.changeOwner(self.base.owner) (InteractiveCrowdsaleTestContract.sol#1486)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1509,
                    "vulnerability_to_line": 1577,
                    "vulnerability_code": "  function retreiveFinalResult(InteractiveCrowdsaleStorage storage self) public returns (bool) {\n\n    require(now > self.base.endTime);\n\n    require(self.personalCaps[msg.sender] > 0);\n\n\n\n    uint256 numTokens;\n\n    uint256 remainder;\n\n\n\n    if(!self.isFinalized){\n\n      require(setCanceled(self));\n\n      require(self.isCanceled);\n\n    }\n\n\n\n    if (self.isCanceled) {\n\n      // if the sale was canceled, everyone gets a full refund\n\n      self.base.leftoverWei[msg.sender] += self.base.hasContributed[msg.sender];\n\n      self.base.hasContributed[msg.sender] = 0;\n\n      LogErrorMsg(self.totalValuation, \"Sale is canceled, all bids have been refunded!\");\n\n      return true;\n\n    }\n\n\n\n    if (self.personalCaps[msg.sender] < self.totalValuation) {\n\n\n\n      // full refund if personal cap is less than total valuation\n\n      self.base.leftoverWei[msg.sender] += self.base.hasContributed[msg.sender];\n\n\n\n      // set hasContributed to 0 to prevent participant from calling this over and over\n\n      self.base.hasContributed[msg.sender] = 0;\n\n\n\n      return self.base.withdrawLeftoverWei();\n\n\n\n    } else if (self.personalCaps[msg.sender] == self.totalValuation) {\n\n\n\n      // calculate the portion that this address has to take out of their bid\n\n      uint256 refundAmount = (self.q*self.base.hasContributed[msg.sender])/100;\n\n\n\n      // refund that amount of wei to the address\n\n      self.base.leftoverWei[msg.sender] += refundAmount;\n\n\n\n      // subtract that amount the address' contribution\n\n      self.base.hasContributed[msg.sender] -= refundAmount;\n\n    }\n\n\n\n    LogErrorMsg(self.base.hasContributed[msg.sender],\"contribution\");\n\n    LogErrorMsg(self.pricePurchasedAt[msg.sender],\"price\");\n\n    LogErrorMsg(self.q,\"percentage\");\n\n    // calculate the number of tokens that the bidder purchased\n\n    (numTokens, remainder) = calculateTokenPurchase(self.base.hasContributed[msg.sender],\n\n                                                    self.pricePurchasedAt[msg.sender]);\n\n\n\n    // add tokens to the bidders purchase.  can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += numTokens;\n\n    self.valueCommitted = self.valueCommitted - remainder;\n\n    self.base.leftoverWei[msg.sender] += remainder;\n\n\n\n    // burn any extra bonus tokens\n\n    uint256 _fullBonus;\n\n    uint256 _fullBonusPrice = (self.base.tokensPerEth*(100 + self.priceBonusPercent))/100;\n\n    (_fullBonus, remainder) = calculateTokenPurchase(self.base.hasContributed[msg.sender], _fullBonusPrice);\n\n    uint256 _leftoverBonus = _fullBonus - numTokens;\n\n    self.base.token.burnToken(_leftoverBonus);\n\n\n\n    self.base.hasContributed[msg.sender] = 0;\n\n\n\n    // send tokens and leftoverWei to the address calling the function\n\n    self.base.withdrawTokens();\n\n\n\n    self.base.withdrawLeftoverWei();\n\n\n",
                    "message": "InteractiveCrowdsaleLib.retreiveFinalResult (InteractiveCrowdsaleTestContract.sol#1509-1577) does not use the value returned by external calls:\n\t-self.base.token.burnToken(_leftoverBonus) (InteractiveCrowdsaleTestContract.sol#1568)\n\t-self.base.withdrawTokens() (InteractiveCrowdsaleTestContract.sol#1573)\n\t-self.base.withdrawLeftoverWei() (InteractiveCrowdsaleTestContract.sol#1575)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ InteractiveCrowdsaleTestContract.sol#406) shadows:\n\t- CrowdsaleToken.name (function @ InteractiveCrowdsaleTestContract.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ InteractiveCrowdsaleTestContract.sol#407) shadows:\n\t- CrowdsaleToken.symbol (function @ InteractiveCrowdsaleTestContract.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ InteractiveCrowdsaleTestContract.sol#408) shadows:\n\t- CrowdsaleToken.decimals (function @ InteractiveCrowdsaleTestContract.sol#423-425)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ InteractiveCrowdsaleTestContract.sol#409) shadows:\n\t- CrowdsaleToken.initialSupply (function @ InteractiveCrowdsaleTestContract.sol#431-433)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (InteractiveCrowdsaleTestContract.sol#40-49)\n\t- InteractiveCrowdsaleTestContract.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (InteractiveCrowdsaleTestContract.sol#57-72)\n\t- InteractiveCrowdsaleTestContract.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (InteractiveCrowdsaleTestContract.sol#80-89)\n\t- InteractiveCrowdsaleTestContract.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (InteractiveCrowdsaleTestContract.sol#97-106)\n\t- InteractiveCrowdsaleTestContract.sol#98-106\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in InteractiveCrowdsaleTestContract.sol:\n\t- Version used: ['^0.4.15', '^0.4.18']\n\t- InteractiveCrowdsaleTestContract.sol#3 declares pragma solidity^0.4.18\n\t- InteractiveCrowdsaleTestContract.sol#111 declares pragma solidity^0.4.18\n\t- InteractiveCrowdsaleTestContract.sol#370 declares pragma solidity^0.4.15\n\t- InteractiveCrowdsaleTestContract.sol#480 declares pragma solidity^0.4.18\n\t- InteractiveCrowdsaleTestContract.sol#765 declares pragma solidity^0.4.18\n\t- InteractiveCrowdsaleTestContract.sol#957 declares pragma solidity^0.4.18\n\t- InteractiveCrowdsaleTestContract.sol#1613 declares pragma solidity^0.4.18\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (InteractiveCrowdsaleTestContract.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (InteractiveCrowdsaleTestContract.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (InteractiveCrowdsaleTestContract.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (InteractiveCrowdsaleTestContract.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (InteractiveCrowdsaleTestContract.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (InteractiveCrowdsaleTestContract.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (InteractiveCrowdsaleTestContract.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (InteractiveCrowdsaleTestContract.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (InteractiveCrowdsaleTestContract.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (InteractiveCrowdsaleTestContract.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (InteractiveCrowdsaleTestContract.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (InteractiveCrowdsaleTestContract.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (InteractiveCrowdsaleTestContract.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (InteractiveCrowdsaleTestContract.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (InteractiveCrowdsaleTestContract.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (InteractiveCrowdsaleTestContract.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (InteractiveCrowdsaleTestContract.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (InteractiveCrowdsaleTestContract.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (InteractiveCrowdsaleTestContract.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (InteractiveCrowdsaleTestContract.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (InteractiveCrowdsaleTestContract.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (InteractiveCrowdsaleTestContract.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transfer(address to, uint value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (InteractiveCrowdsaleTestContract.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (InteractiveCrowdsaleTestContract.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 453,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (InteractiveCrowdsaleTestContract.sol#451-453) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public returns (bool ok)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (InteractiveCrowdsaleTestContract.sol#455-459) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 463,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (InteractiveCrowdsaleTestContract.sol#461-463) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "  function mintToken(uint256 amount) public returns (bool ok) {\n\n    return token.mintToken(amount);\n",
                    "message": "CrowdsaleToken.mintToken (InteractiveCrowdsaleTestContract.sol#465-467) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": 471,
                    "vulnerability_code": "  function closeMint() public returns (bool ok) {\n\n    return token.closeMint();\n",
                    "message": "CrowdsaleToken.closeMint (InteractiveCrowdsaleTestContract.sol#469-471) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": 475,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (InteractiveCrowdsaleTestContract.sol#473-475) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": 599,
                    "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
                    "message": "CrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#567-599) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawTokens (InteractiveCrowdsaleTestContract.sol#631-659) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": 675,
                    "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawLeftoverWei (InteractiveCrowdsaleTestContract.sol#664-675) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": 695,
                    "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawOwnerEth (InteractiveCrowdsaleTestContract.sol#680-695) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 716,
                    "vulnerability_to_line": 729,
                    "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.setTokens (InteractiveCrowdsaleTestContract.sol#716-729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 735,
                    "vulnerability_to_line": 753,
                    "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
                    "message": "CrowdsaleLib.getSaleData (InteractiveCrowdsaleTestContract.sol#735-753) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": 760,
                    "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
                    "message": "CrowdsaleLib.getTokensSold (InteractiveCrowdsaleTestContract.sol#758-760) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1098,
                    "vulnerability_to_line": 1133,
                    "vulnerability_code": "  function init(InteractiveCrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _priceBonusPercent,\n\n                uint256 _minimumRaise,\n\n                uint256 _endWithdrawalTime,\n\n                uint256 _endTime,\n\n                uint8 _percentBeingSold,\n\n                string _tokenName,\n\n                string _tokenSymbol,\n\n                uint8 _tokenDecimals,\n\n                bool _allowMinting) public\n\n  {\n\n    self.base.init(_owner,\n\n                _saleData,\n\n                _endTime,\n\n                0, // no token burning for iico\n\n                CrowdsaleToken(0)); // no tokens created prior to iico\n\n\n\n    require(_endWithdrawalTime < _endTime);\n\n    require(_endWithdrawalTime > _saleData[0]);\n\n    require(_minimumRaise > 0);\n\n    require(_percentBeingSold > 0);\n\n    require(_percentBeingSold <= 100);\n\n    require(_priceBonusPercent > 0);\n\n\n\n    self.minimumRaise = _minimumRaise;\n\n    self.endWithdrawalTime = _endWithdrawalTime;\n\n    self.percentBeingSold = _percentBeingSold;\n\n    self.priceBonusPercent = _priceBonusPercent;\n\n\n\n    self.tokenInfo.name = _tokenName;\n\n    self.tokenInfo.symbol = _tokenSymbol;\n\n    self.tokenInfo.decimals = _tokenDecimals;\n\n    self.tokenInfo.stillMinting = _allowMinting;\n",
                    "message": "InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1098-1133) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1200,
                    "vulnerability_to_line": 1307,
                    "vulnerability_code": "  function submitBid(InteractiveCrowdsaleStorage storage self,\n\n                      uint256 _amount,\n\n                      uint256 _personalCap,\n\n                      uint256 _valuePredict) public returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    // bidder can't have already bid\n\n    require((self.personalCaps[msg.sender] == 0) && (self.base.hasContributed[msg.sender] == 0));\n\n\n\n    uint256 _bonusPercent;\n\n    // token purchase bonus only applies before the withdrawal lock\n\n    if (now < self.endWithdrawalTime) {\n\n      require(_personalCap > _amount);\n\n      _bonusPercent = getCurrentBonus(self);\n\n    } else {\n\n      // The personal valuation submitted must be greater than the current\n\n      // valuation plus the bid if after the withdrawal lock.\n\n      require(_personalCap >= self.totalValuation + _amount);\n\n    }\n\n\n\n    // personal valuation and minimum should be set to the proper granularity,\n\n    // only three most significant values can be non-zero. reduces the number of possible\n\n    // valuation buckets in the linked list\n\n    uint256 digits = numDigits(_personalCap);\n\n    if(digits > 3) {\n\n      require((_personalCap % (10**(digits - 3))) == 0);\n\n    }\n\n\n\n    // add the bid to the sorted valuations list\n\n    // duplicate personal valuation caps share a spot in the linked list\n\n    uint256 _listSpot;\n\n    if(!self.valuationsList.nodeExists(_personalCap)){\n\n        _listSpot = self.valuationsList.getSortedSpot(_valuePredict,_personalCap,NEXT);\n\n        self.valuationsList.insert(_listSpot,_personalCap,PREV);\n\n    }\n\n\n\n    // add the bid to the address => cap mapping\n\n    self.personalCaps[msg.sender] = _personalCap;\n\n\n\n    // add the bid to the sum of bids at this valuation. Needed for calculating correct valuation pointer\n\n    self.valuationSums[_personalCap] += _amount;\n\n    self.numBidsAtValuation[_personalCap] += 1;\n\n\n\n    // add the bid to bidder's contribution amount\n\n    self.base.hasContributed[msg.sender] += _amount;\n\n\n\n    // temp variables for calculation\n\n    uint256 _proposedCommit;\n\n    uint256 _currentBucket;\n\n    bool loop;\n\n    bool exists;\n\n\n\n    // we only affect the pointer if we are coming in above it\n\n    if(_personalCap > self.currentBucket){\n\n\n\n      // if our valuation is sitting at the current bucket then we are using\n\n      // commitments right at their cap\n\n      if (self.totalValuation == self.currentBucket) {\n\n        // we are going to drop those commitments to see if we are going to be\n\n        // greater than the current bucket without them\n\n        _proposedCommit = (self.valueCommitted - self.valuationSums[self.currentBucket]) + _amount;\n\n        if(_proposedCommit > self.currentBucket){ loop = true; }\n\n      } else {\n\n        // else we're sitting in between buckets and have already dropped the\n\n        // previous commitments\n\n        _proposedCommit = self.totalValuation + _amount;\n\n        loop = true;\n\n      }\n\n\n\n      if(loop){\n\n        // if we're going to loop we move to the next bucket\n\n        (exists,_currentBucket) = self.valuationsList.getAdjacent(self.currentBucket, NEXT);\n\n\n\n        while(_proposedCommit >= _currentBucket){\n\n          // while we are proposed higher than the next bucket we drop commitments\n\n          // and iterate to the next\n\n          _proposedCommit = _proposedCommit - self.valuationSums[_currentBucket];\n\n          (exists,_currentBucket) = self.valuationsList.getAdjacent(_currentBucket, NEXT);\n\n        }\n\n        // once we've reached a bucket too high we move back to the last bucket and set it\n\n        (exists, _currentBucket) = self.valuationsList.getAdjacent(_currentBucket, PREV);\n\n        self.currentBucket = _currentBucket;\n\n      } else {\n\n        // else we're staying at the current bucket\n\n        _currentBucket = self.currentBucket;\n\n      }\n\n      // if our proposed commitment is less than or equal to the bucket\n\n      if(_proposedCommit <= _currentBucket){\n\n        // we add the commitments in that bucket\n\n        _proposedCommit += self.valuationSums[_currentBucket];\n\n        // and our value is capped at that bucket\n\n        self.totalValuation = _currentBucket;\n\n      } else {\n\n        // else our total value is in between buckets and it equals the total commitements\n\n        self.totalValuation = _proposedCommit;\n\n      }\n\n\n\n      self.valueCommitted = _proposedCommit;\n\n    } else if(_personalCap == self.totalValuation){\n\n      self.valueCommitted += _amount;\n\n    }\n\n\n\n    self.pricePurchasedAt[msg.sender] = (self.base.tokensPerEth * (100 + _bonusPercent))/100;\n\n    LogBidAccepted(msg.sender, _amount, _personalCap);\n\n    BucketAndValuationAndCommitted(self.currentBucket, self.totalValuation, self.valueCommitted);\n\n    return true;\n",
                    "message": "InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleTestContract.sol#1200-1307) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": 1423,
                    "vulnerability_code": "  function withdrawBid(InteractiveCrowdsaleStorage storage self) public returns (bool) {\n\n    // The sender has to have already bid on the sale\n\n    require(self.personalCaps[msg.sender] > 0);\n\n\n\n    uint256 refundWei;\n\n    // cannot withdraw after compulsory withdraw period is over unless the bid's\n\n    // valuation is below the cutoff\n\n    if (now >= self.endWithdrawalTime) {\n\n      require(self.personalCaps[msg.sender] < self.totalValuation);\n\n\n\n      // full refund because their bid no longer affects the total sale valuation\n\n      refundWei = self.base.hasContributed[msg.sender];\n\n\n\n    } else {\n\n      require(!self.hasManuallyWithdrawn[msg.sender]);  // manual withdrawals are only allowed once\n\n      /***********************************************************************\n\n      The following lines were commented out due to stack depth, but they represent\n\n      the variables and calculations from the paper. The actual code is the same\n\n      thing spelled out using current variables.  See section 4 of the white paper for formula used\n\n      ************************************************************************/\n\n      //uint256 t = self.endWithdrawalTime - self.base.startTime;\n\n      //uint256 s = now - self.base.startTime;\n\n      //uint256 pa = self.pricePurchasedAt[msg.sender];\n\n      //uint256 pu = self.base.tokensPerEth;\n\n      //uint256 multiplierPercent =  (100*(t - s))/t;\n\n      //self.pricePurchasedAt = pa-((pa-pu)/3)\n\n\n\n      uint256 multiplierPercent = (100 * (self.endWithdrawalTime - now)) /\n\n                                  (self.endWithdrawalTime - self.base.startTime);\n\n      refundWei = (multiplierPercent * self.base.hasContributed[msg.sender]) / 100;\n\n\n\n// SWC-Integer Overflow and Underflow: L392 - L393\n\n      self.valuationSums[self.personalCaps[msg.sender]] -= refundWei;\n\n      self.numBidsAtValuation[self.personalCaps[msg.sender]] -= 1;\n\n\n\n      self.pricePurchasedAt[msg.sender] = self.pricePurchasedAt[msg.sender] -\n\n                                          ((self.pricePurchasedAt[msg.sender] - self.base.tokensPerEth) / 3);\n\n\n\n      self.hasManuallyWithdrawn[msg.sender] = true;\n\n\n\n    }\n\n\n\n    // Put the sender's contributed wei into the leftoverWei mapping for later withdrawal\n\n    self.base.leftoverWei[msg.sender] += refundWei;\n\n\n\n    // subtract the bidder's refund from its total contribution\n\n    self.base.hasContributed[msg.sender] -= refundWei;\n\n\n\n\n\n    uint256 _proposedCommit;\n\n    uint256 _proposedValue;\n\n    uint256 _currentBucket;\n\n    bool loop;\n\n    bool exists;\n\n\n\n    // bidder's withdrawal only affects the pointer if the personal cap is at or\n\n    // above the current valuation\n\n    if(self.personalCaps[msg.sender] >= self.totalValuation){\n\n\n\n      // first we remove the refundWei from the committed value\n\n      _proposedCommit = self.valueCommitted - refundWei;\n\n\n\n      // if we've dropped below the current bucket\n\n      if(_proposedCommit <= self.currentBucket){\n\n        // and current valuation is above the bucket\n\n        if(self.totalValuation > self.currentBucket){\n\n          _proposedCommit += self.valuationSums[self.currentBucket];\n\n        }\n\n\n\n        if(_proposedCommit >= self.currentBucket){\n\n          _proposedValue = self.currentBucket;\n\n        } else {\n\n          // if we are still below the current bucket then we need to iterate\n\n          loop = true;\n\n        }\n\n      } else {\n\n        if(self.totalValuation == self.currentBucket){\n\n          _proposedValue = self.totalValuation;\n\n        } else {\n\n          _proposedValue = _proposedCommit;\n\n        }\n\n      }\n\n\n\n      if(loop){\n\n        // if we're going to loop we move to the previous bucket\n\n        (exists,_currentBucket) = self.valuationsList.getAdjacent(self.currentBucket, PREV);\n\n        while(_proposedCommit <= _currentBucket){\n\n          // while we are proposed lower than the previous bucket we add commitments\n\n          _proposedCommit += self.valuationSums[_currentBucket];\n\n          // and iterate to the previous\n\n          if(_proposedCommit >= _currentBucket){\n\n            _proposedValue = _currentBucket;\n\n          } else {\n\n            (exists,_currentBucket) = self.valuationsList.getAdjacent(_currentBucket, PREV);\n\n          }\n\n        }\n\n\n\n        if(_proposedValue == 0) { _proposedValue = _proposedCommit; }\n\n\n\n        self.currentBucket = _currentBucket;\n\n      }\n\n\n\n      self.totalValuation = _proposedValue;\n\n      self.valueCommitted = _proposedCommit;\n\n    }\n\n\n\n    LogBidWithdrawn(msg.sender, refundWei, self.personalCaps[msg.sender]);\n\n    BucketAndValuationAndCommitted(self.currentBucket, self.totalValuation, self.valueCommitted);\n\n    return true;\n",
                    "message": "InteractiveCrowdsaleLib.withdrawBid (InteractiveCrowdsaleTestContract.sol#1314-1423) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1428,
                    "vulnerability_to_line": 1450,
                    "vulnerability_code": "  function finalizeSale(InteractiveCrowdsaleStorage storage self) public returns (bool) {\n\n    require(now >= self.base.endTime);\n\n    require(!self.isFinalized); // can only be called once\n\n    require(setCanceled(self));\n\n\n\n    self.isFinalized = true;\n\n    require(launchToken(self));\n\n    // may need to be computed due to EVM rounding errors\n\n    uint256 computedValue;\n\n\n\n    if(!self.isCanceled){\n\n      if(self.totalValuation == self.currentBucket){\n\n        // calculate the fraction of each minimal valuation bidders ether and tokens to refund\n\n        self.q = (100*(self.valueCommitted - self.totalValuation)/(self.valuationSums[self.totalValuation])) + 1;\n\n        computedValue = self.valueCommitted - self.valuationSums[self.totalValuation];\n\n        computedValue += (self.q * self.valuationSums[self.totalValuation])/100;\n\n      } else {\n\n        // no computation necessary\n\n        computedValue = self.totalValuation;\n\n      }\n\n      self.base.ownerBalance = computedValue;  // sets ETH raised in the sale to be ready for withdrawal\n\n    }\n",
                    "message": "InteractiveCrowdsaleLib.finalizeSale (InteractiveCrowdsaleTestContract.sol#1428-1450) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1509,
                    "vulnerability_to_line": 1577,
                    "vulnerability_code": "  function retreiveFinalResult(InteractiveCrowdsaleStorage storage self) public returns (bool) {\n\n    require(now > self.base.endTime);\n\n    require(self.personalCaps[msg.sender] > 0);\n\n\n\n    uint256 numTokens;\n\n    uint256 remainder;\n\n\n\n    if(!self.isFinalized){\n\n      require(setCanceled(self));\n\n      require(self.isCanceled);\n\n    }\n\n\n\n    if (self.isCanceled) {\n\n      // if the sale was canceled, everyone gets a full refund\n\n      self.base.leftoverWei[msg.sender] += self.base.hasContributed[msg.sender];\n\n      self.base.hasContributed[msg.sender] = 0;\n\n      LogErrorMsg(self.totalValuation, \"Sale is canceled, all bids have been refunded!\");\n\n      return true;\n\n    }\n\n\n\n    if (self.personalCaps[msg.sender] < self.totalValuation) {\n\n\n\n      // full refund if personal cap is less than total valuation\n\n      self.base.leftoverWei[msg.sender] += self.base.hasContributed[msg.sender];\n\n\n\n      // set hasContributed to 0 to prevent participant from calling this over and over\n\n      self.base.hasContributed[msg.sender] = 0;\n\n\n\n      return self.base.withdrawLeftoverWei();\n\n\n\n    } else if (self.personalCaps[msg.sender] == self.totalValuation) {\n\n\n\n      // calculate the portion that this address has to take out of their bid\n\n      uint256 refundAmount = (self.q*self.base.hasContributed[msg.sender])/100;\n\n\n\n      // refund that amount of wei to the address\n\n      self.base.leftoverWei[msg.sender] += refundAmount;\n\n\n\n      // subtract that amount the address' contribution\n\n      self.base.hasContributed[msg.sender] -= refundAmount;\n\n    }\n\n\n\n    LogErrorMsg(self.base.hasContributed[msg.sender],\"contribution\");\n\n    LogErrorMsg(self.pricePurchasedAt[msg.sender],\"price\");\n\n    LogErrorMsg(self.q,\"percentage\");\n\n    // calculate the number of tokens that the bidder purchased\n\n    (numTokens, remainder) = calculateTokenPurchase(self.base.hasContributed[msg.sender],\n\n                                                    self.pricePurchasedAt[msg.sender]);\n\n\n\n    // add tokens to the bidders purchase.  can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += numTokens;\n\n    self.valueCommitted = self.valueCommitted - remainder;\n\n    self.base.leftoverWei[msg.sender] += remainder;\n\n\n\n    // burn any extra bonus tokens\n\n    uint256 _fullBonus;\n\n    uint256 _fullBonusPrice = (self.base.tokensPerEth*(100 + self.priceBonusPercent))/100;\n\n    (_fullBonus, remainder) = calculateTokenPurchase(self.base.hasContributed[msg.sender], _fullBonusPrice);\n\n    uint256 _leftoverBonus = _fullBonus - numTokens;\n\n    self.base.token.burnToken(_leftoverBonus);\n\n\n\n    self.base.hasContributed[msg.sender] = 0;\n\n\n\n    // send tokens and leftoverWei to the address calling the function\n\n    self.base.withdrawTokens();\n\n\n\n    self.base.withdrawLeftoverWei();\n\n\n",
                    "message": "InteractiveCrowdsaleLib.retreiveFinalResult (InteractiveCrowdsaleTestContract.sol#1509-1577) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1655,
                    "vulnerability_to_line": 1657,
                    "vulnerability_code": "  function () public {\n\n    LogErrorMsg(0, 'Did not send correct data!');\n",
                    "message": "InteractiveCrowdsaleTestContract.fallback (InteractiveCrowdsaleTestContract.sol#1655-1657) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1659,
                    "vulnerability_to_line": 1661,
                    "vulnerability_code": "  function submitBid(uint256 _personalValuation, uint256 _listPredict) payable public returns (bool) {\n\n    return sale.submitBid(msg.value, _personalValuation, _listPredict);\n",
                    "message": "InteractiveCrowdsaleTestContract.submitBid (InteractiveCrowdsaleTestContract.sol#1659-1661) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1663,
                    "vulnerability_to_line": 1665,
                    "vulnerability_code": "  function withdrawBid() public returns (bool) {\n\n    return sale.withdrawBid();\n",
                    "message": "InteractiveCrowdsaleTestContract.withdrawBid (InteractiveCrowdsaleTestContract.sol#1663-1665) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1667,
                    "vulnerability_to_line": 1669,
                    "vulnerability_code": "  function withdrawLeftoverWei() public returns (bool) {\n\n    return sale.withdrawLeftoverWei();\n",
                    "message": "InteractiveCrowdsaleTestContract.withdrawLeftoverWei (InteractiveCrowdsaleTestContract.sol#1667-1669) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1671,
                    "vulnerability_to_line": 1673,
                    "vulnerability_code": "  function retreiveFinalResult() public returns (bool) {\n\n    return sale.retreiveFinalResult();\n",
                    "message": "InteractiveCrowdsaleTestContract.retreiveFinalResult (InteractiveCrowdsaleTestContract.sol#1671-1673) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1675,
                    "vulnerability_to_line": 1677,
                    "vulnerability_code": "  function finalizeSale() public returns (bool) {\n\n    return sale.finalizeSale();\n",
                    "message": "InteractiveCrowdsaleTestContract.finalizeSale (InteractiveCrowdsaleTestContract.sol#1675-1677) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1679,
                    "vulnerability_to_line": 1681,
                    "vulnerability_code": "  function withdrawOwnerEth() public returns (bool) {\n\n  \treturn sale.withdrawOwnerEth();\n",
                    "message": "InteractiveCrowdsaleTestContract.withdrawOwnerEth (InteractiveCrowdsaleTestContract.sol#1679-1681) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1683,
                    "vulnerability_to_line": 1685,
                    "vulnerability_code": "  function crowdsaleActive() public view returns (bool) {\n\n  \treturn sale.crowdsaleActive();\n",
                    "message": "InteractiveCrowdsaleTestContract.crowdsaleActive (InteractiveCrowdsaleTestContract.sol#1683-1685) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1687,
                    "vulnerability_to_line": 1689,
                    "vulnerability_code": "  function crowdsaleEnded() public view returns (bool) {\n\n  \treturn sale.crowdsaleEnded();\n",
                    "message": "InteractiveCrowdsaleTestContract.crowdsaleEnded (InteractiveCrowdsaleTestContract.sol#1687-1689) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1691,
                    "vulnerability_to_line": 1693,
                    "vulnerability_code": "  function getOwner() public view returns (address) {\n\n    return sale.base.owner;\n",
                    "message": "InteractiveCrowdsaleTestContract.getOwner (InteractiveCrowdsaleTestContract.sol#1691-1693) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1695,
                    "vulnerability_to_line": 1697,
                    "vulnerability_code": "  function getTokensPerEth() public view returns (uint256) {\n\n    return sale.base.tokensPerEth;\n",
                    "message": "InteractiveCrowdsaleTestContract.getTokensPerEth (InteractiveCrowdsaleTestContract.sol#1695-1697) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1699,
                    "vulnerability_to_line": 1701,
                    "vulnerability_code": "  function getStartTime() public view returns (uint256) {\n\n    return sale.base.startTime;\n",
                    "message": "InteractiveCrowdsaleTestContract.getStartTime (InteractiveCrowdsaleTestContract.sol#1699-1701) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1703,
                    "vulnerability_to_line": 1705,
                    "vulnerability_code": "  function getEndTime() public view returns (uint256) {\n\n    return sale.base.endTime;\n",
                    "message": "InteractiveCrowdsaleTestContract.getEndTime (InteractiveCrowdsaleTestContract.sol#1703-1705) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1707,
                    "vulnerability_to_line": 1709,
                    "vulnerability_code": "  function getMinimumRaise() public view returns (uint256) {\n\n    return sale.minimumRaise;\n",
                    "message": "InteractiveCrowdsaleTestContract.getMinimumRaise (InteractiveCrowdsaleTestContract.sol#1707-1709) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1711,
                    "vulnerability_to_line": 1713,
                    "vulnerability_code": "  function getEndWithdrawlTime() public view returns (uint256) {\n\n    return sale.endWithdrawalTime;\n",
                    "message": "InteractiveCrowdsaleTestContract.getEndWithdrawlTime (InteractiveCrowdsaleTestContract.sol#1711-1713) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1715,
                    "vulnerability_to_line": 1717,
                    "vulnerability_code": "  function getCommittedCapital() public view returns (uint256) {\n\n    return sale.valueCommitted;\n",
                    "message": "InteractiveCrowdsaleTestContract.getCommittedCapital (InteractiveCrowdsaleTestContract.sol#1715-1717) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1719,
                    "vulnerability_to_line": 1721,
                    "vulnerability_code": "  function getContribution(address _buyer) public view returns (uint256) {\n\n    return sale.base.hasContributed[_buyer];\n",
                    "message": "InteractiveCrowdsaleTestContract.getContribution (InteractiveCrowdsaleTestContract.sol#1719-1721) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1723,
                    "vulnerability_to_line": 1725,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) public view returns (uint256) {\n\n    return sale.base.leftoverWei[_buyer];\n",
                    "message": "InteractiveCrowdsaleTestContract.getLeftoverWei (InteractiveCrowdsaleTestContract.sol#1723-1725) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1727,
                    "vulnerability_to_line": 1729,
                    "vulnerability_code": "  function getPersonalCap(address _bidder) public view returns (uint256) {\n\n    return sale.getPersonalCap(_bidder);\n",
                    "message": "InteractiveCrowdsaleTestContract.getPersonalCap (InteractiveCrowdsaleTestContract.sol#1727-1729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1731,
                    "vulnerability_to_line": 1733,
                    "vulnerability_code": "  function getPrice(address _bidder) public view returns (uint256) {\n\n    return sale.pricePurchasedAt[_bidder];\n",
                    "message": "InteractiveCrowdsaleTestContract.getPrice (InteractiveCrowdsaleTestContract.sol#1731-1733) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1735,
                    "vulnerability_to_line": 1737,
                    "vulnerability_code": "  function getTokensSold() public view returns (uint256) {\n\n    return sale.getTokensSold();\n",
                    "message": "InteractiveCrowdsaleTestContract.getTokensSold (InteractiveCrowdsaleTestContract.sol#1735-1737) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1739,
                    "vulnerability_to_line": 1741,
                    "vulnerability_code": "  function getPercentBeingSold() public view returns (uint256) {\n\n    return sale.percentBeingSold;\n",
                    "message": "InteractiveCrowdsaleTestContract.getPercentBeingSold (InteractiveCrowdsaleTestContract.sol#1739-1741) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1743,
                    "vulnerability_to_line": 1745,
                    "vulnerability_code": "  function getCurrentBucket() public view returns (uint256) {\n\n    return sale.currentBucket;\n",
                    "message": "InteractiveCrowdsaleTestContract.getCurrentBucket (InteractiveCrowdsaleTestContract.sol#1743-1745) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1747,
                    "vulnerability_to_line": 1749,
                    "vulnerability_code": "  function getTotalValuation() public view returns (uint256) {\n\n    return sale.totalValuation;\n",
                    "message": "InteractiveCrowdsaleTestContract.getTotalValuation (InteractiveCrowdsaleTestContract.sol#1747-1749) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1751,
                    "vulnerability_to_line": 1753,
                    "vulnerability_code": "  function getTokenAddress() public view returns (address) {\n\n    return address(sale.base.token);\n",
                    "message": "InteractiveCrowdsaleTestContract.getTokenAddress (InteractiveCrowdsaleTestContract.sol#1751-1753) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1755,
                    "vulnerability_to_line": 1757,
                    "vulnerability_code": "  function getValueCommitement(uint256 bucket) public view returns (uint256) {\n\n    return sale.valuationSums[bucket];\n",
                    "message": "InteractiveCrowdsaleTestContract.getValueCommitement (InteractiveCrowdsaleTestContract.sol#1755-1757) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1759,
                    "vulnerability_to_line": 1761,
                    "vulnerability_code": "  function getOwnerBalance() public view returns (uint256) {\n\n    return sale.base.ownerBalance;\n",
                    "message": "InteractiveCrowdsaleTestContract.getOwnerBalance (InteractiveCrowdsaleTestContract.sol#1759-1761) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in InteractiveCrowdsaleTestContract.sol:\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleTestContract.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleTestContract.sol#111): it allows old versions\n\t- pragma solidity^0.4.15 (InteractiveCrowdsaleTestContract.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleTestContract.sol#480): it allows old versions\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleTestContract.sol#765): it allows old versions\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleTestContract.sol#957): it allows old versions\n\t- pragma solidity^0.4.18 (InteractiveCrowdsaleTestContract.sol#1613): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (InteractiveCrowdsaleTestContract.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (InteractiveCrowdsaleTestContract.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (InteractiveCrowdsaleTestContract.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (InteractiveCrowdsaleTestContract.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (InteractiveCrowdsaleTestContract.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (InteractiveCrowdsaleTestContract.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (InteractiveCrowdsaleTestContract.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (InteractiveCrowdsaleTestContract.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (InteractiveCrowdsaleTestContract.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (InteractiveCrowdsaleTestContract.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (InteractiveCrowdsaleTestContract.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (InteractiveCrowdsaleTestContract.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (InteractiveCrowdsaleTestContract.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (InteractiveCrowdsaleTestContract.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (InteractiveCrowdsaleTestContract.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (InteractiveCrowdsaleTestContract.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (InteractiveCrowdsaleTestContract.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (InteractiveCrowdsaleTestContract.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (InteractiveCrowdsaleTestContract.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (InteractiveCrowdsaleTestContract.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (InteractiveCrowdsaleTestContract.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (InteractiveCrowdsaleTestContract.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                          string name,\n\n                          string symbol,\n\n                          uint8 decimals,\n\n                          uint256 initialSupply,\n\n                          bool allowMinting) public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (InteractiveCrowdsaleTestContract.sol#405-413) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of CrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#568) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of CrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#569) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of CrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#570) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of CrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#571) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 572,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of CrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#572) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            uint256 _tokensPerEth)\n",
                    "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (InteractiveCrowdsaleTestContract.sol#702) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nodeExists(LinkedList storage self, uint256 _node) \n",
                    "message": "Parameter '_node' of LinkedListLib.nodeExists (InteractiveCrowdsaleTestContract.sol#825) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 856,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getNode(LinkedList storage self, uint256 _node)\n",
                    "message": "Parameter '_node' of LinkedListLib.getNode (InteractiveCrowdsaleTestContract.sol#856) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getAdjacent (InteractiveCrowdsaleTestContract.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getAdjacent (InteractiveCrowdsaleTestContract.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 886,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getSortedSpot (InteractiveCrowdsaleTestContract.sol#886) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 886,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_value' of LinkedListLib.getSortedSpot (InteractiveCrowdsaleTestContract.sol#886) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 886,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getSortedSpot (InteractiveCrowdsaleTestContract.sol#886) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.createLink (InteractiveCrowdsaleTestContract.sol#902) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_link' of LinkedListLib.createLink (InteractiveCrowdsaleTestContract.sol#902) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.createLink (InteractiveCrowdsaleTestContract.sol#902) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_node' of LinkedListLib.insert (InteractiveCrowdsaleTestContract.sol#912) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_new' of LinkedListLib.insert (InteractiveCrowdsaleTestContract.sol#912) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.insert (InteractiveCrowdsaleTestContract.sol#912) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 926,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\n",
                    "message": "Parameter '_node' of LinkedListLib.remove (InteractiveCrowdsaleTestContract.sol#926) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.push (InteractiveCrowdsaleTestContract.sol#938) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.push (InteractiveCrowdsaleTestContract.sol#938) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 945,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.pop (InteractiveCrowdsaleTestContract.sol#945) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1099) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1100) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _priceBonusPercent,\n",
                    "message": "Parameter '_priceBonusPercent' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _minimumRaise,\n",
                    "message": "Parameter '_minimumRaise' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endWithdrawalTime,\n",
                    "message": "Parameter '_endWithdrawalTime' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBeingSold,\n",
                    "message": "Parameter '_percentBeingSold' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1105) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _tokenName,\n",
                    "message": "Parameter '_tokenName' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1106) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _tokenDecimals,\n",
                    "message": "Parameter '_tokenDecimals' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting) public\n",
                    "message": "Parameter '_allowMinting' of InteractiveCrowdsaleLib.init (InteractiveCrowdsaleTestContract.sol#1109) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function numDigits(uint256 _number) public pure returns (uint256) {\n",
                    "message": "Parameter '_number' of InteractiveCrowdsaleLib.numDigits (InteractiveCrowdsaleTestContract.sol#1138) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateTokenPurchase(uint256 _amount,\n",
                    "message": "Parameter '_amount' of InteractiveCrowdsaleLib.calculateTokenPurchase (InteractiveCrowdsaleTestContract.sol#1153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                  uint256 _price)\n",
                    "message": "Parameter '_price' of InteractiveCrowdsaleLib.calculateTokenPurchase (InteractiveCrowdsaleTestContract.sol#1154) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                      uint256 _amount,\n",
                    "message": "Parameter '_amount' of InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleTestContract.sol#1201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                      uint256 _personalCap,\n",
                    "message": "Parameter '_personalCap' of InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleTestContract.sol#1202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                      uint256 _valuePredict) public returns (bool)\n",
                    "message": "Parameter '_valuePredict' of InteractiveCrowdsaleLib.submitBid (InteractiveCrowdsaleTestContract.sol#1203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1601,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPersonalCap(InteractiveCrowdsaleStorage storage self, address _bidder) internal view returns (uint256) {\n",
                    "message": "Parameter '_bidder' of InteractiveCrowdsaleLib.getPersonalCap (InteractiveCrowdsaleTestContract.sol#1601) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1629,
                    "vulnerability_to_line": 1653,
                    "vulnerability_code": "  function InteractiveCrowdsaleTestContract(\n\n    address owner,\n\n    uint256[] saleData,\n\n    uint256 priceBonusPercent,\n\n    uint256 minimumRaise,\n\n    uint256 endWithdrawalTime,\n\n    uint256 endTime,\n\n    uint8 percentBeingSold,\n\n    string tokenName,\n\n    string tokenSymbol,\n\n    uint8 tokenDecimals,\n\n    bool allowMinting) public\n\n  {\n\n  \tsale.init(owner,\n\n              saleData,\n\n              priceBonusPercent,\n\n              minimumRaise,\n\n              endWithdrawalTime,\n\n              endTime,\n\n              percentBeingSold,\n\n              tokenName,\n\n              tokenSymbol,\n\n              tokenDecimals,\n\n              allowMinting);\n",
                    "message": "Function 'InteractiveCrowdsaleTestContract.InteractiveCrowdsaleTestContract' (InteractiveCrowdsaleTestContract.sol#1629-1653) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function submitBid(uint256 _personalValuation, uint256 _listPredict) payable public returns (bool) {\n",
                    "message": "Parameter '_personalValuation' of InteractiveCrowdsaleTestContract.submitBid (InteractiveCrowdsaleTestContract.sol#1659) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function submitBid(uint256 _personalValuation, uint256 _listPredict) payable public returns (bool) {\n",
                    "message": "Parameter '_listPredict' of InteractiveCrowdsaleTestContract.submitBid (InteractiveCrowdsaleTestContract.sol#1659) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getContribution(address _buyer) public view returns (uint256) {\n",
                    "message": "Parameter '_buyer' of InteractiveCrowdsaleTestContract.getContribution (InteractiveCrowdsaleTestContract.sol#1719) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) public view returns (uint256) {\n",
                    "message": "Parameter '_buyer' of InteractiveCrowdsaleTestContract.getLeftoverWei (InteractiveCrowdsaleTestContract.sol#1723) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPersonalCap(address _bidder) public view returns (uint256) {\n",
                    "message": "Parameter '_bidder' of InteractiveCrowdsaleTestContract.getPersonalCap (InteractiveCrowdsaleTestContract.sol#1727) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPrice(address _bidder) public view returns (uint256) {\n",
                    "message": "Parameter '_bidder' of InteractiveCrowdsaleTestContract.getPrice (InteractiveCrowdsaleTestContract.sol#1731) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 constant NULL = 0;\n",
                    "message": "InteractiveCrowdsaleLib.NULL (InteractiveCrowdsaleTestContract.sol#997) is never used in InteractiveCrowdsaleLib\nInteractiveCrowdsaleLib.HEAD (InteractiveCrowdsaleTestContract.sol#998) is never used in InteractiveCrowdsaleLib\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeSale(InteractiveCrowdsaleStorage storage self) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 846,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (i != HEAD) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 894,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while(_proposedCommit >= _currentBucket){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while(_proposedCommit <= _currentBucket){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 1622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract InteractiveCrowdsaleTestContract {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 765,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 957,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                  returns (uint256,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1655,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _tokenName,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _tokenSymbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1637,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string tokenName,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1638,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string tokenSymbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant NULL = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant HEAD = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant PREV = false;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant NEXT = true;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 constant NULL = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 constant HEAD = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 999,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool constant PREV = false;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1000,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool constant NEXT = true;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  InteractiveCrowdsaleLib.InteractiveCrowdsaleStorage sale;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/IICOLib/truffle/contracts/Array256Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf (Array256Lib.sol#87-129) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements uses assembly (Array256Lib.sol#37-45)\n\t- Array256Lib.sol#38-45\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax uses assembly (Array256Lib.sol#50-62)\n\t- Array256Lib.sol#51-62\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin uses assembly (Array256Lib.sol#67-79)\n\t- Array256Lib.sol#68-79\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf uses assembly (Array256Lib.sol#87-129)\n\t- Array256Lib.sol#91-129\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.heapSort (Array256Lib.sol#150-208) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": 231,
                    "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array256Lib.uniq (Array256Lib.sol#212-231) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array256Lib.sol:\n\t- pragma solidity^0.4.18 (Array256Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/IICOLib/truffle/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) public restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.18 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/IICOLib/truffle/contracts/BasicMathLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (BasicMathLib.sol#40-49)\n\t- BasicMathLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (BasicMathLib.sol#57-72)\n\t- BasicMathLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (BasicMathLib.sol#80-89)\n\t- BasicMathLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (BasicMathLib.sol#97-106)\n\t- BasicMathLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BasicMathLib.sol:\n\t- pragma solidity^0.4.18 (BasicMathLib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/IICOLib/truffle/contracts/CrowdsaleToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_68"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleToken.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleToken.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleToken.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleToken.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (CrowdsaleToken.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ CrowdsaleToken.sol#406) shadows:\n\t- CrowdsaleToken.name (function @ CrowdsaleToken.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ CrowdsaleToken.sol#407) shadows:\n\t- CrowdsaleToken.symbol (function @ CrowdsaleToken.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ CrowdsaleToken.sol#408) shadows:\n\t- CrowdsaleToken.decimals (function @ CrowdsaleToken.sol#423-425)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ CrowdsaleToken.sol#409) shadows:\n\t- CrowdsaleToken.initialSupply (function @ CrowdsaleToken.sol#431-433)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (CrowdsaleToken.sol#40-49)\n\t- CrowdsaleToken.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (CrowdsaleToken.sol#57-72)\n\t- CrowdsaleToken.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (CrowdsaleToken.sol#80-89)\n\t- CrowdsaleToken.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (CrowdsaleToken.sol#97-106)\n\t- CrowdsaleToken.sol#98-106\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in CrowdsaleToken.sol:\n\t- Version used: ['^0.4.15', '^0.4.18']\n\t- CrowdsaleToken.sol#3 declares pragma solidity^0.4.18\n\t- CrowdsaleToken.sol#111 declares pragma solidity^0.4.18\n\t- CrowdsaleToken.sol#370 declares pragma solidity^0.4.15\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleToken.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleToken.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleToken.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleToken.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (CrowdsaleToken.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (CrowdsaleToken.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (CrowdsaleToken.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (CrowdsaleToken.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (CrowdsaleToken.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (CrowdsaleToken.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (CrowdsaleToken.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (CrowdsaleToken.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (CrowdsaleToken.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (CrowdsaleToken.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (CrowdsaleToken.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (CrowdsaleToken.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (CrowdsaleToken.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (CrowdsaleToken.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (CrowdsaleToken.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (CrowdsaleToken.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (CrowdsaleToken.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (CrowdsaleToken.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transfer(address to, uint value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (CrowdsaleToken.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (CrowdsaleToken.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 453,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (CrowdsaleToken.sol#451-453) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public returns (bool ok)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (CrowdsaleToken.sol#455-459) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 463,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (CrowdsaleToken.sol#461-463) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "  function mintToken(uint256 amount) public returns (bool ok) {\n\n    return token.mintToken(amount);\n",
                    "message": "CrowdsaleToken.mintToken (CrowdsaleToken.sol#465-467) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": 471,
                    "vulnerability_code": "  function closeMint() public returns (bool ok) {\n\n    return token.closeMint();\n",
                    "message": "CrowdsaleToken.closeMint (CrowdsaleToken.sol#469-471) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": 475,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (CrowdsaleToken.sol#473-475) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CrowdsaleToken.sol:\n\t- pragma solidity^0.4.18 (CrowdsaleToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleToken.sol#111): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#370): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (CrowdsaleToken.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (CrowdsaleToken.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (CrowdsaleToken.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (CrowdsaleToken.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (CrowdsaleToken.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (CrowdsaleToken.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (CrowdsaleToken.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (CrowdsaleToken.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (CrowdsaleToken.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (CrowdsaleToken.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (CrowdsaleToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (CrowdsaleToken.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (CrowdsaleToken.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (CrowdsaleToken.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (CrowdsaleToken.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (CrowdsaleToken.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (CrowdsaleToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (CrowdsaleToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (CrowdsaleToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (CrowdsaleToken.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (CrowdsaleToken.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (CrowdsaleToken.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                          string name,\n\n                          string symbol,\n\n                          uint8 decimals,\n\n                          uint256 initialSupply,\n\n                          bool allowMinting) public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (CrowdsaleToken.sol#405-413) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/IICOLib/truffle/contracts/TokenLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_47"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (TokenLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (TokenLib.sol#40-49)\n\t- TokenLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (TokenLib.sol#57-72)\n\t- TokenLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (TokenLib.sol#80-89)\n\t- TokenLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (TokenLib.sol#97-106)\n\t- TokenLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (TokenLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (TokenLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (TokenLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (TokenLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (TokenLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (TokenLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (TokenLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (TokenLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (TokenLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (TokenLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (TokenLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TokenLib.sol:\n\t- pragma solidity^0.4.18 (TokenLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenLib.sol#111): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (TokenLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (TokenLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (TokenLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (TokenLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (TokenLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (TokenLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (TokenLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (TokenLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (TokenLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (TokenLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (TokenLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (TokenLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (TokenLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (TokenLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (TokenLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (TokenLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (TokenLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (TokenLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (TokenLib.sol#353) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/IICOLib/truffle/contracts/CrowdsaleLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 681,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_82"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (CrowdsaleLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 741,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 index;\n",
                    "message": "index in CrowdsaleLib.getSaleData (CrowdsaleLib.sol#741) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ CrowdsaleLib.sol#406) shadows:\n\t- CrowdsaleToken.name (function @ CrowdsaleLib.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ CrowdsaleLib.sol#407) shadows:\n\t- CrowdsaleToken.symbol (function @ CrowdsaleLib.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ CrowdsaleLib.sol#408) shadows:\n\t- CrowdsaleToken.decimals (function @ CrowdsaleLib.sol#423-425)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ CrowdsaleLib.sol#409) shadows:\n\t- CrowdsaleToken.initialSupply (function @ CrowdsaleLib.sol#431-433)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (CrowdsaleLib.sol#40-49)\n\t- CrowdsaleLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (CrowdsaleLib.sol#57-72)\n\t- CrowdsaleLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (CrowdsaleLib.sol#80-89)\n\t- CrowdsaleLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (CrowdsaleLib.sol#97-106)\n\t- CrowdsaleLib.sol#98-106\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in CrowdsaleLib.sol:\n\t- Version used: ['^0.4.15', '^0.4.18']\n\t- CrowdsaleLib.sol#3 declares pragma solidity^0.4.18\n\t- CrowdsaleLib.sol#111 declares pragma solidity^0.4.18\n\t- CrowdsaleLib.sol#370 declares pragma solidity^0.4.15\n\t- CrowdsaleLib.sol#480 declares pragma solidity^0.4.18\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (CrowdsaleLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (CrowdsaleLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (CrowdsaleLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (CrowdsaleLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (CrowdsaleLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (CrowdsaleLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (CrowdsaleLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (CrowdsaleLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (CrowdsaleLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (CrowdsaleLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (CrowdsaleLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (CrowdsaleLib.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (CrowdsaleLib.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (CrowdsaleLib.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (CrowdsaleLib.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (CrowdsaleLib.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (CrowdsaleLib.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (CrowdsaleLib.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transfer(address to, uint value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (CrowdsaleLib.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (CrowdsaleLib.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 453,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (CrowdsaleLib.sol#451-453) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public returns (bool ok)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (CrowdsaleLib.sol#455-459) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 463,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (CrowdsaleLib.sol#461-463) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "  function mintToken(uint256 amount) public returns (bool ok) {\n\n    return token.mintToken(amount);\n",
                    "message": "CrowdsaleToken.mintToken (CrowdsaleLib.sol#465-467) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": 471,
                    "vulnerability_code": "  function closeMint() public returns (bool ok) {\n\n    return token.closeMint();\n",
                    "message": "CrowdsaleToken.closeMint (CrowdsaleLib.sol#469-471) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": 475,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (CrowdsaleLib.sol#473-475) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": 599,
                    "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
                    "message": "CrowdsaleLib.init (CrowdsaleLib.sol#567-599) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawTokens (CrowdsaleLib.sol#631-659) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": 675,
                    "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawLeftoverWei (CrowdsaleLib.sol#664-675) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": 695,
                    "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawOwnerEth (CrowdsaleLib.sol#680-695) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 716,
                    "vulnerability_to_line": 729,
                    "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.setTokens (CrowdsaleLib.sol#716-729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 735,
                    "vulnerability_to_line": 753,
                    "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
                    "message": "CrowdsaleLib.getSaleData (CrowdsaleLib.sol#735-753) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": 760,
                    "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
                    "message": "CrowdsaleLib.getTokensSold (CrowdsaleLib.sol#758-760) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CrowdsaleLib.sol:\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#111): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleLib.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#480): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (CrowdsaleLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (CrowdsaleLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (CrowdsaleLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (CrowdsaleLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (CrowdsaleLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (CrowdsaleLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (CrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (CrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (CrowdsaleLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (CrowdsaleLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (CrowdsaleLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (CrowdsaleLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (CrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (CrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (CrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (CrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (CrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (CrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (CrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (CrowdsaleLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (CrowdsaleLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (CrowdsaleLib.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                          string name,\n\n                          string symbol,\n\n                          uint8 decimals,\n\n                          uint256 initialSupply,\n\n                          bool allowMinting) public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (CrowdsaleLib.sol#405-413) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of CrowdsaleLib.init (CrowdsaleLib.sol#568) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of CrowdsaleLib.init (CrowdsaleLib.sol#569) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of CrowdsaleLib.init (CrowdsaleLib.sol#570) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of CrowdsaleLib.init (CrowdsaleLib.sol#571) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 572,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of CrowdsaleLib.init (CrowdsaleLib.sol#572) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            uint256 _tokensPerEth)\n",
                    "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (CrowdsaleLib.sol#702) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                          string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/DirectCrowdsale/truffle/contracts/DirectCrowdsaleTestZeroD.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 842,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "              (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 843,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.base.currentMilestone += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 846,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 847,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_KILL_OOM"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (DirectCrowdsaleTestZeroD.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (DirectCrowdsaleTestZeroD.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (DirectCrowdsaleTestZeroD.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (DirectCrowdsaleTestZeroD.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (DirectCrowdsaleTestZeroD.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _leftoverWei; //wei change for purchaser\n",
                    "message": "_leftoverWei in DirectCrowdsaleLib.receivePurchase (DirectCrowdsaleTestZeroD.sol#854) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 index;\n",
                    "message": "index in CrowdsaleLib.getSaleData (DirectCrowdsaleTestZeroD.sol#730) is a local variable never initialiazed\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": 891,
                    "vulnerability_code": "  function receivePurchase(DirectCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n  \trequire(self.base.validPurchase());\n\n\n\n  \t// if the token price increase interval has passed, update the current day and change the token price\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n              (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n        {\n\n          self.base.currentMilestone += 1;\n\n        }\n\n\n\n        self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n        LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n    }\n\n\n\n  \tuint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    bool err;\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _amount.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei += _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _amount;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n\t  self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n\t  LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
                    "message": "DirectCrowdsaleLib.receivePurchase (DirectCrowdsaleTestZeroD.sol#830-891) does not use the value returned by external calls:\n\t-self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]) (DirectCrowdsaleTestZeroD.sol#847)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ DirectCrowdsaleTestZeroD.sol#401) shadows:\n\t- CrowdsaleToken.name (function @ DirectCrowdsaleTestZeroD.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ DirectCrowdsaleTestZeroD.sol#402) shadows:\n\t- CrowdsaleToken.symbol (function @ DirectCrowdsaleTestZeroD.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ DirectCrowdsaleTestZeroD.sol#403) shadows:\n\t- CrowdsaleToken.decimals (function @ DirectCrowdsaleTestZeroD.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ DirectCrowdsaleTestZeroD.sol#404) shadows:\n\t- CrowdsaleToken.initialSupply (function @ DirectCrowdsaleTestZeroD.sol#427-429)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 965,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleTestTokenZeroD.CrowdsaleTestTokenZeroD.name (local variable @ DirectCrowdsaleTestZeroD.sol#965) shadows:\n\t- CrowdsaleTestTokenZeroD.name (function @ DirectCrowdsaleTestZeroD.sol#975-977)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 966,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleTestTokenZeroD.CrowdsaleTestTokenZeroD.symbol (local variable @ DirectCrowdsaleTestZeroD.sol#966) shadows:\n\t- CrowdsaleTestTokenZeroD.symbol (function @ DirectCrowdsaleTestZeroD.sol#979-981)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 967,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleTestTokenZeroD.CrowdsaleTestTokenZeroD.decimals (local variable @ DirectCrowdsaleTestZeroD.sol#967) shadows:\n\t- CrowdsaleTestTokenZeroD.decimals (function @ DirectCrowdsaleTestZeroD.sol#983-985)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 968,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleTestTokenZeroD.CrowdsaleTestTokenZeroD.initialSupply (local variable @ DirectCrowdsaleTestZeroD.sol#968) shadows:\n\t- CrowdsaleTestTokenZeroD.initialSupply (function @ DirectCrowdsaleTestZeroD.sol#991-993)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (DirectCrowdsaleTestZeroD.sol#40-49)\n\t- DirectCrowdsaleTestZeroD.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (DirectCrowdsaleTestZeroD.sol#57-72)\n\t- DirectCrowdsaleTestZeroD.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (DirectCrowdsaleTestZeroD.sol#80-89)\n\t- DirectCrowdsaleTestZeroD.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (DirectCrowdsaleTestZeroD.sol#97-106)\n\t- DirectCrowdsaleTestZeroD.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (DirectCrowdsaleTestZeroD.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (DirectCrowdsaleTestZeroD.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (DirectCrowdsaleTestZeroD.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (DirectCrowdsaleTestZeroD.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (DirectCrowdsaleTestZeroD.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (DirectCrowdsaleTestZeroD.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (DirectCrowdsaleTestZeroD.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (DirectCrowdsaleTestZeroD.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (DirectCrowdsaleTestZeroD.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (DirectCrowdsaleTestZeroD.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (DirectCrowdsaleTestZeroD.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (DirectCrowdsaleTestZeroD.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (DirectCrowdsaleTestZeroD.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (DirectCrowdsaleTestZeroD.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (DirectCrowdsaleTestZeroD.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (DirectCrowdsaleTestZeroD.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (DirectCrowdsaleTestZeroD.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (DirectCrowdsaleTestZeroD.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (DirectCrowdsaleTestZeroD.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (DirectCrowdsaleTestZeroD.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (DirectCrowdsaleTestZeroD.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (DirectCrowdsaleTestZeroD.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (DirectCrowdsaleTestZeroD.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (DirectCrowdsaleTestZeroD.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (DirectCrowdsaleTestZeroD.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (DirectCrowdsaleTestZeroD.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (DirectCrowdsaleTestZeroD.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (DirectCrowdsaleTestZeroD.sol#462-464) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
                    "message": "CrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#556-588) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": 648,
                    "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawTokens (DirectCrowdsaleTestZeroD.sol#620-648) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 664,
                    "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawLeftoverWei (DirectCrowdsaleTestZeroD.sol#653-664) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": 684,
                    "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawOwnerEth (DirectCrowdsaleTestZeroD.sol#669-684) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": 718,
                    "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.setTokens (DirectCrowdsaleTestZeroD.sol#705-718) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": 742,
                    "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
                    "message": "CrowdsaleLib.getSaleData (DirectCrowdsaleTestZeroD.sol#724-742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 749,
                    "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
                    "message": "CrowdsaleLib.getTokensSold (DirectCrowdsaleTestZeroD.sol#747-749) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": 824,
                    "vulnerability_code": "  function init(DirectCrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \tself.base.init(_owner,\n\n                _saleData,\n\n                _endTime,\n\n                _percentBurn,\n\n                _token);\n",
                    "message": "DirectCrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#811-824) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": 891,
                    "vulnerability_code": "  function receivePurchase(DirectCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n  \trequire(self.base.validPurchase());\n\n\n\n  \t// if the token price increase interval has passed, update the current day and change the token price\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n              (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n        {\n\n          self.base.currentMilestone += 1;\n\n        }\n\n\n\n        self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n        LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n    }\n\n\n\n  \tuint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    bool err;\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _amount.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei += _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _amount;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n\t  self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n\t  LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
                    "message": "DirectCrowdsaleLib.receivePurchase (DirectCrowdsaleTestZeroD.sol#830-891) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": 897,
                    "vulnerability_code": "  function setTokens(DirectCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.setTokens();\n",
                    "message": "DirectCrowdsaleLib.setTokens (DirectCrowdsaleTestZeroD.sol#895-897) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": 901,
                    "vulnerability_code": "  function withdrawTokens(DirectCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawTokens();\n",
                    "message": "DirectCrowdsaleLib.withdrawTokens (DirectCrowdsaleTestZeroD.sol#899-901) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function withdrawLeftoverWei(DirectCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawLeftoverWei();\n",
                    "message": "DirectCrowdsaleLib.withdrawLeftoverWei (DirectCrowdsaleTestZeroD.sol#903-905) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 907,
                    "vulnerability_to_line": 909,
                    "vulnerability_code": "  function withdrawOwnerEth(DirectCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawOwnerEth();\n",
                    "message": "DirectCrowdsaleLib.withdrawOwnerEth (DirectCrowdsaleTestZeroD.sol#907-909) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": 917,
                    "vulnerability_code": "  function getSaleData(DirectCrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    return self.base.getSaleData(timestamp);\n",
                    "message": "DirectCrowdsaleLib.getSaleData (DirectCrowdsaleTestZeroD.sol#911-917) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "  function getTokensSold(DirectCrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.base.getTokensSold();\n",
                    "message": "DirectCrowdsaleLib.getTokensSold (DirectCrowdsaleTestZeroD.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 923,
                    "vulnerability_to_line": 925,
                    "vulnerability_code": "  function crowdsaleActive(DirectCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleActive();\n",
                    "message": "DirectCrowdsaleLib.crowdsaleActive (DirectCrowdsaleTestZeroD.sol#923-925) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": 929,
                    "vulnerability_code": "  function crowdsaleEnded(DirectCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleEnded();\n",
                    "message": "DirectCrowdsaleLib.crowdsaleEnded (DirectCrowdsaleTestZeroD.sol#927-929) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": 977,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleTestTokenZeroD.name (DirectCrowdsaleTestZeroD.sol#975-977) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 979,
                    "vulnerability_to_line": 981,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleTestTokenZeroD.symbol (DirectCrowdsaleTestZeroD.sol#979-981) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 983,
                    "vulnerability_to_line": 985,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleTestTokenZeroD.decimals (DirectCrowdsaleTestZeroD.sol#983-985) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 987,
                    "vulnerability_to_line": 989,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleTestTokenZeroD.totalSupply (DirectCrowdsaleTestZeroD.sol#987-989) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 991,
                    "vulnerability_to_line": 993,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleTestTokenZeroD.initialSupply (DirectCrowdsaleTestZeroD.sol#991-993) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 995,
                    "vulnerability_to_line": 997,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleTestTokenZeroD.balanceOf (DirectCrowdsaleTestZeroD.sol#995-997) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 999,
                    "vulnerability_to_line": 1001,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleTestTokenZeroD.allowance (DirectCrowdsaleTestZeroD.sol#999-1001) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1003,
                    "vulnerability_to_line": 1005,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleTestTokenZeroD.transfer (DirectCrowdsaleTestZeroD.sol#1003-1005) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": 1009,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleTestTokenZeroD.transferFrom (DirectCrowdsaleTestZeroD.sol#1007-1009) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1011,
                    "vulnerability_to_line": 1013,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleTestTokenZeroD.approve (DirectCrowdsaleTestZeroD.sol#1011-1013) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1015,
                    "vulnerability_to_line": 1020,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleTestTokenZeroD.approveChange (DirectCrowdsaleTestZeroD.sol#1015-1020) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1022,
                    "vulnerability_to_line": 1024,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleTestTokenZeroD.changeOwner (DirectCrowdsaleTestZeroD.sol#1022-1024) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1026,
                    "vulnerability_to_line": 1028,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleTestTokenZeroD.burnToken (DirectCrowdsaleTestZeroD.sol#1026-1028) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": 1075,
                    "vulnerability_code": "  function () payable public {\n\n    sendPurchase();\n",
                    "message": "DirectCrowdsaleTestZeroD.fallback (DirectCrowdsaleTestZeroD.sol#1073-1075) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1081,
                    "vulnerability_to_line": 1083,
                    "vulnerability_code": "  function withdrawTokens() public returns (bool) {\n\n  \treturn sale.withdrawTokens();\n",
                    "message": "DirectCrowdsaleTestZeroD.withdrawTokens (DirectCrowdsaleTestZeroD.sol#1081-1083) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1085,
                    "vulnerability_to_line": 1087,
                    "vulnerability_code": "  function withdrawLeftoverWei() public returns (bool) {\n\n    return sale.withdrawLeftoverWei();\n",
                    "message": "DirectCrowdsaleTestZeroD.withdrawLeftoverWei (DirectCrowdsaleTestZeroD.sol#1085-1087) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1089,
                    "vulnerability_to_line": 1091,
                    "vulnerability_code": "  function withdrawOwnerEth() public returns (bool) {\n\n    return sale.withdrawOwnerEth();\n",
                    "message": "DirectCrowdsaleTestZeroD.withdrawOwnerEth (DirectCrowdsaleTestZeroD.sol#1089-1091) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1093,
                    "vulnerability_to_line": 1095,
                    "vulnerability_code": "  function crowdsaleActive() public view returns (bool) {\n\n    return sale.crowdsaleActive();\n",
                    "message": "DirectCrowdsaleTestZeroD.crowdsaleActive (DirectCrowdsaleTestZeroD.sol#1093-1095) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1097,
                    "vulnerability_to_line": 1099,
                    "vulnerability_code": "  function crowdsaleEnded() public view returns (bool) {\n\n    return sale.crowdsaleEnded();\n",
                    "message": "DirectCrowdsaleTestZeroD.crowdsaleEnded (DirectCrowdsaleTestZeroD.sol#1097-1099) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1101,
                    "vulnerability_to_line": 1103,
                    "vulnerability_code": "  function setTokens() public returns (bool) {\n\n    return sale.setTokens();\n",
                    "message": "DirectCrowdsaleTestZeroD.setTokens (DirectCrowdsaleTestZeroD.sol#1101-1103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1105,
                    "vulnerability_to_line": 1107,
                    "vulnerability_code": "  function getOwner() public view returns (address) {\n\n    return sale.base.owner;\n",
                    "message": "DirectCrowdsaleTestZeroD.getOwner (DirectCrowdsaleTestZeroD.sol#1105-1107) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": 1111,
                    "vulnerability_code": "  function getTokensPerEth() public view returns (uint256) {\n\n    return sale.base.tokensPerEth;\n",
                    "message": "DirectCrowdsaleTestZeroD.getTokensPerEth (DirectCrowdsaleTestZeroD.sol#1109-1111) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1113,
                    "vulnerability_to_line": 1115,
                    "vulnerability_code": "  function getStartTime() public view returns (uint256) {\n\n    return sale.base.startTime;\n",
                    "message": "DirectCrowdsaleTestZeroD.getStartTime (DirectCrowdsaleTestZeroD.sol#1113-1115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1117,
                    "vulnerability_to_line": 1119,
                    "vulnerability_code": "  function getEndTime() public view returns (uint256) {\n\n    return sale.base.endTime;\n",
                    "message": "DirectCrowdsaleTestZeroD.getEndTime (DirectCrowdsaleTestZeroD.sol#1117-1119) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": 1123,
                    "vulnerability_code": "  function getEthRaised() public view returns (uint256) {\n\n    return sale.base.ownerBalance;\n",
                    "message": "DirectCrowdsaleTestZeroD.getEthRaised (DirectCrowdsaleTestZeroD.sol#1121-1123) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1125,
                    "vulnerability_to_line": 1127,
                    "vulnerability_code": "  function getContribution(address _buyer) public view returns (uint256) {\n\n  \treturn sale.base.hasContributed[_buyer];\n",
                    "message": "DirectCrowdsaleTestZeroD.getContribution (DirectCrowdsaleTestZeroD.sol#1125-1127) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1129,
                    "vulnerability_to_line": 1131,
                    "vulnerability_code": "  function getTokenPurchase(address _buyer) public view returns (uint256) {\n\n  \treturn sale.base.withdrawTokensMap[_buyer];\n",
                    "message": "DirectCrowdsaleTestZeroD.getTokenPurchase (DirectCrowdsaleTestZeroD.sol#1129-1131) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": 1135,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) public view returns (uint256) {\n\n    return sale.base.leftoverWei[_buyer];\n",
                    "message": "DirectCrowdsaleTestZeroD.getLeftoverWei (DirectCrowdsaleTestZeroD.sol#1133-1135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1137,
                    "vulnerability_to_line": 1139,
                    "vulnerability_code": "  function getSaleData(uint256 timestamp) public view returns (uint256[3]) {\n\n    return sale.getSaleData(timestamp);\n",
                    "message": "DirectCrowdsaleTestZeroD.getSaleData (DirectCrowdsaleTestZeroD.sol#1137-1139) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1141,
                    "vulnerability_to_line": 1143,
                    "vulnerability_code": "  function getTokensSold() public view returns (uint256) {\n\n    return sale.getTokensSold();\n",
                    "message": "DirectCrowdsaleTestZeroD.getTokensSold (DirectCrowdsaleTestZeroD.sol#1141-1143) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1145,
                    "vulnerability_to_line": 1147,
                    "vulnerability_code": "  function getPercentBurn() public view returns (uint256) {\n\n    return sale.base.percentBurn;\n",
                    "message": "DirectCrowdsaleTestZeroD.getPercentBurn (DirectCrowdsaleTestZeroD.sol#1145-1147) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in DirectCrowdsaleTestZeroD.sol:\n\t- pragma solidity^0.4.18 (DirectCrowdsaleTestZeroD.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (DirectCrowdsaleTestZeroD.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (DirectCrowdsaleTestZeroD.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (DirectCrowdsaleTestZeroD.sol#469): it allows old versions\n\t- pragma solidity^0.4.18 (DirectCrowdsaleTestZeroD.sol#754): it allows old versions\n\t- pragma solidity^0.4.18 (DirectCrowdsaleTestZeroD.sol#934): it allows old versions\n\t- pragma solidity^0.4.18 (DirectCrowdsaleTestZeroD.sol#1033): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (DirectCrowdsaleTestZeroD.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (DirectCrowdsaleTestZeroD.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (DirectCrowdsaleTestZeroD.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (DirectCrowdsaleTestZeroD.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (DirectCrowdsaleTestZeroD.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (DirectCrowdsaleTestZeroD.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (DirectCrowdsaleTestZeroD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (DirectCrowdsaleTestZeroD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (DirectCrowdsaleTestZeroD.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (DirectCrowdsaleTestZeroD.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (DirectCrowdsaleTestZeroD.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (DirectCrowdsaleTestZeroD.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (DirectCrowdsaleTestZeroD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (DirectCrowdsaleTestZeroD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (DirectCrowdsaleTestZeroD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (DirectCrowdsaleTestZeroD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (DirectCrowdsaleTestZeroD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (DirectCrowdsaleTestZeroD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (DirectCrowdsaleTestZeroD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (DirectCrowdsaleTestZeroD.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (DirectCrowdsaleTestZeroD.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (DirectCrowdsaleTestZeroD.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (DirectCrowdsaleTestZeroD.sol#400-409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of CrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#557) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of CrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of CrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#559) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of CrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of CrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            uint256 _tokensPerEth)\n",
                    "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (DirectCrowdsaleTestZeroD.sol#691) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 812,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of DirectCrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#812) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 813,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of DirectCrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#813) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of DirectCrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#814) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of DirectCrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#815) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of DirectCrowdsaleLib.init (DirectCrowdsaleTestZeroD.sol#816) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function receivePurchase(DirectCrowdsaleStorage storage self, uint256 _amount)\n",
                    "message": "Parameter '_amount' of DirectCrowdsaleLib.receivePurchase (DirectCrowdsaleTestZeroD.sol#830) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": 973,
                    "vulnerability_code": "  function CrowdsaleTestTokenZeroD(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleTestTokenZeroD.CrowdsaleTestTokenZeroD' (DirectCrowdsaleTestZeroD.sol#964-973) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1061,
                    "vulnerability_to_line": 1070,
                    "vulnerability_code": "  function DirectCrowdsaleTestZeroD(\n\n                address owner,\n\n                uint256[] saleData,\n\n                uint256 endTime,\n\n                uint8 percentBurn,\n\n                CrowdsaleToken token)\n\n                public\n\n  {\n\n  \tsale.init(owner, saleData, endTime, percentBurn, token);\n",
                    "message": "Function 'DirectCrowdsaleTestZeroD.DirectCrowdsaleTestZeroD' (DirectCrowdsaleTestZeroD.sol#1061-1070) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getContribution(address _buyer) public view returns (uint256) {\n",
                    "message": "Parameter '_buyer' of DirectCrowdsaleTestZeroD.getContribution (DirectCrowdsaleTestZeroD.sol#1125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokenPurchase(address _buyer) public view returns (uint256) {\n",
                    "message": "Parameter '_buyer' of DirectCrowdsaleTestZeroD.getTokenPurchase (DirectCrowdsaleTestZeroD.sol#1129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLeftoverWei(address _buyer) public view returns (uint256) {\n",
                    "message": "Parameter '_buyer' of DirectCrowdsaleTestZeroD.getLeftoverWei (DirectCrowdsaleTestZeroD.sol#1133) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 1011,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 1056,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract DirectCrowdsaleTestZeroD {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1033,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 1074,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    sendPurchase();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () payable public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 813,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 965,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 966,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 979,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1059,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  DirectCrowdsaleLib.DirectCrowdsaleStorage sale;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/DirectCrowdsale/truffle/contracts/DirectCrowdsaleLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 842,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "              (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 843,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.base.currentMilestone += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 846,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 847,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_97"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (DirectCrowdsaleLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (DirectCrowdsaleLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (DirectCrowdsaleLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (DirectCrowdsaleLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _leftoverWei; //wei change for purchaser\n",
                    "message": "_leftoverWei in DirectCrowdsaleLib.receivePurchase (DirectCrowdsaleLib.sol#854) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (DirectCrowdsaleLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 index;\n",
                    "message": "index in CrowdsaleLib.getSaleData (DirectCrowdsaleLib.sol#730) is a local variable never initialiazed\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": 891,
                    "vulnerability_code": "  function receivePurchase(DirectCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n  \trequire(self.base.validPurchase());\n\n\n\n  \t// if the token price increase interval has passed, update the current day and change the token price\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n              (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n        {\n\n          self.base.currentMilestone += 1;\n\n        }\n\n\n\n        self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n        LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n    }\n\n\n\n  \tuint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    bool err;\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _amount.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei += _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _amount;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n\t  self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n\t  LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
                    "message": "DirectCrowdsaleLib.receivePurchase (DirectCrowdsaleLib.sol#830-891) does not use the value returned by external calls:\n\t-self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]) (DirectCrowdsaleLib.sol#847)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ DirectCrowdsaleLib.sol#401) shadows:\n\t- CrowdsaleToken.name (function @ DirectCrowdsaleLib.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ DirectCrowdsaleLib.sol#402) shadows:\n\t- CrowdsaleToken.symbol (function @ DirectCrowdsaleLib.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ DirectCrowdsaleLib.sol#403) shadows:\n\t- CrowdsaleToken.decimals (function @ DirectCrowdsaleLib.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ DirectCrowdsaleLib.sol#404) shadows:\n\t- CrowdsaleToken.initialSupply (function @ DirectCrowdsaleLib.sol#427-429)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (DirectCrowdsaleLib.sol#40-49)\n\t- DirectCrowdsaleLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (DirectCrowdsaleLib.sol#57-72)\n\t- DirectCrowdsaleLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (DirectCrowdsaleLib.sol#80-89)\n\t- DirectCrowdsaleLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (DirectCrowdsaleLib.sol#97-106)\n\t- DirectCrowdsaleLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (DirectCrowdsaleLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (DirectCrowdsaleLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (DirectCrowdsaleLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (DirectCrowdsaleLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (DirectCrowdsaleLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (DirectCrowdsaleLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (DirectCrowdsaleLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (DirectCrowdsaleLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (DirectCrowdsaleLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (DirectCrowdsaleLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (DirectCrowdsaleLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (DirectCrowdsaleLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (DirectCrowdsaleLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (DirectCrowdsaleLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (DirectCrowdsaleLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (DirectCrowdsaleLib.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (DirectCrowdsaleLib.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (DirectCrowdsaleLib.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (DirectCrowdsaleLib.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (DirectCrowdsaleLib.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (DirectCrowdsaleLib.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (DirectCrowdsaleLib.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (DirectCrowdsaleLib.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (DirectCrowdsaleLib.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (DirectCrowdsaleLib.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (DirectCrowdsaleLib.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (DirectCrowdsaleLib.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (DirectCrowdsaleLib.sol#462-464) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
                    "message": "CrowdsaleLib.init (DirectCrowdsaleLib.sol#556-588) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": 648,
                    "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawTokens (DirectCrowdsaleLib.sol#620-648) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 664,
                    "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawLeftoverWei (DirectCrowdsaleLib.sol#653-664) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": 684,
                    "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawOwnerEth (DirectCrowdsaleLib.sol#669-684) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": 718,
                    "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.setTokens (DirectCrowdsaleLib.sol#705-718) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": 742,
                    "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
                    "message": "CrowdsaleLib.getSaleData (DirectCrowdsaleLib.sol#724-742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 749,
                    "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
                    "message": "CrowdsaleLib.getTokensSold (DirectCrowdsaleLib.sol#747-749) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": 824,
                    "vulnerability_code": "  function init(DirectCrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \tself.base.init(_owner,\n\n                _saleData,\n\n                _endTime,\n\n                _percentBurn,\n\n                _token);\n",
                    "message": "DirectCrowdsaleLib.init (DirectCrowdsaleLib.sol#811-824) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": 891,
                    "vulnerability_code": "  function receivePurchase(DirectCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n  \trequire(self.base.validPurchase());\n\n\n\n  \t// if the token price increase interval has passed, update the current day and change the token price\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n              (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n        {\n\n          self.base.currentMilestone += 1;\n\n        }\n\n\n\n        self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n        LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n    }\n\n\n\n  \tuint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    bool err;\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _amount.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei += _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _amount;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n\t  self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n\t  LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
                    "message": "DirectCrowdsaleLib.receivePurchase (DirectCrowdsaleLib.sol#830-891) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": 897,
                    "vulnerability_code": "  function setTokens(DirectCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.setTokens();\n",
                    "message": "DirectCrowdsaleLib.setTokens (DirectCrowdsaleLib.sol#895-897) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": 901,
                    "vulnerability_code": "  function withdrawTokens(DirectCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawTokens();\n",
                    "message": "DirectCrowdsaleLib.withdrawTokens (DirectCrowdsaleLib.sol#899-901) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": 905,
                    "vulnerability_code": "  function withdrawLeftoverWei(DirectCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawLeftoverWei();\n",
                    "message": "DirectCrowdsaleLib.withdrawLeftoverWei (DirectCrowdsaleLib.sol#903-905) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 907,
                    "vulnerability_to_line": 909,
                    "vulnerability_code": "  function withdrawOwnerEth(DirectCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawOwnerEth();\n",
                    "message": "DirectCrowdsaleLib.withdrawOwnerEth (DirectCrowdsaleLib.sol#907-909) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": 917,
                    "vulnerability_code": "  function getSaleData(DirectCrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    return self.base.getSaleData(timestamp);\n",
                    "message": "DirectCrowdsaleLib.getSaleData (DirectCrowdsaleLib.sol#911-917) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "  function getTokensSold(DirectCrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.base.getTokensSold();\n",
                    "message": "DirectCrowdsaleLib.getTokensSold (DirectCrowdsaleLib.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 923,
                    "vulnerability_to_line": 925,
                    "vulnerability_code": "  function crowdsaleActive(DirectCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleActive();\n",
                    "message": "DirectCrowdsaleLib.crowdsaleActive (DirectCrowdsaleLib.sol#923-925) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": 929,
                    "vulnerability_code": "  function crowdsaleEnded(DirectCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleEnded();\n",
                    "message": "DirectCrowdsaleLib.crowdsaleEnded (DirectCrowdsaleLib.sol#927-929) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in DirectCrowdsaleLib.sol:\n\t- pragma solidity^0.4.18 (DirectCrowdsaleLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (DirectCrowdsaleLib.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (DirectCrowdsaleLib.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (DirectCrowdsaleLib.sol#469): it allows old versions\n\t- pragma solidity^0.4.18 (DirectCrowdsaleLib.sol#754): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (DirectCrowdsaleLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (DirectCrowdsaleLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (DirectCrowdsaleLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (DirectCrowdsaleLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (DirectCrowdsaleLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (DirectCrowdsaleLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (DirectCrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (DirectCrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (DirectCrowdsaleLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (DirectCrowdsaleLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (DirectCrowdsaleLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (DirectCrowdsaleLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (DirectCrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (DirectCrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (DirectCrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (DirectCrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (DirectCrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (DirectCrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (DirectCrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (DirectCrowdsaleLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (DirectCrowdsaleLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (DirectCrowdsaleLib.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (DirectCrowdsaleLib.sol#400-409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of CrowdsaleLib.init (DirectCrowdsaleLib.sol#557) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of CrowdsaleLib.init (DirectCrowdsaleLib.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of CrowdsaleLib.init (DirectCrowdsaleLib.sol#559) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of CrowdsaleLib.init (DirectCrowdsaleLib.sol#560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of CrowdsaleLib.init (DirectCrowdsaleLib.sol#561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            uint256 _tokensPerEth)\n",
                    "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (DirectCrowdsaleLib.sol#691) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 812,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of DirectCrowdsaleLib.init (DirectCrowdsaleLib.sol#812) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 813,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of DirectCrowdsaleLib.init (DirectCrowdsaleLib.sol#813) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of DirectCrowdsaleLib.init (DirectCrowdsaleLib.sol#814) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of DirectCrowdsaleLib.init (DirectCrowdsaleLib.sol#815) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of DirectCrowdsaleLib.init (DirectCrowdsaleLib.sol#816) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function receivePurchase(DirectCrowdsaleStorage storage self, uint256 _amount)\n",
                    "message": "Parameter '_amount' of DirectCrowdsaleLib.receivePurchase (DirectCrowdsaleLib.sol#830) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 813,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/DirectCrowdsale/truffle/contracts/Array256Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf (Array256Lib.sol#87-129) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements uses assembly (Array256Lib.sol#37-45)\n\t- Array256Lib.sol#38-45\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax uses assembly (Array256Lib.sol#50-62)\n\t- Array256Lib.sol#51-62\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin uses assembly (Array256Lib.sol#67-79)\n\t- Array256Lib.sol#68-79\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf uses assembly (Array256Lib.sol#87-129)\n\t- Array256Lib.sol#91-129\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.heapSort (Array256Lib.sol#149-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array256Lib.uniq (Array256Lib.sol#211-230) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array256Lib.sol:\n\t- pragma solidity^0.4.18 (Array256Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/DirectCrowdsale/truffle/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Migrations() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/DirectCrowdsale/truffle/contracts/BasicMathLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (BasicMathLib.sol#40-49)\n\t- BasicMathLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (BasicMathLib.sol#57-72)\n\t- BasicMathLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (BasicMathLib.sol#80-89)\n\t- BasicMathLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (BasicMathLib.sol#97-106)\n\t- BasicMathLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BasicMathLib.sol:\n\t- pragma solidity^0.4.18 (BasicMathLib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/DirectCrowdsale/truffle/contracts/CrowdsaleToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_65"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleToken.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleToken.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleToken.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleToken.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (CrowdsaleToken.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ CrowdsaleToken.sol#401) shadows:\n\t- CrowdsaleToken.name (function @ CrowdsaleToken.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ CrowdsaleToken.sol#402) shadows:\n\t- CrowdsaleToken.symbol (function @ CrowdsaleToken.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ CrowdsaleToken.sol#403) shadows:\n\t- CrowdsaleToken.decimals (function @ CrowdsaleToken.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ CrowdsaleToken.sol#404) shadows:\n\t- CrowdsaleToken.initialSupply (function @ CrowdsaleToken.sol#427-429)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (CrowdsaleToken.sol#40-49)\n\t- CrowdsaleToken.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (CrowdsaleToken.sol#57-72)\n\t- CrowdsaleToken.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (CrowdsaleToken.sol#80-89)\n\t- CrowdsaleToken.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (CrowdsaleToken.sol#97-106)\n\t- CrowdsaleToken.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleToken.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleToken.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleToken.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleToken.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (CrowdsaleToken.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (CrowdsaleToken.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (CrowdsaleToken.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (CrowdsaleToken.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (CrowdsaleToken.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (CrowdsaleToken.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (CrowdsaleToken.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (CrowdsaleToken.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (CrowdsaleToken.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (CrowdsaleToken.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (CrowdsaleToken.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (CrowdsaleToken.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (CrowdsaleToken.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (CrowdsaleToken.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (CrowdsaleToken.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (CrowdsaleToken.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (CrowdsaleToken.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (CrowdsaleToken.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (CrowdsaleToken.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (CrowdsaleToken.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (CrowdsaleToken.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (CrowdsaleToken.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (CrowdsaleToken.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (CrowdsaleToken.sol#462-464) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CrowdsaleToken.sol:\n\t- pragma solidity^0.4.18 (CrowdsaleToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleToken.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleToken.sol#370): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (CrowdsaleToken.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (CrowdsaleToken.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (CrowdsaleToken.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (CrowdsaleToken.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (CrowdsaleToken.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (CrowdsaleToken.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (CrowdsaleToken.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (CrowdsaleToken.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (CrowdsaleToken.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (CrowdsaleToken.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (CrowdsaleToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (CrowdsaleToken.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (CrowdsaleToken.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (CrowdsaleToken.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (CrowdsaleToken.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (CrowdsaleToken.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (CrowdsaleToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (CrowdsaleToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (CrowdsaleToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (CrowdsaleToken.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (CrowdsaleToken.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (CrowdsaleToken.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (CrowdsaleToken.sol#400-409) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/DirectCrowdsale/truffle/contracts/CrowdsaleTestTokenZeroD.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_65"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleTestTokenZeroD.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleTestTokenZeroD.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleTestTokenZeroD.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleTestTokenZeroD.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (CrowdsaleTestTokenZeroD.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleTestTokenZeroD.CrowdsaleTestTokenZeroD.name (local variable @ CrowdsaleTestTokenZeroD.sol#401) shadows:\n\t- CrowdsaleTestTokenZeroD.name (function @ CrowdsaleTestTokenZeroD.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleTestTokenZeroD.CrowdsaleTestTokenZeroD.symbol (local variable @ CrowdsaleTestTokenZeroD.sol#402) shadows:\n\t- CrowdsaleTestTokenZeroD.symbol (function @ CrowdsaleTestTokenZeroD.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleTestTokenZeroD.CrowdsaleTestTokenZeroD.decimals (local variable @ CrowdsaleTestTokenZeroD.sol#403) shadows:\n\t- CrowdsaleTestTokenZeroD.decimals (function @ CrowdsaleTestTokenZeroD.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleTestTokenZeroD.CrowdsaleTestTokenZeroD.initialSupply (local variable @ CrowdsaleTestTokenZeroD.sol#404) shadows:\n\t- CrowdsaleTestTokenZeroD.initialSupply (function @ CrowdsaleTestTokenZeroD.sol#427-429)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (CrowdsaleTestTokenZeroD.sol#40-49)\n\t- CrowdsaleTestTokenZeroD.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (CrowdsaleTestTokenZeroD.sol#57-72)\n\t- CrowdsaleTestTokenZeroD.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (CrowdsaleTestTokenZeroD.sol#80-89)\n\t- CrowdsaleTestTokenZeroD.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (CrowdsaleTestTokenZeroD.sol#97-106)\n\t- CrowdsaleTestTokenZeroD.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleTestTokenZeroD.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleTestTokenZeroD.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleTestTokenZeroD.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleTestTokenZeroD.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (CrowdsaleTestTokenZeroD.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (CrowdsaleTestTokenZeroD.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (CrowdsaleTestTokenZeroD.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (CrowdsaleTestTokenZeroD.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (CrowdsaleTestTokenZeroD.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (CrowdsaleTestTokenZeroD.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (CrowdsaleTestTokenZeroD.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (CrowdsaleTestTokenZeroD.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (CrowdsaleTestTokenZeroD.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (CrowdsaleTestTokenZeroD.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (CrowdsaleTestTokenZeroD.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleTestTokenZeroD.name (CrowdsaleTestTokenZeroD.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleTestTokenZeroD.symbol (CrowdsaleTestTokenZeroD.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleTestTokenZeroD.decimals (CrowdsaleTestTokenZeroD.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleTestTokenZeroD.totalSupply (CrowdsaleTestTokenZeroD.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleTestTokenZeroD.initialSupply (CrowdsaleTestTokenZeroD.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleTestTokenZeroD.balanceOf (CrowdsaleTestTokenZeroD.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleTestTokenZeroD.allowance (CrowdsaleTestTokenZeroD.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleTestTokenZeroD.transfer (CrowdsaleTestTokenZeroD.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleTestTokenZeroD.transferFrom (CrowdsaleTestTokenZeroD.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleTestTokenZeroD.approve (CrowdsaleTestTokenZeroD.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleTestTokenZeroD.approveChange (CrowdsaleTestTokenZeroD.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleTestTokenZeroD.changeOwner (CrowdsaleTestTokenZeroD.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleTestTokenZeroD.burnToken (CrowdsaleTestTokenZeroD.sol#462-464) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CrowdsaleTestTokenZeroD.sol:\n\t- pragma solidity^0.4.18 (CrowdsaleTestTokenZeroD.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleTestTokenZeroD.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleTestTokenZeroD.sol#370): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (CrowdsaleTestTokenZeroD.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (CrowdsaleTestTokenZeroD.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (CrowdsaleTestTokenZeroD.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (CrowdsaleTestTokenZeroD.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (CrowdsaleTestTokenZeroD.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (CrowdsaleTestTokenZeroD.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (CrowdsaleTestTokenZeroD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (CrowdsaleTestTokenZeroD.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (CrowdsaleTestTokenZeroD.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (CrowdsaleTestTokenZeroD.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (CrowdsaleTestTokenZeroD.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (CrowdsaleTestTokenZeroD.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (CrowdsaleTestTokenZeroD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (CrowdsaleTestTokenZeroD.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (CrowdsaleTestTokenZeroD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (CrowdsaleTestTokenZeroD.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (CrowdsaleTestTokenZeroD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (CrowdsaleTestTokenZeroD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (CrowdsaleTestTokenZeroD.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (CrowdsaleTestTokenZeroD.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (CrowdsaleTestTokenZeroD.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (CrowdsaleTestTokenZeroD.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleTestTokenZeroD(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleTestTokenZeroD.CrowdsaleTestTokenZeroD' (CrowdsaleTestTokenZeroD.sol#400-409) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/DirectCrowdsale/truffle/contracts/TokenLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_47"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (TokenLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (TokenLib.sol#40-49)\n\t- TokenLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (TokenLib.sol#57-72)\n\t- TokenLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (TokenLib.sol#80-89)\n\t- TokenLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (TokenLib.sol#97-106)\n\t- TokenLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (TokenLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (TokenLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (TokenLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (TokenLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (TokenLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (TokenLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (TokenLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (TokenLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (TokenLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (TokenLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (TokenLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TokenLib.sol:\n\t- pragma solidity^0.4.18 (TokenLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenLib.sol#111): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (TokenLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (TokenLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (TokenLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (TokenLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (TokenLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (TokenLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (TokenLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (TokenLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (TokenLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (TokenLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (TokenLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (TokenLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (TokenLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (TokenLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (TokenLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (TokenLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (TokenLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (TokenLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (TokenLib.sol#353) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/CrowdsaleLib/DirectCrowdsale/truffle/contracts/CrowdsaleLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      index++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_79"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (CrowdsaleLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 index;\n",
                    "message": "index in CrowdsaleLib.getSaleData (CrowdsaleLib.sol#730) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ CrowdsaleLib.sol#401) shadows:\n\t- CrowdsaleToken.name (function @ CrowdsaleLib.sol#411-413)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ CrowdsaleLib.sol#402) shadows:\n\t- CrowdsaleToken.symbol (function @ CrowdsaleLib.sol#415-417)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint8 decimals,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ CrowdsaleLib.sol#403) shadows:\n\t- CrowdsaleToken.decimals (function @ CrowdsaleLib.sol#419-421)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   uint256 initialSupply,\n",
                    "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ CrowdsaleLib.sol#404) shadows:\n\t- CrowdsaleToken.initialSupply (function @ CrowdsaleLib.sol#427-429)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (CrowdsaleLib.sol#40-49)\n\t- CrowdsaleLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (CrowdsaleLib.sol#57-72)\n\t- CrowdsaleLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (CrowdsaleLib.sol#80-89)\n\t- CrowdsaleLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (CrowdsaleLib.sol#97-106)\n\t- CrowdsaleLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (CrowdsaleLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (CrowdsaleLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (CrowdsaleLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (CrowdsaleLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (CrowdsaleLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (CrowdsaleLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (CrowdsaleLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (CrowdsaleLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (CrowdsaleLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (CrowdsaleLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (CrowdsaleLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (CrowdsaleLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (CrowdsaleLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (CrowdsaleLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (CrowdsaleLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
                    "message": "CrowdsaleToken.name (CrowdsaleLib.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
                    "message": "CrowdsaleToken.symbol (CrowdsaleLib.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "CrowdsaleToken.decimals (CrowdsaleLib.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "CrowdsaleToken.totalSupply (CrowdsaleLib.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "CrowdsaleToken.initialSupply (CrowdsaleLib.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "CrowdsaleToken.balanceOf (CrowdsaleLib.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "CrowdsaleToken.allowance (CrowdsaleLib.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "CrowdsaleToken.transfer (CrowdsaleLib.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "CrowdsaleToken.transferFrom (CrowdsaleLib.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "CrowdsaleToken.approve (CrowdsaleLib.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "CrowdsaleToken.approveChange (CrowdsaleLib.sol#451-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "CrowdsaleToken.changeOwner (CrowdsaleLib.sol#458-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "CrowdsaleToken.burnToken (CrowdsaleLib.sol#462-464) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
                    "message": "CrowdsaleLib.init (CrowdsaleLib.sol#556-588) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": 648,
                    "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawTokens (CrowdsaleLib.sol#620-648) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 664,
                    "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawLeftoverWei (CrowdsaleLib.sol#653-664) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": 684,
                    "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.withdrawOwnerEth (CrowdsaleLib.sol#669-684) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": 718,
                    "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
                    "message": "CrowdsaleLib.setTokens (CrowdsaleLib.sol#705-718) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": 742,
                    "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
                    "message": "CrowdsaleLib.getSaleData (CrowdsaleLib.sol#724-742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 749,
                    "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
                    "message": "CrowdsaleLib.getTokensSold (CrowdsaleLib.sol#747-749) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CrowdsaleLib.sol:\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (CrowdsaleLib.sol#469): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (CrowdsaleLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (CrowdsaleLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (CrowdsaleLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (CrowdsaleLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (CrowdsaleLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (CrowdsaleLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (CrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (CrowdsaleLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (CrowdsaleLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (CrowdsaleLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (CrowdsaleLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (CrowdsaleLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (CrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (CrowdsaleLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (CrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (CrowdsaleLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (CrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (CrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (CrowdsaleLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (CrowdsaleLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (CrowdsaleLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (CrowdsaleLib.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (CrowdsaleLib.sol#400-409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of CrowdsaleLib.init (CrowdsaleLib.sol#557) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": "Parameter '_saleData' of CrowdsaleLib.init (CrowdsaleLib.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of CrowdsaleLib.init (CrowdsaleLib.sol#559) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _percentBurn,\n",
                    "message": "Parameter '_percentBurn' of CrowdsaleLib.init (CrowdsaleLib.sol#560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                CrowdsaleToken _token)\n",
                    "message": "Parameter '_token' of CrowdsaleLib.init (CrowdsaleLib.sol#561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            uint256 _tokensPerEth)\n",
                    "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (CrowdsaleLib.sol#691) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                   string symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256[] _saleData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/WalletLib/truffle/contracts/WalletMainLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredAdmin && _requiredAdmin > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredMajor && _requiredMajor > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredMinor && _requiredMinor > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if(_to != 0 && _isTransfer){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if((now / 1 days) > self.currentSpend[_to][0]){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.currentSpend[_to][0] = now / 1 days;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.currentSpend[_to][1] = 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      (err, res) = self.currentSpend[_to][1].plus(_amount);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(!err);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if(res >= self.majorThreshold[_to])\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--; // set the index to the index of the existing transaction\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    self.transactionInfo[_id][_txIndex].confirmCount--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_58"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (WalletMainLib.sol#37-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (WalletMainLib.sol#50-62) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (WalletMainLib.sol#67-79) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf (WalletMainLib.sol#87-129) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (WalletMainLib.sol#272-281) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (WalletMainLib.sol#289-304) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (WalletMainLib.sol#312-321) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 338,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (WalletMainLib.sol#329-338) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": 528,
                    "vulnerability_code": "  function getAmount(bytes _txData) public pure returns (bool,uint256) {\n\n    bytes32 getSig;\n\n    bytes4 sig;\n\n    bytes4 tSig = 0xa9059cbb; //transfer func signature\n\n    bytes4 aSig = 0x095ea7b3; //approve func signature\n\n    bytes4 tfSig = 0x23b872dd; //transferFrom func signature\n\n    bool transfer;\n\n    bytes32 _amountData;\n\n    uint256 _amount;\n\n\n\n    assembly { getSig := mload(add(_txData,0x20)) }\n\n    sig = bytes4(getSig);\n\n    if(sig ==  tSig || sig == aSig){\n\n      transfer = true;\n\n      assembly { _amountData := mload(add(_txData,0x44)) }\n\n      _amount = uint256(_amountData);\n\n    } else if(sig == tfSig){\n\n      transfer = true;\n\n      assembly { _amountData := mload(add(_txData,0x64)) }\n\n      _amount = uint256(_amountData);\n\n    }\n\n    return (transfer,_amount);\n",
                    "message": "WalletMainLib.getAmount (WalletMainLib.sol#506-528) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool ret;\n",
                    "message": "ret in WalletMainLib.confirmTx (WalletMainLib.sol#695) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      bool allGood;\n",
                    "message": "allGood in WalletMainLib.serveTx (WalletMainLib.sol#615) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint256 _amount;\n",
                    "message": "_amount in WalletMainLib.serveTx (WalletMainLib.sol#616) is a local variable never initialiazed\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements uses assembly (WalletMainLib.sol#37-45)\n\t- WalletMainLib.sol#38-45\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax uses assembly (WalletMainLib.sol#50-62)\n\t- WalletMainLib.sol#51-62\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin uses assembly (WalletMainLib.sol#67-79)\n\t- WalletMainLib.sol#68-79\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf uses assembly (WalletMainLib.sol#87-129)\n\t- WalletMainLib.sol#91-129\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (WalletMainLib.sol#272-281)\n\t- WalletMainLib.sol#273-281\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (WalletMainLib.sol#289-304)\n\t- WalletMainLib.sol#291-304\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (WalletMainLib.sol#312-321)\n\t- WalletMainLib.sol#313-321\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 338,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (WalletMainLib.sol#329-338)\n\t- WalletMainLib.sol#330-338\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": 528,
                    "vulnerability_code": "  function getAmount(bytes _txData) public pure returns (bool,uint256) {\n\n    bytes32 getSig;\n\n    bytes4 sig;\n\n    bytes4 tSig = 0xa9059cbb; //transfer func signature\n\n    bytes4 aSig = 0x095ea7b3; //approve func signature\n\n    bytes4 tfSig = 0x23b872dd; //transferFrom func signature\n\n    bool transfer;\n\n    bytes32 _amountData;\n\n    uint256 _amount;\n\n\n\n    assembly { getSig := mload(add(_txData,0x20)) }\n\n    sig = bytes4(getSig);\n\n    if(sig ==  tSig || sig == aSig){\n\n      transfer = true;\n\n      assembly { _amountData := mload(add(_txData,0x44)) }\n\n      _amount = uint256(_amountData);\n\n    } else if(sig == tfSig){\n\n      transfer = true;\n\n      assembly { _amountData := mload(add(_txData,0x64)) }\n\n      _amount = uint256(_amountData);\n\n    }\n\n    return (transfer,_amount);\n",
                    "message": "WalletMainLib.getAmount uses assembly (WalletMainLib.sol#506-528)\n\t- WalletMainLib.sol#516-517\n\t- WalletMainLib.sol#520-521\n\t- WalletMainLib.sol#524-525\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function createContract(bytes _txData, uint256 _value) public {\n\n    address _newContract;\n\n    bool allGood;\n\n\n\n    assembly {\n\n      _newContract := create(_value, add(_txData, 0x20), mload(_txData))\n\n      allGood := gt(extcodesize(_newContract),0)\n\n    }\n\n    require(allGood);\n\n    LogContractCreated(_newContract, _value);\n",
                    "message": "WalletMainLib.createContract uses assembly (WalletMainLib.sol#578-588)\n\t- WalletMainLib.sol#582-586\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (WalletMainLib.sol#37-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (WalletMainLib.sol#50-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (WalletMainLib.sol#67-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.heapSort (WalletMainLib.sol#149-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array256Lib.uniq (WalletMainLib.sol#211-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (WalletMainLib.sol#272-281) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (WalletMainLib.sol#289-304) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (WalletMainLib.sol#312-321) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 338,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (WalletMainLib.sol#329-338) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": 453,
                    "vulnerability_code": "  function init(WalletData storage self,\n\n                address[] _owners,\n\n                uint256 _requiredAdmin,\n\n                uint256 _requiredMajor,\n\n                uint256 _requiredMinor,\n\n                uint256 _majorThreshold) public returns (bool)\n\n  {\n\n    require(self.owners.length == 0);\n\n    require(_owners.length >= _requiredAdmin && _requiredAdmin > 0);\n\n    require(_owners.length >= _requiredMajor && _requiredMajor > 0);\n\n    require(_owners.length >= _requiredMinor && _requiredMinor > 0);\n\n    self.owners.push(0); //Leave index-0 empty for easier owner checks\n\n\n\n    for (uint256 i=0; i<_owners.length; i++) {\n\n      require(_owners[i] != 0);\n\n      self.owners.push(_owners[i]);\n\n      self.ownerIndex[_owners[i]] = i+1;\n\n    }\n\n    self.requiredAdmin = _requiredAdmin;\n\n    self.requiredMajor = _requiredMajor;\n\n    self.requiredMinor = _requiredMinor;\n\n    self.maxOwners = 50; //Limits to 50 owners, should create wallet pools for more owners\n\n    self.majorThreshold[0] = _majorThreshold; //Sets ether threshold at address 0\n\n\n\n    return true;\n",
                    "message": "WalletMainLib.init (WalletMainLib.sol#428-453) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 601,
                    "vulnerability_to_line": 683,
                    "vulnerability_code": "  function serveTx(WalletData storage self,\n\n                   address _to,\n\n                   uint256 _value,\n\n                   bytes _txData,\n\n                   bool _confirm,\n\n                   bytes _data)\n\n                   public returns (bool,bytes32)\n\n  {\n\n    bytes32 _id = keccak256(\"serveTx\",_to,_value,_txData);\n\n    uint256 _txIndex = self.transactionInfo[_id].length;\n\n    uint256 _required = self.requiredMajor;\n\n\n\n    //Run checks if not called from generic confirm/revoke function\n\n    if(msg.sender != address(this)){\n\n      bool allGood;\n\n      uint256 _amount;\n\n      // if the owner is revoking his/her confirmation but doesn't know the\n\n      // specific transaction id hash\n\n      if(!_confirm) {\n\n        allGood = revokeConfirm(self, _id);\n\n        return (allGood,_id);\n\n      } else { // else confirming the transaction\n\n        //Reuse allGood due to stack limit\n\n        if(_to != 0)\n\n          (allGood,_amount) = getAmount(_txData);\n\n\n\n        //if this is a new transaction id or if a previous identical transaction had already succeeded\n\n        if(_txIndex == 0 || self.transactionInfo[_id][_txIndex - 1].success){\n\n          require(self.ownerIndex[msg.sender] > 0);\n\n\n\n          _required = getRequired(self, _to, _value, allGood,_amount);\n\n\n\n          // add this transaction to the wallets record and initialize the settings\n\n          self.transactionInfo[_id].length++;\n\n          self.transactionInfo[_id][_txIndex].confirmRequired = _required;\n\n          self.transactionInfo[_id][_txIndex].day = now / 1 days;\n\n          self.transactions[now / 1 days].push(_id);\n\n        } else { // else the transaction is already pending\n\n          _txIndex--; // set the index to the index of the existing transaction\n\n          //make sure the sender isn't already confirmed\n\n          allGood = checkNotConfirmed(self, _id, _txIndex);\n\n          if(!allGood)\n\n            return (false,_id);\n\n        }\n\n      }\n\n\n\n      // add the senders confirmation to the transaction\n\n      self.transactionInfo[_id][_txIndex].confirmedOwners.push(uint256(msg.sender));\n\n      self.transactionInfo[_id][_txIndex].confirmCount++;\n\n    } else {\n\n      // else were calling from generic confirm/revoke function, set the\n\n      // _txIndex index to the index of the existing transaction\n\n      _txIndex--;\n\n    }\n\n\n\n    // if there are enough confirmations\n\n    if(self.transactionInfo[_id][_txIndex].confirmCount ==\n\n       self.transactionInfo[_id][_txIndex].confirmRequired)\n\n    {\n\n      // execute the transaction\n\n      self.currentSpend[0][1] += _value;\n\n      self.currentSpend[_to][1] += _amount;\n\n      self.transactionInfo[_id][_txIndex].success = true;\n\n\n\n      if(_to == 0){\n\n        //Failure is self contained in method\n\n        createContract(_txData, _value);\n\n      } else {\n\n        require(_to.call.value(_value)(_txData));\n\n      }\n\n      delete self.transactionInfo[_id][_txIndex].data;\n\n      LogTransactionComplete(_id, _to, _value, _data);\n\n    } else {\n\n      if(self.transactionInfo[_id][_txIndex].data.length == 0)\n\n        self.transactionInfo[_id][_txIndex].data = _data;\n\n\n\n      uint256 confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[_id][_txIndex].confirmRequired,\n\n                                               self.transactionInfo[_id][_txIndex].confirmCount);\n\n      LogTransactionConfirmed(_id, msg.sender, confirmsNeeded);\n\n    }\n\n\n\n    return (true,_id);\n",
                    "message": "WalletMainLib.serveTx (WalletMainLib.sol#601-683) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": 725,
                    "vulnerability_code": "  function confirmTx(WalletData storage self, bytes32 _id)\n\n                     public returns (bool) {\n\n    require(self.ownerIndex[msg.sender] > 0);\n\n    uint256 _txIndex = self.transactionInfo[_id].length;\n\n    bool ret;\n\n\n\n    if(_txIndex == 0){\n\n      LogErrorMsg(_txIndex, \"Tx not initiated\");\n\n      LogTransactionFailed(_id, msg.sender);\n\n      return false;\n\n    }\n\n\n\n    _txIndex--;\n\n    bool allGood = checkNotConfirmed(self, _id, _txIndex);\n\n    if(!allGood)\n\n      return false;\n\n\n\n    self.transactionInfo[_id][_txIndex].confirmedOwners.push(uint256(msg.sender));\n\n    self.transactionInfo[_id][_txIndex].confirmCount++;\n\n\n\n    if(self.transactionInfo[_id][_txIndex].confirmCount ==\n\n       self.transactionInfo[_id][_txIndex].confirmRequired)\n\n    {\n\n      address a = address(this);\n\n      require(a.call(self.transactionInfo[_id][_txIndex].data));\n\n    } else {\n\n      uint256 confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[_id][_txIndex].confirmRequired,\n\n                                               self.transactionInfo[_id][_txIndex].confirmCount);\n\n\n\n      LogTransactionConfirmed(_id, msg.sender, confirmsNeeded);\n\n      ret = true;\n\n    }\n\n\n\n    return ret;\n",
                    "message": "WalletMainLib.confirmTx (WalletMainLib.sol#691-725) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in WalletMainLib.sol:\n\t- pragma solidity^0.4.18 (WalletMainLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (WalletMainLib.sol#235): it allows old versions\n\t- pragma solidity^0.4.18 (WalletMainLib.sol#343): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 601,
                    "vulnerability_to_line": 683,
                    "vulnerability_code": "  function serveTx(WalletData storage self,\n\n                   address _to,\n\n                   uint256 _value,\n\n                   bytes _txData,\n\n                   bool _confirm,\n\n                   bytes _data)\n\n                   public returns (bool,bytes32)\n\n  {\n\n    bytes32 _id = keccak256(\"serveTx\",_to,_value,_txData);\n\n    uint256 _txIndex = self.transactionInfo[_id].length;\n\n    uint256 _required = self.requiredMajor;\n\n\n\n    //Run checks if not called from generic confirm/revoke function\n\n    if(msg.sender != address(this)){\n\n      bool allGood;\n\n      uint256 _amount;\n\n      // if the owner is revoking his/her confirmation but doesn't know the\n\n      // specific transaction id hash\n\n      if(!_confirm) {\n\n        allGood = revokeConfirm(self, _id);\n\n        return (allGood,_id);\n\n      } else { // else confirming the transaction\n\n        //Reuse allGood due to stack limit\n\n        if(_to != 0)\n\n          (allGood,_amount) = getAmount(_txData);\n\n\n\n        //if this is a new transaction id or if a previous identical transaction had already succeeded\n\n        if(_txIndex == 0 || self.transactionInfo[_id][_txIndex - 1].success){\n\n          require(self.ownerIndex[msg.sender] > 0);\n\n\n\n          _required = getRequired(self, _to, _value, allGood,_amount);\n\n\n\n          // add this transaction to the wallets record and initialize the settings\n\n          self.transactionInfo[_id].length++;\n\n          self.transactionInfo[_id][_txIndex].confirmRequired = _required;\n\n          self.transactionInfo[_id][_txIndex].day = now / 1 days;\n\n          self.transactions[now / 1 days].push(_id);\n\n        } else { // else the transaction is already pending\n\n          _txIndex--; // set the index to the index of the existing transaction\n\n          //make sure the sender isn't already confirmed\n\n          allGood = checkNotConfirmed(self, _id, _txIndex);\n\n          if(!allGood)\n\n            return (false,_id);\n\n        }\n\n      }\n\n\n\n      // add the senders confirmation to the transaction\n\n      self.transactionInfo[_id][_txIndex].confirmedOwners.push(uint256(msg.sender));\n\n      self.transactionInfo[_id][_txIndex].confirmCount++;\n\n    } else {\n\n      // else were calling from generic confirm/revoke function, set the\n\n      // _txIndex index to the index of the existing transaction\n\n      _txIndex--;\n\n    }\n\n\n\n    // if there are enough confirmations\n\n    if(self.transactionInfo[_id][_txIndex].confirmCount ==\n\n       self.transactionInfo[_id][_txIndex].confirmRequired)\n\n    {\n\n      // execute the transaction\n\n      self.currentSpend[0][1] += _value;\n\n      self.currentSpend[_to][1] += _amount;\n\n      self.transactionInfo[_id][_txIndex].success = true;\n\n\n\n      if(_to == 0){\n\n        //Failure is self contained in method\n\n        createContract(_txData, _value);\n\n      } else {\n\n        require(_to.call.value(_value)(_txData));\n\n      }\n\n      delete self.transactionInfo[_id][_txIndex].data;\n\n      LogTransactionComplete(_id, _to, _value, _data);\n\n    } else {\n\n      if(self.transactionInfo[_id][_txIndex].data.length == 0)\n\n        self.transactionInfo[_id][_txIndex].data = _data;\n\n\n\n      uint256 confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[_id][_txIndex].confirmRequired,\n\n                                               self.transactionInfo[_id][_txIndex].confirmCount);\n\n      LogTransactionConfirmed(_id, msg.sender, confirmsNeeded);\n\n    }\n\n\n\n    return (true,_id);\n",
                    "message": "Low level call in WalletMainLib.serveTx (WalletMainLib.sol#601-683):\n\t-require(bool)(_to.call.value(_value)(_txData)) WalletMainLib.sol#669\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": 725,
                    "vulnerability_code": "  function confirmTx(WalletData storage self, bytes32 _id)\n\n                     public returns (bool) {\n\n    require(self.ownerIndex[msg.sender] > 0);\n\n    uint256 _txIndex = self.transactionInfo[_id].length;\n\n    bool ret;\n\n\n\n    if(_txIndex == 0){\n\n      LogErrorMsg(_txIndex, \"Tx not initiated\");\n\n      LogTransactionFailed(_id, msg.sender);\n\n      return false;\n\n    }\n\n\n\n    _txIndex--;\n\n    bool allGood = checkNotConfirmed(self, _id, _txIndex);\n\n    if(!allGood)\n\n      return false;\n\n\n\n    self.transactionInfo[_id][_txIndex].confirmedOwners.push(uint256(msg.sender));\n\n    self.transactionInfo[_id][_txIndex].confirmCount++;\n\n\n\n    if(self.transactionInfo[_id][_txIndex].confirmCount ==\n\n       self.transactionInfo[_id][_txIndex].confirmRequired)\n\n    {\n\n      address a = address(this);\n\n      require(a.call(self.transactionInfo[_id][_txIndex].data));\n\n    } else {\n\n      uint256 confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[_id][_txIndex].confirmRequired,\n\n                                               self.transactionInfo[_id][_txIndex].confirmCount);\n\n\n\n      LogTransactionConfirmed(_id, msg.sender, confirmsNeeded);\n\n      ret = true;\n\n    }\n\n\n\n    return ret;\n",
                    "message": "Low level call in WalletMainLib.confirmTx (WalletMainLib.sol#691-725):\n\t-require(bool)(a.call(self.transactionInfo[_id][_txIndex].data)) WalletMainLib.sol#715\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address[] _owners,\n",
                    "message": "Parameter '_owners' of WalletMainLib.init (WalletMainLib.sol#429) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _requiredAdmin,\n",
                    "message": "Parameter '_requiredAdmin' of WalletMainLib.init (WalletMainLib.sol#430) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _requiredMajor,\n",
                    "message": "Parameter '_requiredMajor' of WalletMainLib.init (WalletMainLib.sol#431) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _requiredMinor,\n",
                    "message": "Parameter '_requiredMinor' of WalletMainLib.init (WalletMainLib.sol#432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _majorThreshold) public returns (bool)\n",
                    "message": "Parameter '_majorThreshold' of WalletMainLib.init (WalletMainLib.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkNotConfirmed(WalletData storage self, bytes32 _id, uint256 _txIndex)\n",
                    "message": "Parameter '_id' of WalletMainLib.checkNotConfirmed (WalletMainLib.sol#462) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkNotConfirmed(WalletData storage self, bytes32 _id, uint256 _txIndex)\n",
                    "message": "Parameter '_txIndex' of WalletMainLib.checkNotConfirmed (WalletMainLib.sol#462) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calcConfirmsNeeded(uint256 _required, uint256 _count) public pure returns (uint256){\n",
                    "message": "Parameter '_required' of WalletMainLib.calcConfirmsNeeded (WalletMainLib.sol#498) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calcConfirmsNeeded(uint256 _required, uint256 _count) public pure returns (uint256){\n",
                    "message": "Parameter '_count' of WalletMainLib.calcConfirmsNeeded (WalletMainLib.sol#498) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                       address _to,\n",
                    "message": "Parameter '_to' of WalletMainLib.getRequired (WalletMainLib.sol#538) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                       uint256 _value,\n",
                    "message": "Parameter '_value' of WalletMainLib.getRequired (WalletMainLib.sol#539) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                       bool _isTransfer,\n",
                    "message": "Parameter '_isTransfer' of WalletMainLib.getRequired (WalletMainLib.sol#540) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                       uint256 _amount)\n",
                    "message": "Parameter '_amount' of WalletMainLib.getRequired (WalletMainLib.sol#541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createContract(bytes _txData, uint256 _value) public {\n",
                    "message": "Parameter '_value' of WalletMainLib.createContract (WalletMainLib.sol#578) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 602,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   address _to,\n",
                    "message": "Parameter '_to' of WalletMainLib.serveTx (WalletMainLib.sol#602) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   uint256 _value,\n",
                    "message": "Parameter '_value' of WalletMainLib.serveTx (WalletMainLib.sol#603) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bytes _txData,\n",
                    "message": "Parameter '_txData' of WalletMainLib.serveTx (WalletMainLib.sol#604) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bool _confirm,\n",
                    "message": "Parameter '_confirm' of WalletMainLib.serveTx (WalletMainLib.sol#605) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bytes _data)\n",
                    "message": "Parameter '_data' of WalletMainLib.serveTx (WalletMainLib.sol#606) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function confirmTx(WalletData storage self, bytes32 _id)\n",
                    "message": "Parameter '_id' of WalletMainLib.confirmTx (WalletMainLib.sol#691) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeConfirm(WalletData storage self, bytes32 _id)\n",
                    "message": "Parameter '_id' of WalletMainLib.revokeConfirm (WalletMainLib.sol#731) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 tSig = 0xa9059cbb; //transfer func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 aSig = 0x095ea7b3; //approve func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 tfSig = 0x23b872dd; //transferFrom func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAmount(bytes _txData) public pure returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"serveTx\",_to,_value,_txData);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address[] _owners,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAmount(bytes _txData) public pure returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createContract(bytes _txData, uint256 _value) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bytes _txData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { getSig := mload(add(_txData,0x20)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly { _amountData := mload(add(_txData,0x44)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly { _amountData := mload(add(_txData,0x64)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/WalletLib/truffle/contracts/Array256Lib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf (Array256Lib.sol#87-129) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements uses assembly (Array256Lib.sol#37-45)\n\t- Array256Lib.sol#38-45\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax uses assembly (Array256Lib.sol#50-62)\n\t- Array256Lib.sol#51-62\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin uses assembly (Array256Lib.sol#67-79)\n\t- Array256Lib.sol#68-79\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.indexOf uses assembly (Array256Lib.sol#87-129)\n\t- Array256Lib.sol#91-129\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
                    "message": "Array256Lib.sumElements (Array256Lib.sol#37-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMax (Array256Lib.sol#50-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.getMin (Array256Lib.sol#67-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
                    "message": "Array256Lib.heapSort (Array256Lib.sol#149-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
                    "message": "Array256Lib.uniq (Array256Lib.sol#211-230) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Array256Lib.sol:\n\t- pragma solidity^0.4.18 (Array256Lib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/WalletLib/truffle/contracts/WalletLibTestContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.owners.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.transactionInfo[_id][_txIndex].confirmedOwners.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.owners.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.transactionInfo[_id][_txIndex].confirmedOwners.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredAdmin && _requiredAdmin > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredMajor && _requiredMajor > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredMinor && _requiredMinor > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if(_to != 0 && _isTransfer){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if((now / 1 days) > self.currentSpend[_to][0]){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.currentSpend[_to][0] = now / 1 days;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.currentSpend[_to][1] = 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      (err, res) = self.currentSpend[_to][1].plus(_amount);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(!err);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if(res >= self.majorThreshold[_to])\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--; // set the index to the index of the existing transaction\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    self.transactionInfo[_id][_txIndex].confirmCount--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 940,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 949,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1023,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1092,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.owners.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 935,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 947,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1021,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1077,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1090,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.owners.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.transactionInfo[_id][_txIndex].confirmedOwners.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owners[0] = 0xb4e205cd196bbe4b1b3767a5e32e15f50eb79623;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owners[1] = 0x40333d950b4c682e8aad143c216af52877d828bf;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owners[2] = 0x0a1f4fcde83ba12ee8343488964811218da3e00e;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1579,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owners[3] = 0x79b63228ff63659248b7c688870de388bdcf0c14;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1580,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owners[4] = 0x36994c7cff11859ba8b9715120a68aa9499329ee;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 tSig = 0xa9059cbb; //transfer func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 aSig = 0x095ea7b3; //approve func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 tfSig = 0x23b872dd; //transferFrom func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.owners.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 935,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1077,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.owners.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.transactionInfo[_id][_txIndex].confirmedOwners.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.owners.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.transactionInfo[_id][_txIndex].confirmedOwners.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 1552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract WalletLibTestContract {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAmount(bytes _txData) public pure returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"serveTx\",_to,_value,_txData);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 920,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"changeOwner\",_from,_to);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 989,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"addOwner\",_newOwner);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1060,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"removeOwner\",_ownerRemoving);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"changeRequiredAdmin\",_requiredAdmin);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"changeRequiredMajor\",_requiredMajor);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"changeRequiredMinor\",_requiredMinor);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"changeMajorThreshold\", _token, _majorThreshold);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function() public payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address[] _owners,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAmount(bytes _txData) public pure returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createContract(bytes _txData, uint256 _value) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bytes _txData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                       bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 985,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1056,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                       bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                               bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                               bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                               bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function serveTx(address _to, uint256 _value, bytes _txData, bool _confirm) public returns (bool,bytes32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { getSig := mload(add(_txData,0x20)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly { _amountData := mload(add(_txData,0x44)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly { _amountData := mload(add(_txData,0x64)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/WalletLib/truffle/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) public restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.18 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/WalletLib/truffle/contracts/BasicMathLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (BasicMathLib.sol#40-49)\n\t- BasicMathLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (BasicMathLib.sol#57-72)\n\t- BasicMathLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (BasicMathLib.sol#80-89)\n\t- BasicMathLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (BasicMathLib.sol#97-106)\n\t- BasicMathLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BasicMathLib.sol:\n\t- pragma solidity^0.4.18 (BasicMathLib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/WalletLib/truffle/contracts/WalletAdminLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredAdmin && _requiredAdmin > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredMajor && _requiredMajor > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredMinor && _requiredMinor > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if(_to != 0 && _isTransfer){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if((now / 1 days) > self.currentSpend[_to][0]){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.currentSpend[_to][0] = now / 1 days;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.currentSpend[_to][1] = 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      (err, res) = self.currentSpend[_to][1].plus(_amount);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(!err);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if(res >= self.majorThreshold[_to])\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--; // set the index to the index of the existing transaction\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    self.transactionInfo[_id][_txIndex].confirmCount--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 940,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 949,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1023,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1092,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.owners.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 935,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 947,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1021,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1077,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1090,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 tSig = 0xa9059cbb; //transfer func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 aSig = 0x095ea7b3; //approve func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 tfSig = 0x23b872dd; //transferFrom func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.owners.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 935,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1077,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAmount(bytes _txData) public pure returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"serveTx\",_to,_value,_txData);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 920,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"changeOwner\",_from,_to);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 989,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"addOwner\",_newOwner);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1060,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"removeOwner\",_ownerRemoving);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"changeRequiredAdmin\",_requiredAdmin);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"changeRequiredMajor\",_requiredMajor);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"changeRequiredMinor\",_requiredMinor);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"changeMajorThreshold\", _token, _majorThreshold);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address[] _owners,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAmount(bytes _txData) public pure returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createContract(bytes _txData, uint256 _value) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bytes _txData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                       bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 985,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1056,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                       bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                               bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                               bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                               bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { getSig := mload(add(_txData,0x20)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly { _amountData := mload(add(_txData,0x44)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly { _amountData := mload(add(_txData,0x64)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/WalletLib/truffle/contracts/WalletGetterLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete self[self.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.owners.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.transactionInfo[_id][_txIndex].confirmedOwners.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      temp = self[end];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[end] = self[0];\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self[0] = temp;\n",
                    "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          temp = self[swap];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[swap] = self[root];\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "non-optimal-variables-swap",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self[root] = temp;\n",
                    "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.owners.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.transactionInfo[_id][_txIndex].confirmedOwners.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredAdmin && _requiredAdmin > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredMajor && _requiredMajor > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owners.length >= _requiredMinor && _requiredMinor > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          swap = rChild;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if(_to != 0 && _isTransfer){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if((now / 1 days) > self.currentSpend[_to][0]){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.currentSpend[_to][0] = now / 1 days;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.currentSpend[_to][1] = 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      (err, res) = self.currentSpend[_to][1].plus(_amount);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(!err);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if(res >= self.majorThreshold[_to])\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _txIndex--; // set the index to the index of the existing transaction\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _txIndex--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    self.transactionInfo[_id][_txIndex].confirmCount--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    self.transactionInfo[_id][_txIndex].confirmCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.owners.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.transactionInfo[_id][_txIndex].confirmedOwners.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 tSig = 0xa9059cbb; //transfer func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 aSig = 0x095ea7b3; //approve func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 tfSig = 0x23b872dd; //transferFrom func signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        self.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      self.transactionInfo[_id].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          self.transactionInfo[_id].length++;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.owners.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.transactionInfo[_id][_txIndex].confirmedOwners.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.owners.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for(uint256 i = 0; i<self.transactionInfo[_id][_txIndex].confirmedOwners.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      while(lChild <= end){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAmount(bytes _txData) public pure returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while(start >= 0){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _id = keccak256(\"serveTx\",_to,_value,_txData);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address[] _owners,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAmount(bytes _txData) public pure returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createContract(bytes _txData, uint256 _value) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bytes _txData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { getSig := mload(add(_txData,0x20)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly { _amountData := mload(add(_txData,0x44)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly { _amountData := mload(add(_txData,0x64)) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/WalletLib/truffle/contracts/TokenLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_47"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (TokenLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (TokenLib.sol#40-49)\n\t- TokenLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (TokenLib.sol#57-72)\n\t- TokenLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (TokenLib.sol#80-89)\n\t- TokenLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (TokenLib.sol#97-106)\n\t- TokenLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (TokenLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (TokenLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (TokenLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (TokenLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (TokenLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (TokenLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (TokenLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (TokenLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (TokenLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (TokenLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (TokenLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TokenLib.sol:\n\t- pragma solidity^0.4.18 (TokenLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenLib.sol#111): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (TokenLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (TokenLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (TokenLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (TokenLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (TokenLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (TokenLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (TokenLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (TokenLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (TokenLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (TokenLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (TokenLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (TokenLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (TokenLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (TokenLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (TokenLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (TokenLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (TokenLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (TokenLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (TokenLib.sol#353) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/WalletLib/truffle/contracts/TestToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_60"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TestToken.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TestToken.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TestToken.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TestToken.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (TestToken.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (TestToken.sol#40-49)\n\t- TestToken.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (TestToken.sol#57-72)\n\t- TestToken.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (TestToken.sol#80-89)\n\t- TestToken.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (TestToken.sol#97-106)\n\t- TestToken.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TestToken.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TestToken.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TestToken.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TestToken.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (TestToken.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (TestToken.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (TestToken.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (TestToken.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (TestToken.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (TestToken.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (TestToken.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (TestToken.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (TestToken.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (TestToken.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (TestToken.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": 398,
                    "vulnerability_code": "  function totalSupply() public view returns (uint) {\n\n    return token.totalSupply;\n",
                    "message": "TestToken.totalSupply (TestToken.sol#396-398) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 402,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint) {\n\n    return token.balanceOf(who);\n",
                    "message": "TestToken.balanceOf (TestToken.sol#400-402) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "TestToken.allowance (TestToken.sol#404-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function transfer(address to, uint value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "TestToken.transfer (TestToken.sol#408-410) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 414,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "TestToken.transferFrom (TestToken.sol#412-414) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 418,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "TestToken.approve (TestToken.sol#416-418) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TestToken.sol:\n\t- pragma solidity^0.4.18 (TestToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TestToken.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (TestToken.sol#370): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (TestToken.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (TestToken.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (TestToken.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (TestToken.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (TestToken.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (TestToken.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (TestToken.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (TestToken.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (TestToken.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (TestToken.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (TestToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (TestToken.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (TestToken.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (TestToken.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (TestToken.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (TestToken.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (TestToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (TestToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (TestToken.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (TestToken.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (TestToken.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (TestToken.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 394,
                    "vulnerability_code": "  function TestToken(\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting) \n\n                public \n\n  {\n\n    token.init(_owner,_name,_symbol,_decimals,_initial_supply,_allowMinting);\n",
                    "message": "Function 'TestToken.TestToken' (TestToken.sol#384-394) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TestToken.TestToken (TestToken.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TestToken.TestToken (TestToken.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TestToken.TestToken (TestToken.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TestToken.TestToken (TestToken.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TestToken.TestToken (TestToken.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting) \n",
                    "message": "Parameter '_allowMinting' of TestToken.TestToken (TestToken.sol#390) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  TokenLib.TokenStorage token;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/StringUtilsLib/StringUtilsLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(i = 0; i < parts.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (i < parts.length - 1) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint len = 0; ptr < end; len++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; i < len; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint len = 0; ptr < end; len++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; i < len; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (idx = 0; idx <= selflen - needlelen; idx++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 707,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 751,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i = 0; i < parts.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(i = 0; i < parts.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_38"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "    function memcpy(uint dest, uint src, uint len) private pure {\n\n        // Copy word-length chunks while possible\n\n        for(; len >= 32; len -= 32) {\n\n            assembly {\n\n                mstore(dest, mload(src))\n\n            }\n\n            dest += 32;\n\n            src += 32;\n\n        }\n\n\n\n        // Copy remaining bytes\n\n        uint mask = 256 ** (32 - len) - 1;\n\n        assembly {\n\n            let srcpart := and(mload(src), not(mask))\n\n            let destpart := and(mload(dest), mask)\n\n            mstore(dest, or(destpart, srcpart))\n\n        }\n",
                    "message": "StringUtilsLib.memcpy (StringUtilsLib.sol#73-90) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function toString(slice self) internal view returns (string) {\n\n        var ret = new string(self._len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n\n\n        memcpy(retptr, self._ptr, self._len);\n\n        return ret;\n",
                    "message": "StringUtilsLib.toString (StringUtilsLib.sol#168-175) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "    function len(slice self) internal view returns (uint) {\n\n        // Starting at ptr-31 means the LSB will be the byte we care about\n\n        var ptr = self._ptr - 31;\n\n        var end = ptr + self._len;\n\n        for (uint len = 0; ptr < end; len++) {\n\n            uint8 b;\n\n            assembly {\n\n                b := and(mload(ptr), 0xFF)\n\n            }\n\n            if (b < 0x80) {\n\n                ptr += 1;\n\n            } else if(b < 0xE0) {\n\n                ptr += 2;\n\n            } else if(b < 0xF0) {\n\n                ptr += 3;\n\n            } else if(b < 0xF8) {\n\n                ptr += 4;\n\n            } else if(b < 0xFC) {\n\n                ptr += 5;\n\n            } else {\n\n                ptr += 6;\n\n            }\n\n        }\n\n        return len;\n",
                    "message": "StringUtilsLib.len (StringUtilsLib.sol#186-210) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "    function compare(slice self, slice other) internal view returns (int) {\n\n        uint shortest = self._len;\n\n        if (other._len < self._len)\n\n            shortest = other._len;\n\n\n\n        var selfptr = self._ptr;\n\n        var otherptr = other._ptr;\n\n        for (uint idx = 0; idx < shortest; idx += 32) {\n\n            uint a;\n\n            uint b;\n\n            assembly {\n\n                a := mload(selfptr)\n\n                b := mload(otherptr)\n\n            }\n\n            if (a != b) {\n\n                // Mask out irrelevant bytes and check again\n\n                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n\n                var diff = (a & mask) - (b & mask);\n\n                if (diff != 0)\n\n                    return int(diff);\n\n            }\n\n            selfptr += 32;\n\n            otherptr += 32;\n\n        }\n\n        return int(self._len) - int(other._len);\n",
                    "message": "StringUtilsLib.compare (StringUtilsLib.sol#230-255) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 367,
                    "vulnerability_code": "    function ord(slice self) internal view returns (uint ret) {\n\n        if (self._len == 0) {\n\n            return 0;\n\n        }\n\n\n\n        uint word;\n\n        uint len;\n\n        uint div = 2 ** 248;\n\n\n\n        // Load the rune into the MSBs of b\n\n        assembly { word:= mload(mload(add(self, 32))) }\n\n        var b = word / div;\n\n        if (b < 0x80) {\n\n            ret = b;\n\n            len = 1;\n\n        } else if(b < 0xE0) {\n\n            ret = b & 0x1F;\n\n            len = 2;\n\n        } else if(b < 0xF0) {\n\n            ret = b & 0x0F;\n\n            len = 3;\n\n        } else {\n\n            ret = b & 0x07;\n\n            len = 4;\n\n        }\n\n\n\n        // Check for truncated codepoints\n\n        if (len > self._len) {\n\n            return 0;\n\n        }\n\n\n\n        for (uint i = 1; i < len; i++) {\n\n            div = div / 256;\n\n            b = (word / div) & 0xFF;\n\n            if (b & 0xC0 != 0x80) {\n\n                // Invalid UTF-8 sequence\n\n                return 0;\n\n            }\n\n            ret = (ret * 64) | (b & 0x3F);\n\n        }\n\n\n\n        return ret;\n",
                    "message": "StringUtilsLib.ord (StringUtilsLib.sol#325-367) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": 378,
                    "vulnerability_code": "    function keccak(slice self) internal view returns (bytes32 ret) {\n\n        assembly {\n\n            ret := sha3(mload(add(self, 32)), mload(self))\n\n        }\n",
                    "message": "StringUtilsLib.keccak (StringUtilsLib.sol#374-378) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": 403,
                    "vulnerability_code": "    function startsWith(slice self, slice needle) internal view returns (bool) {\n\n        if (self._len < needle._len) {\n\n            return false;\n\n        }\n\n\n\n        if (self._ptr == needle._ptr) {\n\n            return true;\n\n        }\n\n\n\n        bool equal;\n\n        assembly {\n\n            let len := mload(needle)\n\n            let selfptr := mload(add(self, 0x20))\n\n            let needleptr := mload(add(needle, 0x20))\n\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n        }\n\n        return equal;\n",
                    "message": "StringUtilsLib.startsWith (StringUtilsLib.sol#386-403) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "    function endsWith(slice self, slice needle) internal view returns (bool) {\n\n        if (self._len < needle._len) {\n\n            return false;\n\n        }\n\n\n\n        var selfptr = self._ptr + self._len - needle._len;\n\n\n\n        if (selfptr == needle._ptr) {\n\n            return true;\n\n        }\n\n\n\n        bool equal;\n\n        assembly {\n\n            let len := mload(needle)\n\n            let needleptr := mload(add(needle, 0x20))\n\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n        }\n\n\n\n        return equal;\n",
                    "message": "StringUtilsLib.endsWith (StringUtilsLib.sol#441-460) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n\n      private\n\n      view\n\n      returns (uint)\n\n    {\n\n        uint ptr;\n\n        uint idx;\n\n\n\n        if (needlelen <= selflen) {\n\n            if (needlelen <= 32) {\n\n                // Optimized assembly for 68 gas per byte on short strings\n\n                assembly {\n\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n\n                    let needledata := and(mload(needleptr), mask)\n\n                    let end := add(selfptr, sub(selflen, needlelen))\n\n                    let loop := selfptr\n\n\n\n                    for { } lt(loop, end) { } {\n\n                        switch eq(and(mload(loop), mask), needledata)\n\n                        case 1 {\n\n                            ptr := loop\n\n                            loop := end\n\n                        }\n\n                        case 0 {\n\n                            loop := add(loop,1)\n\n                        }\n\n                    }\n\n                    switch eq(and(mload(ptr), mask), needledata)\n\n                    case 0 {\n\n                        ptr := add(selfptr, selflen)\n\n                    }\n\n                }\n\n                return ptr;\n\n            } else {\n\n                // For long needles, use hashing\n\n                bytes32 hash;\n\n                assembly { hash := sha3(needleptr, needlelen) }\n\n                ptr = selfptr;\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n\n                    bytes32 testHash;\n\n                    assembly { testHash := sha3(ptr, needlelen) }\n\n                    if (hash == testHash)\n\n                        return ptr;\n\n                    ptr += 1;\n\n                }\n\n            }\n\n        }\n\n        return selfptr + selflen;\n",
                    "message": "StringUtilsLib.findPtr (StringUtilsLib.sol#493-541) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 594,
                    "vulnerability_code": "    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n\n      private\n\n      view\n\n      returns (uint)\n\n    {\n\n        uint ptr;\n\n\n\n        if (needlelen <= selflen) {\n\n            if (needlelen <= 32) {\n\n                // Optimized assembly for 69 gas per byte on short strings\n\n                assembly {\n\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n\n                    let needledata := and(mload(needleptr), mask)\n\n                    let loop := add(selfptr, sub(selflen, needlelen))\n\n\n\n                    for { } gt(loop, selfptr) { } {\n\n                        switch eq(and(mload(loop), mask), needledata)\n\n                        case 1 {\n\n                            ptr := loop\n\n                            loop := selfptr\n\n                        }\n\n                        case 0 {\n\n                            loop := sub(loop,1)\n\n                        }\n\n                    }\n\n                    switch eq(and(mload(ptr), mask), needledata)\n\n                    case 1 {\n\n                        ptr := add(ptr, needlelen)\n\n                    }\n\n                    case 0 {\n\n                        ptr := selfptr\n\n                    }\n\n                }\n\n                return ptr;\n\n            } else {\n\n                // For long needles, use hashing\n\n                bytes32 hash;\n\n                assembly { hash := sha3(needleptr, needlelen) }\n\n                ptr = selfptr + (selflen - needlelen);\n\n                while (ptr >= selfptr) {\n\n                    bytes32 testHash;\n\n                    assembly { testHash := sha3(ptr, needlelen) }\n\n                    if (hash == testHash)\n\n                        return ptr + needlelen;\n\n                    ptr -= 1;\n\n                }\n\n            }\n\n        }\n\n        return selfptr;\n",
                    "message": "StringUtilsLib.rfindPtr (StringUtilsLib.sol#545-594) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": 736,
                    "vulnerability_code": "    function concat(slice self, slice other) internal view returns (string) {\n\n        var ret = new string(self._len + other._len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n\n        memcpy(retptr + self._len, other._ptr, other._len);\n\n        return ret;\n",
                    "message": "StringUtilsLib.concat (StringUtilsLib.sol#729-736) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 768,
                    "vulnerability_code": "    function join(slice self, slice[] parts) internal view returns (string) {\n\n        if (parts.length == 0)\n\n            return \"\";\n\n\n\n        uint len = self._len * (parts.length - 1);\n\n        for(uint i = 0; i < parts.length; i++)\n\n            len += parts[i]._len;\n\n\n\n        var ret = new string(len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n\n\n        for(i = 0; i < parts.length; i++) {\n\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n\n            retptr += parts[i]._len;\n\n            if (i < parts.length - 1) {\n\n                memcpy(retptr, self._ptr, self._len);\n\n                retptr += self._len;\n\n            }\n\n        }\n\n\n\n        return ret;\n",
                    "message": "StringUtilsLib.join (StringUtilsLib.sol#746-768) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint ret;\n",
                    "message": "ret in StringUtilsLib.len (StringUtilsLib.sol#111) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function memcpy(uint dest, uint src, uint len) private pure {\n",
                    "message": "StringUtilsLib.memcpy.len (local variable @ StringUtilsLib.sol#73) shadows:\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#110-134)\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#186-210)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint len = 0; ptr < end; len++) {\n",
                    "message": "StringUtilsLib.len.len (local variable @ StringUtilsLib.sol#190) shadows:\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#110-134)\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#186-210)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint len;\n",
                    "message": "StringUtilsLib.nextRune.len (local variable @ StringUtilsLib.sol#282) shadows:\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#110-134)\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#186-210)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint len;\n",
                    "message": "StringUtilsLib.ord.len (local variable @ StringUtilsLib.sol#331) shadows:\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#110-134)\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#186-210)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function count(slice self, slice needle) internal view returns (uint count) {\n",
                    "message": "StringUtilsLib.count.count (local variable @ StringUtilsLib.sol#704) shadows:\n\t- StringUtilsLib.count (function @ StringUtilsLib.sol#704-710)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 750,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint len = self._len * (parts.length - 1);\n",
                    "message": "StringUtilsLib.join.len (local variable @ StringUtilsLib.sol#750) shadows:\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#110-134)\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#186-210)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "    function memcpy(uint dest, uint src, uint len) private pure {\n\n        // Copy word-length chunks while possible\n\n        for(; len >= 32; len -= 32) {\n\n            assembly {\n\n                mstore(dest, mload(src))\n\n            }\n\n            dest += 32;\n\n            src += 32;\n\n        }\n\n\n\n        // Copy remaining bytes\n\n        uint mask = 256 ** (32 - len) - 1;\n\n        assembly {\n\n            let srcpart := and(mload(src), not(mask))\n\n            let destpart := and(mload(dest), mask)\n\n            mstore(dest, or(destpart, srcpart))\n\n        }\n",
                    "message": "StringUtilsLib.memcpy uses assembly (StringUtilsLib.sol#73-90)\n\t- StringUtilsLib.sol#76-79\n\t- StringUtilsLib.sol#85-90\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function toSlice(string self) internal returns (slice) {\n\n        uint ptr;\n\n        assembly {\n\n            ptr := add(self, 0x20)\n\n        }\n\n        return slice(bytes(self).length, ptr);\n",
                    "message": "StringUtilsLib.toSlice uses assembly (StringUtilsLib.sol#97-103)\n\t- StringUtilsLib.sol#99-102\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "    function toSliceB32(bytes32 self) internal returns (slice ret) {\n\n        // Allocate space for `self` in memory, copy it there, and point ret at it\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            mstore(0x40, add(ptr, 0x20))\n\n            mstore(ptr, self)\n\n            mstore(add(ret, 0x20), ptr)\n\n        }\n\n        ret._len = len(self);\n",
                    "message": "StringUtilsLib.toSliceB32 uses assembly (StringUtilsLib.sol#143-152)\n\t- StringUtilsLib.sol#145-151\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function toString(slice self) internal view returns (string) {\n\n        var ret = new string(self._len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n\n\n        memcpy(retptr, self._ptr, self._len);\n\n        return ret;\n",
                    "message": "StringUtilsLib.toString uses assembly (StringUtilsLib.sol#168-175)\n\t- StringUtilsLib.sol#171-173\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "    function len(slice self) internal view returns (uint) {\n\n        // Starting at ptr-31 means the LSB will be the byte we care about\n\n        var ptr = self._ptr - 31;\n\n        var end = ptr + self._len;\n\n        for (uint len = 0; ptr < end; len++) {\n\n            uint8 b;\n\n            assembly {\n\n                b := and(mload(ptr), 0xFF)\n\n            }\n\n            if (b < 0x80) {\n\n                ptr += 1;\n\n            } else if(b < 0xE0) {\n\n                ptr += 2;\n\n            } else if(b < 0xF0) {\n\n                ptr += 3;\n\n            } else if(b < 0xF8) {\n\n                ptr += 4;\n\n            } else if(b < 0xFC) {\n\n                ptr += 5;\n\n            } else {\n\n                ptr += 6;\n\n            }\n\n        }\n\n        return len;\n",
                    "message": "StringUtilsLib.len uses assembly (StringUtilsLib.sol#186-210)\n\t- StringUtilsLib.sol#192-195\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "    function compare(slice self, slice other) internal view returns (int) {\n\n        uint shortest = self._len;\n\n        if (other._len < self._len)\n\n            shortest = other._len;\n\n\n\n        var selfptr = self._ptr;\n\n        var otherptr = other._ptr;\n\n        for (uint idx = 0; idx < shortest; idx += 32) {\n\n            uint a;\n\n            uint b;\n\n            assembly {\n\n                a := mload(selfptr)\n\n                b := mload(otherptr)\n\n            }\n\n            if (a != b) {\n\n                // Mask out irrelevant bytes and check again\n\n                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n\n                var diff = (a & mask) - (b & mask);\n\n                if (diff != 0)\n\n                    return int(diff);\n\n            }\n\n            selfptr += 32;\n\n            otherptr += 32;\n\n        }\n\n        return int(self._len) - int(other._len);\n",
                    "message": "StringUtilsLib.compare uses assembly (StringUtilsLib.sol#230-255)\n\t- StringUtilsLib.sol#240-244\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 308,
                    "vulnerability_code": "    function nextRune(slice self, slice rune) internal returns (slice) {\n\n        rune._ptr = self._ptr;\n\n\n\n        if (self._len == 0) {\n\n            rune._len = 0;\n\n            return rune;\n\n        }\n\n\n\n        uint len;\n\n        uint b;\n\n        // Load the first byte of the rune into the LSBs of b\n\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n\n        if (b < 0x80) {\n\n            len = 1;\n\n        } else if(b < 0xE0) {\n\n            len = 2;\n\n        } else if(b < 0xF0) {\n\n            len = 3;\n\n        } else {\n\n            len = 4;\n\n        }\n\n\n\n        // Check for truncated codepoints\n\n        if (len > self._len) {\n\n            rune._len = self._len;\n\n            self._ptr += self._len;\n\n            self._len = 0;\n\n            return rune;\n\n        }\n\n\n\n        self._ptr += len;\n\n        self._len -= len;\n\n        rune._len = len;\n\n        return rune;\n",
                    "message": "StringUtilsLib.nextRune uses assembly (StringUtilsLib.sol#274-308)\n\t- StringUtilsLib.sol#285-286\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 367,
                    "vulnerability_code": "    function ord(slice self) internal view returns (uint ret) {\n\n        if (self._len == 0) {\n\n            return 0;\n\n        }\n\n\n\n        uint word;\n\n        uint len;\n\n        uint div = 2 ** 248;\n\n\n\n        // Load the rune into the MSBs of b\n\n        assembly { word:= mload(mload(add(self, 32))) }\n\n        var b = word / div;\n\n        if (b < 0x80) {\n\n            ret = b;\n\n            len = 1;\n\n        } else if(b < 0xE0) {\n\n            ret = b & 0x1F;\n\n            len = 2;\n\n        } else if(b < 0xF0) {\n\n            ret = b & 0x0F;\n\n            len = 3;\n\n        } else {\n\n            ret = b & 0x07;\n\n            len = 4;\n\n        }\n\n\n\n        // Check for truncated codepoints\n\n        if (len > self._len) {\n\n            return 0;\n\n        }\n\n\n\n        for (uint i = 1; i < len; i++) {\n\n            div = div / 256;\n\n            b = (word / div) & 0xFF;\n\n            if (b & 0xC0 != 0x80) {\n\n                // Invalid UTF-8 sequence\n\n                return 0;\n\n            }\n\n            ret = (ret * 64) | (b & 0x3F);\n\n        }\n\n\n\n        return ret;\n",
                    "message": "StringUtilsLib.ord uses assembly (StringUtilsLib.sol#325-367)\n\t- StringUtilsLib.sol#335-336\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": 378,
                    "vulnerability_code": "    function keccak(slice self) internal view returns (bytes32 ret) {\n\n        assembly {\n\n            ret := sha3(mload(add(self, 32)), mload(self))\n\n        }\n",
                    "message": "StringUtilsLib.keccak uses assembly (StringUtilsLib.sol#374-378)\n\t- StringUtilsLib.sol#375-378\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": 403,
                    "vulnerability_code": "    function startsWith(slice self, slice needle) internal view returns (bool) {\n\n        if (self._len < needle._len) {\n\n            return false;\n\n        }\n\n\n\n        if (self._ptr == needle._ptr) {\n\n            return true;\n\n        }\n\n\n\n        bool equal;\n\n        assembly {\n\n            let len := mload(needle)\n\n            let selfptr := mload(add(self, 0x20))\n\n            let needleptr := mload(add(needle, 0x20))\n\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n        }\n\n        return equal;\n",
                    "message": "StringUtilsLib.startsWith uses assembly (StringUtilsLib.sol#386-403)\n\t- StringUtilsLib.sol#396-402\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "    function beyond(slice self, slice needle) internal returns (slice) {\n\n        if (self._len < needle._len) {\n\n            return self;\n\n        }\n\n\n\n        bool equal = true;\n\n        if (self._ptr != needle._ptr) {\n\n            assembly {\n\n                let len := mload(needle)\n\n                let selfptr := mload(add(self, 0x20))\n\n                let needleptr := mload(add(needle, 0x20))\n\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n            }\n\n        }\n\n\n\n        if (equal) {\n\n            self._len -= needle._len;\n\n            self._ptr += needle._len;\n\n        }\n\n\n\n        return self;\n",
                    "message": "StringUtilsLib.beyond uses assembly (StringUtilsLib.sol#412-433)\n\t- StringUtilsLib.sol#419-425\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "    function endsWith(slice self, slice needle) internal view returns (bool) {\n\n        if (self._len < needle._len) {\n\n            return false;\n\n        }\n\n\n\n        var selfptr = self._ptr + self._len - needle._len;\n\n\n\n        if (selfptr == needle._ptr) {\n\n            return true;\n\n        }\n\n\n\n        bool equal;\n\n        assembly {\n\n            let len := mload(needle)\n\n            let needleptr := mload(add(needle, 0x20))\n\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n        }\n\n\n\n        return equal;\n",
                    "message": "StringUtilsLib.endsWith uses assembly (StringUtilsLib.sol#441-460)\n\t- StringUtilsLib.sol#453-459\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": 489,
                    "vulnerability_code": "    function until(slice self, slice needle) internal returns (slice) {\n\n        if (self._len < needle._len) {\n\n            return self;\n\n        }\n\n\n\n        var selfptr = self._ptr + self._len - needle._len;\n\n        bool equal = true;\n\n        if (selfptr != needle._ptr) {\n\n            assembly {\n\n                let len := mload(needle)\n\n                let needleptr := mload(add(needle, 0x20))\n\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n            }\n\n        }\n\n\n\n        if (equal) {\n\n            self._len -= needle._len;\n\n        }\n\n\n\n        return self;\n",
                    "message": "StringUtilsLib.until uses assembly (StringUtilsLib.sol#469-489)\n\t- StringUtilsLib.sol#477-482\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n\n      private\n\n      view\n\n      returns (uint)\n\n    {\n\n        uint ptr;\n\n        uint idx;\n\n\n\n        if (needlelen <= selflen) {\n\n            if (needlelen <= 32) {\n\n                // Optimized assembly for 68 gas per byte on short strings\n\n                assembly {\n\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n\n                    let needledata := and(mload(needleptr), mask)\n\n                    let end := add(selfptr, sub(selflen, needlelen))\n\n                    let loop := selfptr\n\n\n\n                    for { } lt(loop, end) { } {\n\n                        switch eq(and(mload(loop), mask), needledata)\n\n                        case 1 {\n\n                            ptr := loop\n\n                            loop := end\n\n                        }\n\n                        case 0 {\n\n                            loop := add(loop,1)\n\n                        }\n\n                    }\n\n                    switch eq(and(mload(ptr), mask), needledata)\n\n                    case 0 {\n\n                        ptr := add(selfptr, selflen)\n\n                    }\n\n                }\n\n                return ptr;\n\n            } else {\n\n                // For long needles, use hashing\n\n                bytes32 hash;\n\n                assembly { hash := sha3(needleptr, needlelen) }\n\n                ptr = selfptr;\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n\n                    bytes32 testHash;\n\n                    assembly { testHash := sha3(ptr, needlelen) }\n\n                    if (hash == testHash)\n\n                        return ptr;\n\n                    ptr += 1;\n\n                }\n\n            }\n\n        }\n\n        return selfptr + selflen;\n",
                    "message": "StringUtilsLib.findPtr uses assembly (StringUtilsLib.sol#493-541)\n\t- StringUtilsLib.sol#504-525\n\t- StringUtilsLib.sol#529-530\n\t- StringUtilsLib.sol#533-534\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 594,
                    "vulnerability_code": "    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n\n      private\n\n      view\n\n      returns (uint)\n\n    {\n\n        uint ptr;\n\n\n\n        if (needlelen <= selflen) {\n\n            if (needlelen <= 32) {\n\n                // Optimized assembly for 69 gas per byte on short strings\n\n                assembly {\n\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n\n                    let needledata := and(mload(needleptr), mask)\n\n                    let loop := add(selfptr, sub(selflen, needlelen))\n\n\n\n                    for { } gt(loop, selfptr) { } {\n\n                        switch eq(and(mload(loop), mask), needledata)\n\n                        case 1 {\n\n                            ptr := loop\n\n                            loop := selfptr\n\n                        }\n\n                        case 0 {\n\n                            loop := sub(loop,1)\n\n                        }\n\n                    }\n\n                    switch eq(and(mload(ptr), mask), needledata)\n\n                    case 1 {\n\n                        ptr := add(ptr, needlelen)\n\n                    }\n\n                    case 0 {\n\n                        ptr := selfptr\n\n                    }\n\n                }\n\n                return ptr;\n\n            } else {\n\n                // For long needles, use hashing\n\n                bytes32 hash;\n\n                assembly { hash := sha3(needleptr, needlelen) }\n\n                ptr = selfptr + (selflen - needlelen);\n\n                while (ptr >= selfptr) {\n\n                    bytes32 testHash;\n\n                    assembly { testHash := sha3(ptr, needlelen) }\n\n                    if (hash == testHash)\n\n                        return ptr + needlelen;\n\n                    ptr -= 1;\n\n                }\n\n            }\n\n        }\n\n        return selfptr;\n",
                    "message": "StringUtilsLib.rfindPtr uses assembly (StringUtilsLib.sol#545-594)\n\t- StringUtilsLib.sol#555-578\n\t- StringUtilsLib.sol#582-583\n\t- StringUtilsLib.sol#586-587\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": 736,
                    "vulnerability_code": "    function concat(slice self, slice other) internal view returns (string) {\n\n        var ret = new string(self._len + other._len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n\n        memcpy(retptr + self._len, other._ptr, other._len);\n\n        return ret;\n",
                    "message": "StringUtilsLib.concat uses assembly (StringUtilsLib.sol#729-736)\n\t- StringUtilsLib.sol#732-733\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 768,
                    "vulnerability_code": "    function join(slice self, slice[] parts) internal view returns (string) {\n\n        if (parts.length == 0)\n\n            return \"\";\n\n\n\n        uint len = self._len * (parts.length - 1);\n\n        for(uint i = 0; i < parts.length; i++)\n\n            len += parts[i]._len;\n\n\n\n        var ret = new string(len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n\n\n        for(i = 0; i < parts.length; i++) {\n\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n\n            retptr += parts[i]._len;\n\n            if (i < parts.length - 1) {\n\n                memcpy(retptr, self._ptr, self._len);\n\n                retptr += self._len;\n\n            }\n\n        }\n\n\n\n        return ret;\n",
                    "message": "StringUtilsLib.join uses assembly (StringUtilsLib.sol#746-768)\n\t- StringUtilsLib.sol#756-758\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in StringUtilsLib.sol:\n\t- pragma solidity^0.4.18 (StringUtilsLib.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "    struct slice {\n\n        uint _len;\n\n        uint _ptr;\n",
                    "message": "Struct 'StringUtilsLib.slice' (StringUtilsLib.sol#68-71) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self & 0xffffffffffffffff == 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            self = bytes32(uint(self) / 0x10000000000000000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self & 0xffffffff == 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            self = bytes32(uint(self) / 0x100000000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self & 0xffff == 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            self = bytes32(uint(self) / 0x10000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self & 0xff == 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b < 0x80) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else if(b < 0xE0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else if(b < 0xF0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else if(b < 0xF8) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else if(b < 0xFC) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (b < 0x80) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if(b < 0xE0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if(b < 0xF0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (b < 0x80) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if(b < 0xE0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ret = b & 0x1F;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if(b < 0xF0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ret = b & 0x0F;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ret = b & 0x07;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            b = (word / div) & 0xFF;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b & 0xC0 != 0x80) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b & 0xC0 != 0x80) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ret = (ret * 64) | (b & 0x3F);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ret := sha3(mload(add(self, 32)), mload(self))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly { hash := sha3(needleptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    assembly { testHash := sha3(ptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly { hash := sha3(needleptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    assembly { testHash := sha3(ptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 751,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i = 0; i < parts.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(i = 0; i < parts.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nextRune(slice self) internal returns (slice ret) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keccak(slice self) internal view returns (bytes32 ret) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function split(slice self, slice needle) internal returns (slice token) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rsplit(slice self, slice needle) internal returns (slice token) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function count(slice self, slice needle) internal view returns (uint count) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 751,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i = 0; i < parts.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(i = 0; i < parts.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                while (ptr >= selfptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (ptr <= self._ptr + self._len) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function memcpy(uint dest, uint src, uint len) private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function toString(slice self) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function len(slice self) internal view returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function compare(slice self, slice other) internal view returns (int) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ord(slice self) internal view returns (uint ret) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keccak(slice self) internal view returns (bytes32 ret) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function startsWith(slice self, slice needle) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function endsWith(slice self, slice needle) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function concat(slice self, slice other) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(slice self, slice[] parts) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function toSlice(string self) internal returns (slice) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function toString(slice self) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function concat(slice self, slice other) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(slice self, slice[] parts) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(slice self, slice[] parts) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { retptr := add(ret, 32) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { word:= mload(mload(add(self, 32))) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly { hash := sha3(needleptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    assembly { testHash := sha3(ptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly { hash := sha3(needleptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    assembly { testHash := sha3(ptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { retptr := add(ret, 32) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 756,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { retptr := add(ret, 32) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VAR",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        var ptr = self._ptr - 31;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/StringUtilsLib/truffle/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.4 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Migrations() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/StringUtilsLib/truffle/contracts/StringUtilsLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(i = 0; i < parts.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (i < parts.length - 1) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint len = 0; ptr < end; len++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; i < len; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint len = 0; ptr < end; len++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; i < len; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (idx = 0; idx <= selflen - needlelen; idx++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 707,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 751,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i = 0; i < parts.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(i = 0; i < parts.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_38"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "    function memcpy(uint dest, uint src, uint len) private pure {\n\n        // Copy word-length chunks while possible\n\n        for(; len >= 32; len -= 32) {\n\n            assembly {\n\n                mstore(dest, mload(src))\n\n            }\n\n            dest += 32;\n\n            src += 32;\n\n        }\n\n\n\n        // Copy remaining bytes\n\n        uint mask = 256 ** (32 - len) - 1;\n\n        assembly {\n\n            let srcpart := and(mload(src), not(mask))\n\n            let destpart := and(mload(dest), mask)\n\n            mstore(dest, or(destpart, srcpart))\n\n        }\n",
                    "message": "StringUtilsLib.memcpy (StringUtilsLib.sol#73-90) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function toString(slice self) internal view returns (string) {\n\n        var ret = new string(self._len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n\n\n        memcpy(retptr, self._ptr, self._len);\n\n        return ret;\n",
                    "message": "StringUtilsLib.toString (StringUtilsLib.sol#168-175) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "    function len(slice self) internal view returns (uint) {\n\n        // Starting at ptr-31 means the LSB will be the byte we care about\n\n        var ptr = self._ptr - 31;\n\n        var end = ptr + self._len;\n\n        for (uint len = 0; ptr < end; len++) {\n\n            uint8 b;\n\n            assembly {\n\n                b := and(mload(ptr), 0xFF)\n\n            }\n\n            if (b < 0x80) {\n\n                ptr += 1;\n\n            } else if(b < 0xE0) {\n\n                ptr += 2;\n\n            } else if(b < 0xF0) {\n\n                ptr += 3;\n\n            } else if(b < 0xF8) {\n\n                ptr += 4;\n\n            } else if(b < 0xFC) {\n\n                ptr += 5;\n\n            } else {\n\n                ptr += 6;\n\n            }\n\n        }\n\n        return len;\n",
                    "message": "StringUtilsLib.len (StringUtilsLib.sol#186-210) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "    function compare(slice self, slice other) internal view returns (int) {\n\n        uint shortest = self._len;\n\n        if (other._len < self._len)\n\n            shortest = other._len;\n\n\n\n        var selfptr = self._ptr;\n\n        var otherptr = other._ptr;\n\n        for (uint idx = 0; idx < shortest; idx += 32) {\n\n            uint a;\n\n            uint b;\n\n            assembly {\n\n                a := mload(selfptr)\n\n                b := mload(otherptr)\n\n            }\n\n            if (a != b) {\n\n                // Mask out irrelevant bytes and check again\n\n                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n\n                var diff = (a & mask) - (b & mask);\n\n                if (diff != 0)\n\n                    return int(diff);\n\n            }\n\n            selfptr += 32;\n\n            otherptr += 32;\n\n        }\n\n        return int(self._len) - int(other._len);\n",
                    "message": "StringUtilsLib.compare (StringUtilsLib.sol#230-255) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 367,
                    "vulnerability_code": "    function ord(slice self) internal view returns (uint ret) {\n\n        if (self._len == 0) {\n\n            return 0;\n\n        }\n\n\n\n        uint word;\n\n        uint len;\n\n        uint div = 2 ** 248;\n\n\n\n        // Load the rune into the MSBs of b\n\n        assembly { word:= mload(mload(add(self, 32))) }\n\n        var b = word / div;\n\n        if (b < 0x80) {\n\n            ret = b;\n\n            len = 1;\n\n        } else if(b < 0xE0) {\n\n            ret = b & 0x1F;\n\n            len = 2;\n\n        } else if(b < 0xF0) {\n\n            ret = b & 0x0F;\n\n            len = 3;\n\n        } else {\n\n            ret = b & 0x07;\n\n            len = 4;\n\n        }\n\n\n\n        // Check for truncated codepoints\n\n        if (len > self._len) {\n\n            return 0;\n\n        }\n\n\n\n        for (uint i = 1; i < len; i++) {\n\n            div = div / 256;\n\n            b = (word / div) & 0xFF;\n\n            if (b & 0xC0 != 0x80) {\n\n                // Invalid UTF-8 sequence\n\n                return 0;\n\n            }\n\n            ret = (ret * 64) | (b & 0x3F);\n\n        }\n\n\n\n        return ret;\n",
                    "message": "StringUtilsLib.ord (StringUtilsLib.sol#325-367) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": 378,
                    "vulnerability_code": "    function keccak(slice self) internal view returns (bytes32 ret) {\n\n        assembly {\n\n            ret := sha3(mload(add(self, 32)), mload(self))\n\n        }\n",
                    "message": "StringUtilsLib.keccak (StringUtilsLib.sol#374-378) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": 403,
                    "vulnerability_code": "    function startsWith(slice self, slice needle) internal view returns (bool) {\n\n        if (self._len < needle._len) {\n\n            return false;\n\n        }\n\n\n\n        if (self._ptr == needle._ptr) {\n\n            return true;\n\n        }\n\n\n\n        bool equal;\n\n        assembly {\n\n            let len := mload(needle)\n\n            let selfptr := mload(add(self, 0x20))\n\n            let needleptr := mload(add(needle, 0x20))\n\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n        }\n\n        return equal;\n",
                    "message": "StringUtilsLib.startsWith (StringUtilsLib.sol#386-403) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "    function endsWith(slice self, slice needle) internal view returns (bool) {\n\n        if (self._len < needle._len) {\n\n            return false;\n\n        }\n\n\n\n        var selfptr = self._ptr + self._len - needle._len;\n\n\n\n        if (selfptr == needle._ptr) {\n\n            return true;\n\n        }\n\n\n\n        bool equal;\n\n        assembly {\n\n            let len := mload(needle)\n\n            let needleptr := mload(add(needle, 0x20))\n\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n        }\n\n\n\n        return equal;\n",
                    "message": "StringUtilsLib.endsWith (StringUtilsLib.sol#441-460) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n\n      private\n\n      view\n\n      returns (uint)\n\n    {\n\n        uint ptr;\n\n        uint idx;\n\n\n\n        if (needlelen <= selflen) {\n\n            if (needlelen <= 32) {\n\n                // Optimized assembly for 68 gas per byte on short strings\n\n                assembly {\n\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n\n                    let needledata := and(mload(needleptr), mask)\n\n                    let end := add(selfptr, sub(selflen, needlelen))\n\n                    let loop := selfptr\n\n\n\n                    for { } lt(loop, end) { } {\n\n                        switch eq(and(mload(loop), mask), needledata)\n\n                        case 1 {\n\n                            ptr := loop\n\n                            loop := end\n\n                        }\n\n                        case 0 {\n\n                            loop := add(loop,1)\n\n                        }\n\n                    }\n\n                    switch eq(and(mload(ptr), mask), needledata)\n\n                    case 0 {\n\n                        ptr := add(selfptr, selflen)\n\n                    }\n\n                }\n\n                return ptr;\n\n            } else {\n\n                // For long needles, use hashing\n\n                bytes32 hash;\n\n                assembly { hash := sha3(needleptr, needlelen) }\n\n                ptr = selfptr;\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n\n                    bytes32 testHash;\n\n                    assembly { testHash := sha3(ptr, needlelen) }\n\n                    if (hash == testHash)\n\n                        return ptr;\n\n                    ptr += 1;\n\n                }\n\n            }\n\n        }\n\n        return selfptr + selflen;\n",
                    "message": "StringUtilsLib.findPtr (StringUtilsLib.sol#493-541) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 594,
                    "vulnerability_code": "    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n\n      private\n\n      view\n\n      returns (uint)\n\n    {\n\n        uint ptr;\n\n\n\n        if (needlelen <= selflen) {\n\n            if (needlelen <= 32) {\n\n                // Optimized assembly for 69 gas per byte on short strings\n\n                assembly {\n\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n\n                    let needledata := and(mload(needleptr), mask)\n\n                    let loop := add(selfptr, sub(selflen, needlelen))\n\n\n\n                    for { } gt(loop, selfptr) { } {\n\n                        switch eq(and(mload(loop), mask), needledata)\n\n                        case 1 {\n\n                            ptr := loop\n\n                            loop := selfptr\n\n                        }\n\n                        case 0 {\n\n                            loop := sub(loop,1)\n\n                        }\n\n                    }\n\n                    switch eq(and(mload(ptr), mask), needledata)\n\n                    case 1 {\n\n                        ptr := add(ptr, needlelen)\n\n                    }\n\n                    case 0 {\n\n                        ptr := selfptr\n\n                    }\n\n                }\n\n                return ptr;\n\n            } else {\n\n                // For long needles, use hashing\n\n                bytes32 hash;\n\n                assembly { hash := sha3(needleptr, needlelen) }\n\n                ptr = selfptr + (selflen - needlelen);\n\n                while (ptr >= selfptr) {\n\n                    bytes32 testHash;\n\n                    assembly { testHash := sha3(ptr, needlelen) }\n\n                    if (hash == testHash)\n\n                        return ptr + needlelen;\n\n                    ptr -= 1;\n\n                }\n\n            }\n\n        }\n\n        return selfptr;\n",
                    "message": "StringUtilsLib.rfindPtr (StringUtilsLib.sol#545-594) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": 736,
                    "vulnerability_code": "    function concat(slice self, slice other) internal view returns (string) {\n\n        var ret = new string(self._len + other._len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n\n        memcpy(retptr + self._len, other._ptr, other._len);\n\n        return ret;\n",
                    "message": "StringUtilsLib.concat (StringUtilsLib.sol#729-736) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 768,
                    "vulnerability_code": "    function join(slice self, slice[] parts) internal view returns (string) {\n\n        if (parts.length == 0)\n\n            return \"\";\n\n\n\n        uint len = self._len * (parts.length - 1);\n\n        for(uint i = 0; i < parts.length; i++)\n\n            len += parts[i]._len;\n\n\n\n        var ret = new string(len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n\n\n        for(i = 0; i < parts.length; i++) {\n\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n\n            retptr += parts[i]._len;\n\n            if (i < parts.length - 1) {\n\n                memcpy(retptr, self._ptr, self._len);\n\n                retptr += self._len;\n\n            }\n\n        }\n\n\n\n        return ret;\n",
                    "message": "StringUtilsLib.join (StringUtilsLib.sol#746-768) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint ret;\n",
                    "message": "ret in StringUtilsLib.len (StringUtilsLib.sol#111) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function memcpy(uint dest, uint src, uint len) private pure {\n",
                    "message": "StringUtilsLib.memcpy.len (local variable @ StringUtilsLib.sol#73) shadows:\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#110-134)\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#186-210)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint len = 0; ptr < end; len++) {\n",
                    "message": "StringUtilsLib.len.len (local variable @ StringUtilsLib.sol#190) shadows:\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#110-134)\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#186-210)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint len;\n",
                    "message": "StringUtilsLib.nextRune.len (local variable @ StringUtilsLib.sol#282) shadows:\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#110-134)\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#186-210)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint len;\n",
                    "message": "StringUtilsLib.ord.len (local variable @ StringUtilsLib.sol#331) shadows:\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#110-134)\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#186-210)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function count(slice self, slice needle) internal view returns (uint count) {\n",
                    "message": "StringUtilsLib.count.count (local variable @ StringUtilsLib.sol#704) shadows:\n\t- StringUtilsLib.count (function @ StringUtilsLib.sol#704-710)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 750,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint len = self._len * (parts.length - 1);\n",
                    "message": "StringUtilsLib.join.len (local variable @ StringUtilsLib.sol#750) shadows:\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#110-134)\n\t- StringUtilsLib.len (function @ StringUtilsLib.sol#186-210)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "    function memcpy(uint dest, uint src, uint len) private pure {\n\n        // Copy word-length chunks while possible\n\n        for(; len >= 32; len -= 32) {\n\n            assembly {\n\n                mstore(dest, mload(src))\n\n            }\n\n            dest += 32;\n\n            src += 32;\n\n        }\n\n\n\n        // Copy remaining bytes\n\n        uint mask = 256 ** (32 - len) - 1;\n\n        assembly {\n\n            let srcpart := and(mload(src), not(mask))\n\n            let destpart := and(mload(dest), mask)\n\n            mstore(dest, or(destpart, srcpart))\n\n        }\n",
                    "message": "StringUtilsLib.memcpy uses assembly (StringUtilsLib.sol#73-90)\n\t- StringUtilsLib.sol#76-79\n\t- StringUtilsLib.sol#85-90\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function toSlice(string self) internal returns (slice) {\n\n        uint ptr;\n\n        assembly {\n\n            ptr := add(self, 0x20)\n\n        }\n\n        return slice(bytes(self).length, ptr);\n",
                    "message": "StringUtilsLib.toSlice uses assembly (StringUtilsLib.sol#97-103)\n\t- StringUtilsLib.sol#99-102\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "    function toSliceB32(bytes32 self) internal returns (slice ret) {\n\n        // Allocate space for `self` in memory, copy it there, and point ret at it\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            mstore(0x40, add(ptr, 0x20))\n\n            mstore(ptr, self)\n\n            mstore(add(ret, 0x20), ptr)\n\n        }\n\n        ret._len = len(self);\n",
                    "message": "StringUtilsLib.toSliceB32 uses assembly (StringUtilsLib.sol#143-152)\n\t- StringUtilsLib.sol#145-151\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function toString(slice self) internal view returns (string) {\n\n        var ret = new string(self._len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n\n\n        memcpy(retptr, self._ptr, self._len);\n\n        return ret;\n",
                    "message": "StringUtilsLib.toString uses assembly (StringUtilsLib.sol#168-175)\n\t- StringUtilsLib.sol#171-173\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "    function len(slice self) internal view returns (uint) {\n\n        // Starting at ptr-31 means the LSB will be the byte we care about\n\n        var ptr = self._ptr - 31;\n\n        var end = ptr + self._len;\n\n        for (uint len = 0; ptr < end; len++) {\n\n            uint8 b;\n\n            assembly {\n\n                b := and(mload(ptr), 0xFF)\n\n            }\n\n            if (b < 0x80) {\n\n                ptr += 1;\n\n            } else if(b < 0xE0) {\n\n                ptr += 2;\n\n            } else if(b < 0xF0) {\n\n                ptr += 3;\n\n            } else if(b < 0xF8) {\n\n                ptr += 4;\n\n            } else if(b < 0xFC) {\n\n                ptr += 5;\n\n            } else {\n\n                ptr += 6;\n\n            }\n\n        }\n\n        return len;\n",
                    "message": "StringUtilsLib.len uses assembly (StringUtilsLib.sol#186-210)\n\t- StringUtilsLib.sol#192-195\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "    function compare(slice self, slice other) internal view returns (int) {\n\n        uint shortest = self._len;\n\n        if (other._len < self._len)\n\n            shortest = other._len;\n\n\n\n        var selfptr = self._ptr;\n\n        var otherptr = other._ptr;\n\n        for (uint idx = 0; idx < shortest; idx += 32) {\n\n            uint a;\n\n            uint b;\n\n            assembly {\n\n                a := mload(selfptr)\n\n                b := mload(otherptr)\n\n            }\n\n            if (a != b) {\n\n                // Mask out irrelevant bytes and check again\n\n                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n\n                var diff = (a & mask) - (b & mask);\n\n                if (diff != 0)\n\n                    return int(diff);\n\n            }\n\n            selfptr += 32;\n\n            otherptr += 32;\n\n        }\n\n        return int(self._len) - int(other._len);\n",
                    "message": "StringUtilsLib.compare uses assembly (StringUtilsLib.sol#230-255)\n\t- StringUtilsLib.sol#240-244\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 308,
                    "vulnerability_code": "    function nextRune(slice self, slice rune) internal returns (slice) {\n\n        rune._ptr = self._ptr;\n\n\n\n        if (self._len == 0) {\n\n            rune._len = 0;\n\n            return rune;\n\n        }\n\n\n\n        uint len;\n\n        uint b;\n\n        // Load the first byte of the rune into the LSBs of b\n\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n\n        if (b < 0x80) {\n\n            len = 1;\n\n        } else if(b < 0xE0) {\n\n            len = 2;\n\n        } else if(b < 0xF0) {\n\n            len = 3;\n\n        } else {\n\n            len = 4;\n\n        }\n\n\n\n        // Check for truncated codepoints\n\n        if (len > self._len) {\n\n            rune._len = self._len;\n\n            self._ptr += self._len;\n\n            self._len = 0;\n\n            return rune;\n\n        }\n\n\n\n        self._ptr += len;\n\n        self._len -= len;\n\n        rune._len = len;\n\n        return rune;\n",
                    "message": "StringUtilsLib.nextRune uses assembly (StringUtilsLib.sol#274-308)\n\t- StringUtilsLib.sol#285-286\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 367,
                    "vulnerability_code": "    function ord(slice self) internal view returns (uint ret) {\n\n        if (self._len == 0) {\n\n            return 0;\n\n        }\n\n\n\n        uint word;\n\n        uint len;\n\n        uint div = 2 ** 248;\n\n\n\n        // Load the rune into the MSBs of b\n\n        assembly { word:= mload(mload(add(self, 32))) }\n\n        var b = word / div;\n\n        if (b < 0x80) {\n\n            ret = b;\n\n            len = 1;\n\n        } else if(b < 0xE0) {\n\n            ret = b & 0x1F;\n\n            len = 2;\n\n        } else if(b < 0xF0) {\n\n            ret = b & 0x0F;\n\n            len = 3;\n\n        } else {\n\n            ret = b & 0x07;\n\n            len = 4;\n\n        }\n\n\n\n        // Check for truncated codepoints\n\n        if (len > self._len) {\n\n            return 0;\n\n        }\n\n\n\n        for (uint i = 1; i < len; i++) {\n\n            div = div / 256;\n\n            b = (word / div) & 0xFF;\n\n            if (b & 0xC0 != 0x80) {\n\n                // Invalid UTF-8 sequence\n\n                return 0;\n\n            }\n\n            ret = (ret * 64) | (b & 0x3F);\n\n        }\n\n\n\n        return ret;\n",
                    "message": "StringUtilsLib.ord uses assembly (StringUtilsLib.sol#325-367)\n\t- StringUtilsLib.sol#335-336\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": 378,
                    "vulnerability_code": "    function keccak(slice self) internal view returns (bytes32 ret) {\n\n        assembly {\n\n            ret := sha3(mload(add(self, 32)), mload(self))\n\n        }\n",
                    "message": "StringUtilsLib.keccak uses assembly (StringUtilsLib.sol#374-378)\n\t- StringUtilsLib.sol#375-378\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": 403,
                    "vulnerability_code": "    function startsWith(slice self, slice needle) internal view returns (bool) {\n\n        if (self._len < needle._len) {\n\n            return false;\n\n        }\n\n\n\n        if (self._ptr == needle._ptr) {\n\n            return true;\n\n        }\n\n\n\n        bool equal;\n\n        assembly {\n\n            let len := mload(needle)\n\n            let selfptr := mload(add(self, 0x20))\n\n            let needleptr := mload(add(needle, 0x20))\n\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n        }\n\n        return equal;\n",
                    "message": "StringUtilsLib.startsWith uses assembly (StringUtilsLib.sol#386-403)\n\t- StringUtilsLib.sol#396-402\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "    function beyond(slice self, slice needle) internal returns (slice) {\n\n        if (self._len < needle._len) {\n\n            return self;\n\n        }\n\n\n\n        bool equal = true;\n\n        if (self._ptr != needle._ptr) {\n\n            assembly {\n\n                let len := mload(needle)\n\n                let selfptr := mload(add(self, 0x20))\n\n                let needleptr := mload(add(needle, 0x20))\n\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n            }\n\n        }\n\n\n\n        if (equal) {\n\n            self._len -= needle._len;\n\n            self._ptr += needle._len;\n\n        }\n\n\n\n        return self;\n",
                    "message": "StringUtilsLib.beyond uses assembly (StringUtilsLib.sol#412-433)\n\t- StringUtilsLib.sol#419-425\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "    function endsWith(slice self, slice needle) internal view returns (bool) {\n\n        if (self._len < needle._len) {\n\n            return false;\n\n        }\n\n\n\n        var selfptr = self._ptr + self._len - needle._len;\n\n\n\n        if (selfptr == needle._ptr) {\n\n            return true;\n\n        }\n\n\n\n        bool equal;\n\n        assembly {\n\n            let len := mload(needle)\n\n            let needleptr := mload(add(needle, 0x20))\n\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n        }\n\n\n\n        return equal;\n",
                    "message": "StringUtilsLib.endsWith uses assembly (StringUtilsLib.sol#441-460)\n\t- StringUtilsLib.sol#453-459\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": 489,
                    "vulnerability_code": "    function until(slice self, slice needle) internal returns (slice) {\n\n        if (self._len < needle._len) {\n\n            return self;\n\n        }\n\n\n\n        var selfptr = self._ptr + self._len - needle._len;\n\n        bool equal = true;\n\n        if (selfptr != needle._ptr) {\n\n            assembly {\n\n                let len := mload(needle)\n\n                let needleptr := mload(add(needle, 0x20))\n\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n\n            }\n\n        }\n\n\n\n        if (equal) {\n\n            self._len -= needle._len;\n\n        }\n\n\n\n        return self;\n",
                    "message": "StringUtilsLib.until uses assembly (StringUtilsLib.sol#469-489)\n\t- StringUtilsLib.sol#477-482\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n\n      private\n\n      view\n\n      returns (uint)\n\n    {\n\n        uint ptr;\n\n        uint idx;\n\n\n\n        if (needlelen <= selflen) {\n\n            if (needlelen <= 32) {\n\n                // Optimized assembly for 68 gas per byte on short strings\n\n                assembly {\n\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n\n                    let needledata := and(mload(needleptr), mask)\n\n                    let end := add(selfptr, sub(selflen, needlelen))\n\n                    let loop := selfptr\n\n\n\n                    for { } lt(loop, end) { } {\n\n                        switch eq(and(mload(loop), mask), needledata)\n\n                        case 1 {\n\n                            ptr := loop\n\n                            loop := end\n\n                        }\n\n                        case 0 {\n\n                            loop := add(loop,1)\n\n                        }\n\n                    }\n\n                    switch eq(and(mload(ptr), mask), needledata)\n\n                    case 0 {\n\n                        ptr := add(selfptr, selflen)\n\n                    }\n\n                }\n\n                return ptr;\n\n            } else {\n\n                // For long needles, use hashing\n\n                bytes32 hash;\n\n                assembly { hash := sha3(needleptr, needlelen) }\n\n                ptr = selfptr;\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n\n                    bytes32 testHash;\n\n                    assembly { testHash := sha3(ptr, needlelen) }\n\n                    if (hash == testHash)\n\n                        return ptr;\n\n                    ptr += 1;\n\n                }\n\n            }\n\n        }\n\n        return selfptr + selflen;\n",
                    "message": "StringUtilsLib.findPtr uses assembly (StringUtilsLib.sol#493-541)\n\t- StringUtilsLib.sol#504-525\n\t- StringUtilsLib.sol#529-530\n\t- StringUtilsLib.sol#533-534\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 594,
                    "vulnerability_code": "    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n\n      private\n\n      view\n\n      returns (uint)\n\n    {\n\n        uint ptr;\n\n\n\n        if (needlelen <= selflen) {\n\n            if (needlelen <= 32) {\n\n                // Optimized assembly for 69 gas per byte on short strings\n\n                assembly {\n\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n\n                    let needledata := and(mload(needleptr), mask)\n\n                    let loop := add(selfptr, sub(selflen, needlelen))\n\n\n\n                    for { } gt(loop, selfptr) { } {\n\n                        switch eq(and(mload(loop), mask), needledata)\n\n                        case 1 {\n\n                            ptr := loop\n\n                            loop := selfptr\n\n                        }\n\n                        case 0 {\n\n                            loop := sub(loop,1)\n\n                        }\n\n                    }\n\n                    switch eq(and(mload(ptr), mask), needledata)\n\n                    case 1 {\n\n                        ptr := add(ptr, needlelen)\n\n                    }\n\n                    case 0 {\n\n                        ptr := selfptr\n\n                    }\n\n                }\n\n                return ptr;\n\n            } else {\n\n                // For long needles, use hashing\n\n                bytes32 hash;\n\n                assembly { hash := sha3(needleptr, needlelen) }\n\n                ptr = selfptr + (selflen - needlelen);\n\n                while (ptr >= selfptr) {\n\n                    bytes32 testHash;\n\n                    assembly { testHash := sha3(ptr, needlelen) }\n\n                    if (hash == testHash)\n\n                        return ptr + needlelen;\n\n                    ptr -= 1;\n\n                }\n\n            }\n\n        }\n\n        return selfptr;\n",
                    "message": "StringUtilsLib.rfindPtr uses assembly (StringUtilsLib.sol#545-594)\n\t- StringUtilsLib.sol#555-578\n\t- StringUtilsLib.sol#582-583\n\t- StringUtilsLib.sol#586-587\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": 736,
                    "vulnerability_code": "    function concat(slice self, slice other) internal view returns (string) {\n\n        var ret = new string(self._len + other._len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n\n        memcpy(retptr + self._len, other._ptr, other._len);\n\n        return ret;\n",
                    "message": "StringUtilsLib.concat uses assembly (StringUtilsLib.sol#729-736)\n\t- StringUtilsLib.sol#732-733\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 768,
                    "vulnerability_code": "    function join(slice self, slice[] parts) internal view returns (string) {\n\n        if (parts.length == 0)\n\n            return \"\";\n\n\n\n        uint len = self._len * (parts.length - 1);\n\n        for(uint i = 0; i < parts.length; i++)\n\n            len += parts[i]._len;\n\n\n\n        var ret = new string(len);\n\n        uint retptr;\n\n        assembly { retptr := add(ret, 32) }\n\n\n\n        for(i = 0; i < parts.length; i++) {\n\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n\n            retptr += parts[i]._len;\n\n            if (i < parts.length - 1) {\n\n                memcpy(retptr, self._ptr, self._len);\n\n                retptr += self._len;\n\n            }\n\n        }\n\n\n\n        return ret;\n",
                    "message": "StringUtilsLib.join uses assembly (StringUtilsLib.sol#746-768)\n\t- StringUtilsLib.sol#756-758\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in StringUtilsLib.sol:\n\t- pragma solidity^0.4.18 (StringUtilsLib.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "    struct slice {\n\n        uint _len;\n\n        uint _ptr;\n",
                    "message": "Struct 'StringUtilsLib.slice' (StringUtilsLib.sol#68-71) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self & 0xffffffffffffffff == 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            self = bytes32(uint(self) / 0x10000000000000000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self & 0xffffffff == 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            self = bytes32(uint(self) / 0x100000000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self & 0xffff == 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            self = bytes32(uint(self) / 0x10000);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self & 0xff == 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b < 0x80) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else if(b < 0xE0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else if(b < 0xF0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else if(b < 0xF8) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else if(b < 0xFC) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (b < 0x80) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if(b < 0xE0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if(b < 0xF0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (b < 0x80) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if(b < 0xE0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ret = b & 0x1F;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if(b < 0xF0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ret = b & 0x0F;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ret = b & 0x07;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            b = (word / div) & 0xFF;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b & 0xC0 != 0x80) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b & 0xC0 != 0x80) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ret = (ret * 64) | (b & 0x3F);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ret := sha3(mload(add(self, 32)), mload(self))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly { hash := sha3(needleptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    assembly { testHash := sha3(ptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly { hash := sha3(needleptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    assembly { testHash := sha3(ptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 751,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i = 0; i < parts.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(i = 0; i < parts.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nextRune(slice self) internal returns (slice ret) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keccak(slice self) internal view returns (bytes32 ret) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function split(slice self, slice needle) internal returns (slice token) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rsplit(slice self, slice needle) internal returns (slice token) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function count(slice self, slice needle) internal view returns (uint count) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 751,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i = 0; i < parts.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(i = 0; i < parts.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                while (ptr >= selfptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (ptr <= self._ptr + self._len) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function memcpy(uint dest, uint src, uint len) private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function toString(slice self) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function len(slice self) internal view returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function compare(slice self, slice other) internal view returns (int) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ord(slice self) internal view returns (uint ret) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keccak(slice self) internal view returns (bytes32 ret) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function startsWith(slice self, slice needle) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function endsWith(slice self, slice needle) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function concat(slice self, slice other) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(slice self, slice[] parts) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function toSlice(string self) internal returns (slice) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function toString(slice self) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function concat(slice self, slice other) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(slice self, slice[] parts) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(slice self, slice[] parts) internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { retptr := add(ret, 32) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { word:= mload(mload(add(self, 32))) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly { hash := sha3(needleptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    assembly { testHash := sha3(ptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly { hash := sha3(needleptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    assembly { testHash := sha3(ptr, needlelen) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { retptr := add(ret, 32) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 756,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { retptr := add(ret, 32) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VAR",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        var ptr = self._ptr - 31;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/LinkedListLib/LinkedListLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (self.list[HEAD][NEXT] == _node) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 c = self.list[_node][_direction];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _node, _new, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _new, c, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            numElements++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in LinkedListLib.sol:\n\t- pragma solidity^0.4.18 (LinkedListLib.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nodeExists(LinkedList storage self, uint256 _node) \n",
                    "message": "Parameter '_node' of LinkedListLib.nodeExists (LinkedListLib.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getNode(LinkedList storage self, uint256 _node)\n",
                    "message": "Parameter '_node' of LinkedListLib.getNode (LinkedListLib.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getAdjacent (LinkedListLib.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getAdjacent (LinkedListLib.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getSortedSpot (LinkedListLib.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_value' of LinkedListLib.getSortedSpot (LinkedListLib.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getSortedSpot (LinkedListLib.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.createLink (LinkedListLib.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_link' of LinkedListLib.createLink (LinkedListLib.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.createLink (LinkedListLib.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_node' of LinkedListLib.insert (LinkedListLib.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_new' of LinkedListLib.insert (LinkedListLib.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.insert (LinkedListLib.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\n",
                    "message": "Parameter '_node' of LinkedListLib.remove (LinkedListLib.sol#169) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.push (LinkedListLib.sol#181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.push (LinkedListLib.sol#181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.pop (LinkedListLib.sol#188) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (i != HEAD) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant NULL = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant HEAD = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant PREV = false;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant NEXT = true;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/LinkedListLib/truffle/contracts/LinkedListLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (self.list[HEAD][NEXT] == _node) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 c = self.list[_node][_direction];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _node, _new, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _new, c, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            numElements++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in LinkedListLib.sol:\n\t- pragma solidity^0.4.18 (LinkedListLib.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nodeExists(LinkedList storage self, uint256 _node) \n",
                    "message": "Parameter '_node' of LinkedListLib.nodeExists (LinkedListLib.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getNode(LinkedList storage self, uint256 _node)\n",
                    "message": "Parameter '_node' of LinkedListLib.getNode (LinkedListLib.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getAdjacent (LinkedListLib.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getAdjacent (LinkedListLib.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getSortedSpot (LinkedListLib.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_value' of LinkedListLib.getSortedSpot (LinkedListLib.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getSortedSpot (LinkedListLib.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.createLink (LinkedListLib.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_link' of LinkedListLib.createLink (LinkedListLib.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.createLink (LinkedListLib.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_node' of LinkedListLib.insert (LinkedListLib.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_new' of LinkedListLib.insert (LinkedListLib.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.insert (LinkedListLib.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\n",
                    "message": "Parameter '_node' of LinkedListLib.remove (LinkedListLib.sol#169) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.push (LinkedListLib.sol#181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.push (LinkedListLib.sol#181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.pop (LinkedListLib.sol#188) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (i != HEAD) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant NULL = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant HEAD = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant PREV = false;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant NEXT = true;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/LinkedListLib/truffle/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) public restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.18 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/LinkedListLib/truffle/contracts/LinkedListTestContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (self.list[HEAD][NEXT] == _node) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 c = self.list[_node][_direction];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _node, _new, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            createLink(self, _new, c, _direction);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            numElements++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_44"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "    function insert(uint256 _node, uint256 _new, bool _direction) public {\n\n        list.insert(_node,_new,_direction);\n",
                    "message": "LinkedListTestContract.insert (LinkedListTestContract.sol#262-264) does not use the value returned by external calls:\n\t-list.insert(_node,_new,_direction) (LinkedListTestContract.sol#263)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": 218,
                    "vulnerability_code": "\tfunction listExists()\n\n        view public returns (bool)\n\n    {\n\n        return list.listExists();\n",
                    "message": "LinkedListTestContract.listExists (LinkedListTestContract.sol#214-218) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 223,
                    "vulnerability_code": "    function nodeExists(uint256 _node) view public returns (bool) {\n\n        return list.nodeExists(_node);\n",
                    "message": "LinkedListTestContract.nodeExists (LinkedListTestContract.sol#221-223) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "    function sizeOf() view public returns (uint256 numElements) {\n\n        return list.sizeOf();\n",
                    "message": "LinkedListTestContract.sizeOf (LinkedListTestContract.sol#226-228) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 236,
                    "vulnerability_code": "    function getNode(uint256 _node)\n\n\t\tview public returns (bool,uint256,uint256)\n\n    {\n\n        return list.getNode(_node);\n",
                    "message": "LinkedListTestContract.getNode (LinkedListTestContract.sol#232-236) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 245,
                    "vulnerability_code": "    function getAdjacent(uint256 _node, bool _direction)\n\n        view public returns (bool,uint256)\n\n    {\n\n        return list.getAdjacent(_node,_direction);\n",
                    "message": "LinkedListTestContract.getAdjacent (LinkedListTestContract.sol#241-245) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 256,
                    "vulnerability_code": "    function getSortedSpot(uint256 _node, uint256 _value, bool _direction)\n\n        view public returns (uint256 next)\n\n    {\n\n        return list.getSortedSpot(_node,_value,_direction);\n",
                    "message": "LinkedListTestContract.getSortedSpot (LinkedListTestContract.sol#252-256) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "    function insert(uint256 _node, uint256 _new, bool _direction) public {\n\n        list.insert(_node,_new,_direction);\n",
                    "message": "LinkedListTestContract.insert (LinkedListTestContract.sol#262-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": 270,
                    "vulnerability_code": "    function remove(uint256 _node) public returns (uint256) {\n\n        return list.remove(_node);\n",
                    "message": "LinkedListTestContract.remove (LinkedListTestContract.sol#268-270) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "    function push(uint256 _node, bool _direction) public {\n\n        list.push(_node,_direction);\n",
                    "message": "LinkedListTestContract.push (LinkedListTestContract.sol#275-277) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function pop(bool _direction) public returns (uint256) {\n\n        return list.pop(_direction);\n",
                    "message": "LinkedListTestContract.pop (LinkedListTestContract.sol#281-283) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in LinkedListTestContract.sol:\n\t- pragma solidity^0.4.18 (LinkedListTestContract.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (LinkedListTestContract.sol#200): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nodeExists(LinkedList storage self, uint256 _node) \n",
                    "message": "Parameter '_node' of LinkedListLib.nodeExists (LinkedListTestContract.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getNode(LinkedList storage self, uint256 _node)\n",
                    "message": "Parameter '_node' of LinkedListLib.getNode (LinkedListTestContract.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getAdjacent (LinkedListTestContract.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getAdjacent (LinkedListTestContract.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListLib.getSortedSpot (LinkedListTestContract.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_value' of LinkedListLib.getSortedSpot (LinkedListTestContract.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListLib.getSortedSpot (LinkedListTestContract.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.createLink (LinkedListTestContract.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_link' of LinkedListLib.createLink (LinkedListTestContract.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.createLink (LinkedListTestContract.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_node' of LinkedListLib.insert (LinkedListTestContract.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_new' of LinkedListLib.insert (LinkedListTestContract.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.insert (LinkedListTestContract.sol#155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\n",
                    "message": "Parameter '_node' of LinkedListLib.remove (LinkedListTestContract.sol#169) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_node' of LinkedListLib.push (LinkedListTestContract.sol#181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
                    "message": "Parameter '_direction' of LinkedListLib.push (LinkedListTestContract.sol#181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\n",
                    "message": "Parameter '_direction' of LinkedListLib.pop (LinkedListTestContract.sol#188) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nodeExists(uint256 _node) view public returns (bool) {\n",
                    "message": "Parameter '_node' of LinkedListTestContract.nodeExists (LinkedListTestContract.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getNode(uint256 _node)\n",
                    "message": "Parameter '_node' of LinkedListTestContract.getNode (LinkedListTestContract.sol#232) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(uint256 _node, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListTestContract.getAdjacent (LinkedListTestContract.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAdjacent(uint256 _node, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListTestContract.getAdjacent (LinkedListTestContract.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_node' of LinkedListTestContract.getSortedSpot (LinkedListTestContract.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_value' of LinkedListTestContract.getSortedSpot (LinkedListTestContract.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSortedSpot(uint256 _node, uint256 _value, bool _direction)\n",
                    "message": "Parameter '_direction' of LinkedListTestContract.getSortedSpot (LinkedListTestContract.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(uint256 _node, uint256 _new, bool _direction) public {\n",
                    "message": "Parameter '_node' of LinkedListTestContract.insert (LinkedListTestContract.sol#262) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(uint256 _node, uint256 _new, bool _direction) public {\n",
                    "message": "Parameter '_new' of LinkedListTestContract.insert (LinkedListTestContract.sol#262) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insert(uint256 _node, uint256 _new, bool _direction) public {\n",
                    "message": "Parameter '_direction' of LinkedListTestContract.insert (LinkedListTestContract.sol#262) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove(uint256 _node) public returns (uint256) {\n",
                    "message": "Parameter '_node' of LinkedListTestContract.remove (LinkedListTestContract.sol#268) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(uint256 _node, bool _direction) public {\n",
                    "message": "Parameter '_node' of LinkedListTestContract.push (LinkedListTestContract.sol#275) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function push(uint256 _node, bool _direction) public {\n",
                    "message": "Parameter '_direction' of LinkedListTestContract.push (LinkedListTestContract.sol#275) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pop(bool _direction) public returns (uint256) {\n",
                    "message": "Parameter '_direction' of LinkedListTestContract.pop (LinkedListTestContract.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tuint256 constant NULL = 0;\n",
                    "message": "LinkedListTestContract.NULL (LinkedListTestContract.sol#205) is never used in LinkedListTestContract\nLinkedListTestContract.HEAD (LinkedListTestContract.sol#206) is never used in LinkedListTestContract\nLinkedListTestContract.PREV (LinkedListTestContract.sol#207) is never used in LinkedListTestContract\nLinkedListTestContract.NEXT (LinkedListTestContract.sol#208) is never used in LinkedListTestContract\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (i != HEAD) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        internal view returns (bool,uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant NULL = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant HEAD = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant PREV = false;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool constant NEXT = true;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tuint256 constant NULL = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  \tuint256 constant HEAD = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  \tbool constant PREV = false;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  \tbool constant NEXT = true;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tLinkedListLib.LinkedList list;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/BasicMathLib/BasicMathLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (BasicMathLib.sol#40-49)\n\t- BasicMathLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (BasicMathLib.sol#57-72)\n\t- BasicMathLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (BasicMathLib.sol#80-89)\n\t- BasicMathLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (BasicMathLib.sol#97-106)\n\t- BasicMathLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BasicMathLib.sol:\n\t- pragma solidity^0.4.18 (BasicMathLib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/BasicMathLib/truffle/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.4 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Migrations() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/BasicMathLib/truffle/contracts/BasicMathLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (BasicMathLib.sol#40-49)\n\t- BasicMathLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (BasicMathLib.sol#57-72)\n\t- BasicMathLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (BasicMathLib.sol#80-89)\n\t- BasicMathLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (BasicMathLib.sol#97-106)\n\t- BasicMathLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BasicMathLib.sol:\n\t- pragma solidity^0.4.18 (BasicMathLib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/BasicMathLib/truffle/contracts/BasicMathTestContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathTestContract.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathTestContract.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathTestContract.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathTestContract.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (BasicMathTestContract.sol#40-49)\n\t- BasicMathTestContract.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (BasicMathTestContract.sol#57-72)\n\t- BasicMathTestContract.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (BasicMathTestContract.sol#80-89)\n\t- BasicMathTestContract.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (BasicMathTestContract.sol#97-106)\n\t- BasicMathTestContract.sol#98-106\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in BasicMathTestContract.sol:\n\t- Version used: ['^0.4.11', '^0.4.18']\n\t- BasicMathTestContract.sol#3 declares pragma solidity^0.4.18\n\t- BasicMathTestContract.sol#111 declares pragma solidity^0.4.11\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathTestContract.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathTestContract.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathTestContract.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathTestContract.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "  function getTimes(uint256 a, uint256 b) returns (bool,uint256){\n\n    return a.times(b);\n",
                    "message": "BasicMathTestContract.getTimes (BasicMathTestContract.sol#116-118) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": 122,
                    "vulnerability_code": "  function getDividedBy(uint256 a, uint256 b) returns (bool,uint256) {\n\n    return a.dividedBy(b);\n",
                    "message": "BasicMathTestContract.getDividedBy (BasicMathTestContract.sol#120-122) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": 126,
                    "vulnerability_code": "  function getPlus(uint256 a, uint256 b) returns (bool,uint256) {\n\n    return a.plus(b);\n",
                    "message": "BasicMathTestContract.getPlus (BasicMathTestContract.sol#124-126) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 130,
                    "vulnerability_code": "  function getMinus(uint256 a, uint256 b) returns (bool,uint256) {\n\n    return a.minus(b);\n",
                    "message": "BasicMathTestContract.getMinus (BasicMathTestContract.sol#128-130) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BasicMathTestContract.sol:\n\t- pragma solidity^0.4.18 (BasicMathTestContract.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (BasicMathTestContract.sol#111): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTimes(uint256 a, uint256 b) returns (bool,uint256){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getDividedBy(uint256 a, uint256 b) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPlus(uint256 a, uint256 b) returns (bool,uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMinus(uint256 a, uint256 b) returns (bool,uint256) {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/TokenLib/truffle/contracts/TokenLibTestSpender.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_75"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLibTestSpender.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLibTestSpender.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLibTestSpender.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLibTestSpender.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (TokenLibTestSpender.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": 470,
                    "vulnerability_code": "  function changeOwnerBack(address newOwner) {\n\n    t.changeOwner(newOwner);\n",
                    "message": "TokenLibTestSpender.changeOwnerBack (TokenLibTestSpender.sol#468-470) does not use the value returned by external calls:\n\t-t.changeOwner(newOwner) (TokenLibTestSpender.sol#469)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenLibTestContract(address owner,\n",
                    "message": "TokenLibTestContract.TokenLibTestContract.owner (local variable @ TokenLibTestSpender.sol#377) shadows:\n\t- TokenLibTestContract.owner (function @ TokenLibTestSpender.sol#387-389)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                string name,\n",
                    "message": "TokenLibTestContract.TokenLibTestContract.name (local variable @ TokenLibTestSpender.sol#378) shadows:\n\t- TokenLibTestContract.name (function @ TokenLibTestSpender.sol#391-393)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                string symbol,\n",
                    "message": "TokenLibTestContract.TokenLibTestContract.symbol (local variable @ TokenLibTestSpender.sol#379) shadows:\n\t- TokenLibTestContract.symbol (function @ TokenLibTestSpender.sol#395-397)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                uint8 decimals,\n",
                    "message": "TokenLibTestContract.TokenLibTestContract.decimals (local variable @ TokenLibTestSpender.sol#380) shadows:\n\t- TokenLibTestContract.decimals (function @ TokenLibTestSpender.sol#399-401)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                uint256 initialSupply,\n",
                    "message": "TokenLibTestContract.TokenLibTestContract.initialSupply (local variable @ TokenLibTestSpender.sol#381) shadows:\n\t- TokenLibTestContract.initialSupply (function @ TokenLibTestSpender.sol#407-409)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint256) {\n",
                    "message": "TokenLibTestContract.allowance.owner (local variable @ TokenLibTestSpender.sol#415) shadows:\n\t- TokenLibTestContract.owner (function @ TokenLibTestSpender.sol#387-389)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (TokenLibTestSpender.sol#40-49)\n\t- TokenLibTestSpender.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (TokenLibTestSpender.sol#57-72)\n\t- TokenLibTestSpender.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (TokenLibTestSpender.sol#80-89)\n\t- TokenLibTestSpender.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (TokenLibTestSpender.sol#97-106)\n\t- TokenLibTestSpender.sol#98-106\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in TokenLibTestSpender.sol:\n\t- Version used: ['^0.4.15', '^0.4.18']\n\t- TokenLibTestSpender.sol#3 declares pragma solidity^0.4.18\n\t- TokenLibTestSpender.sol#111 declares pragma solidity^0.4.18\n\t- TokenLibTestSpender.sol#370 declares pragma solidity^0.4.15\n\t- TokenLibTestSpender.sol#454 declares pragma solidity^0.4.15\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLibTestSpender.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLibTestSpender.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLibTestSpender.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLibTestSpender.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (TokenLibTestSpender.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (TokenLibTestSpender.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (TokenLibTestSpender.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (TokenLibTestSpender.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (TokenLibTestSpender.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (TokenLibTestSpender.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (TokenLibTestSpender.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (TokenLibTestSpender.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (TokenLibTestSpender.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (TokenLibTestSpender.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (TokenLibTestSpender.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 389,
                    "vulnerability_code": "  function owner() constant returns (address) {\n\n    return token.owner;\n",
                    "message": "TokenLibTestContract.owner (TokenLibTestSpender.sol#387-389) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": 393,
                    "vulnerability_code": "  function name() constant returns (string) {\n\n    return token.name;\n",
                    "message": "TokenLibTestContract.name (TokenLibTestSpender.sol#391-393) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": 397,
                    "vulnerability_code": "  function symbol() constant returns (string) {\n\n    return token.symbol;\n",
                    "message": "TokenLibTestContract.symbol (TokenLibTestSpender.sol#395-397) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "  function decimals() constant returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "TokenLibTestContract.decimals (TokenLibTestSpender.sol#399-401) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "  function totalSupply() constant returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "TokenLibTestContract.totalSupply (TokenLibTestSpender.sol#403-405) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function initialSupply() constant returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "TokenLibTestContract.initialSupply (TokenLibTestSpender.sol#407-409) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function balanceOf(address who) constant returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "TokenLibTestContract.balanceOf (TokenLibTestSpender.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "TokenLibTestContract.allowance (TokenLibTestSpender.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function transfer(address to, uint value) returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "TokenLibTestContract.transfer (TokenLibTestSpender.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "TokenLibTestContract.transferFrom (TokenLibTestSpender.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function approve(address spender, uint value) returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "TokenLibTestContract.approve (TokenLibTestSpender.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function approveChange(address spender, uint valueChange, bool increase) returns (bool ok) {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "TokenLibTestContract.approveChange (TokenLibTestSpender.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function changeOwner(address newOwner) returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "TokenLibTestContract.changeOwner (TokenLibTestSpender.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function mintToken(uint amount) returns (bool ok) {\n\n    return token.mintToken(amount);\n",
                    "message": "TokenLibTestContract.mintToken (TokenLibTestSpender.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function closeMint() returns (bool ok) {\n\n    return token.closeMint();\n",
                    "message": "TokenLibTestContract.closeMint (TokenLibTestSpender.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function burnToken(uint amount) returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "TokenLibTestContract.burnToken (TokenLibTestSpender.sol#447-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": 466,
                    "vulnerability_code": "  function spend(address owner, uint256 amount) returns (bool){\n\n    return t.transferFrom(owner, this, amount);\n",
                    "message": "TokenLibTestSpender.spend (TokenLibTestSpender.sol#464-466) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": 470,
                    "vulnerability_code": "  function changeOwnerBack(address newOwner) {\n\n    t.changeOwner(newOwner);\n",
                    "message": "TokenLibTestSpender.changeOwnerBack (TokenLibTestSpender.sol#468-470) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TokenLibTestSpender.sol:\n\t- pragma solidity^0.4.18 (TokenLibTestSpender.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenLibTestSpender.sol#111): it allows old versions\n\t- pragma solidity^0.4.15 (TokenLibTestSpender.sol#370): it allows old versions\n\t- pragma solidity^0.4.15 (TokenLibTestSpender.sol#454): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (TokenLibTestSpender.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (TokenLibTestSpender.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (TokenLibTestSpender.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (TokenLibTestSpender.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (TokenLibTestSpender.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (TokenLibTestSpender.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (TokenLibTestSpender.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (TokenLibTestSpender.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (TokenLibTestSpender.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (TokenLibTestSpender.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (TokenLibTestSpender.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (TokenLibTestSpender.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (TokenLibTestSpender.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (TokenLibTestSpender.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (TokenLibTestSpender.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (TokenLibTestSpender.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (TokenLibTestSpender.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (TokenLibTestSpender.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (TokenLibTestSpender.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (TokenLibTestSpender.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (TokenLibTestSpender.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (TokenLibTestSpender.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": 385,
                    "vulnerability_code": "  function TokenLibTestContract(address owner,\n\n                                string name,\n\n                                string symbol,\n\n                                uint8 decimals,\n\n                                uint256 initialSupply,\n\n                                bool allowMinting)\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'TokenLibTestContract.TokenLibTestContract' (TokenLibTestSpender.sol#377-385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": 462,
                    "vulnerability_code": "  function TokenLibTestSpender(address testContract) {\n\n    t = TokenLibTestContract(testContract);\n",
                    "message": "Function 'TokenLibTestSpender.TokenLibTestSpender' (TokenLibTestSpender.sol#460-462) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function owner() constant returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() constant returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() constant returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals() constant returns (uint8) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialSupply() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenLibTestContract(address owner,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function owner() constant returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() constant returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() constant returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals() constant returns (uint8) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialSupply() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint value) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange(address spender, uint valueChange, bool increase) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(address newOwner) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(uint amount) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function closeMint() returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(uint amount) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenLibTestSpender(address testContract) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function spend(address owner, uint256 amount) returns (bool){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwnerBack(address newOwner) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  TokenLib.TokenStorage token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  TokenLibTestContract t;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/TokenLib/truffle/contracts/ThrowProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "  function() {\n\n    data = msg.data;\n",
                    "message": "ThrowProxy.fallback (ThrowProxy.sol#14-16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function execute() returns (bool) {\n\n    return target.call(data);\n",
                    "message": "ThrowProxy.execute (ThrowProxy.sol#18-20) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in ThrowProxy.sol:\n\t- pragma solidity^0.4.15 (ThrowProxy.sol#3): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function execute() returns (bool) {\n\n    return target.call(data);\n",
                    "message": "Low level call in ThrowProxy.execute (ThrowProxy.sol#18-20):\n\t-target.call(data) ThrowProxy.sol#19\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "  function ThrowProxy(address _target) {\n\n    target = _target;\n",
                    "message": "Function 'ThrowProxy.ThrowProxy' (ThrowProxy.sol#9-11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ThrowProxy(address _target) {\n",
                    "message": "Parameter '_target' of ThrowProxy.ThrowProxy (ThrowProxy.sol#9) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ThrowProxy(address _target) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execute() returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes data;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/TokenLib/truffle/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.4 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Migrations() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/TokenLib/truffle/contracts/BasicMathLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (BasicMathLib.sol#40-49)\n\t- BasicMathLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (BasicMathLib.sol#57-72)\n\t- BasicMathLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (BasicMathLib.sol#80-89)\n\t- BasicMathLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (BasicMathLib.sol#97-106)\n\t- BasicMathLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (BasicMathLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (BasicMathLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (BasicMathLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (BasicMathLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BasicMathLib.sol:\n\t- pragma solidity^0.4.18 (BasicMathLib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/TokenLib/truffle/contracts/TokenLibTestContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_71"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLibTestContract.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLibTestContract.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLibTestContract.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLibTestContract.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (TokenLibTestContract.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenLibTestContract(address owner,\n",
                    "message": "TokenLibTestContract.TokenLibTestContract.owner (local variable @ TokenLibTestContract.sol#377) shadows:\n\t- TokenLibTestContract.owner (function @ TokenLibTestContract.sol#387-389)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                string name,\n",
                    "message": "TokenLibTestContract.TokenLibTestContract.name (local variable @ TokenLibTestContract.sol#378) shadows:\n\t- TokenLibTestContract.name (function @ TokenLibTestContract.sol#391-393)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                string symbol,\n",
                    "message": "TokenLibTestContract.TokenLibTestContract.symbol (local variable @ TokenLibTestContract.sol#379) shadows:\n\t- TokenLibTestContract.symbol (function @ TokenLibTestContract.sol#395-397)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                uint8 decimals,\n",
                    "message": "TokenLibTestContract.TokenLibTestContract.decimals (local variable @ TokenLibTestContract.sol#380) shadows:\n\t- TokenLibTestContract.decimals (function @ TokenLibTestContract.sol#399-401)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                                uint256 initialSupply,\n",
                    "message": "TokenLibTestContract.TokenLibTestContract.initialSupply (local variable @ TokenLibTestContract.sol#381) shadows:\n\t- TokenLibTestContract.initialSupply (function @ TokenLibTestContract.sol#407-409)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint256) {\n",
                    "message": "TokenLibTestContract.allowance.owner (local variable @ TokenLibTestContract.sol#415) shadows:\n\t- TokenLibTestContract.owner (function @ TokenLibTestContract.sol#387-389)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (TokenLibTestContract.sol#40-49)\n\t- TokenLibTestContract.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (TokenLibTestContract.sol#57-72)\n\t- TokenLibTestContract.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (TokenLibTestContract.sol#80-89)\n\t- TokenLibTestContract.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (TokenLibTestContract.sol#97-106)\n\t- TokenLibTestContract.sol#98-106\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in TokenLibTestContract.sol:\n\t- Version used: ['^0.4.15', '^0.4.18']\n\t- TokenLibTestContract.sol#3 declares pragma solidity^0.4.18\n\t- TokenLibTestContract.sol#111 declares pragma solidity^0.4.18\n\t- TokenLibTestContract.sol#370 declares pragma solidity^0.4.15\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLibTestContract.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLibTestContract.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLibTestContract.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLibTestContract.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (TokenLibTestContract.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (TokenLibTestContract.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (TokenLibTestContract.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (TokenLibTestContract.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (TokenLibTestContract.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (TokenLibTestContract.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (TokenLibTestContract.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (TokenLibTestContract.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (TokenLibTestContract.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (TokenLibTestContract.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (TokenLibTestContract.sol#353-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 389,
                    "vulnerability_code": "  function owner() constant returns (address) {\n\n    return token.owner;\n",
                    "message": "TokenLibTestContract.owner (TokenLibTestContract.sol#387-389) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": 393,
                    "vulnerability_code": "  function name() constant returns (string) {\n\n    return token.name;\n",
                    "message": "TokenLibTestContract.name (TokenLibTestContract.sol#391-393) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": 397,
                    "vulnerability_code": "  function symbol() constant returns (string) {\n\n    return token.symbol;\n",
                    "message": "TokenLibTestContract.symbol (TokenLibTestContract.sol#395-397) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "  function decimals() constant returns (uint8) {\n\n    return token.decimals;\n",
                    "message": "TokenLibTestContract.decimals (TokenLibTestContract.sol#399-401) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "  function totalSupply() constant returns (uint256) {\n\n    return token.totalSupply;\n",
                    "message": "TokenLibTestContract.totalSupply (TokenLibTestContract.sol#403-405) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function initialSupply() constant returns (uint256) {\n\n    return token.initialSupply;\n",
                    "message": "TokenLibTestContract.initialSupply (TokenLibTestContract.sol#407-409) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function balanceOf(address who) constant returns (uint256) {\n\n    return token.balanceOf(who);\n",
                    "message": "TokenLibTestContract.balanceOf (TokenLibTestContract.sol#411-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
                    "message": "TokenLibTestContract.allowance (TokenLibTestContract.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "  function transfer(address to, uint value) returns (bool ok) {\n\n    return token.transfer(to, value);\n",
                    "message": "TokenLibTestContract.transfer (TokenLibTestContract.sol#419-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
                    "message": "TokenLibTestContract.transferFrom (TokenLibTestContract.sol#423-425) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "  function approve(address spender, uint value) returns (bool ok) {\n\n    return token.approve(spender, value);\n",
                    "message": "TokenLibTestContract.approve (TokenLibTestContract.sol#427-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function approveChange(address spender, uint valueChange, bool increase) returns (bool ok) {\n\n    return token.approveChange(spender, valueChange, increase);\n",
                    "message": "TokenLibTestContract.approveChange (TokenLibTestContract.sol#431-433) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function changeOwner(address newOwner) returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
                    "message": "TokenLibTestContract.changeOwner (TokenLibTestContract.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "  function mintToken(uint amount) returns (bool ok) {\n\n    return token.mintToken(amount);\n",
                    "message": "TokenLibTestContract.mintToken (TokenLibTestContract.sol#439-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function closeMint() returns (bool ok) {\n\n    return token.closeMint();\n",
                    "message": "TokenLibTestContract.closeMint (TokenLibTestContract.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function burnToken(uint amount) returns (bool ok) {\n\n    return token.burnToken(amount);\n",
                    "message": "TokenLibTestContract.burnToken (TokenLibTestContract.sol#447-449) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TokenLibTestContract.sol:\n\t- pragma solidity^0.4.18 (TokenLibTestContract.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenLibTestContract.sol#111): it allows old versions\n\t- pragma solidity^0.4.15 (TokenLibTestContract.sol#370): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (TokenLibTestContract.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (TokenLibTestContract.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (TokenLibTestContract.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (TokenLibTestContract.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (TokenLibTestContract.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (TokenLibTestContract.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (TokenLibTestContract.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (TokenLibTestContract.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (TokenLibTestContract.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (TokenLibTestContract.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (TokenLibTestContract.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (TokenLibTestContract.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (TokenLibTestContract.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (TokenLibTestContract.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (TokenLibTestContract.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (TokenLibTestContract.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (TokenLibTestContract.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (TokenLibTestContract.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (TokenLibTestContract.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (TokenLibTestContract.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (TokenLibTestContract.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (TokenLibTestContract.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": 385,
                    "vulnerability_code": "  function TokenLibTestContract(address owner,\n\n                                string name,\n\n                                string symbol,\n\n                                uint8 decimals,\n\n                                uint256 initialSupply,\n\n                                bool allowMinting)\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
                    "message": "Function 'TokenLibTestContract.TokenLibTestContract' (TokenLibTestContract.sol#377-385) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function owner() constant returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() constant returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() constant returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals() constant returns (uint8) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialSupply() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenLibTestContract(address owner,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function owner() constant returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() constant returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() constant returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals() constant returns (uint8) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialSupply() constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint value) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange(address spender, uint valueChange, bool increase) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(address newOwner) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(uint amount) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function closeMint() returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(uint amount) returns (bool ok) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  TokenLib.TokenStorage token;\n",
                    "message": null
                }
            ]
        }
    },
    "ethereum-libraries-73abc22623e0841b8ea67a5089002f4867102672/TokenLib/truffle/contracts/TokenLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_47"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLib.sol#40-49) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLib.sol#57-72) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLib.sol#80-89) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLib.sol#97-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _newAllowed;\n",
                    "message": "_newAllowed in TokenLib.approveChange (TokenLib.sol#287) is a local variable never initialiazed\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times uses assembly (TokenLib.sol#40-49)\n\t- TokenLib.sol#41-49\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy uses assembly (TokenLib.sol#57-72)\n\t- TokenLib.sol#59-72\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus uses assembly (TokenLib.sol#80-89)\n\t- TokenLib.sol#81-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus uses assembly (TokenLib.sol#97-106)\n\t- TokenLib.sol#98-106\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.times (TokenLib.sol#40-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.dividedBy (TokenLib.sol#57-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.plus (TokenLib.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
                    "message": "BasicMathLib.minus (TokenLib.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
                    "message": "TokenLib.init (TokenLib.sol#172-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transfer (TokenLib.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "TokenLib.transferFrom (TokenLib.sol#218-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
                    "message": "TokenLib.balanceOf (TokenLib.sol#248-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "TokenLib.approve (TokenLib.sol#257-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
                    "message": "TokenLib.allowance (TokenLib.sol#271-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
                    "message": "TokenLib.approveChange (TokenLib.sol#284-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
                    "message": "TokenLib.changeOwner (TokenLib.sol#312-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
                    "message": "TokenLib.mintToken (TokenLib.sol#324-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
                    "message": "TokenLib.closeMint (TokenLib.sol#341-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
                    "message": "TokenLib.burnToken (TokenLib.sol#353-365) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TokenLib.sol:\n\t- pragma solidity^0.4.18 (TokenLib.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenLib.sol#111): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address _owner,\n",
                    "message": "Parameter '_owner' of TokenLib.init (TokenLib.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": "Parameter '_name' of TokenLib.init (TokenLib.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": "Parameter '_symbol' of TokenLib.init (TokenLib.sol#175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint8 _decimals,\n",
                    "message": "Parameter '_decimals' of TokenLib.init (TokenLib.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint256 _initial_supply,\n",
                    "message": "Parameter '_initial_supply' of TokenLib.init (TokenLib.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                bool _allowMinting)\n",
                    "message": "Parameter '_allowMinting' of TokenLib.init (TokenLib.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of TokenLib.transfer (TokenLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.transfer (TokenLib.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _from,\n",
                    "message": "Parameter '_from' of TokenLib.transferFrom (TokenLib.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        address _to,\n",
                    "message": "Parameter '_to' of TokenLib.transferFrom (TokenLib.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint256 _value)\n",
                    "message": "Parameter '_value' of TokenLib.transferFrom (TokenLib.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of TokenLib.balanceOf (TokenLib.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of TokenLib.approve (TokenLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of TokenLib.approve (TokenLib.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_owner' of TokenLib.allowance (TokenLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
                    "message": "Parameter '_spender' of TokenLib.allowance (TokenLib.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_spender' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_valueChange' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
                    "message": "Parameter '_increase' of TokenLib.approveChange (TokenLib.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
                    "message": "Parameter '_newOwner' of TokenLib.changeOwner (TokenLib.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.mintToken (TokenLib.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of TokenLib.burnToken (TokenLib.sol#353) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                string _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly{\n",
                    "message": null
                }
            ]
        }
    }
}