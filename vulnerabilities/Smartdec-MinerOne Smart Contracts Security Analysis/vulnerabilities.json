{
    "openzeppelin-contracts-1.6.0/test/mocks/MathMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) public {\n\n    result = Math.max64(a, b);\n",
                    "message": "MathMock.max64 (MathMock.sol#35-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) public {\n\n    result = Math.min64(a, b);\n",
                    "message": "MathMock.min64 (MathMock.sol#39-41) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in MathMock.sol:\n\t- pragma solidity^0.4.18 (MathMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (MathMock.sol#30): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ReentrancyGuard.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private reentrancy_lock = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ReentrancyGuard.sol:\n\t- pragma solidity^0.4.18 (ReentrancyGuard.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private reentrancy_lock = false;\n",
                    "message": "Variable 'ReentrancyGuard.reentrancy_lock' (ReentrancyGuard.sol#17) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private reentrancy_lock = false;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/DayLimit.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      spentToday += _value;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (spentToday + _value >= spentToday && spentToday + _value <= dailyLimit) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      spentToday += _value;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in DayLimit.sol:\n\t- pragma solidity^0.4.18 (DayLimit.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function DayLimit(uint256 _limit) public {\n\n    dailyLimit = _limit;\n\n    lastDay = today();\n",
                    "message": "Function 'DayLimit.DayLimit' (DayLimit.sol#21-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DayLimit(uint256 _limit) public {\n",
                    "message": "Parameter '_limit' of DayLimit.DayLimit (DayLimit.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "  function _setDailyLimit(uint256 _newLimit) internal {\n\n    dailyLimit = _newLimit;\n",
                    "message": "Function 'DayLimit._setDailyLimit' (DayLimit.sol#30-32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _setDailyLimit(uint256 _newLimit) internal {\n",
                    "message": "Parameter '_newLimit' of DayLimit._setDailyLimit (DayLimit.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 39,
                    "vulnerability_code": "  function _resetSpentToday() internal {\n\n    spentToday = 0;\n",
                    "message": "Function 'DayLimit._resetSpentToday' (DayLimit.sol#37-39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function underLimit(uint256 _value) internal returns (bool) {\n",
                    "message": "Parameter '_value' of DayLimit.underLimit (DayLimit.sol#46) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/Bounty.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Destructible is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "  function claim(Target target) public {\n\n    address researcher = researchers[target];\n\n    require(researcher != 0);\n\n    // Check Target contract invariants\n\n    require(!target.checkInvariant());\n\n    asyncSend(researcher, this.balance);\n\n    claimed = true;\n",
                    "message": "Reentrancy in Bounty.claim (Bounty.sol#201-208):\n\tExternal calls:\n\t- require(bool)(! target.checkInvariant()) (Bounty.sol#205)\n\tState variables written after the call(s):\n\t- claimed (Bounty.sol#207)\n\t- payments (Bounty.sol#206)\n\t- totalPayments (Bounty.sol#206)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function withdrawPayments() public {\n\n    address payee = msg.sender;\n\n    uint256 payment = payments[payee];\n\n\n\n    require(payment != 0);\n\n    require(this.balance >= payment);\n\n\n\n    totalPayments = totalPayments.sub(payment);\n\n    payments[payee] = 0;\n\n\n\n    assert(payee.send(payment));\n",
                    "message": "PullPayment.withdrawPayments (Bounty.sol#70-81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": 135,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Bounty.sol#131-135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function destroy() onlyOwner public {\n\n    selfdestruct(owner);\n",
                    "message": "Destructible.destroy (Bounty.sol#154-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) onlyOwner public {\n\n    selfdestruct(_recipient);\n",
                    "message": "Destructible.destroyAndSend (Bounty.sol#158-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 195,
                    "vulnerability_code": "  function createTarget() public returns(Target) {\n\n    Target target = Target(deployContract());\n\n    researchers[target] = msg.sender;\n\n    TargetCreated(target);\n\n    return target;\n",
                    "message": "Bounty.createTarget (Bounty.sol#190-195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "  function claim(Target target) public {\n\n    address researcher = researchers[target];\n\n    require(researcher != 0);\n\n    // Check Target contract invariants\n\n    require(!target.checkInvariant());\n\n    asyncSend(researcher, this.balance);\n\n    claimed = true;\n",
                    "message": "Bounty.claim (Bounty.sol#201-208) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkInvariant() public returns(bool);\n",
                    "message": "Target.checkInvariant (Bounty.sol#231) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Bounty.sol:\n\t- pragma solidity^0.4.18 (Bounty.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (Bounty.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (Bounty.sol#96): it allows old versions\n\t- pragma solidity^0.4.18 (Bounty.sol#141): it allows old versions\n\t- pragma solidity^0.4.18 (Bounty.sol#165): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Bounty.sol#115-117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Destructible() public payable { }\n",
                    "message": "Function 'Destructible.Destructible' (Bounty.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) onlyOwner public {\n",
                    "message": "Parameter '_recipient' of Destructible.destroyAndSend (Bounty.sol#158) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Bounty is PullPayment, Destructible {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SEND",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(payee.send(payment));\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ECRecovery.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (v != 27 && v != 28) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return ecrecover(hash, v, r, s);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    //Check the signature length\n\n    if (sig.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    assembly {\n\n      r := mload(add(sig, 32))\n\n      s := mload(add(sig, 64))\n\n      v := byte(0, mload(add(sig, 96)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECRecovery.recover (ECRecovery.sol#19-47) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    //Check the signature length\n\n    if (sig.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    assembly {\n\n      r := mload(add(sig, 32))\n\n      s := mload(add(sig, 64))\n\n      v := byte(0, mload(add(sig, 96)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECRecovery.recover uses assembly (ECRecovery.sol#19-47)\n\t- ECRecovery.sol#30-37\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    //Check the signature length\n\n    if (sig.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    assembly {\n\n      r := mload(add(sig, 32))\n\n      s := mload(add(sig, 64))\n\n      v := byte(0, mload(add(sig, 96)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECRecovery.recover (ECRecovery.sol#19-47) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ECRecovery.sol:\n\t- pragma solidity^0.4.18 (ECRecovery.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/LimitBalance.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in LimitBalance.sol:\n\t- pragma solidity^0.4.18 (LimitBalance.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "  function LimitBalance(uint256 _limit) public {\n\n    limit = _limit;\n",
                    "message": "Function 'LimitBalance.LimitBalance' (LimitBalance.sol#20-22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function LimitBalance(uint256 _limit) public {\n",
                    "message": "Parameter '_limit' of LimitBalance.LimitBalance (LimitBalance.sol#20) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/MerkleProof.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 32; i <= _proof.length; i += 32) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n\n    // Check if proof length is a multiple of 32\n\n    if (_proof.length % 32 != 0) {\n\n      return false;\n\n    }\n\n\n\n    bytes32 proofElement;\n\n    bytes32 computedHash = _leaf;\n\n\n\n    for (uint256 i = 32; i <= _proof.length; i += 32) {\n\n      assembly {\n\n        // Load the current element of the proof\n\n        proofElement := mload(add(_proof, i))\n\n      }\n\n\n\n      if (computedHash < proofElement) {\n\n        // Hash(current computed hash + current element of the proof)\n\n        computedHash = keccak256(computedHash, proofElement);\n\n      } else {\n\n        // Hash(current element of the proof + current computed hash)\n\n        computedHash = keccak256(proofElement, computedHash);\n\n      }\n\n    }\n\n\n\n    // Check if the computed hash (root) is equal to the provided root\n\n    return computedHash == _root;\n",
                    "message": "MerkleProof.verifyProof (MerkleProof.sol#19-45) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n\n    // Check if proof length is a multiple of 32\n\n    if (_proof.length % 32 != 0) {\n\n      return false;\n\n    }\n\n\n\n    bytes32 proofElement;\n\n    bytes32 computedHash = _leaf;\n\n\n\n    for (uint256 i = 32; i <= _proof.length; i += 32) {\n\n      assembly {\n\n        // Load the current element of the proof\n\n        proofElement := mload(add(_proof, i))\n\n      }\n\n\n\n      if (computedHash < proofElement) {\n\n        // Hash(current computed hash + current element of the proof)\n\n        computedHash = keccak256(computedHash, proofElement);\n\n      } else {\n\n        // Hash(current element of the proof + current computed hash)\n\n        computedHash = keccak256(proofElement, computedHash);\n\n      }\n\n    }\n\n\n\n    // Check if the computed hash (root) is equal to the provided root\n\n    return computedHash == _root;\n",
                    "message": "MerkleProof.verifyProof uses assembly (MerkleProof.sol#19-45)\n\t- MerkleProof.sol#29-34\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n\n    // Check if proof length is a multiple of 32\n\n    if (_proof.length % 32 != 0) {\n\n      return false;\n\n    }\n\n\n\n    bytes32 proofElement;\n\n    bytes32 computedHash = _leaf;\n\n\n\n    for (uint256 i = 32; i <= _proof.length; i += 32) {\n\n      assembly {\n\n        // Load the current element of the proof\n\n        proofElement := mload(add(_proof, i))\n\n      }\n\n\n\n      if (computedHash < proofElement) {\n\n        // Hash(current computed hash + current element of the proof)\n\n        computedHash = keccak256(computedHash, proofElement);\n\n      } else {\n\n        // Hash(current element of the proof + current computed hash)\n\n        computedHash = keccak256(proofElement, computedHash);\n\n      }\n\n    }\n\n\n\n    // Check if the computed hash (root) is equal to the provided root\n\n    return computedHash == _root;\n",
                    "message": "MerkleProof.verifyProof (MerkleProof.sol#19-45) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in MerkleProof.sol:\n\t- pragma solidity^0.4.18 (MerkleProof.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n",
                    "message": "Parameter '_proof' of MerkleProof.verifyProof (MerkleProof.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n",
                    "message": "Parameter '_root' of MerkleProof.verifyProof (MerkleProof.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n",
                    "message": "Parameter '_leaf' of MerkleProof.verifyProof (MerkleProof.sol#19) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 32; i <= _proof.length; i += 32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        computedHash = keccak256(computedHash, proofElement);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        computedHash = keccak256(proofElement, computedHash);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/SafeMathMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 61,
                    "vulnerability_code": "  function multiply(uint256 a, uint256 b) public {\n\n    result = SafeMath.mul(a, b);\n",
                    "message": "SafeMathMock.multiply (SafeMathMock.sol#59-61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "  function subtract(uint256 a, uint256 b) public {\n\n    result = SafeMath.sub(a, b);\n",
                    "message": "SafeMathMock.subtract (SafeMathMock.sol#63-65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "  function add(uint256 a, uint256 b) public {\n\n    result = SafeMath.add(a, b);\n",
                    "message": "SafeMathMock.add (SafeMathMock.sol#67-69) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in SafeMathMock.sol:\n\t- pragma solidity^0.4.18 (SafeMathMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (SafeMathMock.sol#54): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/SecureTargetBounty.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Destructible is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "  function claim(Target target) public {\n\n    address researcher = researchers[target];\n\n    require(researcher != 0);\n\n    // Check Target contract invariants\n\n    require(!target.checkInvariant());\n\n    asyncSend(researcher, this.balance);\n\n    claimed = true;\n",
                    "message": "Reentrancy in Bounty.claim (SecureTargetBounty.sol#201-208):\n\tExternal calls:\n\t- require(bool)(! target.checkInvariant()) (SecureTargetBounty.sol#205)\n\tState variables written after the call(s):\n\t- claimed (SecureTargetBounty.sol#207)\n\t- payments (SecureTargetBounty.sol#206)\n\t- totalPayments (SecureTargetBounty.sol#206)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function withdrawPayments() public {\n\n    address payee = msg.sender;\n\n    uint256 payment = payments[payee];\n\n\n\n    require(payment != 0);\n\n    require(this.balance >= payment);\n\n\n\n    totalPayments = totalPayments.sub(payment);\n\n    payments[payee] = 0;\n\n\n\n    assert(payee.send(payment));\n",
                    "message": "PullPayment.withdrawPayments (SecureTargetBounty.sol#70-81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": 135,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (SecureTargetBounty.sol#131-135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function destroy() onlyOwner public {\n\n    selfdestruct(owner);\n",
                    "message": "Destructible.destroy (SecureTargetBounty.sol#154-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) onlyOwner public {\n\n    selfdestruct(_recipient);\n",
                    "message": "Destructible.destroyAndSend (SecureTargetBounty.sol#158-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 195,
                    "vulnerability_code": "  function createTarget() public returns(Target) {\n\n    Target target = Target(deployContract());\n\n    researchers[target] = msg.sender;\n\n    TargetCreated(target);\n\n    return target;\n",
                    "message": "Bounty.createTarget (SecureTargetBounty.sol#190-195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "  function claim(Target target) public {\n\n    address researcher = researchers[target];\n\n    require(researcher != 0);\n\n    // Check Target contract invariants\n\n    require(!target.checkInvariant());\n\n    asyncSend(researcher, this.balance);\n\n    claimed = true;\n",
                    "message": "Bounty.claim (SecureTargetBounty.sol#201-208) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkInvariant() public returns(bool);\n",
                    "message": "Target.checkInvariant (SecureTargetBounty.sol#231) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": 241,
                    "vulnerability_code": "  function checkInvariant() public returns(bool) {\n\n    return true;\n",
                    "message": "SecureTargetMock.checkInvariant (SecureTargetBounty.sol#239-241) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in SecureTargetBounty.sol:\n\t- pragma solidity^0.4.18 (SecureTargetBounty.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (SecureTargetBounty.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (SecureTargetBounty.sol#96): it allows old versions\n\t- pragma solidity^0.4.18 (SecureTargetBounty.sol#141): it allows old versions\n\t- pragma solidity^0.4.18 (SecureTargetBounty.sol#165): it allows old versions\n\t- pragma solidity^0.4.18 (SecureTargetBounty.sol#236): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (SecureTargetBounty.sol#115-117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Destructible() public payable { }\n",
                    "message": "Function 'Destructible.Destructible' (SecureTargetBounty.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) onlyOwner public {\n",
                    "message": "Parameter '_recipient' of Destructible.destroyAndSend (SecureTargetBounty.sol#158) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Bounty is PullPayment, Destructible {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SEND",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(payee.send(payment));\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/ReentrancyAttack.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "  function callSender(bytes4 data) public {\n\n    require(msg.sender.call(data));\n",
                    "message": "ReentrancyAttack.callSender (ReentrancyAttack.sol#8-10) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ReentrancyAttack.sol:\n\t- pragma solidity^0.4.18 (ReentrancyAttack.sol#3): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "  function callSender(bytes4 data) public {\n\n    require(msg.sender.call(data));\n",
                    "message": "Low level call in ReentrancyAttack.callSender (ReentrancyAttack.sol#8-10):\n\t-require(bool)(msg.sender.call(data)) ReentrancyAttack.sol#9\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/CappedCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_44"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "  function buyTokens(address beneficiary) public payable {\n\n    require(beneficiary != address(0));\n\n    require(validPurchase());\n\n\n\n    uint256 weiAmount = msg.value;\n\n\n\n    // calculate token amount to be created\n\n    uint256 tokens = getTokenAmount(weiAmount);\n\n\n\n    // update state\n\n    weiRaised = weiRaised.add(weiAmount);\n\n\n\n    token.mint(beneficiary, tokens);\n\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n\n\n    forwardFunds();\n",
                    "message": "Crowdsale.buyTokens (CappedCrowdsaleImpl.sol#388-404) does not use the value returned by external calls:\n\t-token.mint(beneficiary,tokens) (CappedCrowdsaleImpl.sol#400)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (CappedCrowdsaleImpl.sol#63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (CappedCrowdsaleImpl.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (CappedCrowdsaleImpl.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (CappedCrowdsaleImpl.sol#64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (CappedCrowdsaleImpl.sol#65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (CappedCrowdsaleImpl.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (CappedCrowdsaleImpl.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (CappedCrowdsaleImpl.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (CappedCrowdsaleImpl.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (CappedCrowdsaleImpl.sol#157-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (CappedCrowdsaleImpl.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (CappedCrowdsaleImpl.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (CappedCrowdsaleImpl.sol#205-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (CappedCrowdsaleImpl.sol#221-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (CappedCrowdsaleImpl.sol#271-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n\n    Transfer(address(0), _to, _amount);\n\n    return true;\n",
                    "message": "MintableToken.mint (CappedCrowdsaleImpl.sol#308-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
                    "message": "MintableToken.finishMinting (CappedCrowdsaleImpl.sol#320-324) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CappedCrowdsaleImpl.sol:\n\t- pragma solidity^0.4.18 (CappedCrowdsaleImpl.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsaleImpl.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsaleImpl.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsaleImpl.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsaleImpl.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsaleImpl.sol#236): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsaleImpl.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsaleImpl.sol#329): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsaleImpl.sol#439): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsaleImpl.sol#474): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (CappedCrowdsaleImpl.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (CappedCrowdsaleImpl.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (CappedCrowdsaleImpl.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (CappedCrowdsaleImpl.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (CappedCrowdsaleImpl.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (CappedCrowdsaleImpl.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (CappedCrowdsaleImpl.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (CappedCrowdsaleImpl.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (CappedCrowdsaleImpl.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (CappedCrowdsaleImpl.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (CappedCrowdsaleImpl.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (CappedCrowdsaleImpl.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (CappedCrowdsaleImpl.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (CappedCrowdsaleImpl.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (CappedCrowdsaleImpl.sol#255-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (CappedCrowdsaleImpl.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (CappedCrowdsaleImpl.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n\n    require(_startTime >= now);\n\n    require(_endTime >= _startTime);\n\n    require(_rate > 0);\n\n    require(_wallet != address(0));\n\n\n\n    token = createTokenContract();\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    rate = _rate;\n\n    wallet = _wallet;\n",
                    "message": "Function 'Crowdsale.Crowdsale' (CappedCrowdsaleImpl.sol#369-380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_startTime' of Crowdsale.Crowdsale (CappedCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_endTime' of Crowdsale.Crowdsale (CappedCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_rate' of Crowdsale.Crowdsale (CappedCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_wallet' of Crowdsale.Crowdsale (CappedCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "  function CappedCrowdsale(uint256 _cap) public {\n\n    require(_cap > 0);\n\n    cap = _cap;\n",
                    "message": "Function 'CappedCrowdsale.CappedCrowdsale' (CappedCrowdsaleImpl.sol#451-454) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CappedCrowdsale(uint256 _cap) public {\n",
                    "message": "Parameter '_cap' of CappedCrowdsale.CappedCrowdsale (CappedCrowdsaleImpl.sol#451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 488,
                    "vulnerability_code": "  function CappedCrowdsaleImpl (\n\n    uint256 _startTime,\n\n    uint256 _endTime,\n\n    uint256 _rate,\n\n    address _wallet,\n\n    uint256 _cap\n\n  ) public\n\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\n\n    CappedCrowdsale(_cap)\n\n  {\n",
                    "message": "Function 'CappedCrowdsaleImpl.CappedCrowdsaleImpl' (CappedCrowdsaleImpl.sol#478-488) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/ERC827TokenMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_52"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in ERC827TokenMock.sol:\n\t- Version used: ['^0.4.13', '^0.4.18']\n\t- ERC827TokenMock.sol#3 declares pragma solidity^0.4.18\n\t- ERC827TokenMock.sol#20 declares pragma solidity^0.4.18\n\t- ERC827TokenMock.sol#35 declares pragma solidity^0.4.13\n\t- ERC827TokenMock.sol#54 declares pragma solidity^0.4.18\n\t- ERC827TokenMock.sol#105 declares pragma solidity^0.4.18\n\t- ERC827TokenMock.sol#155 declares pragma solidity^0.4.18\n\t- ERC827TokenMock.sol#255 declares pragma solidity^0.4.13\n\t- ERC827TokenMock.sol#382 declares pragma solidity^0.4.13\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": 124,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (ERC827TokenMock.sol#122-124) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (ERC827TokenMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (ERC827TokenMock.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": 149,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (ERC827TokenMock.sol#147-149) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (ERC827TokenMock.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (ERC827TokenMock.sol#210-212) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.approve(_spender, _value);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "ERC827Token.approve (ERC827TokenMock.sol#285-293) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": "ERC827.approve (ERC827TokenMock.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": "ERC827.transfer (ERC827TokenMock.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_to != address(this));\n\n\n\n    super.transfer(_to, _value);\n\n\n\n    require(_to.call(_data));\n\n    return true;\n",
                    "message": "ERC827Token.transfer (ERC827TokenMock.sol#305-312) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": "ERC827.transferFrom (ERC827TokenMock.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_to != address(this));\n\n\n\n    super.transferFrom(_from, _to, _value);\n\n\n\n    require(_to.call(_data));\n\n    return true;\n",
                    "message": "ERC827Token.transferFrom (ERC827TokenMock.sol#325-332) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 354,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.increaseApproval(_spender, _addedValue);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "ERC827Token.increaseApproval (ERC827TokenMock.sol#346-354) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": 376,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.decreaseApproval(_spender, _subtractedValue);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "ERC827Token.decreaseApproval (ERC827TokenMock.sol#368-376) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ERC827TokenMock.sol:\n\t- pragma solidity^0.4.18 (ERC827TokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ERC827TokenMock.sol#20): it allows old versions\n\t- pragma solidity^0.4.13 (ERC827TokenMock.sol#35): it allows old versions\n\t- pragma solidity^0.4.18 (ERC827TokenMock.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (ERC827TokenMock.sol#105): it allows old versions\n\t- pragma solidity^0.4.18 (ERC827TokenMock.sol#155): it allows old versions\n\t- pragma solidity^0.4.13 (ERC827TokenMock.sol#255): it allows old versions\n\t- pragma solidity^0.4.13 (ERC827TokenMock.sol#382): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.approve(_spender, _value);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "Low level call in ERC827Token.approve (ERC827TokenMock.sol#285-293):\n\t-require(bool)(_spender.call(_data)) ERC827TokenMock.sol#290\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_to != address(this));\n\n\n\n    super.transfer(_to, _value);\n\n\n\n    require(_to.call(_data));\n\n    return true;\n",
                    "message": "Low level call in ERC827Token.transfer (ERC827TokenMock.sol#305-312):\n\t-require(bool)(_to.call(_data)) ERC827TokenMock.sol#310\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_to != address(this));\n\n\n\n    super.transferFrom(_from, _to, _value);\n\n\n\n    require(_to.call(_data));\n\n    return true;\n",
                    "message": "Low level call in ERC827Token.transferFrom (ERC827TokenMock.sol#325-332):\n\t-require(bool)(_to.call(_data)) ERC827TokenMock.sol#330\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 354,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.increaseApproval(_spender, _addedValue);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "Low level call in ERC827Token.increaseApproval (ERC827TokenMock.sol#346-354):\n\t-require(bool)(_spender.call(_data)) ERC827TokenMock.sol#351\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": 376,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.decreaseApproval(_spender, _subtractedValue);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "Low level call in ERC827Token.decreaseApproval (ERC827TokenMock.sol#368-376):\n\t-require(bool)(_spender.call(_data)) ERC827TokenMock.sol#373\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (ERC827TokenMock.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (ERC827TokenMock.sol#131) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (ERC827TokenMock.sol#131) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (ERC827TokenMock.sol#210) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (ERC827TokenMock.sol#210) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (ERC827TokenMock.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (ERC827TokenMock.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (ERC827TokenMock.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (ERC827TokenMock.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (ERC827TokenMock.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (ERC827TokenMock.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (ERC827TokenMock.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (ERC827TokenMock.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (ERC827TokenMock.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC827Token.approve (ERC827TokenMock.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC827Token.approve (ERC827TokenMock.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_data' of ERC827Token.approve (ERC827TokenMock.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC827Token.transfer (ERC827TokenMock.sol#305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC827Token.transfer (ERC827TokenMock.sol#305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_data' of ERC827Token.transfer (ERC827TokenMock.sol#305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_from' of ERC827Token.transferFrom (ERC827TokenMock.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC827Token.transferFrom (ERC827TokenMock.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC827Token.transferFrom (ERC827TokenMock.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_data' of ERC827Token.transferFrom (ERC827TokenMock.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC827Token.increaseApproval (ERC827TokenMock.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of ERC827Token.increaseApproval (ERC827TokenMock.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_data' of ERC827Token.increaseApproval (ERC827TokenMock.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC827Token.decreaseApproval (ERC827TokenMock.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of ERC827Token.decreaseApproval (ERC827TokenMock.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_data' of ERC827Token.decreaseApproval (ERC827TokenMock.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 390,
                    "vulnerability_code": "  function ERC827TokenMock(address initialAccount, uint256 initialBalance) public {\n\n    balances[initialAccount] = initialBalance;\n\n    totalSupply_ = initialBalance;\n",
                    "message": "Function 'ERC827TokenMock.ERC827TokenMock' (ERC827TokenMock.sol#387-390) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/MessageHelper.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function showMessage( bytes32 message, uint256 number, string text ) public returns (bool) {\n\n    Show(message, number, text);\n\n    return true;\n",
                    "message": "MessageHelper.showMessage (MessageHelper.sol#9-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "  function fail() public {\n\n    require(false);\n",
                    "message": "MessageHelper.fail (MessageHelper.sol#14-16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function call(address to, bytes data) public returns (bool) {\n\n    if (to.call(data))\n\n      return true;\n\n    else\n\n      return false;\n",
                    "message": "MessageHelper.call (MessageHelper.sol#18-23) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in MessageHelper.sol:\n\t- pragma solidity^0.4.11 (MessageHelper.sol#3): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function call(address to, bytes data) public returns (bool) {\n\n    if (to.call(data))\n\n      return true;\n\n    else\n\n      return false;\n",
                    "message": "Low level call in MessageHelper.call (MessageHelper.sol#18-23):\n\t-to.call(data) MessageHelper.sol#19-22\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function showMessage( bytes32 message, uint256 number, string text ) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function call(address to, bytes data) public returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/PausableTokenMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_39"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ (PausableTokenMock.sol#83) is never initialized. It is used in:\n\t- totalSupply (PausableTokenMock.sol#88-90)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ should be constant (PausableTokenMock.sol#83)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (PausableTokenMock.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (PausableTokenMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (PausableTokenMock.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (PausableTokenMock.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (PausableTokenMock.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (PausableTokenMock.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (PausableTokenMock.sol#271-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": 316,
                    "vulnerability_code": "  function pause() onlyOwner whenNotPaused public {\n\n    paused = true;\n\n    Pause();\n",
                    "message": "Pausable.pause (PausableTokenMock.sol#313-316) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function unpause() onlyOwner whenPaused public {\n\n    paused = false;\n\n    Unpause();\n",
                    "message": "Pausable.unpause (PausableTokenMock.sol#321-324) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in PausableTokenMock.sol:\n\t- pragma solidity^0.4.18 (PausableTokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (PausableTokenMock.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (PausableTokenMock.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (PausableTokenMock.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (PausableTokenMock.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (PausableTokenMock.sol#236): it allows old versions\n\t- pragma solidity^0.4.18 (PausableTokenMock.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (PausableTokenMock.sol#329): it allows old versions\n\t- pragma solidity^0.4.18 (PausableTokenMock.sol#361): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (PausableTokenMock.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (PausableTokenMock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (PausableTokenMock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (PausableTokenMock.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (PausableTokenMock.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (PausableTokenMock.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (PausableTokenMock.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (PausableTokenMock.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (PausableTokenMock.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (PausableTokenMock.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (PausableTokenMock.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (PausableTokenMock.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (PausableTokenMock.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (PausableTokenMock.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (PausableTokenMock.sol#255-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_to' of PausableToken.transfer (PausableTokenMock.sol#338) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_value' of PausableToken.transfer (PausableTokenMock.sol#338) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_from' of PausableToken.transferFrom (PausableTokenMock.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_to' of PausableToken.transferFrom (PausableTokenMock.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_value' of PausableToken.transferFrom (PausableTokenMock.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_spender' of PausableToken.approve (PausableTokenMock.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_value' of PausableToken.approve (PausableTokenMock.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n",
                    "message": "Parameter '_spender' of PausableToken.increaseApproval (PausableTokenMock.sol#350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n",
                    "message": "Parameter '_addedValue' of PausableToken.increaseApproval (PausableTokenMock.sol#350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n",
                    "message": "Parameter '_spender' of PausableToken.decreaseApproval (PausableTokenMock.sol#354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n",
                    "message": "Parameter '_subtractedValue' of PausableToken.decreaseApproval (PausableTokenMock.sol#354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": 368,
                    "vulnerability_code": "  function PausableTokenMock(address initialAccount, uint initialBalance) public {\n\n    balances[initialAccount] = initialBalance;\n",
                    "message": "Function 'PausableTokenMock.PausableTokenMock' (PausableTokenMock.sol#366-368) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/ReentrancyMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    counter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private reentrancy_lock = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "  function callSender(bytes4 data) public {\n\n    require(msg.sender.call(data));\n\n  }\n",
                    "message": "ReentrancyAttack.callSender (ReentrancyMock.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function countThisRecursive(uint256 n) public nonReentrant {\n\n    bytes4 func = bytes4(keccak256(\"countThisRecursive(uint256)\"));\n\n    if (n > 0) {\n\n      count();\n\n      bool result = this.call(func, n - 1);\n\n      require(result == true);\n\n    }\n\n  }\n",
                    "message": "ReentrancyMock.countThisRecursive (ReentrancyMock.sol#73-81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function countAndCall(ReentrancyAttack attacker) public nonReentrant {\n\n    count();\n\n    bytes4 func = bytes4(keccak256(\"callback()\"));\n\n    attacker.callSender(func);\n\n  }\n",
                    "message": "ReentrancyMock.countAndCall (ReentrancyMock.sol#82-87) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ReentrancyMock.sol:\n\t- pragma solidity^0.4.18 (ReentrancyMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ReentrancyMock.sol#38-39): it allows old versions\n\t- pragma solidity^0.4.18 (ReentrancyMock.sol#51-52): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "  function callSender(bytes4 data) public {\n\n    require(msg.sender.call(data));\n\n  }\n",
                    "message": "Low level call in ReentrancyAttack.callSender (ReentrancyMock.sol#43-46):\n\t-require(bool)(msg.sender.call(data)) ReentrancyMock.sol#44\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function countThisRecursive(uint256 n) public nonReentrant {\n\n    bytes4 func = bytes4(keccak256(\"countThisRecursive(uint256)\"));\n\n    if (n > 0) {\n\n      count();\n\n      bool result = this.call(func, n - 1);\n\n      require(result == true);\n\n    }\n\n  }\n",
                    "message": "Low level call in ReentrancyMock.countThisRecursive (ReentrancyMock.sol#73-81):\n\t-result = this.call(func,n - 1) ReentrancyMock.sol#77\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private reentrancy_lock = false;\n",
                    "message": "Variable 'ReentrancyGuard.reentrancy_lock' (ReentrancyMock.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 61,
                    "vulnerability_code": "  function ReentrancyMock() public {\n\n    counter = 0;\n\n  }\n",
                    "message": "Function 'ReentrancyMock.ReentrancyMock' (ReentrancyMock.sol#58-61) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private reentrancy_lock = false;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    attacker.callSender(func);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      bool result = this.call(func, n - 1);\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/ERC721TokenMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ownedTokens[_from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_42"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 18,
                    "vulnerability_code": "contract ERC721 {\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n  function transfer(address _to, uint256 _tokenId) public;\n\n  function approve(address _to, uint256 _tokenId) public;\n\n  function takeOwnership(uint256 _tokenId) public;\n",
                    "message": "ERC721 (ERC721TokenMock.sol#9-18) has incorrect ERC20 function interface(s):\n\t-transfer (ERC721TokenMock.sol#15)\n\t-approve (ERC721TokenMock.sol#16)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 284,
                    "vulnerability_code": "contract ERC721Token is ERC721 {\n\n  using SafeMath for uint256;\n\n\n\n  // Total amount of tokens\n\n  uint256 private totalTokens;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private tokenApprovals;\n\n\n\n  // Mapping from owner to list of owned token IDs\n\n  mapping (address => uint256[]) private ownedTokens;\n\n\n\n  // Mapping from token ID to index of the owner tokens list\n\n  mapping(uint256 => uint256) private ownedTokensIndex;\n\n\n\n  /**\n\n  * @dev Guarantees msg.sender is owner of the given token\n\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n\n  */\n\n  modifier onlyOwnerOf(uint256 _tokenId) {\n\n    require(ownerOf(_tokenId) == msg.sender);\n\n    _;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the total amount of tokens stored by the contract\n\n  * @return uint256 representing the total amount of tokens\n\n  */\n\n  function totalSupply() public view returns (uint256) {\n\n    return totalTokens;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the balance of the specified address\n\n  * @param _owner address to query the balance of\n\n  * @return uint256 representing the amount owned by the passed address\n\n  */\n\n  function balanceOf(address _owner) public view returns (uint256) {\n\n    return ownedTokens[_owner].length;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the list of tokens owned by a given address\n\n  * @param _owner address to query the tokens of\n\n  * @return uint256[] representing the list of tokens owned by the passed address\n\n  */\n\n  function tokensOf(address _owner) public view returns (uint256[]) {\n\n    return ownedTokens[_owner];\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the owner of the specified token ID\n\n  * @param _tokenId uint256 ID of the token to query the owner of\n\n  * @return owner address currently marked as the owner of the given token ID\n\n  */\n\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n\n    address owner = tokenOwner[_tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address to take ownership of a given token ID\n\n   * @param _tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved to take ownership of the given token ID\n\n   */\n\n  function approvedFor(uint256 _tokenId) public view returns (address) {\n\n    return tokenApprovals[_tokenId];\n\n  }\n\n\n\n  /**\n\n  * @dev Transfers the ownership of a given token ID to another address\n\n  * @param _to address to receive the ownership of the given token ID\n\n  * @param _tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Approves another address to claim for the ownership of the given token ID\n\n  * @param _to address to be approved for the given token ID\n\n  * @param _tokenId uint256 ID of the token to be approved\n\n  */\n\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    address owner = ownerOf(_tokenId);\n\n    require(_to != owner);\n\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n\n      tokenApprovals[_tokenId] = _to;\n\n      Approval(owner, _to, _tokenId);\n\n    }\n\n  }\n\n\n\n  /**\n\n  * @dev Claims the ownership of a given token ID\n\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n\n  */\n\n  function takeOwnership(uint256 _tokenId) public {\n\n    require(isApprovedFor(msg.sender, _tokenId));\n\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Mint token function\n\n  * @param _to The address that will own the minted token\n\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n\n  */\n\n  function _mint(address _to, uint256 _tokenId) internal {\n\n    require(_to != address(0));\n\n    addToken(_to, _tokenId);\n\n    Transfer(0x0, _to, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Burns a specific token\n\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n\n  */\n\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n\n    if (approvedFor(_tokenId) != 0) {\n\n      clearApproval(msg.sender, _tokenId);\n\n    }\n\n    removeToken(msg.sender, _tokenId);\n\n    Transfer(msg.sender, 0x0, _tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\n\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\n\n   * @param _owner address of the owner to query the approval of\n\n   * @param _tokenId uint256 ID of the token to query the approval of\n\n   * @return bool whether the msg.sender is approved for the given token ID or not\n\n   */\n\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n\n    return approvedFor(_tokenId) == _owner;\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n\n  * @param _from address which you want to send tokens from\n\n  * @param _to address which you want to transfer the token to\n\n  * @param _tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n\n    require(_to != address(0));\n\n    require(_to != ownerOf(_tokenId));\n\n    require(ownerOf(_tokenId) == _from);\n\n\n\n    clearApproval(_from, _tokenId);\n\n    removeToken(_from, _tokenId);\n\n    addToken(_to, _tokenId);\n\n    Transfer(_from, _to, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to clear current approval of a given token ID\n\n  * @param _tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function clearApproval(address _owner, uint256 _tokenId) private {\n\n    require(ownerOf(_tokenId) == _owner);\n\n    tokenApprovals[_tokenId] = 0;\n\n    Approval(_owner, 0, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to add a token ID to the list of a given address\n\n  * @param _to address representing the new owner of the given token ID\n\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n  */\n\n  function addToken(address _to, uint256 _tokenId) private {\n\n    require(tokenOwner[_tokenId] == address(0));\n\n    tokenOwner[_tokenId] = _to;\n\n    uint256 length = balanceOf(_to);\n\n    ownedTokens[_to].push(_tokenId);\n\n    ownedTokensIndex[_tokenId] = length;\n\n    totalTokens = totalTokens.add(1);\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to remove a token ID from the list of a given address\n\n  * @param _from address representing the previous owner of the given token ID\n\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n  */\n\n  function removeToken(address _from, uint256 _tokenId) private {\n\n    require(ownerOf(_tokenId) == _from);\n\n\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n\n\n    tokenOwner[_tokenId] = 0;\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n\n    ownedTokens[_from][lastTokenIndex] = 0;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\n\n    ownedTokens[_from].length--;\n\n    ownedTokensIndex[_tokenId] = 0;\n\n    ownedTokensIndex[lastToken] = tokenIndex;\n\n    totalTokens = totalTokens.sub(1);\n\n  }\n",
                    "message": "ERC721Token (ERC721TokenMock.sol#80-284) has incorrect ERC20 function interface(s):\n\t-transfer (ERC721TokenMock.sol#158-160)\n\t-approve (ERC721TokenMock.sol#167-174)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public;\n",
                    "message": "ERC721.transfer (ERC721TokenMock.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n",
                    "message": "ERC721Token.transfer (ERC721TokenMock.sol#158-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public;\n",
                    "message": "ERC721.approve (ERC721TokenMock.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    address owner = ownerOf(_tokenId);\n\n    require(_to != owner);\n\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n\n      tokenApprovals[_tokenId] = _to;\n\n      Approval(owner, _to, _tokenId);\n\n    }\n",
                    "message": "ERC721Token.approve (ERC721TokenMock.sol#167-174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public;\n",
                    "message": "ERC721.takeOwnership (ERC721TokenMock.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public {\n\n    require(isApprovedFor(msg.sender, _tokenId));\n\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n",
                    "message": "ERC721Token.takeOwnership (ERC721TokenMock.sol#180-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 113,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalTokens;\n",
                    "message": "ERC721Token.totalSupply (ERC721TokenMock.sol#111-113) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 131,
                    "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n\n    return ownedTokens[_owner];\n",
                    "message": "ERC721Token.tokensOf (ERC721TokenMock.sol#129-131) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 299,
                    "vulnerability_code": "  function mint(address _to, uint256 _tokenId) public {\n\n    super._mint(_to, _tokenId);\n",
                    "message": "ERC721TokenMock.mint (ERC721TokenMock.sol#297-299) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "  function burn(uint256 _tokenId) public {\n\n    super._burn(_tokenId);\n",
                    "message": "ERC721TokenMock.burn (ERC721TokenMock.sol#301-303) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ERC721TokenMock.sol:\n\t- pragma solidity^0.4.18 (ERC721TokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ERC721TokenMock.sol#22): it allows old versions\n\t- pragma solidity^0.4.18 (ERC721TokenMock.sol#73): it allows old versions\n\t- pragma solidity^0.4.18 (ERC721TokenMock.sol#288): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Token.balanceOf (ERC721TokenMock.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ownerOf(uint256 _tokenId) public view returns (address) {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.ownerOf (ERC721TokenMock.sol#138) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
                    "message": "Parameter '_to' of ERC721Token.transfer (ERC721TokenMock.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.transfer (ERC721TokenMock.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
                    "message": "Parameter '_to' of ERC721Token.approve (ERC721TokenMock.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.approve (ERC721TokenMock.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.takeOwnership (ERC721TokenMock.sol#180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n",
                    "message": "Parameter '_owner' of ERC721Token.tokensOf (ERC721TokenMock.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approvedFor(uint256 _tokenId) public view returns (address) {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.approvedFor (ERC721TokenMock.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 194,
                    "vulnerability_code": "  function _mint(address _to, uint256 _tokenId) internal {\n\n    require(_to != address(0));\n\n    addToken(_to, _tokenId);\n\n    Transfer(0x0, _to, _tokenId);\n",
                    "message": "Function 'ERC721Token._mint' (ERC721TokenMock.sol#190-194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _mint(address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_to' of ERC721Token._mint (ERC721TokenMock.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _mint(address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_tokenId' of ERC721Token._mint (ERC721TokenMock.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n\n    if (approvedFor(_tokenId) != 0) {\n\n      clearApproval(msg.sender, _tokenId);\n\n    }\n\n    removeToken(msg.sender, _tokenId);\n\n    Transfer(msg.sender, 0x0, _tokenId);\n",
                    "message": "Function 'ERC721Token._burn' (ERC721TokenMock.sol#200-206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n",
                    "message": "Parameter '_tokenId' of ERC721Token._burn (ERC721TokenMock.sol#200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n",
                    "message": "Parameter '_owner' of ERC721Token.isApprovedFor (ERC721TokenMock.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.isApprovedFor (ERC721TokenMock.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_from' of ERC721Token.clearApprovalAndTransfer (ERC721TokenMock.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_to' of ERC721Token.clearApprovalAndTransfer (ERC721TokenMock.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.clearApprovalAndTransfer (ERC721TokenMock.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function clearApproval(address _owner, uint256 _tokenId) private {\n",
                    "message": "Parameter '_owner' of ERC721Token.clearApproval (ERC721TokenMock.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function clearApproval(address _owner, uint256 _tokenId) private {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.clearApproval (ERC721TokenMock.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addToken(address _to, uint256 _tokenId) private {\n",
                    "message": "Parameter '_to' of ERC721Token.addToken (ERC721TokenMock.sol#251) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addToken(address _to, uint256 _tokenId) private {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.addToken (ERC721TokenMock.sol#251) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeToken(address _from, uint256 _tokenId) private {\n",
                    "message": "Parameter '_from' of ERC721Token.removeToken (ERC721TokenMock.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeToken(address _from, uint256 _tokenId) private {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.removeToken (ERC721TokenMock.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ERC721TokenMock() ERC721Token() public { }\n",
                    "message": "Function 'ERC721TokenMock.ERC721TokenMock' (ERC721TokenMock.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _tokenId) public {\n",
                    "message": "Parameter '_to' of ERC721TokenMock.mint (ERC721TokenMock.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _tokenId) public {\n",
                    "message": "Parameter '_tokenId' of ERC721TokenMock.mint (ERC721TokenMock.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burn(uint256 _tokenId) public {\n",
                    "message": "Parameter '_tokenId' of ERC721TokenMock.burn (ERC721TokenMock.sol#301) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ownedTokens[_from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private totalTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256[]) private ownedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => uint256) private ownedTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/LimitBalanceMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 43,
                    "vulnerability_code": "  function limitedDeposit() public payable limitedPayable {\n",
                    "message": "Contract locking ether found in LimitBalanceMock.sol:\n\tContract LimitBalanceMock has payable functions:\n\t - limitedDeposit (LimitBalanceMock.sol#42-43)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 43,
                    "vulnerability_code": "  function limitedDeposit() public payable limitedPayable {\n",
                    "message": "LimitBalanceMock.limitedDeposit (LimitBalanceMock.sol#42-43) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in LimitBalanceMock.sol:\n\t- pragma solidity^0.4.18 (LimitBalanceMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (LimitBalanceMock.sol#37): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "  function LimitBalance(uint256 _limit) public {\n\n    limit = _limit;\n",
                    "message": "Function 'LimitBalance.LimitBalance' (LimitBalanceMock.sol#20-22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function LimitBalance(uint256 _limit) public {\n",
                    "message": "Parameter '_limit' of LimitBalance.LimitBalance (LimitBalanceMock.sol#20) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract LimitBalanceMock is LimitBalance(1000) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/PullPaymentMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function withdrawPayments() public {\n\n    address payee = msg.sender;\n\n    uint256 payment = payments[payee];\n\n\n\n    require(payment != 0);\n\n    require(this.balance >= payment);\n\n\n\n    totalPayments = totalPayments.sub(payment);\n\n    payments[payee] = 0;\n\n\n\n    assert(payee.send(payment));\n",
                    "message": "PullPayment.withdrawPayments (PullPaymentMock.sol#70-81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function callSend(address dest, uint256 amount) public {\n\n    asyncSend(dest, amount);\n",
                    "message": "PullPaymentMock.callSend (PullPaymentMock.sol#104-106) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in PullPaymentMock.sol:\n\t- pragma solidity^0.4.18 (PullPaymentMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (PullPaymentMock.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (PullPaymentMock.sol#96): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function PullPaymentMock() public payable { }\n",
                    "message": "Function 'PullPaymentMock.PullPaymentMock' (PullPaymentMock.sol#101) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract PullPaymentMock is PullPayment {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SEND",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(payee.send(payment));\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/BurnableTokenMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (BurnableTokenMock.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (BurnableTokenMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (BurnableTokenMock.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (BurnableTokenMock.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (BurnableTokenMock.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (BurnableTokenMock.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "  function burn(uint256 _value) public {\n\n    require(_value <= balances[msg.sender]);\n\n    // no need to require value <= totalSupply, since that would imply the\n\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n    address burner = msg.sender;\n\n    balances[burner] = balances[burner].sub(_value);\n\n    totalSupply_ = totalSupply_.sub(_value);\n\n    Burn(burner, _value);\n",
                    "message": "BurnableToken.burn (BurnableTokenMock.sol#135-144) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BurnableTokenMock.sol:\n\t- pragma solidity^0.4.18 (BurnableTokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (BurnableTokenMock.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (BurnableTokenMock.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (BurnableTokenMock.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (BurnableTokenMock.sol#149): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (BurnableTokenMock.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (BurnableTokenMock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (BurnableTokenMock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burn(uint256 _value) public {\n",
                    "message": "Parameter '_value' of BurnableToken.burn (BurnableTokenMock.sol#135) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function BurnableTokenMock(address initialAccount, uint initialBalance) public {\n\n    balances[initialAccount] = initialBalance;\n\n    totalSupply_ = initialBalance;\n",
                    "message": "Function 'BurnableTokenMock.BurnableTokenMock' (BurnableTokenMock.sol#153-156) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/BasicTokenMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_11"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (BasicTokenMock.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (BasicTokenMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (BasicTokenMock.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (BasicTokenMock.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (BasicTokenMock.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (BasicTokenMock.sol#14) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BasicTokenMock.sol:\n\t- pragma solidity^0.4.18 (BasicTokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (BasicTokenMock.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (BasicTokenMock.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (BasicTokenMock.sol#121): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (BasicTokenMock.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (BasicTokenMock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (BasicTokenMock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function BasicTokenMock(address initialAccount, uint256 initialBalance) public {\n\n    balances[initialAccount] = initialBalance;\n\n    totalSupply_ = initialBalance;\n",
                    "message": "Function 'BasicTokenMock.BasicTokenMock' (BasicTokenMock.sol#126-129) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/StandardTokenMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_30"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (StandardTokenMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (StandardTokenMock.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (StandardTokenMock.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (StandardTokenMock.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (StandardTokenMock.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (StandardTokenMock.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (StandardTokenMock.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (StandardTokenMock.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (StandardTokenMock.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (StandardTokenMock.sol#157-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (StandardTokenMock.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (StandardTokenMock.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (StandardTokenMock.sol#205-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (StandardTokenMock.sol#221-230) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in StandardTokenMock.sol:\n\t- pragma solidity^0.4.18 (StandardTokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (StandardTokenMock.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (StandardTokenMock.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (StandardTokenMock.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (StandardTokenMock.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (StandardTokenMock.sol#236): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (StandardTokenMock.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (StandardTokenMock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (StandardTokenMock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (StandardTokenMock.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (StandardTokenMock.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (StandardTokenMock.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (StandardTokenMock.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (StandardTokenMock.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (StandardTokenMock.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (StandardTokenMock.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (StandardTokenMock.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (StandardTokenMock.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (StandardTokenMock.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (StandardTokenMock.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 244,
                    "vulnerability_code": "  function StandardTokenMock(address initialAccount, uint256 initialBalance) public {\n\n    balances[initialAccount] = initialBalance;\n\n    totalSupply_ = initialBalance;\n",
                    "message": "Function 'StandardTokenMock.StandardTokenMock' (StandardTokenMock.sol#241-244) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/HasNoEtherTest.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract HasNoEther is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (HasNoEtherTest.sol#38-42) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in HasNoEtherTest.sol:\n\t- pragma solidity^0.4.18 (HasNoEtherTest.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (HasNoEtherTest.sol#48): it allows old versions\n\t- pragma solidity^0.4.18 (HasNoEtherTest.sol#89-90): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (HasNoEtherTest.sol#22-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function HasNoEther() public payable {\n\n    require(msg.value == 0);\n\n  }\n",
                    "message": "Function 'HasNoEther.HasNoEther' (HasNoEtherTest.sol#69-72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "  function HasNoEtherTest() public payable {\n\n  }\n\n\n",
                    "message": "Function 'HasNoEtherTest.HasNoEtherTest' (HasNoEtherTest.sol#94-97) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract HasNoEtherTest is HasNoEther {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SEND",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(owner.send(this.balance));\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/InsecureTargetBounty.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Destructible is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "  function claim(Target target) public {\n\n    address researcher = researchers[target];\n\n    require(researcher != 0);\n\n    // Check Target contract invariants\n\n    require(!target.checkInvariant());\n\n    asyncSend(researcher, this.balance);\n\n    claimed = true;\n",
                    "message": "Reentrancy in Bounty.claim (InsecureTargetBounty.sol#201-208):\n\tExternal calls:\n\t- require(bool)(! target.checkInvariant()) (InsecureTargetBounty.sol#205)\n\tState variables written after the call(s):\n\t- claimed (InsecureTargetBounty.sol#207)\n\t- payments (InsecureTargetBounty.sol#206)\n\t- totalPayments (InsecureTargetBounty.sol#206)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function withdrawPayments() public {\n\n    address payee = msg.sender;\n\n    uint256 payment = payments[payee];\n\n\n\n    require(payment != 0);\n\n    require(this.balance >= payment);\n\n\n\n    totalPayments = totalPayments.sub(payment);\n\n    payments[payee] = 0;\n\n\n\n    assert(payee.send(payment));\n",
                    "message": "PullPayment.withdrawPayments (InsecureTargetBounty.sol#70-81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": 135,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (InsecureTargetBounty.sol#131-135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function destroy() onlyOwner public {\n\n    selfdestruct(owner);\n",
                    "message": "Destructible.destroy (InsecureTargetBounty.sol#154-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) onlyOwner public {\n\n    selfdestruct(_recipient);\n",
                    "message": "Destructible.destroyAndSend (InsecureTargetBounty.sol#158-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 195,
                    "vulnerability_code": "  function createTarget() public returns(Target) {\n\n    Target target = Target(deployContract());\n\n    researchers[target] = msg.sender;\n\n    TargetCreated(target);\n\n    return target;\n",
                    "message": "Bounty.createTarget (InsecureTargetBounty.sol#190-195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "  function claim(Target target) public {\n\n    address researcher = researchers[target];\n\n    require(researcher != 0);\n\n    // Check Target contract invariants\n\n    require(!target.checkInvariant());\n\n    asyncSend(researcher, this.balance);\n\n    claimed = true;\n",
                    "message": "Bounty.claim (InsecureTargetBounty.sol#201-208) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkInvariant() public returns(bool);\n",
                    "message": "Target.checkInvariant (InsecureTargetBounty.sol#231) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": 241,
                    "vulnerability_code": "  function checkInvariant() public returns(bool) {\n\n    return false;\n",
                    "message": "InsecureTargetMock.checkInvariant (InsecureTargetBounty.sol#239-241) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in InsecureTargetBounty.sol:\n\t- pragma solidity^0.4.18 (InsecureTargetBounty.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (InsecureTargetBounty.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (InsecureTargetBounty.sol#96): it allows old versions\n\t- pragma solidity^0.4.18 (InsecureTargetBounty.sol#141): it allows old versions\n\t- pragma solidity^0.4.18 (InsecureTargetBounty.sol#165): it allows old versions\n\t- pragma solidity^0.4.18 (InsecureTargetBounty.sol#236): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (InsecureTargetBounty.sol#115-117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Destructible() public payable { }\n",
                    "message": "Function 'Destructible.Destructible' (InsecureTargetBounty.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) onlyOwner public {\n",
                    "message": "Parameter '_recipient' of Destructible.destroyAndSend (InsecureTargetBounty.sol#158) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Bounty is PullPayment, Destructible {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SEND",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(payee.send(payment));\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/ECRecoveryMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (v != 27 && v != 28) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return ecrecover(hash, v, r, s);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    //Check the signature length\n\n    if (sig.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    assembly {\n\n      r := mload(add(sig, 32))\n\n      s := mload(add(sig, 64))\n\n      v := byte(0, mload(add(sig, 96)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECRecovery.recover (ECRecoveryMock.sol#19-47) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    //Check the signature length\n\n    if (sig.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    assembly {\n\n      r := mload(add(sig, 32))\n\n      s := mload(add(sig, 64))\n\n      v := byte(0, mload(add(sig, 96)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECRecovery.recover uses assembly (ECRecoveryMock.sol#19-47)\n\t- ECRecoveryMock.sol#30-37\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    //Check the signature length\n\n    if (sig.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    assembly {\n\n      r := mload(add(sig, 32))\n\n      s := mload(add(sig, 64))\n\n      v := byte(0, mload(add(sig, 96)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECRecovery.recover (ECRecoveryMock.sol#19-47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public returns (address) {\n\n    addrRecovered = hash.recover(sig);\n",
                    "message": "ECRecoveryMock.recover (ECRecoveryMock.sol#60-62) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ECRecoveryMock.sol:\n\t- pragma solidity^0.4.18 (ECRecoveryMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ECRecoveryMock.sol#53): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes sig) public returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/DetailedERC20Mock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_36"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ (DetailedERC20Mock.sol#83) is never initialized. It is used in:\n\t- totalSupply (DetailedERC20Mock.sol#88-90)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ should be constant (DetailedERC20Mock.sol#83)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (DetailedERC20Mock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (DetailedERC20Mock.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (DetailedERC20Mock.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (DetailedERC20Mock.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (DetailedERC20Mock.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (DetailedERC20Mock.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (DetailedERC20Mock.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (DetailedERC20Mock.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (DetailedERC20Mock.sol#157-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (DetailedERC20Mock.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (DetailedERC20Mock.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (DetailedERC20Mock.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (DetailedERC20Mock.sol#205-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (DetailedERC20Mock.sol#221-230) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in DetailedERC20Mock.sol:\n\t- pragma solidity^0.4.18 (DetailedERC20Mock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (DetailedERC20Mock.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (DetailedERC20Mock.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (DetailedERC20Mock.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (DetailedERC20Mock.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (DetailedERC20Mock.sol#236): it allows old versions\n\t- pragma solidity^0.4.18 (DetailedERC20Mock.sol#252): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (DetailedERC20Mock.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (DetailedERC20Mock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (DetailedERC20Mock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (DetailedERC20Mock.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (DetailedERC20Mock.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (DetailedERC20Mock.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (DetailedERC20Mock.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (DetailedERC20Mock.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (DetailedERC20Mock.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (DetailedERC20Mock.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (DetailedERC20Mock.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (DetailedERC20Mock.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (DetailedERC20Mock.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (DetailedERC20Mock.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": 247,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n\n    name = _name;\n\n    symbol = _symbol;\n\n    decimals = _decimals;\n",
                    "message": "Function 'DetailedERC20.DetailedERC20' (DetailedERC20Mock.sol#243-247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n",
                    "message": "Parameter '_name' of DetailedERC20.DetailedERC20 (DetailedERC20Mock.sol#243) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n",
                    "message": "Parameter '_symbol' of DetailedERC20.DetailedERC20 (DetailedERC20Mock.sol#243) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n",
                    "message": "Parameter '_decimals' of DetailedERC20.DetailedERC20 (DetailedERC20Mock.sol#243) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20Mock(string _name, string _symbol, uint8 _decimals) DetailedERC20(_name, _symbol, _decimals) public {}\n",
                    "message": "Function 'DetailedERC20Mock.DetailedERC20Mock' (DetailedERC20Mock.sol#256) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20Mock(string _name, string _symbol, uint8 _decimals) DetailedERC20(_name, _symbol, _decimals) public {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20Mock(string _name, string _symbol, uint8 _decimals) DetailedERC20(_name, _symbol, _decimals) public {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/RBACMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _advisors.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _advisors.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _advisors.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
                    "message": "RBAC.roles (RBACMock.sol#77) is never initialized. It is used in:\n\t- checkRole (RBACMock.sol#102-107)\n\t- hasRole (RBACMock.sol#115-121)\n\t- addRole (RBACMock.sol#152-157)\n\t- removeRole (RBACMock.sol#164-169)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in RBACMock.sol:\n\t- Version used: ['^0.4.18', '^0.4.8']\n\t- RBACMock.sol#3 declares pragma solidity^0.4.18\n\t- RBACMock.sol#61 declares pragma solidity^0.4.18\n\t- RBACMock.sol#217 declares pragma solidity^0.4.8\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 133,
                    "vulnerability_code": "  function adminAddRole(address addr, string roleName)\n\n    onlyAdmin\n\n    public\n\n  {\n\n    addRole(addr, roleName);\n",
                    "message": "RBAC.adminAddRole (RBACMock.sol#128-133) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": 145,
                    "vulnerability_code": "  function adminRemoveRole(address addr, string roleName)\n\n    onlyAdmin\n\n    public\n\n  {\n\n    removeRole(addr, roleName);\n",
                    "message": "RBAC.adminRemoveRole (RBACMock.sol#140-145) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function removeAdvisor(address _addr)\n\n    onlyAdmin\n\n    public\n\n  {\n\n    // revert if the user isn't an advisor\n\n    //  (perhaps you want to soft-fail here instead?)\n\n    checkRole(_addr, ROLE_ADVISOR);\n\n\n\n    // remove the advisor's role\n\n    removeRole(_addr, ROLE_ADVISOR);\n",
                    "message": "RBACMock.removeAdvisor (RBACMock.sol#271-281) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in RBACMock.sol:\n\t- pragma solidity^0.4.18 (RBACMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (RBACMock.sol#61): it allows old versions\n\t- pragma solidity^0.4.8 (RBACMock.sol#217): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "  function RBAC()\n\n    public\n\n  {\n\n    addRole(msg.sender, ROLE_ADMIN);\n",
                    "message": "Function 'RBAC.RBAC' (RBACMock.sol#90-94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 240,
                    "vulnerability_code": "  function RBACMock(address[] _advisors)\n\n    public\n\n  {\n\n    addRole(msg.sender, ROLE_ADVISOR);\n\n\n\n    for (uint256 i = 0; i < _advisors.length; i++) {\n\n      addRole(_advisors[i], ROLE_ADVISOR);\n\n    }\n",
                    "message": "Function 'RBACMock.RBACMock' (RBACMock.sol#232-240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function RBACMock(address[] _advisors)\n",
                    "message": "Parameter '_advisors' of RBACMock.RBACMock (RBACMock.sol#232) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeAdvisor(address _addr)\n",
                    "message": "Parameter '_addr' of RBACMock.removeAdvisor (RBACMock.sol#271) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _advisors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _advisors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.8;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function hasRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function adminAddRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function adminRemoveRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function RBACMock(address[] _advisors)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string constant ROLE_ADVISOR = \"advisor\";\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/RefundableCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract FinalizableCrowdsale is Crowdsale, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract RefundVault is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public isFinalized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_52"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "  function buyTokens(address beneficiary) public payable {\n\n    require(beneficiary != address(0));\n\n    require(validPurchase());\n\n\n\n    uint256 weiAmount = msg.value;\n\n\n\n    // calculate token amount to be created\n\n    uint256 tokens = getTokenAmount(weiAmount);\n\n\n\n    // update state\n\n    weiRaised = weiRaised.add(weiAmount);\n\n\n\n    token.mint(beneficiary, tokens);\n\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n\n\n    forwardFunds();\n",
                    "message": "Crowdsale.buyTokens (RefundableCrowdsaleImpl.sol#388-404) does not use the value returned by external calls:\n\t-token.mint(beneficiary,tokens) (RefundableCrowdsaleImpl.sol#400)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (RefundableCrowdsaleImpl.sol#89-93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (RefundableCrowdsaleImpl.sol#108) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": 135,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (RefundableCrowdsaleImpl.sol#133-135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (RefundableCrowdsaleImpl.sol#158-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (RefundableCrowdsaleImpl.sol#109) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (RefundableCrowdsaleImpl.sol#142-151) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (RefundableCrowdsaleImpl.sol#110) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (RefundableCrowdsaleImpl.sol#236-238) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (RefundableCrowdsaleImpl.sol#173) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (RefundableCrowdsaleImpl.sol#202-212) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (RefundableCrowdsaleImpl.sol#174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (RefundableCrowdsaleImpl.sol#224-228) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (RefundableCrowdsaleImpl.sol#175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (RefundableCrowdsaleImpl.sol#250-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (RefundableCrowdsaleImpl.sol#266-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n\n    Transfer(address(0), _to, _amount);\n\n    return true;\n",
                    "message": "MintableToken.mint (RefundableCrowdsaleImpl.sol#308-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
                    "message": "MintableToken.finishMinting (RefundableCrowdsaleImpl.sol#320-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "  function finalize() onlyOwner public {\n\n    require(!isFinalized);\n\n    require(hasEnded());\n\n\n\n    finalization();\n\n    Finalized();\n\n\n\n    isFinalized = true;\n",
                    "message": "FinalizableCrowdsale.finalize (RefundableCrowdsaleImpl.sol#459-467) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function deposit(address investor) onlyOwner public payable {\n\n    require(state == State.Active);\n\n    deposited[investor] = deposited[investor].add(msg.value);\n",
                    "message": "RefundVault.deposit (RefundableCrowdsaleImpl.sol#508-511) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": 518,
                    "vulnerability_code": "  function close() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Closed;\n\n    Closed();\n\n    wallet.transfer(this.balance);\n",
                    "message": "RefundVault.close (RefundableCrowdsaleImpl.sol#513-518) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": 524,
                    "vulnerability_code": "  function enableRefunds() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Refunding;\n\n    RefundsEnabled();\n",
                    "message": "RefundVault.enableRefunds (RefundableCrowdsaleImpl.sol#520-524) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": 532,
                    "vulnerability_code": "  function refund(address investor) public {\n\n    require(state == State.Refunding);\n\n    uint256 depositedValue = deposited[investor];\n\n    deposited[investor] = 0;\n\n    investor.transfer(depositedValue);\n\n    Refunded(investor, depositedValue);\n",
                    "message": "RefundVault.refund (RefundableCrowdsaleImpl.sol#526-532) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 568,
                    "vulnerability_code": "  function claimRefund() public {\n\n    require(isFinalized);\n\n    require(!goalReached());\n\n\n\n    vault.refund(msg.sender);\n",
                    "message": "RefundableCrowdsale.claimRefund (RefundableCrowdsaleImpl.sol#563-568) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in RefundableCrowdsaleImpl.sol:\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#99): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#116): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#166): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#181): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#329): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#439): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#480): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#537): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#596): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (RefundableCrowdsaleImpl.sol#73-75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (RefundableCrowdsaleImpl.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (RefundableCrowdsaleImpl.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (RefundableCrowdsaleImpl.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (RefundableCrowdsaleImpl.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (RefundableCrowdsaleImpl.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (RefundableCrowdsaleImpl.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (RefundableCrowdsaleImpl.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (RefundableCrowdsaleImpl.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (RefundableCrowdsaleImpl.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (RefundableCrowdsaleImpl.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (RefundableCrowdsaleImpl.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (RefundableCrowdsaleImpl.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (RefundableCrowdsaleImpl.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (RefundableCrowdsaleImpl.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (RefundableCrowdsaleImpl.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (RefundableCrowdsaleImpl.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n\n    require(_startTime >= now);\n\n    require(_endTime >= _startTime);\n\n    require(_rate > 0);\n\n    require(_wallet != address(0));\n\n\n\n    token = createTokenContract();\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    rate = _rate;\n\n    wallet = _wallet;\n",
                    "message": "Function 'Crowdsale.Crowdsale' (RefundableCrowdsaleImpl.sol#369-380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_startTime' of Crowdsale.Crowdsale (RefundableCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_endTime' of Crowdsale.Crowdsale (RefundableCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_rate' of Crowdsale.Crowdsale (RefundableCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_wallet' of Crowdsale.Crowdsale (RefundableCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": 506,
                    "vulnerability_code": "  function RefundVault(address _wallet) public {\n\n    require(_wallet != address(0));\n\n    wallet = _wallet;\n\n    state = State.Active;\n",
                    "message": "Function 'RefundVault.RefundVault' (RefundableCrowdsaleImpl.sol#502-506) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function RefundVault(address _wallet) public {\n",
                    "message": "Parameter '_wallet' of RefundVault.RefundVault (RefundableCrowdsaleImpl.sol#502) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 560,
                    "vulnerability_code": "  function RefundableCrowdsale(uint256 _goal) public {\n\n    require(_goal > 0);\n\n    vault = new RefundVault(wallet);\n\n    goal = _goal;\n",
                    "message": "Function 'RefundableCrowdsale.RefundableCrowdsale' (RefundableCrowdsaleImpl.sol#556-560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function RefundableCrowdsale(uint256 _goal) public {\n",
                    "message": "Parameter '_goal' of RefundableCrowdsale.RefundableCrowdsale (RefundableCrowdsaleImpl.sol#556) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": 610,
                    "vulnerability_code": "  function RefundableCrowdsaleImpl (\n\n    uint256 _startTime,\n\n    uint256 _endTime,\n\n    uint256 _rate,\n\n    address _wallet,\n\n    uint256 _goal\n\n  ) public\n\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\n\n    RefundableCrowdsale(_goal)\n\n  {\n",
                    "message": "Function 'RefundableCrowdsaleImpl.RefundableCrowdsaleImpl' (RefundableCrowdsaleImpl.sol#600-610) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/ERC223TokenMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "assembly",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n\n    returns (bool success)\n\n  {\n\n    transfer(_to, _value);\n\n    bool is_contract = false;\n\n    assembly {\n\n      is_contract := not(iszero(extcodesize(_to)))\n\n    }\n\n    if (is_contract) {\n\n      ERC223ContractInterface receiver = ERC223ContractInterface(_to);\n\n      receiver.tokenFallback(msg.sender, _value, _data);\n\n    }\n\n    return true;\n",
                    "message": "ERC223TokenMock.transferERC223 uses assembly (ERC223TokenMock.sol#135-148)\n\t- ERC223TokenMock.sol#140-143\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (ERC223TokenMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (ERC223TokenMock.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (ERC223TokenMock.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (ERC223TokenMock.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n\n    returns (bool success)\n\n  {\n\n    transfer(_to, _value);\n\n    bool is_contract = false;\n\n    assembly {\n\n      is_contract := not(iszero(extcodesize(_to)))\n\n    }\n\n    if (is_contract) {\n\n      ERC223ContractInterface receiver = ERC223ContractInterface(_to);\n\n      receiver.tokenFallback(msg.sender, _value, _data);\n\n    }\n\n    return true;\n",
                    "message": "ERC223TokenMock.transferERC223 (ERC223TokenMock.sol#135-148) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ERC223TokenMock.sol:\n\t- pragma solidity^0.4.18 (ERC223TokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ERC223TokenMock.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (ERC223TokenMock.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (ERC223TokenMock.sol#121): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (ERC223TokenMock.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (ERC223TokenMock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (ERC223TokenMock.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function ERC223TokenMock(address initialAccount, uint256 initialBalance) public {\n\n    balances[initialAccount] = initialBalance;\n\n    totalSupply_ = initialBalance;\n",
                    "message": "Function 'ERC223TokenMock.ERC223TokenMock' (ERC223TokenMock.sol#129-132) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n",
                    "message": "Parameter '_to' of ERC223TokenMock.transferERC223 (ERC223TokenMock.sol#135) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n",
                    "message": "Parameter '_value' of ERC223TokenMock.transferERC223 (ERC223TokenMock.sol#135) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n",
                    "message": "Parameter '_data' of ERC223TokenMock.transferERC223 (ERC223TokenMock.sol#135) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/ForceEther.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "accessible-selfdestruct",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    selfdestruct(_recipient);\n",
                    "message": "Contract can be destructed by anyone in destroyAndSend"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "suicidal",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 17,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) public {\n\n    selfdestruct(_recipient);\n",
                    "message": "ForceEther.destroyAndSend (ForceEther.sol#15-17) allows anyone to destruct the contract\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 17,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) public {\n\n    selfdestruct(_recipient);\n",
                    "message": "ForceEther.destroyAndSend (ForceEther.sol#15-17) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ForceEther.sol:\n\t- pragma solidity^0.4.18 (ForceEther.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ForceEther() public payable { }\n",
                    "message": "Function 'ForceEther.ForceEther' (ForceEther.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) public {\n",
                    "message": "Parameter '_recipient' of ForceEther.destroyAndSend (ForceEther.sol#15) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/PausableMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (PausableMock.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "  function pause() onlyOwner whenNotPaused public {\n\n    paused = true;\n\n    Pause();\n",
                    "message": "Pausable.pause (PausableMock.sol#80-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "  function unpause() onlyOwner whenPaused public {\n\n    paused = false;\n\n    Unpause();\n",
                    "message": "Pausable.unpause (PausableMock.sol#88-91) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in PausableMock.sol:\n\t- pragma solidity^0.4.18 (PausableMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (PausableMock.sol#48): it allows old versions\n\t- pragma solidity^0.4.18 (PausableMock.sol#96): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (PausableMock.sol#22-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function PausableMock() public {\n\n    drasticMeasureTaken = false;\n\n    count = 0;\n",
                    "message": "Function 'PausableMock.PausableMock' (PausableMock.sol#103-106) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/SafeERC20Helper.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_46"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (SafeERC20Helper.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return 0;\n",
                    "message": "ERC20SucceedingMock.totalSupply (SafeERC20Helper.sol#91-93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 66,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return 0;\n",
                    "message": "ERC20FailingMock.totalSupply (SafeERC20Helper.sol#64-66) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 109,
                    "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n\n    return 0;\n",
                    "message": "ERC20SucceedingMock.balanceOf (SafeERC20Helper.sol#107-109) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 82,
                    "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n\n    return 0;\n",
                    "message": "ERC20FailingMock.balanceOf (SafeERC20Helper.sol#80-82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (SafeERC20Helper.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (SafeERC20Helper.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": 70,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n\n    return false;\n",
                    "message": "ERC20FailingMock.transfer (SafeERC20Helper.sol#68-70) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n\n    return true;\n",
                    "message": "ERC20SucceedingMock.transfer (SafeERC20Helper.sol#95-97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (SafeERC20Helper.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 113,
                    "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n\n    return 0;\n",
                    "message": "ERC20SucceedingMock.allowance (SafeERC20Helper.sol#111-113) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n\n    return 0;\n",
                    "message": "ERC20FailingMock.allowance (SafeERC20Helper.sol#84-86) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n\n    return true;\n",
                    "message": "ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#99-101) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n\n    return false;\n",
                    "message": "ERC20FailingMock.transferFrom (SafeERC20Helper.sol#72-74) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (SafeERC20Helper.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n\n    return false;\n",
                    "message": "ERC20FailingMock.approve (SafeERC20Helper.sol#76-78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (SafeERC20Helper.sol#29) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n\n    return true;\n",
                    "message": "ERC20SucceedingMock.approve (SafeERC20Helper.sol#103-105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 130,
                    "vulnerability_code": "  function doFailingTransfer() public {\n\n    failing.safeTransfer(0, 0);\n",
                    "message": "SafeERC20Helper.doFailingTransfer (SafeERC20Helper.sol#128-130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "  function doFailingTransferFrom() public {\n\n    failing.safeTransferFrom(0, 0, 0);\n",
                    "message": "SafeERC20Helper.doFailingTransferFrom (SafeERC20Helper.sol#132-134) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 138,
                    "vulnerability_code": "  function doFailingApprove() public {\n\n    failing.safeApprove(0, 0);\n",
                    "message": "SafeERC20Helper.doFailingApprove (SafeERC20Helper.sol#136-138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": 142,
                    "vulnerability_code": "  function doSucceedingTransfer() public {\n\n    succeeding.safeTransfer(0, 0);\n",
                    "message": "SafeERC20Helper.doSucceedingTransfer (SafeERC20Helper.sol#140-142) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "  function doSucceedingTransferFrom() public {\n\n    succeeding.safeTransferFrom(0, 0, 0);\n",
                    "message": "SafeERC20Helper.doSucceedingTransferFrom (SafeERC20Helper.sol#144-146) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": 150,
                    "vulnerability_code": "  function doSucceedingApprove() public {\n\n    succeeding.safeApprove(0, 0);\n",
                    "message": "SafeERC20Helper.doSucceedingApprove (SafeERC20Helper.sol#148-150) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in SafeERC20Helper.sol:\n\t- pragma solidity^0.4.18 (SafeERC20Helper.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (SafeERC20Helper.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (SafeERC20Helper.sol#35): it allows old versions\n\t- pragma solidity^0.4.18 (SafeERC20Helper.sol#60): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n",
                    "message": "Parameter '' of ERC20FailingMock.balanceOf (SafeERC20Helper.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20FailingMock.transfer (SafeERC20Helper.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20FailingMock.transfer (SafeERC20Helper.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
                    "message": "Parameter '' of ERC20FailingMock.allowance (SafeERC20Helper.sol#84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
                    "message": "Parameter '_scope_0' of ERC20FailingMock.allowance (SafeERC20Helper.sol#84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20FailingMock.approve (SafeERC20Helper.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20FailingMock.approve (SafeERC20Helper.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n",
                    "message": "Parameter '' of ERC20SucceedingMock.balanceOf (SafeERC20Helper.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20SucceedingMock.transfer (SafeERC20Helper.sol#95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20SucceedingMock.transfer (SafeERC20Helper.sol#95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
                    "message": "Parameter '' of ERC20SucceedingMock.allowance (SafeERC20Helper.sol#111) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
                    "message": "Parameter '_scope_0' of ERC20SucceedingMock.allowance (SafeERC20Helper.sol#111) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20SucceedingMock.approve (SafeERC20Helper.sol#103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20SucceedingMock.approve (SafeERC20Helper.sol#103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": 126,
                    "vulnerability_code": "  function SafeERC20Helper() public {\n\n    failing = new ERC20FailingMock();\n\n    succeeding = new ERC20SucceedingMock();\n",
                    "message": "Function 'SafeERC20Helper.SafeERC20Helper' (SafeERC20Helper.sol#123-126) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ERC20 failing;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ERC20 succeeding;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/FinalizableCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract FinalizableCrowdsale is Crowdsale, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public isFinalized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_43"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "  function buyTokens(address beneficiary) public payable {\n\n    require(beneficiary != address(0));\n\n    require(validPurchase());\n\n\n\n    uint256 weiAmount = msg.value;\n\n\n\n    // calculate token amount to be created\n\n    uint256 tokens = getTokenAmount(weiAmount);\n\n\n\n    // update state\n\n    weiRaised = weiRaised.add(weiAmount);\n\n\n\n    token.mint(beneficiary, tokens);\n\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n\n\n    forwardFunds();\n",
                    "message": "Crowdsale.buyTokens (FinalizableCrowdsaleImpl.sol#388-404) does not use the value returned by external calls:\n\t-token.mint(beneficiary,tokens) (FinalizableCrowdsaleImpl.sol#400)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (FinalizableCrowdsaleImpl.sol#89-93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": 135,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (FinalizableCrowdsaleImpl.sol#133-135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (FinalizableCrowdsaleImpl.sol#108) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (FinalizableCrowdsaleImpl.sol#158-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (FinalizableCrowdsaleImpl.sol#109) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (FinalizableCrowdsaleImpl.sol#110) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (FinalizableCrowdsaleImpl.sol#142-151) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (FinalizableCrowdsaleImpl.sol#236-238) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (FinalizableCrowdsaleImpl.sol#173) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (FinalizableCrowdsaleImpl.sol#202-212) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (FinalizableCrowdsaleImpl.sol#174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (FinalizableCrowdsaleImpl.sol#175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (FinalizableCrowdsaleImpl.sol#224-228) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (FinalizableCrowdsaleImpl.sol#250-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (FinalizableCrowdsaleImpl.sol#266-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n\n    Transfer(address(0), _to, _amount);\n\n    return true;\n",
                    "message": "MintableToken.mint (FinalizableCrowdsaleImpl.sol#308-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
                    "message": "MintableToken.finishMinting (FinalizableCrowdsaleImpl.sol#320-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "  function finalize() onlyOwner public {\n\n    require(!isFinalized);\n\n    require(hasEnded());\n\n\n\n    finalization();\n\n    Finalized();\n\n\n\n    isFinalized = true;\n",
                    "message": "FinalizableCrowdsale.finalize (FinalizableCrowdsaleImpl.sol#459-467) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in FinalizableCrowdsaleImpl.sol:\n\t- pragma solidity^0.4.18 (FinalizableCrowdsaleImpl.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsaleImpl.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsaleImpl.sol#99): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsaleImpl.sol#116): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsaleImpl.sol#166): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsaleImpl.sol#181): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsaleImpl.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsaleImpl.sol#329): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsaleImpl.sol#439): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsaleImpl.sol#480): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (FinalizableCrowdsaleImpl.sol#73-75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (FinalizableCrowdsaleImpl.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (FinalizableCrowdsaleImpl.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (FinalizableCrowdsaleImpl.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (FinalizableCrowdsaleImpl.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (FinalizableCrowdsaleImpl.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (FinalizableCrowdsaleImpl.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (FinalizableCrowdsaleImpl.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (FinalizableCrowdsaleImpl.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (FinalizableCrowdsaleImpl.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (FinalizableCrowdsaleImpl.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (FinalizableCrowdsaleImpl.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (FinalizableCrowdsaleImpl.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (FinalizableCrowdsaleImpl.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (FinalizableCrowdsaleImpl.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (FinalizableCrowdsaleImpl.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (FinalizableCrowdsaleImpl.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n\n    require(_startTime >= now);\n\n    require(_endTime >= _startTime);\n\n    require(_rate > 0);\n\n    require(_wallet != address(0));\n\n\n\n    token = createTokenContract();\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    rate = _rate;\n\n    wallet = _wallet;\n",
                    "message": "Function 'Crowdsale.Crowdsale' (FinalizableCrowdsaleImpl.sol#369-380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_startTime' of Crowdsale.Crowdsale (FinalizableCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_endTime' of Crowdsale.Crowdsale (FinalizableCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_rate' of Crowdsale.Crowdsale (FinalizableCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_wallet' of Crowdsale.Crowdsale (FinalizableCrowdsaleImpl.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": 492,
                    "vulnerability_code": "  function FinalizableCrowdsaleImpl (\n\n    uint256 _startTime,\n\n    uint256 _endTime,\n\n    uint256 _rate,\n\n    address _wallet\n\n  ) public\n\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\n\n  {\n",
                    "message": "Function 'FinalizableCrowdsaleImpl.FinalizableCrowdsaleImpl' (FinalizableCrowdsaleImpl.sol#484-492) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/mocks/DayLimitMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      spentToday += _value;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    totalSpending += _value;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (spentToday + _value >= spentToday && spentToday + _value <= dailyLimit) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      spentToday += _value;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in DayLimitMock.sol:\n\t- pragma solidity^0.4.18 (DayLimitMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (DayLimitMock.sol#80): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function DayLimit(uint256 _limit) public {\n\n    dailyLimit = _limit;\n\n    lastDay = today();\n",
                    "message": "Function 'DayLimit.DayLimit' (DayLimitMock.sol#21-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DayLimit(uint256 _limit) public {\n",
                    "message": "Parameter '_limit' of DayLimit.DayLimit (DayLimitMock.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "  function _setDailyLimit(uint256 _newLimit) internal {\n\n    dailyLimit = _newLimit;\n",
                    "message": "Function 'DayLimit._setDailyLimit' (DayLimitMock.sol#30-32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _setDailyLimit(uint256 _newLimit) internal {\n",
                    "message": "Parameter '_newLimit' of DayLimit._setDailyLimit (DayLimitMock.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 39,
                    "vulnerability_code": "  function _resetSpentToday() internal {\n\n    spentToday = 0;\n",
                    "message": "Function 'DayLimit._resetSpentToday' (DayLimitMock.sol#37-39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function underLimit(uint256 _value) internal returns (bool) {\n",
                    "message": "Parameter '_value' of DayLimit.underLimit (DayLimitMock.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function DayLimitMock(uint256 _value) public DayLimit(_value) {\n\n    totalSpending = 0;\n",
                    "message": "Function 'DayLimitMock.DayLimitMock' (DayLimitMock.sol#85-87) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function attemptSpend(uint256 _value) external limitedDaily(_value) {\n",
                    "message": "Parameter '_value' of DayLimitMock.attemptSpend (DayLimitMock.sol#89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setDailyLimit(uint256 _newLimit) external {\n",
                    "message": "Parameter '_newLimit' of DayLimitMock.setDailyLimit (DayLimitMock.sol#93) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC827/ERC827Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_53"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ (ERC827Token.sol#117) is never initialized. It is used in:\n\t- totalSupply (ERC827Token.sol#122-124)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ should be constant (ERC827Token.sol#117)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in ERC827Token.sol:\n\t- Version used: ['^0.4.13', '^0.4.18']\n\t- ERC827Token.sol#3 declares pragma solidity^0.4.18\n\t- ERC827Token.sol#20 declares pragma solidity^0.4.18\n\t- ERC827Token.sol#35 declares pragma solidity^0.4.13\n\t- ERC827Token.sol#54 declares pragma solidity^0.4.18\n\t- ERC827Token.sol#105 declares pragma solidity^0.4.18\n\t- ERC827Token.sol#155 declares pragma solidity^0.4.18\n\t- ERC827Token.sol#255 declares pragma solidity^0.4.13\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (ERC827Token.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": 124,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (ERC827Token.sol#122-124) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (ERC827Token.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": 149,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (ERC827Token.sol#147-149) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (ERC827Token.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (ERC827Token.sol#210-212) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": "ERC827.approve (ERC827Token.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.approve(_spender, _value);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "ERC827Token.approve (ERC827Token.sol#285-293) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": "ERC827.transfer (ERC827Token.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_to != address(this));\n\n\n\n    super.transfer(_to, _value);\n\n\n\n    require(_to.call(_data));\n\n    return true;\n",
                    "message": "ERC827Token.transfer (ERC827Token.sol#305-312) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": "ERC827.transferFrom (ERC827Token.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_to != address(this));\n\n\n\n    super.transferFrom(_from, _to, _value);\n\n\n\n    require(_to.call(_data));\n\n    return true;\n",
                    "message": "ERC827Token.transferFrom (ERC827Token.sol#325-332) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 354,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.increaseApproval(_spender, _addedValue);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "ERC827Token.increaseApproval (ERC827Token.sol#346-354) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": 376,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.decreaseApproval(_spender, _subtractedValue);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "ERC827Token.decreaseApproval (ERC827Token.sol#368-376) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ERC827Token.sol:\n\t- pragma solidity^0.4.18 (ERC827Token.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ERC827Token.sol#20): it allows old versions\n\t- pragma solidity^0.4.13 (ERC827Token.sol#35): it allows old versions\n\t- pragma solidity^0.4.18 (ERC827Token.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (ERC827Token.sol#105): it allows old versions\n\t- pragma solidity^0.4.18 (ERC827Token.sol#155): it allows old versions\n\t- pragma solidity^0.4.13 (ERC827Token.sol#255): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.approve(_spender, _value);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "Low level call in ERC827Token.approve (ERC827Token.sol#285-293):\n\t-require(bool)(_spender.call(_data)) ERC827Token.sol#290\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_to != address(this));\n\n\n\n    super.transfer(_to, _value);\n\n\n\n    require(_to.call(_data));\n\n    return true;\n",
                    "message": "Low level call in ERC827Token.transfer (ERC827Token.sol#305-312):\n\t-require(bool)(_to.call(_data)) ERC827Token.sol#310\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n\n    require(_to != address(this));\n\n\n\n    super.transferFrom(_from, _to, _value);\n\n\n\n    require(_to.call(_data));\n\n    return true;\n",
                    "message": "Low level call in ERC827Token.transferFrom (ERC827Token.sol#325-332):\n\t-require(bool)(_to.call(_data)) ERC827Token.sol#330\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 354,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.increaseApproval(_spender, _addedValue);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "Low level call in ERC827Token.increaseApproval (ERC827Token.sol#346-354):\n\t-require(bool)(_spender.call(_data)) ERC827Token.sol#351\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": 376,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n\n    require(_spender != address(this));\n\n\n\n    super.decreaseApproval(_spender, _subtractedValue);\n\n\n\n    require(_spender.call(_data));\n\n\n\n    return true;\n",
                    "message": "Low level call in ERC827Token.decreaseApproval (ERC827Token.sol#368-376):\n\t-require(bool)(_spender.call(_data)) ERC827Token.sol#373\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (ERC827Token.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (ERC827Token.sol#131) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (ERC827Token.sol#131) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (ERC827Token.sol#210) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (ERC827Token.sol#210) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (ERC827Token.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (ERC827Token.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (ERC827Token.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (ERC827Token.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (ERC827Token.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (ERC827Token.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (ERC827Token.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (ERC827Token.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (ERC827Token.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC827Token.approve (ERC827Token.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC827Token.approve (ERC827Token.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_data' of ERC827Token.approve (ERC827Token.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC827Token.transfer (ERC827Token.sol#305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC827Token.transfer (ERC827Token.sol#305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_data' of ERC827Token.transfer (ERC827Token.sol#305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_from' of ERC827Token.transferFrom (ERC827Token.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC827Token.transferFrom (ERC827Token.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC827Token.transferFrom (ERC827Token.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_data' of ERC827Token.transferFrom (ERC827Token.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC827Token.increaseApproval (ERC827Token.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of ERC827Token.increaseApproval (ERC827Token.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_data' of ERC827Token.increaseApproval (ERC827Token.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC827Token.decreaseApproval (ERC827Token.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of ERC827Token.decreaseApproval (ERC827Token.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n",
                    "message": "Parameter '_data' of ERC827Token.decreaseApproval (ERC827Token.sol#368) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC827/ERC827.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_11"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in ERC827.sol:\n\t- Version used: ['^0.4.13', '^0.4.18']\n\t- ERC827.sol#3 declares pragma solidity^0.4.18\n\t- ERC827.sol#20 declares pragma solidity^0.4.18\n\t- ERC827.sol#35 declares pragma solidity^0.4.13\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (ERC827.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (ERC827.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (ERC827.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (ERC827.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (ERC827.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (ERC827.sol#29) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": "ERC827.approve (ERC827.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": "ERC827.transfer (ERC827.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": "ERC827.transferFrom (ERC827.sol#48) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ERC827.sol:\n\t- pragma solidity^0.4.18 (ERC827.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ERC827.sol#20): it allows old versions\n\t- pragma solidity^0.4.13 (ERC827.sol#35): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/StandardToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_31"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ (StandardToken.sol#83) is never initialized. It is used in:\n\t- totalSupply (StandardToken.sol#88-90)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ should be constant (StandardToken.sol#83)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (StandardToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (StandardToken.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (StandardToken.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (StandardToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (StandardToken.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (StandardToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (StandardToken.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (StandardToken.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (StandardToken.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (StandardToken.sol#157-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (StandardToken.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (StandardToken.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (StandardToken.sol#205-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (StandardToken.sol#221-230) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in StandardToken.sol:\n\t- pragma solidity^0.4.18 (StandardToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (StandardToken.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (StandardToken.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (StandardToken.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (StandardToken.sol#136): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (StandardToken.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (StandardToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (StandardToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (StandardToken.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (StandardToken.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (StandardToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (StandardToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (StandardToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (StandardToken.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (StandardToken.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (StandardToken.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (StandardToken.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (StandardToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (StandardToken.sol#221) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/TokenTimelock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (TokenTimelock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (TokenTimelock.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (TokenTimelock.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (TokenTimelock.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (TokenTimelock.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (TokenTimelock.sol#29) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "  function release() public {\n\n    require(now >= releaseTime);\n\n\n\n    uint256 amount = token.balanceOf(this);\n\n    require(amount > 0);\n\n\n\n    token.safeTransfer(beneficiary, amount);\n",
                    "message": "TokenTimelock.release (TokenTimelock.sol#89-96) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TokenTimelock.sol:\n\t- pragma solidity^0.4.18 (TokenTimelock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenTimelock.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (TokenTimelock.sol#35): it allows old versions\n\t- pragma solidity^0.4.18 (TokenTimelock.sol#60): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n\n    require(_releaseTime > now);\n\n    token = _token;\n\n    beneficiary = _beneficiary;\n\n    releaseTime = _releaseTime;\n",
                    "message": "Function 'TokenTimelock.TokenTimelock' (TokenTimelock.sol#79-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n",
                    "message": "Parameter '_token' of TokenTimelock.TokenTimelock (TokenTimelock.sol#79) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n",
                    "message": "Parameter '_beneficiary' of TokenTimelock.TokenTimelock (TokenTimelock.sol#79) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n",
                    "message": "Parameter '_releaseTime' of TokenTimelock.TokenTimelock (TokenTimelock.sol#79) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/ERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (ERC20.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (ERC20.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (ERC20.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (ERC20.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (ERC20.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (ERC20.sol#29) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ERC20.sol:\n\t- pragma solidity^0.4.18 (ERC20.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ERC20.sol#20): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/SafeERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (SafeERC20.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (SafeERC20.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (SafeERC20.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (SafeERC20.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (SafeERC20.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (SafeERC20.sol#29) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in SafeERC20.sol:\n\t- pragma solidity^0.4.18 (SafeERC20.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (SafeERC20.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (SafeERC20.sol#35): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/TokenVesting.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenVesting is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 220,
                    "vulnerability_code": "  function release(ERC20Basic token) public {\n\n    uint256 unreleased = releasableAmount(token);\n\n\n\n    require(unreleased > 0);\n\n\n\n    released[token] = released[token].add(unreleased);\n\n\n\n    token.safeTransfer(beneficiary, unreleased);\n\n\n\n    Released(unreleased);\n",
                    "message": "Reentrancy in TokenVesting.release (TokenVesting.sol#210-220):\n\tExternal calls:\n\t- unreleased = releasableAmount(token) (TokenVesting.sol#211)\n\tState variables written after the call(s):\n\t- released (TokenVesting.sol#215)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": 241,
                    "vulnerability_code": "  function revoke(ERC20Basic token) public onlyOwner {\n\n    require(revocable);\n\n    require(!revoked[token]);\n\n\n\n    uint256 balance = token.balanceOf(this);\n\n\n\n    uint256 unreleased = releasableAmount(token);\n\n    uint256 refund = balance.sub(unreleased);\n\n\n\n    revoked[token] = true;\n\n\n\n    token.safeTransfer(owner, refund);\n\n\n\n    Revoked();\n",
                    "message": "Reentrancy in TokenVesting.revoke (TokenVesting.sol#227-241):\n\tExternal calls:\n\t- balance = token.balanceOf(this) (TokenVesting.sol#231)\n\t- unreleased = releasableAmount(token) (TokenVesting.sol#233)\n\tState variables written after the call(s):\n\t- revoked (TokenVesting.sol#236)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (TokenVesting.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (TokenVesting.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (TokenVesting.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (TokenVesting.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (TokenVesting.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (TokenVesting.sol#29) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (TokenVesting.sol#95-99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 220,
                    "vulnerability_code": "  function release(ERC20Basic token) public {\n\n    uint256 unreleased = releasableAmount(token);\n\n\n\n    require(unreleased > 0);\n\n\n\n    released[token] = released[token].add(unreleased);\n\n\n\n    token.safeTransfer(beneficiary, unreleased);\n\n\n\n    Released(unreleased);\n",
                    "message": "TokenVesting.release (TokenVesting.sol#210-220) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": 241,
                    "vulnerability_code": "  function revoke(ERC20Basic token) public onlyOwner {\n\n    require(revocable);\n\n    require(!revoked[token]);\n\n\n\n    uint256 balance = token.balanceOf(this);\n\n\n\n    uint256 unreleased = releasableAmount(token);\n\n    uint256 refund = balance.sub(unreleased);\n\n\n\n    revoked[token] = true;\n\n\n\n    token.safeTransfer(owner, refund);\n\n\n\n    Revoked();\n",
                    "message": "TokenVesting.revoke (TokenVesting.sol#227-241) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TokenVesting.sol:\n\t- pragma solidity^0.4.18 (TokenVesting.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenVesting.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (TokenVesting.sol#35): it allows old versions\n\t- pragma solidity^0.4.18 (TokenVesting.sol#60): it allows old versions\n\t- pragma solidity^0.4.18 (TokenVesting.sol#105): it allows old versions\n\t- pragma solidity^0.4.18 (TokenVesting.sol#156): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (TokenVesting.sol#79-81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": 204,
                    "vulnerability_code": "  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n\n    require(_beneficiary != address(0));\n\n    require(_cliff <= _duration);\n\n\n\n    beneficiary = _beneficiary;\n\n    revocable = _revocable;\n\n    duration = _duration;\n\n    cliff = _start.add(_cliff);\n\n    start = _start;\n",
                    "message": "Function 'TokenVesting.TokenVesting' (TokenVesting.sol#195-204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n",
                    "message": "Parameter '_beneficiary' of TokenVesting.TokenVesting (TokenVesting.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n",
                    "message": "Parameter '_start' of TokenVesting.TokenVesting (TokenVesting.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n",
                    "message": "Parameter '_cliff' of TokenVesting.TokenVesting (TokenVesting.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n",
                    "message": "Parameter '_duration' of TokenVesting.TokenVesting (TokenVesting.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n",
                    "message": "Parameter '_revocable' of TokenVesting.TokenVesting (TokenVesting.sol#195) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/PausableToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_38"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ (PausableToken.sol#83) is never initialized. It is used in:\n\t- totalSupply (PausableToken.sol#88-90)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ should be constant (PausableToken.sol#83)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (PausableToken.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (PausableToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (PausableToken.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (PausableToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (PausableToken.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (PausableToken.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (PausableToken.sol#271-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": 316,
                    "vulnerability_code": "  function pause() onlyOwner whenNotPaused public {\n\n    paused = true;\n\n    Pause();\n",
                    "message": "Pausable.pause (PausableToken.sol#313-316) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function unpause() onlyOwner whenPaused public {\n\n    paused = false;\n\n    Unpause();\n",
                    "message": "Pausable.unpause (PausableToken.sol#321-324) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in PausableToken.sol:\n\t- pragma solidity^0.4.18 (PausableToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (PausableToken.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (PausableToken.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (PausableToken.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (PausableToken.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (PausableToken.sol#236): it allows old versions\n\t- pragma solidity^0.4.18 (PausableToken.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (PausableToken.sol#329): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (PausableToken.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (PausableToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (PausableToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (PausableToken.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (PausableToken.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (PausableToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (PausableToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (PausableToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (PausableToken.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (PausableToken.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (PausableToken.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (PausableToken.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (PausableToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (PausableToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (PausableToken.sol#255-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_to' of PausableToken.transfer (PausableToken.sol#338) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_value' of PausableToken.transfer (PausableToken.sol#338) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_from' of PausableToken.transferFrom (PausableToken.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_to' of PausableToken.transferFrom (PausableToken.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_value' of PausableToken.transferFrom (PausableToken.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_spender' of PausableToken.approve (PausableToken.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": "Parameter '_value' of PausableToken.approve (PausableToken.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n",
                    "message": "Parameter '_spender' of PausableToken.increaseApproval (PausableToken.sol#350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n",
                    "message": "Parameter '_addedValue' of PausableToken.increaseApproval (PausableToken.sol#350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n",
                    "message": "Parameter '_spender' of PausableToken.decreaseApproval (PausableToken.sol#354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n",
                    "message": "Parameter '_subtractedValue' of PausableToken.decreaseApproval (PausableToken.sol#354) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/ERC20Basic.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (ERC20Basic.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (ERC20Basic.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (ERC20Basic.sol#14) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ERC20Basic.sol:\n\t- pragma solidity^0.4.18 (ERC20Basic.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/BurnableToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (BurnableToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (BurnableToken.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (BurnableToken.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (BurnableToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (BurnableToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (BurnableToken.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "  function burn(uint256 _value) public {\n\n    require(_value <= balances[msg.sender]);\n\n    // no need to require value <= totalSupply, since that would imply the\n\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n    address burner = msg.sender;\n\n    balances[burner] = balances[burner].sub(_value);\n\n    totalSupply_ = totalSupply_.sub(_value);\n\n    Burn(burner, _value);\n",
                    "message": "BurnableToken.burn (BurnableToken.sol#135-144) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BurnableToken.sol:\n\t- pragma solidity^0.4.18 (BurnableToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (BurnableToken.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (BurnableToken.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (BurnableToken.sol#121): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (BurnableToken.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (BurnableToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (BurnableToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burn(uint256 _value) public {\n",
                    "message": "Parameter '_value' of BurnableToken.burn (BurnableToken.sol#135) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/BasicToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ (BasicToken.sol#83) is never initialized. It is used in:\n\t- totalSupply (BasicToken.sol#88-90)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": "BasicToken.totalSupply_ should be constant (BasicToken.sol#83)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (BasicToken.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (BasicToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (BasicToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (BasicToken.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (BasicToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (BasicToken.sol#97-106) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in BasicToken.sol:\n\t- pragma solidity^0.4.18 (BasicToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (BasicToken.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (BasicToken.sol#71): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (BasicToken.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (BasicToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (BasicToken.sol#97) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/MintableToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_35"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (MintableToken.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (MintableToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (MintableToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (MintableToken.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (MintableToken.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (MintableToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (MintableToken.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (MintableToken.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (MintableToken.sol#157-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (MintableToken.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (MintableToken.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (MintableToken.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (MintableToken.sol#205-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (MintableToken.sol#221-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (MintableToken.sol#271-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n\n    Transfer(address(0), _to, _amount);\n\n    return true;\n",
                    "message": "MintableToken.mint (MintableToken.sol#308-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
                    "message": "MintableToken.finishMinting (MintableToken.sol#320-324) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in MintableToken.sol:\n\t- pragma solidity^0.4.18 (MintableToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (MintableToken.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (MintableToken.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (MintableToken.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (MintableToken.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (MintableToken.sol#236): it allows old versions\n\t- pragma solidity^0.4.18 (MintableToken.sol#281): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (MintableToken.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (MintableToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (MintableToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (MintableToken.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (MintableToken.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (MintableToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (MintableToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (MintableToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (MintableToken.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (MintableToken.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (MintableToken.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (MintableToken.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (MintableToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (MintableToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (MintableToken.sol#255-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (MintableToken.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (MintableToken.sol#308) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/CappedToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_39"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in CappedToken.sol:\n\t- Version used: ['^0.4.11', '^0.4.18']\n\t- CappedToken.sol#3 declares pragma solidity^0.4.18\n\t- CappedToken.sol#20 declares pragma solidity^0.4.18\n\t- CappedToken.sol#71 declares pragma solidity^0.4.18\n\t- CappedToken.sol#121 declares pragma solidity^0.4.18\n\t- CappedToken.sol#136 declares pragma solidity^0.4.18\n\t- CappedToken.sol#236 declares pragma solidity^0.4.18\n\t- CappedToken.sol#281 declares pragma solidity^0.4.18\n\t- CappedToken.sol#329 declares pragma solidity^0.4.11\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (CappedToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (CappedToken.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (CappedToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (CappedToken.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (CappedToken.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (CappedToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (CappedToken.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (CappedToken.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (CappedToken.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (CappedToken.sol#157-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (CappedToken.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (CappedToken.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (CappedToken.sol#205-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (CappedToken.sol#221-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (CappedToken.sol#271-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
                    "message": "MintableToken.finishMinting (CappedToken.sol#320-324) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CappedToken.sol:\n\t- pragma solidity^0.4.18 (CappedToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CappedToken.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (CappedToken.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (CappedToken.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (CappedToken.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (CappedToken.sol#236): it allows old versions\n\t- pragma solidity^0.4.18 (CappedToken.sol#281): it allows old versions\n\t- pragma solidity^0.4.11 (CappedToken.sol#329): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (CappedToken.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (CappedToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (CappedToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (CappedToken.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (CappedToken.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (CappedToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (CappedToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (CappedToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (CappedToken.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (CappedToken.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (CappedToken.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (CappedToken.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (CappedToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (CappedToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (CappedToken.sol#255-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (CappedToken.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (CappedToken.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of CappedToken.mint (CappedToken.sol#350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of CappedToken.mint (CappedToken.sol#350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": 342,
                    "vulnerability_code": "  function CappedToken(uint256 _cap) public {\n\n    require(_cap > 0);\n\n    cap = _cap;\n",
                    "message": "Function 'CappedToken.CappedToken' (CappedToken.sol#339-342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CappedToken(uint256 _cap) public {\n",
                    "message": "Parameter '_cap' of CappedToken.CappedToken (CappedToken.sol#339) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC20/DetailedERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_11"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (DetailedERC20.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (DetailedERC20.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (DetailedERC20.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (DetailedERC20.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (DetailedERC20.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (DetailedERC20.sol#29) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in DetailedERC20.sol:\n\t- pragma solidity^0.4.18 (DetailedERC20.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (DetailedERC20.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (DetailedERC20.sol#35): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n\n    name = _name;\n\n    symbol = _symbol;\n\n    decimals = _decimals;\n",
                    "message": "Function 'DetailedERC20.DetailedERC20' (DetailedERC20.sol#42-46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n",
                    "message": "Parameter '_name' of DetailedERC20.DetailedERC20 (DetailedERC20.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n",
                    "message": "Parameter '_symbol' of DetailedERC20.DetailedERC20 (DetailedERC20.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n",
                    "message": "Parameter '_decimals' of DetailedERC20.DetailedERC20 (DetailedERC20.sol#42) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC721/ERC721Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ownedTokens[_from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_36"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 18,
                    "vulnerability_code": "contract ERC721 {\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n  function transfer(address _to, uint256 _tokenId) public;\n\n  function approve(address _to, uint256 _tokenId) public;\n\n  function takeOwnership(uint256 _tokenId) public;\n",
                    "message": "ERC721 (ERC721Token.sol#9-18) has incorrect ERC20 function interface(s):\n\t-transfer (ERC721Token.sol#15)\n\t-approve (ERC721Token.sol#16)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 284,
                    "vulnerability_code": "contract ERC721Token is ERC721 {\n\n  using SafeMath for uint256;\n\n\n\n  // Total amount of tokens\n\n  uint256 private totalTokens;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private tokenApprovals;\n\n\n\n  // Mapping from owner to list of owned token IDs\n\n  mapping (address => uint256[]) private ownedTokens;\n\n\n\n  // Mapping from token ID to index of the owner tokens list\n\n  mapping(uint256 => uint256) private ownedTokensIndex;\n\n\n\n  /**\n\n  * @dev Guarantees msg.sender is owner of the given token\n\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n\n  */\n\n  modifier onlyOwnerOf(uint256 _tokenId) {\n\n    require(ownerOf(_tokenId) == msg.sender);\n\n    _;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the total amount of tokens stored by the contract\n\n  * @return uint256 representing the total amount of tokens\n\n  */\n\n  function totalSupply() public view returns (uint256) {\n\n    return totalTokens;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the balance of the specified address\n\n  * @param _owner address to query the balance of\n\n  * @return uint256 representing the amount owned by the passed address\n\n  */\n\n  function balanceOf(address _owner) public view returns (uint256) {\n\n    return ownedTokens[_owner].length;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the list of tokens owned by a given address\n\n  * @param _owner address to query the tokens of\n\n  * @return uint256[] representing the list of tokens owned by the passed address\n\n  */\n\n  function tokensOf(address _owner) public view returns (uint256[]) {\n\n    return ownedTokens[_owner];\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the owner of the specified token ID\n\n  * @param _tokenId uint256 ID of the token to query the owner of\n\n  * @return owner address currently marked as the owner of the given token ID\n\n  */\n\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n\n    address owner = tokenOwner[_tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address to take ownership of a given token ID\n\n   * @param _tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved to take ownership of the given token ID\n\n   */\n\n  function approvedFor(uint256 _tokenId) public view returns (address) {\n\n    return tokenApprovals[_tokenId];\n\n  }\n\n\n\n  /**\n\n  * @dev Transfers the ownership of a given token ID to another address\n\n  * @param _to address to receive the ownership of the given token ID\n\n  * @param _tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Approves another address to claim for the ownership of the given token ID\n\n  * @param _to address to be approved for the given token ID\n\n  * @param _tokenId uint256 ID of the token to be approved\n\n  */\n\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    address owner = ownerOf(_tokenId);\n\n    require(_to != owner);\n\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n\n      tokenApprovals[_tokenId] = _to;\n\n      Approval(owner, _to, _tokenId);\n\n    }\n\n  }\n\n\n\n  /**\n\n  * @dev Claims the ownership of a given token ID\n\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n\n  */\n\n  function takeOwnership(uint256 _tokenId) public {\n\n    require(isApprovedFor(msg.sender, _tokenId));\n\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Mint token function\n\n  * @param _to The address that will own the minted token\n\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n\n  */\n\n  function _mint(address _to, uint256 _tokenId) internal {\n\n    require(_to != address(0));\n\n    addToken(_to, _tokenId);\n\n    Transfer(0x0, _to, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Burns a specific token\n\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n\n  */\n\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n\n    if (approvedFor(_tokenId) != 0) {\n\n      clearApproval(msg.sender, _tokenId);\n\n    }\n\n    removeToken(msg.sender, _tokenId);\n\n    Transfer(msg.sender, 0x0, _tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\n\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\n\n   * @param _owner address of the owner to query the approval of\n\n   * @param _tokenId uint256 ID of the token to query the approval of\n\n   * @return bool whether the msg.sender is approved for the given token ID or not\n\n   */\n\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n\n    return approvedFor(_tokenId) == _owner;\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n\n  * @param _from address which you want to send tokens from\n\n  * @param _to address which you want to transfer the token to\n\n  * @param _tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n\n    require(_to != address(0));\n\n    require(_to != ownerOf(_tokenId));\n\n    require(ownerOf(_tokenId) == _from);\n\n\n\n    clearApproval(_from, _tokenId);\n\n    removeToken(_from, _tokenId);\n\n    addToken(_to, _tokenId);\n\n    Transfer(_from, _to, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to clear current approval of a given token ID\n\n  * @param _tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function clearApproval(address _owner, uint256 _tokenId) private {\n\n    require(ownerOf(_tokenId) == _owner);\n\n    tokenApprovals[_tokenId] = 0;\n\n    Approval(_owner, 0, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to add a token ID to the list of a given address\n\n  * @param _to address representing the new owner of the given token ID\n\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n  */\n\n  function addToken(address _to, uint256 _tokenId) private {\n\n    require(tokenOwner[_tokenId] == address(0));\n\n    tokenOwner[_tokenId] = _to;\n\n    uint256 length = balanceOf(_to);\n\n    ownedTokens[_to].push(_tokenId);\n\n    ownedTokensIndex[_tokenId] = length;\n\n    totalTokens = totalTokens.add(1);\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to remove a token ID from the list of a given address\n\n  * @param _from address representing the previous owner of the given token ID\n\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n  */\n\n  function removeToken(address _from, uint256 _tokenId) private {\n\n    require(ownerOf(_tokenId) == _from);\n\n\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n\n\n    tokenOwner[_tokenId] = 0;\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n\n    ownedTokens[_from][lastTokenIndex] = 0;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\n\n    ownedTokens[_from].length--;\n\n    ownedTokensIndex[_tokenId] = 0;\n\n    ownedTokensIndex[lastToken] = tokenIndex;\n\n    totalTokens = totalTokens.sub(1);\n\n  }\n",
                    "message": "ERC721Token (ERC721Token.sol#80-284) has incorrect ERC20 function interface(s):\n\t-transfer (ERC721Token.sol#158-160)\n\t-approve (ERC721Token.sol#167-174)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n",
                    "message": "ERC721Token.transfer (ERC721Token.sol#158-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public;\n",
                    "message": "ERC721.transfer (ERC721Token.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public;\n",
                    "message": "ERC721.approve (ERC721Token.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    address owner = ownerOf(_tokenId);\n\n    require(_to != owner);\n\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n\n      tokenApprovals[_tokenId] = _to;\n\n      Approval(owner, _to, _tokenId);\n\n    }\n",
                    "message": "ERC721Token.approve (ERC721Token.sol#167-174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public {\n\n    require(isApprovedFor(msg.sender, _tokenId));\n\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n",
                    "message": "ERC721Token.takeOwnership (ERC721Token.sol#180-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public;\n",
                    "message": "ERC721.takeOwnership (ERC721Token.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 113,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalTokens;\n",
                    "message": "ERC721Token.totalSupply (ERC721Token.sol#111-113) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 131,
                    "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n\n    return ownedTokens[_owner];\n",
                    "message": "ERC721Token.tokensOf (ERC721Token.sol#129-131) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ERC721Token.sol:\n\t- pragma solidity^0.4.18 (ERC721Token.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ERC721Token.sol#22): it allows old versions\n\t- pragma solidity^0.4.18 (ERC721Token.sol#73): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC721Token.balanceOf (ERC721Token.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ownerOf(uint256 _tokenId) public view returns (address) {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.ownerOf (ERC721Token.sol#138) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
                    "message": "Parameter '_to' of ERC721Token.transfer (ERC721Token.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.transfer (ERC721Token.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
                    "message": "Parameter '_to' of ERC721Token.approve (ERC721Token.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.approve (ERC721Token.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.takeOwnership (ERC721Token.sol#180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n",
                    "message": "Parameter '_owner' of ERC721Token.tokensOf (ERC721Token.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approvedFor(uint256 _tokenId) public view returns (address) {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.approvedFor (ERC721Token.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 194,
                    "vulnerability_code": "  function _mint(address _to, uint256 _tokenId) internal {\n\n    require(_to != address(0));\n\n    addToken(_to, _tokenId);\n\n    Transfer(0x0, _to, _tokenId);\n",
                    "message": "Function 'ERC721Token._mint' (ERC721Token.sol#190-194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _mint(address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_to' of ERC721Token._mint (ERC721Token.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _mint(address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_tokenId' of ERC721Token._mint (ERC721Token.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n\n    if (approvedFor(_tokenId) != 0) {\n\n      clearApproval(msg.sender, _tokenId);\n\n    }\n\n    removeToken(msg.sender, _tokenId);\n\n    Transfer(msg.sender, 0x0, _tokenId);\n",
                    "message": "Function 'ERC721Token._burn' (ERC721Token.sol#200-206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n",
                    "message": "Parameter '_tokenId' of ERC721Token._burn (ERC721Token.sol#200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n",
                    "message": "Parameter '_owner' of ERC721Token.isApprovedFor (ERC721Token.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.isApprovedFor (ERC721Token.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_from' of ERC721Token.clearApprovalAndTransfer (ERC721Token.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_to' of ERC721Token.clearApprovalAndTransfer (ERC721Token.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.clearApprovalAndTransfer (ERC721Token.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function clearApproval(address _owner, uint256 _tokenId) private {\n",
                    "message": "Parameter '_owner' of ERC721Token.clearApproval (ERC721Token.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function clearApproval(address _owner, uint256 _tokenId) private {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.clearApproval (ERC721Token.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addToken(address _to, uint256 _tokenId) private {\n",
                    "message": "Parameter '_to' of ERC721Token.addToken (ERC721Token.sol#251) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addToken(address _to, uint256 _tokenId) private {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.addToken (ERC721Token.sol#251) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeToken(address _from, uint256 _tokenId) private {\n",
                    "message": "Parameter '_from' of ERC721Token.removeToken (ERC721Token.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeToken(address _from, uint256 _tokenId) private {\n",
                    "message": "Parameter '_tokenId' of ERC721Token.removeToken (ERC721Token.sol#265) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ownedTokens[_from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private totalTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256[]) private ownedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => uint256) private ownedTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/token/ERC721/ERC721.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 18,
                    "vulnerability_code": "contract ERC721 {\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n  function transfer(address _to, uint256 _tokenId) public;\n\n  function approve(address _to, uint256 _tokenId) public;\n\n  function takeOwnership(uint256 _tokenId) public;\n",
                    "message": "ERC721 (ERC721.sol#9-18) has incorrect ERC20 function interface(s):\n\t-transfer (ERC721.sol#15)\n\t-approve (ERC721.sol#16)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 _balance);\n",
                    "message": "ERC721.balanceOf (ERC721.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n",
                    "message": "ERC721.ownerOf (ERC721.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public;\n",
                    "message": "ERC721.transfer (ERC721.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public;\n",
                    "message": "ERC721.approve (ERC721.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public;\n",
                    "message": "ERC721.takeOwnership (ERC721.sol#17) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in ERC721.sol:\n\t- pragma solidity^0.4.18 (ERC721.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/payment/PullPayment.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function withdrawPayments() public {\n\n    address payee = msg.sender;\n\n    uint256 payment = payments[payee];\n\n\n\n    require(payment != 0);\n\n    require(this.balance >= payment);\n\n\n\n    totalPayments = totalPayments.sub(payment);\n\n    payments[payee] = 0;\n\n\n\n    assert(payee.send(payment));\n",
                    "message": "PullPayment.withdrawPayments (PullPayment.sol#70-81) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in PullPayment.sol:\n\t- pragma solidity^0.4.18 (PullPayment.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (PullPayment.sol#54): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SEND",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(payee.send(payment));\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/payment/SplitPayment.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _payees.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public totalShares = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public totalReleased = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _payees.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _payees.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable {}\n",
                    "message": "SplitPayment.fallback (SplitPayment.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "  function claim() public {\n\n    address payee = msg.sender;\n\n\n\n    require(shares[payee] > 0);\n\n\n\n    uint256 totalReceived = this.balance.add(totalReleased);\n\n    uint256 payment = totalReceived.mul(shares[payee]).div(totalShares).sub(released[payee]);\n\n\n\n    require(payment != 0);\n\n    require(this.balance >= payment);\n\n\n\n    released[payee] = released[payee].add(payment);\n\n    totalReleased = totalReleased.add(payment);\n\n\n\n    payee.transfer(payment);\n",
                    "message": "SplitPayment.claim (SplitPayment.sol#90-105) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in SplitPayment.sol:\n\t- pragma solidity^0.4.18 (SplitPayment.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (SplitPayment.sol#54): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": 80,
                    "vulnerability_code": "  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n\n    require(_payees.length == _shares.length);\n\n\n\n    for (uint256 i = 0; i < _payees.length; i++) {\n\n      addPayee(_payees[i], _shares[i]);\n\n    }\n",
                    "message": "Function 'SplitPayment.SplitPayment' (SplitPayment.sol#74-80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n",
                    "message": "Parameter '_payees' of SplitPayment.SplitPayment (SplitPayment.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n",
                    "message": "Parameter '_shares' of SplitPayment.SplitPayment (SplitPayment.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addPayee(address _payee, uint256 _shares) internal {\n",
                    "message": "Parameter '_payee' of SplitPayment.addPayee (SplitPayment.sol#112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addPayee(address _payee, uint256 _shares) internal {\n",
                    "message": "Parameter '_shares' of SplitPayment.addPayee (SplitPayment.sol#112) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _payees.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _payees.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/lifecycle/Pausable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Pausable.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "  function pause() onlyOwner whenNotPaused public {\n\n    paused = true;\n\n    Pause();\n",
                    "message": "Pausable.pause (Pausable.sol#80-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "  function unpause() onlyOwner whenPaused public {\n\n    paused = false;\n\n    Unpause();\n",
                    "message": "Pausable.unpause (Pausable.sol#88-91) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Pausable.sol:\n\t- pragma solidity^0.4.18 (Pausable.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (Pausable.sol#48): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Pausable.sol#22-24) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/lifecycle/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Migrations is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Migrations.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function setCompleted(uint256 completed) onlyOwner public {\n\n    lastCompletedMigration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#57-59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "  function upgrade(address newAddress) onlyOwner public {\n\n    Migrations upgraded = Migrations(newAddress);\n\n    upgraded.setCompleted(lastCompletedMigration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#61-64) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.18 (Migrations.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (Migrations.sol#48): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Migrations.sol#22-24) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCompleted(uint256 completed) onlyOwner public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/lifecycle/Destructible.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Destructible is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Destructible.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 63,
                    "vulnerability_code": "  function destroy() onlyOwner public {\n\n    selfdestruct(owner);\n",
                    "message": "Destructible.destroy (Destructible.sol#61-63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 67,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) onlyOwner public {\n\n    selfdestruct(_recipient);\n",
                    "message": "Destructible.destroyAndSend (Destructible.sol#65-67) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Destructible.sol:\n\t- pragma solidity^0.4.18 (Destructible.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (Destructible.sol#48): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Destructible.sol#22-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Destructible() public payable { }\n",
                    "message": "Function 'Destructible.Destructible' (Destructible.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function destroyAndSend(address _recipient) onlyOwner public {\n",
                    "message": "Parameter '_recipient' of Destructible.destroyAndSend (Destructible.sol#65) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/lifecycle/TokenDestructible.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenDestructible is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_11"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "  function destroy(address[] tokens) onlyOwner public {\n\n\n\n    // Transfer tokens to owner\n\n    for (uint256 i = 0; i < tokens.length; i++) {\n\n      ERC20Basic token = ERC20Basic(tokens[i]);\n\n      uint256 balance = token.balanceOf(this);\n\n      token.transfer(owner, balance);\n\n    }\n\n\n\n    // Transfer Eth to owner and terminate contract\n\n    selfdestruct(owner);\n\n  }\n",
                    "message": "TokenDestructible.destroy (TokenDestructible.sol#85-97) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (TokenDestructible.sol#91)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint256 balance = token.balanceOf(this);\n",
                    "message": "TokenDestructible.destroy has external calls inside a loop:\n\t- balance = token.balanceOf(this) (TokenDestructible.sol#90)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      token.transfer(owner, balance);\n",
                    "message": "TokenDestructible.destroy has external calls inside a loop:\n\t- token.transfer(owner,balance) (TokenDestructible.sol#91)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (TokenDestructible.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (TokenDestructible.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (TokenDestructible.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (TokenDestructible.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "  function destroy(address[] tokens) onlyOwner public {\n\n\n\n    // Transfer tokens to owner\n\n    for (uint256 i = 0; i < tokens.length; i++) {\n\n      ERC20Basic token = ERC20Basic(tokens[i]);\n\n      uint256 balance = token.balanceOf(this);\n\n      token.transfer(owner, balance);\n\n    }\n\n\n\n    // Transfer Eth to owner and terminate contract\n\n    selfdestruct(owner);\n\n  }\n",
                    "message": "TokenDestructible.destroy (TokenDestructible.sol#85-97) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in TokenDestructible.sol:\n\t- pragma solidity^0.4.18 (TokenDestructible.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenDestructible.sol#48): it allows old versions\n\t- pragma solidity^0.4.18 (TokenDestructible.sol#65): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (TokenDestructible.sol#22-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": 77,
                    "vulnerability_code": "  function TokenDestructible() public payable { }\n",
                    "message": "Function 'TokenDestructible.TokenDestructible' (TokenDestructible.sol#76-77) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function destroy(address[] tokens) onlyOwner public {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/crowdsale/RefundVault.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract RefundVault is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (RefundVault.sol#89-93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": 130,
                    "vulnerability_code": "  function deposit(address investor) onlyOwner public payable {\n\n    require(state == State.Active);\n\n    deposited[investor] = deposited[investor].add(msg.value);\n",
                    "message": "RefundVault.deposit (RefundVault.sol#127-130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": 137,
                    "vulnerability_code": "  function close() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Closed;\n\n    Closed();\n\n    wallet.transfer(this.balance);\n",
                    "message": "RefundVault.close (RefundVault.sol#132-137) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "  function enableRefunds() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Refunding;\n\n    RefundsEnabled();\n",
                    "message": "RefundVault.enableRefunds (RefundVault.sol#139-143) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "  function refund(address investor) public {\n\n    require(state == State.Refunding);\n\n    uint256 depositedValue = deposited[investor];\n\n    deposited[investor] = 0;\n\n    investor.transfer(depositedValue);\n\n    Refunded(investor, depositedValue);\n",
                    "message": "RefundVault.refund (RefundVault.sol#145-151) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in RefundVault.sol:\n\t- pragma solidity^0.4.18 (RefundVault.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (RefundVault.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (RefundVault.sol#99): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (RefundVault.sol#73-75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": 125,
                    "vulnerability_code": "  function RefundVault(address _wallet) public {\n\n    require(_wallet != address(0));\n\n    wallet = _wallet;\n\n    state = State.Active;\n",
                    "message": "Function 'RefundVault.RefundVault' (RefundVault.sol#121-125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function RefundVault(address _wallet) public {\n",
                    "message": "Parameter '_wallet' of RefundVault.RefundVault (RefundVault.sol#121) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/crowdsale/RefundableCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract FinalizableCrowdsale is Crowdsale, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract RefundVault is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public isFinalized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_51"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "  function buyTokens(address beneficiary) public payable {\n\n    require(beneficiary != address(0));\n\n    require(validPurchase());\n\n\n\n    uint256 weiAmount = msg.value;\n\n\n\n    // calculate token amount to be created\n\n    uint256 tokens = getTokenAmount(weiAmount);\n\n\n\n    // update state\n\n    weiRaised = weiRaised.add(weiAmount);\n\n\n\n    token.mint(beneficiary, tokens);\n\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n\n\n    forwardFunds();\n",
                    "message": "Crowdsale.buyTokens (RefundableCrowdsale.sol#388-404) does not use the value returned by external calls:\n\t-token.mint(beneficiary,tokens) (RefundableCrowdsale.sol#400)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (RefundableCrowdsale.sol#89-93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": 135,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (RefundableCrowdsale.sol#133-135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (RefundableCrowdsale.sol#108) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (RefundableCrowdsale.sol#109) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (RefundableCrowdsale.sol#158-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (RefundableCrowdsale.sol#110) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (RefundableCrowdsale.sol#142-151) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (RefundableCrowdsale.sol#173) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (RefundableCrowdsale.sol#236-238) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (RefundableCrowdsale.sol#202-212) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (RefundableCrowdsale.sol#174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (RefundableCrowdsale.sol#175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (RefundableCrowdsale.sol#224-228) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (RefundableCrowdsale.sol#250-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (RefundableCrowdsale.sol#266-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n\n    Transfer(address(0), _to, _amount);\n\n    return true;\n",
                    "message": "MintableToken.mint (RefundableCrowdsale.sol#308-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
                    "message": "MintableToken.finishMinting (RefundableCrowdsale.sol#320-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "  function finalize() onlyOwner public {\n\n    require(!isFinalized);\n\n    require(hasEnded());\n\n\n\n    finalization();\n\n    Finalized();\n\n\n\n    isFinalized = true;\n",
                    "message": "FinalizableCrowdsale.finalize (RefundableCrowdsale.sol#459-467) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function deposit(address investor) onlyOwner public payable {\n\n    require(state == State.Active);\n\n    deposited[investor] = deposited[investor].add(msg.value);\n",
                    "message": "RefundVault.deposit (RefundableCrowdsale.sol#508-511) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": 518,
                    "vulnerability_code": "  function close() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Closed;\n\n    Closed();\n\n    wallet.transfer(this.balance);\n",
                    "message": "RefundVault.close (RefundableCrowdsale.sol#513-518) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": 524,
                    "vulnerability_code": "  function enableRefunds() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Refunding;\n\n    RefundsEnabled();\n",
                    "message": "RefundVault.enableRefunds (RefundableCrowdsale.sol#520-524) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": 532,
                    "vulnerability_code": "  function refund(address investor) public {\n\n    require(state == State.Refunding);\n\n    uint256 depositedValue = deposited[investor];\n\n    deposited[investor] = 0;\n\n    investor.transfer(depositedValue);\n\n    Refunded(investor, depositedValue);\n",
                    "message": "RefundVault.refund (RefundableCrowdsale.sol#526-532) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 568,
                    "vulnerability_code": "  function claimRefund() public {\n\n    require(isFinalized);\n\n    require(!goalReached());\n\n\n\n    vault.refund(msg.sender);\n",
                    "message": "RefundableCrowdsale.claimRefund (RefundableCrowdsale.sol#563-568) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in RefundableCrowdsale.sol:\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#99): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#116): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#166): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#181): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#329): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#439): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#480): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsale.sol#537): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (RefundableCrowdsale.sol#73-75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (RefundableCrowdsale.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (RefundableCrowdsale.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (RefundableCrowdsale.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (RefundableCrowdsale.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (RefundableCrowdsale.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (RefundableCrowdsale.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (RefundableCrowdsale.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (RefundableCrowdsale.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (RefundableCrowdsale.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (RefundableCrowdsale.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (RefundableCrowdsale.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (RefundableCrowdsale.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (RefundableCrowdsale.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (RefundableCrowdsale.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (RefundableCrowdsale.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (RefundableCrowdsale.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n\n    require(_startTime >= now);\n\n    require(_endTime >= _startTime);\n\n    require(_rate > 0);\n\n    require(_wallet != address(0));\n\n\n\n    token = createTokenContract();\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    rate = _rate;\n\n    wallet = _wallet;\n",
                    "message": "Function 'Crowdsale.Crowdsale' (RefundableCrowdsale.sol#369-380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_startTime' of Crowdsale.Crowdsale (RefundableCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_endTime' of Crowdsale.Crowdsale (RefundableCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_rate' of Crowdsale.Crowdsale (RefundableCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_wallet' of Crowdsale.Crowdsale (RefundableCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": 506,
                    "vulnerability_code": "  function RefundVault(address _wallet) public {\n\n    require(_wallet != address(0));\n\n    wallet = _wallet;\n\n    state = State.Active;\n",
                    "message": "Function 'RefundVault.RefundVault' (RefundableCrowdsale.sol#502-506) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function RefundVault(address _wallet) public {\n",
                    "message": "Parameter '_wallet' of RefundVault.RefundVault (RefundableCrowdsale.sol#502) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 560,
                    "vulnerability_code": "  function RefundableCrowdsale(uint256 _goal) public {\n\n    require(_goal > 0);\n\n    vault = new RefundVault(wallet);\n\n    goal = _goal;\n",
                    "message": "Function 'RefundableCrowdsale.RefundableCrowdsale' (RefundableCrowdsale.sol#556-560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function RefundableCrowdsale(uint256 _goal) public {\n",
                    "message": "Parameter '_goal' of RefundableCrowdsale.RefundableCrowdsale (RefundableCrowdsale.sol#556) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/crowdsale/Crowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_42"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "  function buyTokens(address beneficiary) public payable {\n\n    require(beneficiary != address(0));\n\n    require(validPurchase());\n\n\n\n    uint256 weiAmount = msg.value;\n\n\n\n    // calculate token amount to be created\n\n    uint256 tokens = getTokenAmount(weiAmount);\n\n\n\n    // update state\n\n    weiRaised = weiRaised.add(weiAmount);\n\n\n\n    token.mint(beneficiary, tokens);\n\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n\n\n    forwardFunds();\n",
                    "message": "Crowdsale.buyTokens (Crowdsale.sol#388-404) does not use the value returned by external calls:\n\t-token.mint(beneficiary,tokens) (Crowdsale.sol#400)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (Crowdsale.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (Crowdsale.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (Crowdsale.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (Crowdsale.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (Crowdsale.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (Crowdsale.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (Crowdsale.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (Crowdsale.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (Crowdsale.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (Crowdsale.sol#157-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (Crowdsale.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (Crowdsale.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (Crowdsale.sol#205-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (Crowdsale.sol#221-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Crowdsale.sol#271-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n\n    Transfer(address(0), _to, _amount);\n\n    return true;\n",
                    "message": "MintableToken.mint (Crowdsale.sol#308-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
                    "message": "MintableToken.finishMinting (Crowdsale.sol#320-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "  function hasEnded() public view returns (bool) {\n\n    return now > endTime;\n",
                    "message": "Crowdsale.hasEnded (Crowdsale.sol#407-409) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Crowdsale.sol:\n\t- pragma solidity^0.4.18 (Crowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (Crowdsale.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (Crowdsale.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (Crowdsale.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (Crowdsale.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (Crowdsale.sol#236): it allows old versions\n\t- pragma solidity^0.4.18 (Crowdsale.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (Crowdsale.sol#329): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (Crowdsale.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (Crowdsale.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (Crowdsale.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (Crowdsale.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (Crowdsale.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (Crowdsale.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (Crowdsale.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (Crowdsale.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (Crowdsale.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (Crowdsale.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (Crowdsale.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (Crowdsale.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (Crowdsale.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (Crowdsale.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Crowdsale.sol#255-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (Crowdsale.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (Crowdsale.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n\n    require(_startTime >= now);\n\n    require(_endTime >= _startTime);\n\n    require(_rate > 0);\n\n    require(_wallet != address(0));\n\n\n\n    token = createTokenContract();\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    rate = _rate;\n\n    wallet = _wallet;\n",
                    "message": "Function 'Crowdsale.Crowdsale' (Crowdsale.sol#369-380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_startTime' of Crowdsale.Crowdsale (Crowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_endTime' of Crowdsale.Crowdsale (Crowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_rate' of Crowdsale.Crowdsale (Crowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_wallet' of Crowdsale.Crowdsale (Crowdsale.sol#369) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/crowdsale/FinalizableCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract FinalizableCrowdsale is Crowdsale, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public isFinalized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_42"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "  function buyTokens(address beneficiary) public payable {\n\n    require(beneficiary != address(0));\n\n    require(validPurchase());\n\n\n\n    uint256 weiAmount = msg.value;\n\n\n\n    // calculate token amount to be created\n\n    uint256 tokens = getTokenAmount(weiAmount);\n\n\n\n    // update state\n\n    weiRaised = weiRaised.add(weiAmount);\n\n\n\n    token.mint(beneficiary, tokens);\n\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n\n\n    forwardFunds();\n",
                    "message": "Crowdsale.buyTokens (FinalizableCrowdsale.sol#388-404) does not use the value returned by external calls:\n\t-token.mint(beneficiary,tokens) (FinalizableCrowdsale.sol#400)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (FinalizableCrowdsale.sol#89-93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": 135,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (FinalizableCrowdsale.sol#133-135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (FinalizableCrowdsale.sol#108) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (FinalizableCrowdsale.sol#109) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (FinalizableCrowdsale.sol#158-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (FinalizableCrowdsale.sol#142-151) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (FinalizableCrowdsale.sol#110) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (FinalizableCrowdsale.sol#173) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (FinalizableCrowdsale.sol#236-238) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (FinalizableCrowdsale.sol#202-212) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (FinalizableCrowdsale.sol#174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (FinalizableCrowdsale.sol#175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (FinalizableCrowdsale.sol#224-228) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (FinalizableCrowdsale.sol#250-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (FinalizableCrowdsale.sol#266-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n\n    Transfer(address(0), _to, _amount);\n\n    return true;\n",
                    "message": "MintableToken.mint (FinalizableCrowdsale.sol#308-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
                    "message": "MintableToken.finishMinting (FinalizableCrowdsale.sol#320-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "  function finalize() onlyOwner public {\n\n    require(!isFinalized);\n\n    require(hasEnded());\n\n\n\n    finalization();\n\n    Finalized();\n\n\n\n    isFinalized = true;\n",
                    "message": "FinalizableCrowdsale.finalize (FinalizableCrowdsale.sol#459-467) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in FinalizableCrowdsale.sol:\n\t- pragma solidity^0.4.18 (FinalizableCrowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsale.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsale.sol#99): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsale.sol#116): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsale.sol#166): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsale.sol#181): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsale.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsale.sol#329): it allows old versions\n\t- pragma solidity^0.4.18 (FinalizableCrowdsale.sol#439): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (FinalizableCrowdsale.sol#73-75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (FinalizableCrowdsale.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (FinalizableCrowdsale.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (FinalizableCrowdsale.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (FinalizableCrowdsale.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (FinalizableCrowdsale.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (FinalizableCrowdsale.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (FinalizableCrowdsale.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (FinalizableCrowdsale.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (FinalizableCrowdsale.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (FinalizableCrowdsale.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (FinalizableCrowdsale.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (FinalizableCrowdsale.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (FinalizableCrowdsale.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (FinalizableCrowdsale.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (FinalizableCrowdsale.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (FinalizableCrowdsale.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n\n    require(_startTime >= now);\n\n    require(_endTime >= _startTime);\n\n    require(_rate > 0);\n\n    require(_wallet != address(0));\n\n\n\n    token = createTokenContract();\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    rate = _rate;\n\n    wallet = _wallet;\n",
                    "message": "Function 'Crowdsale.Crowdsale' (FinalizableCrowdsale.sol#369-380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_startTime' of Crowdsale.Crowdsale (FinalizableCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_endTime' of Crowdsale.Crowdsale (FinalizableCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_rate' of Crowdsale.Crowdsale (FinalizableCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_wallet' of Crowdsale.Crowdsale (FinalizableCrowdsale.sol#369) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/crowdsale/CappedCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_43"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "  function buyTokens(address beneficiary) public payable {\n\n    require(beneficiary != address(0));\n\n    require(validPurchase());\n\n\n\n    uint256 weiAmount = msg.value;\n\n\n\n    // calculate token amount to be created\n\n    uint256 tokens = getTokenAmount(weiAmount);\n\n\n\n    // update state\n\n    weiRaised = weiRaised.add(weiAmount);\n\n\n\n    token.mint(beneficiary, tokens);\n\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n\n\n    forwardFunds();\n",
                    "message": "Crowdsale.buyTokens (CappedCrowdsale.sol#388-404) does not use the value returned by external calls:\n\t-token.mint(beneficiary,tokens) (CappedCrowdsale.sol#400)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (CappedCrowdsale.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (CappedCrowdsale.sol#63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (CappedCrowdsale.sol#64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (CappedCrowdsale.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (CappedCrowdsale.sol#65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (CappedCrowdsale.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (CappedCrowdsale.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (CappedCrowdsale.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (CappedCrowdsale.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (CappedCrowdsale.sol#157-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (CappedCrowdsale.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (CappedCrowdsale.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (CappedCrowdsale.sol#205-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (CappedCrowdsale.sol#221-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (CappedCrowdsale.sol#271-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n\n    Transfer(address(0), _to, _amount);\n\n    return true;\n",
                    "message": "MintableToken.mint (CappedCrowdsale.sol#308-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
                    "message": "MintableToken.finishMinting (CappedCrowdsale.sol#320-324) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CappedCrowdsale.sol:\n\t- pragma solidity^0.4.18 (CappedCrowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsale.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsale.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsale.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsale.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsale.sol#236): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsale.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsale.sol#329): it allows old versions\n\t- pragma solidity^0.4.18 (CappedCrowdsale.sol#439): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (CappedCrowdsale.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (CappedCrowdsale.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (CappedCrowdsale.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (CappedCrowdsale.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (CappedCrowdsale.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (CappedCrowdsale.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (CappedCrowdsale.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (CappedCrowdsale.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (CappedCrowdsale.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (CappedCrowdsale.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (CappedCrowdsale.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (CappedCrowdsale.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (CappedCrowdsale.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (CappedCrowdsale.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (CappedCrowdsale.sol#255-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (CappedCrowdsale.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (CappedCrowdsale.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n\n    require(_startTime >= now);\n\n    require(_endTime >= _startTime);\n\n    require(_rate > 0);\n\n    require(_wallet != address(0));\n\n\n\n    token = createTokenContract();\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    rate = _rate;\n\n    wallet = _wallet;\n",
                    "message": "Function 'Crowdsale.Crowdsale' (CappedCrowdsale.sol#369-380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_startTime' of Crowdsale.Crowdsale (CappedCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_endTime' of Crowdsale.Crowdsale (CappedCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_rate' of Crowdsale.Crowdsale (CappedCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_wallet' of Crowdsale.Crowdsale (CappedCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "  function CappedCrowdsale(uint256 _cap) public {\n\n    require(_cap > 0);\n\n    cap = _cap;\n",
                    "message": "Function 'CappedCrowdsale.CappedCrowdsale' (CappedCrowdsale.sol#451-454) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CappedCrowdsale(uint256 _cap) public {\n",
                    "message": "Parameter '_cap' of CappedCrowdsale.CappedCrowdsale (CappedCrowdsale.sol#451) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/math/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in SafeMath.sol:\n\t- pragma solidity^0.4.18 (SafeMath.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/math/Math.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Math.sol:\n\t- pragma solidity^0.4.18 (Math.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/HasNoEther.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract HasNoEther is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (HasNoEther.sol#38-42) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in HasNoEther.sol:\n\t- pragma solidity^0.4.18 (HasNoEther.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (HasNoEther.sol#48): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (HasNoEther.sol#22-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function HasNoEther() public payable {\n\n    require(msg.value == 0);\n\n  }\n",
                    "message": "Function 'HasNoEther.HasNoEther' (HasNoEther.sol#69-72) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SEND",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(owner.send(this.balance));\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/Claimable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Claimable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Claimable.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    pendingOwner = newOwner;\n",
                    "message": "Claimable.transferOwnership (Claimable.sol#70-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function claimOwnership() onlyPendingOwner public {\n\n    OwnershipTransferred(owner, pendingOwner);\n\n    owner = pendingOwner;\n\n    pendingOwner = address(0);\n",
                    "message": "Claimable.claimOwnership (Claimable.sol#77-81) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Claimable.sol:\n\t- pragma solidity^0.4.18 (Claimable.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (Claimable.sol#48): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Claimable.sol#22-24) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    pendingOwner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/HasNoTokens.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract CanReclaimToken is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (HasNoTokens.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (HasNoTokens.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (HasNoTokens.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (HasNoTokens.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (HasNoTokens.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (HasNoTokens.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (HasNoTokens.sol#74) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in HasNoTokens.sol:\n\t- pragma solidity^0.4.18 (HasNoTokens.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (HasNoTokens.sol#48): it allows old versions\n\t- pragma solidity^0.4.18 (HasNoTokens.sol#65): it allows old versions\n\t- pragma solidity^0.4.18 (HasNoTokens.sol#80): it allows old versions\n\t- pragma solidity^0.4.18 (HasNoTokens.sol#105): it allows old versions\n\t- pragma solidity^0.4.18 (HasNoTokens.sol#131): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (HasNoTokens.sol#22-24) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/NoOwner.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract HasNoEther is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract CanReclaimToken is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract HasNoContracts is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (NoOwner.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (NoOwner.sol#98-99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 100,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (NoOwner.sol#99-100) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (NoOwner.sol#100-101) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (NoOwner.sol#113-114) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (NoOwner.sol#114-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (NoOwner.sol#115-116) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in NoOwner.sol:\n\t- pragma solidity^0.4.18 (NoOwner.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (NoOwner.sol#48): it allows old versions\n\t- pragma solidity^0.4.18 (NoOwner.sol#89-90): it allows old versions\n\t- pragma solidity^0.4.18 (NoOwner.sol#106-107): it allows old versions\n\t- pragma solidity^0.4.18 (NoOwner.sol#121-122): it allows old versions\n\t- pragma solidity^0.4.18 (NoOwner.sol#146-147): it allows old versions\n\t- pragma solidity^0.4.18 (NoOwner.sol#172-173): it allows old versions\n\t- pragma solidity^0.4.18 (NoOwner.sol#200-202): it allows old versions\n\t- pragma solidity^0.4.18 (NoOwner.sol#222-225): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (NoOwner.sol#22-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function HasNoEther() public payable {\n\n    require(msg.value == 0);\n\n  }\n",
                    "message": "Function 'HasNoEther.HasNoEther' (NoOwner.sol#69-72) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SEND",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(owner.send(this.balance));\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/Contactable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Contactable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Contactable.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "  function setContactInformation(string info) onlyOwner public {\n\n    contactInformation = info;\n",
                    "message": "Contactable.setContactInformation (Contactable.sol#63-65) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Contactable.sol:\n\t- pragma solidity^0.4.18 (Contactable.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (Contactable.sol#48): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Contactable.sol#22-24) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setContactInformation(string info) onlyOwner public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setContactInformation(string info) onlyOwner public {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/Ownable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Ownable.sol#38-42) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Ownable.sol:\n\t- pragma solidity^0.4.18 (Ownable.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Ownable.sol#22-24) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/DelayedClaimable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Claimable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require((block.number <= end) && (block.number >= start));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    pendingOwner = newOwner;\n",
                    "message": "Claimable.transferOwnership (DelayedClaimable.sol#70-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (DelayedClaimable.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function claimOwnership() onlyPendingOwner public {\n\n    require((block.number <= end) && (block.number >= start));\n\n    OwnershipTransferred(owner, pendingOwner);\n\n    owner = pendingOwner;\n\n    pendingOwner = address(0);\n\n    end = 0;\n",
                    "message": "DelayedClaimable.claimOwnership (DelayedClaimable.sol#114-120) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function claimOwnership() onlyPendingOwner public {\n\n    OwnershipTransferred(owner, pendingOwner);\n\n    owner = pendingOwner;\n\n    pendingOwner = address(0);\n",
                    "message": "Claimable.claimOwnership (DelayedClaimable.sol#77-81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "  function setLimits(uint256 _start, uint256 _end) onlyOwner public {\n\n    require(_start <= _end);\n\n    end = _end;\n\n    start = _start;\n",
                    "message": "DelayedClaimable.setLimits (DelayedClaimable.sol#104-108) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in DelayedClaimable.sol:\n\t- pragma solidity^0.4.18 (DelayedClaimable.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (DelayedClaimable.sol#48): it allows old versions\n\t- pragma solidity^0.4.18 (DelayedClaimable.sol#86): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (DelayedClaimable.sol#22-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setLimits(uint256 _start, uint256 _end) onlyOwner public {\n",
                    "message": "Parameter '_start' of DelayedClaimable.setLimits (DelayedClaimable.sol#104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setLimits(uint256 _start, uint256 _end) onlyOwner public {\n",
                    "message": "Parameter '_end' of DelayedClaimable.setLimits (DelayedClaimable.sol#104) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    pendingOwner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    pendingOwner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setLimits(uint256 _start, uint256 _end) onlyOwner public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/Heritable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Heritable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_11"
            ],
            "vulnerability_findings": [
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function ownerLives() internal view returns (bool) {\n\n    return timeOfDeath == 0;\n",
                    "message": "Heritable.ownerLives (Heritable.sol#139-141) uses a dangerous strict equality:\n\t- timeOfDeath == 0\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in Heritable.sol:\n\t- Version used: ['^0.4.11', '^0.4.18']\n\t- Heritable.sol#3 declares pragma solidity^0.4.18\n\t- Heritable.sol#48 declares pragma solidity^0.4.11\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Heritable.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "  function setHeir(address newHeir) public onlyOwner {\n\n    require(newHeir != owner);\n\n    heartbeat();\n\n    HeirChanged(owner, newHeir);\n\n    heir = newHeir;\n",
                    "message": "Heritable.setHeir (Heritable.sol#89-94) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "  function removeHeir() public onlyOwner {\n\n    heartbeat();\n\n    heir = 0;\n",
                    "message": "Heritable.removeHeir (Heritable.sol#99-102) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "  function proclaimDeath() public onlyHeir {\n\n    require(ownerLives());\n\n    OwnerProclaimedDead(owner, heir, timeOfDeath);\n\n    timeOfDeath = now;\n",
                    "message": "Heritable.proclaimDeath (Heritable.sol#108-112) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function claimHeirOwnership() public onlyHeir {\n\n    require(!ownerLives());\n\n    require(now >= timeOfDeath + heartbeatTimeout);\n\n    OwnershipTransferred(owner, heir);\n\n    HeirOwnershipClaimed(owner, heir);\n\n    owner = heir;\n\n    timeOfDeath = 0;\n",
                    "message": "Heritable.claimHeirOwnership (Heritable.sol#125-132) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Heritable.sol:\n\t- pragma solidity^0.4.18 (Heritable.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (Heritable.sol#48): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Heritable.sol#22-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function Heritable(uint256 _heartbeatTimeout) public {\n\n    setHeartbeatTimeout(_heartbeatTimeout);\n",
                    "message": "Function 'Heritable.Heritable' (Heritable.sol#85-87) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Heritable(uint256 _heartbeatTimeout) public {\n",
                    "message": "Parameter '_heartbeatTimeout' of Heritable.Heritable (Heritable.sol#85) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setHeir(address newHeir) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setHeartbeatTimeout(uint256 newHeartbeatTimeout) internal onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/CanReclaimToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract CanReclaimToken is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (CanReclaimToken.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (CanReclaimToken.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (CanReclaimToken.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (CanReclaimToken.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (CanReclaimToken.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (CanReclaimToken.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (CanReclaimToken.sol#74) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in CanReclaimToken.sol:\n\t- pragma solidity^0.4.18 (CanReclaimToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (CanReclaimToken.sol#48): it allows old versions\n\t- pragma solidity^0.4.18 (CanReclaimToken.sol#65): it allows old versions\n\t- pragma solidity^0.4.18 (CanReclaimToken.sol#80): it allows old versions\n\t- pragma solidity^0.4.18 (CanReclaimToken.sol#105): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (CanReclaimToken.sol#22-24) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/HasNoContracts.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract HasNoContracts is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (HasNoContracts.sol#38-42) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in HasNoContracts.sol:\n\t- pragma solidity^0.4.18 (HasNoContracts.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (HasNoContracts.sol#48): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (HasNoContracts.sol#22-24) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/rbac/Roles.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Roles.sol:\n\t- pragma solidity^0.4.18 (Roles.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/ownership/rbac/RBAC.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
                    "message": "RBAC.roles (RBAC.sol#77) is never initialized. It is used in:\n\t- checkRole (RBAC.sol#102-107)\n\t- hasRole (RBAC.sol#115-121)\n\t- addRole (RBAC.sol#152-157)\n\t- removeRole (RBAC.sol#164-169)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 121,
                    "vulnerability_code": "  function hasRole(address addr, string roleName)\n\n    view\n\n    public\n\n    returns (bool)\n\n  {\n\n    return roles[roleName].has(addr);\n",
                    "message": "RBAC.hasRole (RBAC.sol#115-121) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 133,
                    "vulnerability_code": "  function adminAddRole(address addr, string roleName)\n\n    onlyAdmin\n\n    public\n\n  {\n\n    addRole(addr, roleName);\n",
                    "message": "RBAC.adminAddRole (RBAC.sol#128-133) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": 145,
                    "vulnerability_code": "  function adminRemoveRole(address addr, string roleName)\n\n    onlyAdmin\n\n    public\n\n  {\n\n    removeRole(addr, roleName);\n",
                    "message": "RBAC.adminRemoveRole (RBAC.sol#140-145) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in RBAC.sol:\n\t- pragma solidity^0.4.18 (RBAC.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (RBAC.sol#61): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "  function RBAC()\n\n    public\n\n  {\n\n    addRole(msg.sender, ROLE_ADMIN);\n",
                    "message": "Function 'RBAC.RBAC' (RBAC.sol#90-94) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function hasRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function adminAddRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function adminRemoveRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addRole(address addr, string roleName)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeRole(address addr, string roleName)\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/examples/SampleCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract FinalizableCrowdsale is Crowdsale, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract RefundVault is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public isFinalized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_56"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "  function buyTokens(address beneficiary) public payable {\n\n    require(beneficiary != address(0));\n\n    require(validPurchase());\n\n\n\n    uint256 weiAmount = msg.value;\n\n\n\n    // calculate token amount to be created\n\n    uint256 tokens = getTokenAmount(weiAmount);\n\n\n\n    // update state\n\n    weiRaised = weiRaised.add(weiAmount);\n\n\n\n    token.mint(beneficiary, tokens);\n\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n\n\n    forwardFunds();\n",
                    "message": "Crowdsale.buyTokens (SampleCrowdsale.sol#388-404) does not use the value returned by external calls:\n\t-token.mint(beneficiary,tokens) (SampleCrowdsale.sol#400)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (SampleCrowdsale.sol#63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (SampleCrowdsale.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (SampleCrowdsale.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (SampleCrowdsale.sol#64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (SampleCrowdsale.sol#65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (SampleCrowdsale.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (SampleCrowdsale.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (SampleCrowdsale.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (SampleCrowdsale.sol#157-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (SampleCrowdsale.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (SampleCrowdsale.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (SampleCrowdsale.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (SampleCrowdsale.sol#205-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (SampleCrowdsale.sol#221-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (SampleCrowdsale.sol#271-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n\n    Transfer(address(0), _to, _amount);\n\n    return true;\n",
                    "message": "MintableToken.mint (SampleCrowdsale.sol#308-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
                    "message": "MintableToken.finishMinting (SampleCrowdsale.sol#320-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": 502,
                    "vulnerability_code": "  function finalize() onlyOwner public {\n\n    require(!isFinalized);\n\n    require(hasEnded());\n\n\n\n    finalization();\n\n    Finalized();\n\n\n\n    isFinalized = true;\n",
                    "message": "FinalizableCrowdsale.finalize (SampleCrowdsale.sol#494-502) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": 546,
                    "vulnerability_code": "  function deposit(address investor) onlyOwner public payable {\n\n    require(state == State.Active);\n\n    deposited[investor] = deposited[investor].add(msg.value);\n",
                    "message": "RefundVault.deposit (SampleCrowdsale.sol#543-546) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": 553,
                    "vulnerability_code": "  function close() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Closed;\n\n    Closed();\n\n    wallet.transfer(this.balance);\n",
                    "message": "RefundVault.close (SampleCrowdsale.sol#548-553) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": 559,
                    "vulnerability_code": "  function enableRefunds() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Refunding;\n\n    RefundsEnabled();\n",
                    "message": "RefundVault.enableRefunds (SampleCrowdsale.sol#555-559) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": 567,
                    "vulnerability_code": "  function refund(address investor) public {\n\n    require(state == State.Refunding);\n\n    uint256 depositedValue = deposited[investor];\n\n    deposited[investor] = 0;\n\n    investor.transfer(depositedValue);\n\n    Refunded(investor, depositedValue);\n",
                    "message": "RefundVault.refund (SampleCrowdsale.sol#561-567) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 598,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "  function claimRefund() public {\n\n    require(isFinalized);\n\n    require(!goalReached());\n\n\n\n    vault.refund(msg.sender);\n",
                    "message": "RefundableCrowdsale.claimRefund (SampleCrowdsale.sol#598-603) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in SampleCrowdsale.sol:\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#236): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#329): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#439): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#474): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#515): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#572): it allows old versions\n\t- pragma solidity^0.4.18 (SampleCrowdsale.sol#631): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (SampleCrowdsale.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (SampleCrowdsale.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (SampleCrowdsale.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (SampleCrowdsale.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (SampleCrowdsale.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (SampleCrowdsale.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (SampleCrowdsale.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (SampleCrowdsale.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (SampleCrowdsale.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (SampleCrowdsale.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (SampleCrowdsale.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (SampleCrowdsale.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (SampleCrowdsale.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (SampleCrowdsale.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (SampleCrowdsale.sol#255-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (SampleCrowdsale.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (SampleCrowdsale.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n\n    require(_startTime >= now);\n\n    require(_endTime >= _startTime);\n\n    require(_rate > 0);\n\n    require(_wallet != address(0));\n\n\n\n    token = createTokenContract();\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    rate = _rate;\n\n    wallet = _wallet;\n",
                    "message": "Function 'Crowdsale.Crowdsale' (SampleCrowdsale.sol#369-380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_startTime' of Crowdsale.Crowdsale (SampleCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_endTime' of Crowdsale.Crowdsale (SampleCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_rate' of Crowdsale.Crowdsale (SampleCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
                    "message": "Parameter '_wallet' of Crowdsale.Crowdsale (SampleCrowdsale.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "  function CappedCrowdsale(uint256 _cap) public {\n\n    require(_cap > 0);\n\n    cap = _cap;\n",
                    "message": "Function 'CappedCrowdsale.CappedCrowdsale' (SampleCrowdsale.sol#451-454) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CappedCrowdsale(uint256 _cap) public {\n",
                    "message": "Parameter '_cap' of CappedCrowdsale.CappedCrowdsale (SampleCrowdsale.sol#451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function RefundVault(address _wallet) public {\n\n    require(_wallet != address(0));\n\n    wallet = _wallet;\n\n    state = State.Active;\n",
                    "message": "Function 'RefundVault.RefundVault' (SampleCrowdsale.sol#537-541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function RefundVault(address _wallet) public {\n",
                    "message": "Parameter '_wallet' of RefundVault.RefundVault (SampleCrowdsale.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 595,
                    "vulnerability_code": "  function RefundableCrowdsale(uint256 _goal) public {\n\n    require(_goal > 0);\n\n    vault = new RefundVault(wallet);\n\n    goal = _goal;\n",
                    "message": "Function 'RefundableCrowdsale.RefundableCrowdsale' (SampleCrowdsale.sol#591-595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function RefundableCrowdsale(uint256 _goal) public {\n",
                    "message": "Parameter '_goal' of RefundableCrowdsale.RefundableCrowdsale (SampleCrowdsale.sol#591) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": 671,
                    "vulnerability_code": "  function SampleCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _goal, uint256 _cap, address _wallet) public\n\n    CappedCrowdsale(_cap)\n\n    FinalizableCrowdsale()\n\n    RefundableCrowdsale(_goal)\n\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\n\n  {\n\n    //As goal needs to be met for a successful crowdsale\n\n    //the value needs to less or equal than a cap which is limit for accepted funds\n\n    require(_goal <= _cap);\n",
                    "message": "Function 'SampleCrowdsale.SampleCrowdsale' (SampleCrowdsale.sol#662-671) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function SampleCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _goal, uint256 _cap, address _wallet) public\n",
                    "message": "Parameter '_goal' of SampleCrowdsale.SampleCrowdsale (SampleCrowdsale.sol#662) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function SampleCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _goal, uint256 _cap, address _wallet) public\n",
                    "message": "Parameter '_cap' of SampleCrowdsale.SampleCrowdsale (SampleCrowdsale.sol#662) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 572,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/examples/SimpleSavingsWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Heritable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(payee != 0 && payee != address(this));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function ownerLives() internal view returns (bool) {\n\n    return timeOfDeath == 0;\n",
                    "message": "Heritable.ownerLives (SimpleSavingsWallet.sol#139-141) uses a dangerous strict equality:\n\t- timeOfDeath == 0\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Different versions of Solidity is used in SimpleSavingsWallet.sol:\n\t- Version used: ['^0.4.11', '^0.4.18']\n\t- SimpleSavingsWallet.sol#3 declares pragma solidity^0.4.18\n\t- SimpleSavingsWallet.sol#48 declares pragma solidity^0.4.11\n\t- SimpleSavingsWallet.sol#146 declares pragma solidity^0.4.11\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (SimpleSavingsWallet.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "  function setHeir(address newHeir) public onlyOwner {\n\n    require(newHeir != owner);\n\n    heartbeat();\n\n    HeirChanged(owner, newHeir);\n\n    heir = newHeir;\n",
                    "message": "Heritable.setHeir (SimpleSavingsWallet.sol#89-94) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "  function removeHeir() public onlyOwner {\n\n    heartbeat();\n\n    heir = 0;\n",
                    "message": "Heritable.removeHeir (SimpleSavingsWallet.sol#99-102) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "  function proclaimDeath() public onlyHeir {\n\n    require(ownerLives());\n\n    OwnerProclaimedDead(owner, heir, timeOfDeath);\n\n    timeOfDeath = now;\n",
                    "message": "Heritable.proclaimDeath (SimpleSavingsWallet.sol#108-112) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function claimHeirOwnership() public onlyHeir {\n\n    require(!ownerLives());\n\n    require(now >= timeOfDeath + heartbeatTimeout);\n\n    OwnershipTransferred(owner, heir);\n\n    HeirOwnershipClaimed(owner, heir);\n\n    owner = heir;\n\n    timeOfDeath = 0;\n",
                    "message": "Heritable.claimHeirOwnership (SimpleSavingsWallet.sol#125-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "  function () public payable {\n\n    Received(msg.sender, msg.value, this.balance);\n",
                    "message": "SimpleSavingsWallet.fallback (SimpleSavingsWallet.sol#169-171) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "  function sendTo(address payee, uint256 amount) public onlyOwner {\n\n    require(payee != 0 && payee != address(this));\n\n    require(amount > 0);\n\n    payee.transfer(amount);\n\n    Sent(payee, amount, this.balance);\n",
                    "message": "SimpleSavingsWallet.sendTo (SimpleSavingsWallet.sol#176-181) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in SimpleSavingsWallet.sol:\n\t- pragma solidity^0.4.18 (SimpleSavingsWallet.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (SimpleSavingsWallet.sol#48): it allows old versions\n\t- pragma solidity^0.4.11 (SimpleSavingsWallet.sol#146): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (SimpleSavingsWallet.sol#22-24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "  function Heritable(uint256 _heartbeatTimeout) public {\n\n    setHeartbeatTimeout(_heartbeatTimeout);\n",
                    "message": "Function 'Heritable.Heritable' (SimpleSavingsWallet.sol#85-87) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Heritable(uint256 _heartbeatTimeout) public {\n",
                    "message": "Parameter '_heartbeatTimeout' of Heritable.Heritable (SimpleSavingsWallet.sol#85) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function SimpleSavingsWallet(uint256 _heartbeatTimeout) Heritable(_heartbeatTimeout) public {}\n",
                    "message": "Function 'SimpleSavingsWallet.SimpleSavingsWallet' (SimpleSavingsWallet.sol#164) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setHeir(address newHeir) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setHeartbeatTimeout(uint256 newHeartbeatTimeout) internal onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-1.6.0/contracts/examples/SimpleToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_30"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (SimpleToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (SimpleToken.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (SimpleToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (SimpleToken.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
                    "message": "BasicToken.transfer (SimpleToken.sol#97-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (SimpleToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (SimpleToken.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (SimpleToken.sol#128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (SimpleToken.sol#129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (SimpleToken.sol#157-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (SimpleToken.sol#130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (SimpleToken.sol#179-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (SimpleToken.sol#205-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (SimpleToken.sol#221-230) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in SimpleToken.sol:\n\t- pragma solidity^0.4.18 (SimpleToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (SimpleToken.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (SimpleToken.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (SimpleToken.sol#121): it allows old versions\n\t- pragma solidity^0.4.18 (SimpleToken.sol#136): it allows old versions\n\t- pragma solidity^0.4.18 (SimpleToken.sol#236): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (SimpleToken.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (SimpleToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (SimpleToken.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (SimpleToken.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (SimpleToken.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (SimpleToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (SimpleToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (SimpleToken.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (SimpleToken.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (SimpleToken.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (SimpleToken.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (SimpleToken.sol#205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (SimpleToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (SimpleToken.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 259,
                    "vulnerability_code": "  function SimpleToken() public {\n\n    totalSupply_ = INITIAL_SUPPLY;\n\n    balances[msg.sender] = INITIAL_SUPPLY;\n\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n",
                    "message": "Function 'SimpleToken.SimpleToken' (SimpleToken.sol#255-259) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    }
}