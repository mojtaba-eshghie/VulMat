{
    "platform-contracts-8996d21499ede3f2eb36320ded9563f5467a0fa6/liquidityLock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public poolCount = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _status = _NOT_ENTERED;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < _endDate, \"endDate should be bigger than now\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount != 0, \"amount cannot 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenAddress != address(0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Token adress cannot be address(0)\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(_tokenAddress).transferFrom(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                msg.sender,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(this),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _amount\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Transaction failed\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(poolCount == 0, \"Pool count must be 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < _endDate, \"endDate should be bigger than now\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenAddress != address(0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Token adress cannot be address(0)\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "    modifier onlyManager() {\n\n        require(msg.sender == pool.managerAddress);\n\n        _;\n",
                    "message": "Lock.onlyManager (liquidityLock.sol#114-117) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == pool.managerAddress)\n\t- require(bool)(msg.sender == pool.managerAddress)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 166,
                    "vulnerability_code": "    function getTokens() external onlyManager nonReentrant {\n\n        require(now > pool.endDate);\n\n        IERC20(pool.tokenAddress).transfer(msg.sender, pool.amount);\n",
                    "message": "Lock.getTokens (liquidityLock.sol#163-166) does not use the value returned by external calls:\n\t-IERC20(pool.tokenAddress).transfer(msg.sender,pool.amount) (liquidityLock.sol#165)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "    function lockTokens(\n\n        uint256 _endDate,\n\n        uint256 _amount,\n\n        address _tokenAddress\n\n    ) external nonReentrant {\n\n        require(now < _endDate, \"endDate should be bigger than now\");\n\n        require(_amount != 0, \"amount cannot 0\");\n\n        require(\n\n            _tokenAddress != address(0),\n\n            \"Token adress cannot be address(0)\"\n\n        );\n\n        require(\n\n            IERC20(_tokenAddress).transferFrom(\n\n                msg.sender,\n\n                address(this),\n\n                _amount\n\n            ),\n\n            \"Transaction failed\"\n\n        );\n\n        require(poolCount == 0, \"Pool count must be 0\");\n\n        pool = LockInfo(now, _endDate, _amount, _tokenAddress, msg.sender);\n\n        poolCount = poolCount.safeAdd(1);\n",
                    "message": "Reentrancy in Lock.lockTokens (liquidityLock.sol#119-141):\n\tExternal calls:\n\t- require(bool,string)(IERC20(_tokenAddress).transferFrom(msg.sender,address(this),_amount),Transaction failed) (liquidityLock.sol#130-137)\n\tState variables written after the call(s):\n\t- pool (liquidityLock.sol#139)\n\t- poolCount (liquidityLock.sol#140)\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endDate,\n",
                    "message": "Parameter '_endDate' of Lock.lockTokens (liquidityLock.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of Lock.lockTokens (liquidityLock.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenAddress\n",
                    "message": "Parameter '_tokenAddress' of Lock.lockTokens (liquidityLock.sol#122) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant _NOT_ENTERED = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant _ENTERED = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _status;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "platform-contracts-8996d21499ede3f2eb36320ded9563f5467a0fa6/ArgonFreelancers.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = index; i < data.WorkAddresses.length - 1; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < data.WorkAddresses.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _addApprover(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        firstSignAddress = 0xBdCf81639242C471f79f985D66BE8A289bD78428; // You should change this address to your first sign address\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        secondSignAddress = 0xFb46431618d4769F2b14178C19402eca7fbb2b5f; // You should change this address to your second sign address\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _status = _NOT_ENTERED;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _argonTokenAddress,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _bnbFeeRate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _feeAddress\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        argonToken = IERC20(_argonTokenAddress);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bnbFeeRate = _bnbFeeRate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        remainingArgonToken = 5e6 ether;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        approverMinArgonLimit = 20000 * 10**18;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feeAddress = _feeAddress;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workTitle,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workCategory,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workDescription,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workAvarageBudget,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _employerAddress,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _t\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(MainContract(_t).isActive());\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(MainContract(_t).getPersonAccountType(_employerAddress) == 2);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (allPersons[x] == msg.sender) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete allPersons[x];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = index; i < data.WorkAddresses.length - 1; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < data.WorkAddresses.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 766,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(freelancerSendFiles, \"freelancer must be sent files\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(freelancerSendFiles, \"freelancer must be sent files\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(signed[firstSignAddress] && signed[secondSignAddress]);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(signed[firstSignAddress] && signed[secondSignAddress]);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(signed[firstSignAddress] && signed[secondSignAddress]);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(approverConfirmStatus == 0 && approverStartDate > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (now > deployedWork.deadLine() && deployedWork.deadLine() != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (true, _workAddress);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (false, _workAddress);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        data.WorkAddresses.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        workOfferCount--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = index; i < data.WorkAddresses.length - 1; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < data.WorkAddresses.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        workOfferCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_92"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": 751,
                    "vulnerability_code": "    function _payFreelancer() private {\n\n        uint256 amount;\n\n\n\n        if (isBNB) {\n\n            amount = workPrice.safeSub(\n\n                (workPrice.safeMul(deployedFromContract.bnbFeeRate())).safeDiv(\n\n                    1e6\n\n                )\n\n            );\n\n            freelancerAddress.transfer(amount);\n\n            deployedFromContract.feeAddress().transfer(\n\n                workPrice.safeSub(amount)\n\n            );\n\n        } else {\n\n            amount = workPrice.safeSub(\n\n                (\n\n                    workPrice.safeMul(\n\n                        deployedFromContract.feeRates(tokenContractAddress)\n\n                    )\n\n                )\n\n                    .safeDiv(1e6)\n\n            );\n\n\n\n            IERC20(tokenContractAddress).transfer(freelancerAddress, amount);\n\n            IERC20(tokenContractAddress).transfer(\n\n                deployedFromContract.feeAddress(),\n\n                workPrice.safeSub(amount)\n\n            );\n\n        }\n",
                    "message": "WorkContract._payFreelancer (ArgonFreelancers.sol#722-751) sends eth to arbitrary user\n\tDangerous calls:\n\t- deployedFromContract.feeAddress().transfer(workPrice.safeSub(amount)) (ArgonFreelancers.sol#732-734)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": 759,
                    "vulnerability_code": "    function _payEmployer() private {\n\n        if (isBNB) {\n\n            employerAddress.transfer(workPrice);\n\n        } else {\n\n            IERC20(tokenContractAddress).transfer(employerAddress, workPrice);\n\n        }\n",
                    "message": "WorkContract._payEmployer (ArgonFreelancers.sol#753-759) sends eth to arbitrary user\n\tDangerous calls:\n\t- employerAddress.transfer(workPrice) (ArgonFreelancers.sol#755)\n"
                },
                {
                    "name": "reentrancy-eth",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": 773,
                    "vulnerability_code": "    function employerReceiveFile(uint256 _puan, string _remark)\n\n        external\n\n        nonReentrant\n\n    {\n\n        require(msg.sender == employerAddress);\n\n        require(freelancerSendFiles, \"freelancer must be sent files\");\n\n        require(!employerReceiveFiles);\n\n        _payFreelancer();\n\n        deployedFromContract.setPuan(_puan, freelancerAddress);\n\n        employerRemark = _remark;\n\n        employerReceiveFiles = true;\n\n        workEndDate = now;\n",
                    "message": "Reentrancy in WorkContract.employerReceiveFile (ArgonFreelancers.sol#761-773):\n\tExternal calls:\n\t- _payFreelancer() (ArgonFreelancers.sol#768)\n\t- deployedFromContract.setPuan(_puan,freelancerAddress) (ArgonFreelancers.sol#769)\n\tExternal calls sending eth:\n\t- _payFreelancer() (ArgonFreelancers.sol#768)\n\tState variables written after the call(s):\n\t- employerReceiveFiles (ArgonFreelancers.sol#771)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": 785,
                    "vulnerability_code": "    function employerCancel(string _depscription) external {\n\n        require(msg.sender == employerAddress);\n\n        require(argonShield);\n\n        require(approverStartDate == 0);\n\n        require(!employerReceiveFiles);\n\n        require(freelancerSendFiles, \"freelancer must be sent files\");\n\n\n\n        approverConfirmStatus = 0;\n\n        employerCancelDescription = _depscription;\n\n        approverStartDate = now;\n",
                    "message": "WorkContract.employerCancel (ArgonFreelancers.sol#775-785) uses a dangerous strict equality:\n\t- require(bool)(approverStartDate == 0)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "    function sendApproverArgonCoin(address _approveraddress) external {\n\n        require(isDeployedWorks[msg.sender]);\n\n\n\n        uint256 amount = (remainingArgonToken.safeMul(3)).safeDiv(1e5);\n\n        argonToken.transfer(_approveraddress, amount);\n\n        remainingArgonToken = remainingArgonToken.safeSub(amount);\n",
                    "message": "Reentrancy in MainContract.sendApproverArgonCoin (ArgonFreelancers.sol#467-473):\n\tExternal calls:\n\t- argonToken.transfer(_approveraddress,amount) (ArgonFreelancers.sol#471)\n\tState variables written after the call(s):\n\t- remainingArgonToken (ArgonFreelancers.sol#472)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": 305,
                    "vulnerability_code": "    function unLock() external mustApprover nonReentrant {\n\n        require(approverLockBalances[msg.sender] > 0);\n\n        AccountData storage data = accounts[msg.sender];\n\n        require(data.WorkAddresses.length == 0);\n\n        delete accounts[msg.sender];\n\n        personsAddress[msg.sender] = false;\n\n        for (uint256 x = 0; x < allPersons.length; x++) {\n\n            if (allPersons[x] == msg.sender) {\n\n                delete allPersons[x];\n\n            }\n\n        }\n\n        argonToken.transfer(msg.sender, approverLockBalances[msg.sender]);\n\n        approverLockBalances[msg.sender] = 0;\n",
                    "message": "Reentrancy in MainContract.unLock (ArgonFreelancers.sol#292-305):\n\tExternal calls:\n\t- argonToken.transfer(msg.sender,approverLockBalances[msg.sender]) (ArgonFreelancers.sol#303)\n\tState variables written after the call(s):\n\t- approverLockBalances (ArgonFreelancers.sol#304)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "    function sendArgonTokenAdmin(address _address, uint256 amount)\n\n        external\n\n        onlyApprover\n\n        nonReentrant\n\n    {\n\n        argonToken.transfer(_address, amount);\n",
                    "message": "MainContract.sendArgonTokenAdmin (ArgonFreelancers.sol#284-290) does not use the value returned by external calls:\n\t-argonToken.transfer(_address,amount) (ArgonFreelancers.sol#289)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": 305,
                    "vulnerability_code": "    function unLock() external mustApprover nonReentrant {\n\n        require(approverLockBalances[msg.sender] > 0);\n\n        AccountData storage data = accounts[msg.sender];\n\n        require(data.WorkAddresses.length == 0);\n\n        delete accounts[msg.sender];\n\n        personsAddress[msg.sender] = false;\n\n        for (uint256 x = 0; x < allPersons.length; x++) {\n\n            if (allPersons[x] == msg.sender) {\n\n                delete allPersons[x];\n\n            }\n\n        }\n\n        argonToken.transfer(msg.sender, approverLockBalances[msg.sender]);\n\n        approverLockBalances[msg.sender] = 0;\n",
                    "message": "MainContract.unLock (ArgonFreelancers.sol#292-305) does not use the value returned by external calls:\n\t-argonToken.transfer(msg.sender,approverLockBalances[msg.sender]) (ArgonFreelancers.sol#303)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "    function sendApproverArgonCoin(address _approveraddress) external {\n\n        require(isDeployedWorks[msg.sender]);\n\n\n\n        uint256 amount = (remainingArgonToken.safeMul(3)).safeDiv(1e5);\n\n        argonToken.transfer(_approveraddress, amount);\n\n        remainingArgonToken = remainingArgonToken.safeSub(amount);\n",
                    "message": "MainContract.sendApproverArgonCoin (ArgonFreelancers.sol#467-473) does not use the value returned by external calls:\n\t-argonToken.transfer(_approveraddress,amount) (ArgonFreelancers.sol#471)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": 751,
                    "vulnerability_code": "    function _payFreelancer() private {\n\n        uint256 amount;\n\n\n\n        if (isBNB) {\n\n            amount = workPrice.safeSub(\n\n                (workPrice.safeMul(deployedFromContract.bnbFeeRate())).safeDiv(\n\n                    1e6\n\n                )\n\n            );\n\n            freelancerAddress.transfer(amount);\n\n            deployedFromContract.feeAddress().transfer(\n\n                workPrice.safeSub(amount)\n\n            );\n\n        } else {\n\n            amount = workPrice.safeSub(\n\n                (\n\n                    workPrice.safeMul(\n\n                        deployedFromContract.feeRates(tokenContractAddress)\n\n                    )\n\n                )\n\n                    .safeDiv(1e6)\n\n            );\n\n\n\n            IERC20(tokenContractAddress).transfer(freelancerAddress, amount);\n\n            IERC20(tokenContractAddress).transfer(\n\n                deployedFromContract.feeAddress(),\n\n                workPrice.safeSub(amount)\n\n            );\n\n        }\n",
                    "message": "WorkContract._payFreelancer (ArgonFreelancers.sol#722-751) does not use the value returned by external calls:\n\t-IERC20(tokenContractAddress).transfer(freelancerAddress,amount) (ArgonFreelancers.sol#745)\n\t-IERC20(tokenContractAddress).transfer(deployedFromContract.feeAddress(),workPrice.safeSub(amount)) (ArgonFreelancers.sol#746-749)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": 759,
                    "vulnerability_code": "    function _payEmployer() private {\n\n        if (isBNB) {\n\n            employerAddress.transfer(workPrice);\n\n        } else {\n\n            IERC20(tokenContractAddress).transfer(employerAddress, workPrice);\n\n        }\n",
                    "message": "WorkContract._payEmployer (ArgonFreelancers.sol#753-759) does not use the value returned by external calls:\n\t-IERC20(tokenContractAddress).transfer(employerAddress,workPrice) (ArgonFreelancers.sol#757)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function addPerson(uint8 _accountType, string _personInfoData)\n\n        external\n\n        mustActive\n\n        nonReentrant\n\n    {\n\n        if (_accountType == 1) {\n\n            approverLockBalances[msg.sender] = approverLockBalances[msg.sender]\n\n                .safeAdd(approverMinArgonLimit);\n\n            require(\n\n                argonToken.transferFrom(\n\n                    msg.sender,\n\n                    address(this),\n\n                    approverMinArgonLimit\n\n                )\n\n            );\n\n        }\n\n        require(!personsAddress[msg.sender]);\n\n        AccountData memory newAccount =\n\n            AccountData({\n\n                accountType: _accountType,\n\n                personWalletAddress: msg.sender,\n\n                personWorkCount: 0,\n\n                personPuan: new uint256[](0),\n\n                WorkAddresses: new address[](0),\n\n                personInfoData: _personInfoData\n\n            });\n\n\n\n        accounts[msg.sender] = newAccount; // Adding a new account\n\n        allPersons.push(msg.sender); // Adding a new account\n\n        personsAddress[msg.sender] = true;\n",
                    "message": "Reentrancy in MainContract.addPerson (ArgonFreelancers.sol#311-341):\n\tExternal calls:\n\t- require(bool)(argonToken.transferFrom(msg.sender,address(this),approverMinArgonLimit)) (ArgonFreelancers.sol#319-325)\n\tState variables written after the call(s):\n\t- accounts (ArgonFreelancers.sol#338)\n\t- allPersons (ArgonFreelancers.sol#339)\n\t- personsAddress (ArgonFreelancers.sol#340)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 831,
                    "vulnerability_to_line": 839,
                    "vulnerability_code": "    function autoConfirm() external nonReentrant {\n\n        require(now > freelancerSendFilesDate.safeAdd(5 days));\n\n        require(!employerReceiveFiles);\n\n        require(freelancerSendFiles);\n\n        _payFreelancer();\n\n        deployedFromContract.setPuan(5, freelancerAddress);\n\n        employerRemark = \"Auto Confirmed By Smart Contract\";\n\n        workEndDate = now;\n",
                    "message": "Reentrancy in WorkContract.autoConfirm (ArgonFreelancers.sol#831-839):\n\tExternal calls:\n\t- _payFreelancer() (ArgonFreelancers.sol#835)\n\t- deployedFromContract.setPuan(5,freelancerAddress) (ArgonFreelancers.sol#836)\n\tExternal calls sending eth:\n\t- _payFreelancer() (ArgonFreelancers.sol#835)\n\tState variables written after the call(s):\n\t- employerRemark (ArgonFreelancers.sol#837)\n\t- workEndDate (ArgonFreelancers.sol#838)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": 829,
                    "vulnerability_code": "    function cancelApprover(string _description)\n\n        external\n\n        nonReentrant\n\n        requireForApprover\n\n    {\n\n        if (now > approverStartDate.safeAdd(5 days)) {\n\n            require(isApprover(msg.sender));\n\n        } else {\n\n            require(msg.sender == approverAddress);\n\n            deployedFromContract.deleteApproverWorkAddress(\n\n                this,\n\n                approverAddress\n\n            );\n\n            deployedFromContract.sendApproverArgonCoin(approverAddress);\n\n        }\n\n        approverConfirmStatus = 2;\n\n        approverReport = _description;\n\n        _payEmployer();\n",
                    "message": "Reentrancy in WorkContract.cancelApprover (ArgonFreelancers.sol#811-829):\n\tExternal calls:\n\t- deployedFromContract.deleteApproverWorkAddress(this,approverAddress) (ArgonFreelancers.sol#820-823)\n\t- deployedFromContract.sendApproverArgonCoin(approverAddress) (ArgonFreelancers.sol#824)\n\tState variables written after the call(s):\n\t- approverConfirmStatus (ArgonFreelancers.sol#826)\n\t- approverReport (ArgonFreelancers.sol#827)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": 809,
                    "vulnerability_code": "    function confirmApprover(string _description)\n\n        external\n\n        nonReentrant\n\n        requireForApprover\n\n    {\n\n        if (now > approverStartDate.safeAdd(5 days)) {\n\n            require(isApprover(msg.sender));\n\n        } else {\n\n            require(msg.sender == approverAddress);\n\n\n\n            deployedFromContract.deleteApproverWorkAddress(\n\n                this,\n\n                approverAddress\n\n            );\n\n\n\n            deployedFromContract.sendApproverArgonCoin(approverAddress);\n\n        }\n\n\n\n        approverConfirmStatus = 1;\n\n        _payFreelancer();\n\n        approverReport = _description;\n\n        workEndDate = now;\n",
                    "message": "Reentrancy in WorkContract.confirmApprover (ArgonFreelancers.sol#787-809):\n\tExternal calls:\n\t- deployedFromContract.deleteApproverWorkAddress(this,approverAddress) (ArgonFreelancers.sol#797-800)\n\t- deployedFromContract.sendApproverArgonCoin(approverAddress) (ArgonFreelancers.sol#802)\n\tState variables written after the call(s):\n\t- approverConfirmStatus (ArgonFreelancers.sol#805)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": 809,
                    "vulnerability_code": "    function confirmApprover(string _description)\n\n        external\n\n        nonReentrant\n\n        requireForApprover\n\n    {\n\n        if (now > approverStartDate.safeAdd(5 days)) {\n\n            require(isApprover(msg.sender));\n\n        } else {\n\n            require(msg.sender == approverAddress);\n\n\n\n            deployedFromContract.deleteApproverWorkAddress(\n\n                this,\n\n                approverAddress\n\n            );\n\n\n\n            deployedFromContract.sendApproverArgonCoin(approverAddress);\n\n        }\n\n\n\n        approverConfirmStatus = 1;\n\n        _payFreelancer();\n\n        approverReport = _description;\n\n        workEndDate = now;\n",
                    "message": "Reentrancy in WorkContract.confirmApprover (ArgonFreelancers.sol#787-809):\n\tExternal calls:\n\t- deployedFromContract.deleteApproverWorkAddress(this,approverAddress) (ArgonFreelancers.sol#797-800)\n\t- deployedFromContract.sendApproverArgonCoin(approverAddress) (ArgonFreelancers.sol#802)\n\t- _payFreelancer() (ArgonFreelancers.sol#806)\n\tExternal calls sending eth:\n\t- _payFreelancer() (ArgonFreelancers.sol#806)\n\tState variables written after the call(s):\n\t- approverReport (ArgonFreelancers.sol#807)\n\t- workEndDate (ArgonFreelancers.sol#808)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": 558,
                    "vulnerability_code": "    constructor(\n\n        string _workTitle,\n\n        string _workCategory,\n\n        string _workDescription,\n\n        string _workAvarageBudget,\n\n        address _employerAddress,\n\n        address _t\n\n    ) public {\n\n        require(MainContract(_t).isActive());\n\n        require(MainContract(_t).getPersonAccountType(_employerAddress) == 2);\n\n        workTitle = _workTitle;\n\n        workCategory = _workCategory;\n\n        workDescription = _workDescription;\n\n        workCreateTime = now;\n\n        workAvarageBudget = _workAvarageBudget;\n\n        workOfferCount = 0;\n\n        workStatus = false;\n\n        employerAddress = _employerAddress;\n\n        freelancerSendFiles = false;\n\n        employerReceiveFiles = false;\n\n        deployedFromContract = MainContract(_t);\n\n        argonToken = IERC20(MainContract(_t).argonTokenContractAddress());\n",
                    "message": "Reentrancy in WorkContract.constructor (ArgonFreelancers.sol#536-558):\n\tExternal calls:\n\t- require(bool)(MainContract(_t).isActive()) (ArgonFreelancers.sol#544)\n\t- require(bool)(MainContract(_t).getPersonAccountType(_employerAddress) == 2) (ArgonFreelancers.sol#545)\n\tState variables written after the call(s):\n\t- deployedFromContract (ArgonFreelancers.sol#556)\n\t- employerAddress (ArgonFreelancers.sol#553)\n\t- employerReceiveFiles (ArgonFreelancers.sol#555)\n\t- freelancerSendFiles (ArgonFreelancers.sol#554)\n\t- workAvarageBudget (ArgonFreelancers.sol#550)\n\t- workCategory (ArgonFreelancers.sol#547)\n\t- workCreateTime (ArgonFreelancers.sol#549)\n\t- workDescription (ArgonFreelancers.sol#548)\n\t- workOfferCount (ArgonFreelancers.sol#551)\n\t- workStatus (ArgonFreelancers.sol#552)\n\t- workTitle (ArgonFreelancers.sol#546)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": 558,
                    "vulnerability_code": "    constructor(\n\n        string _workTitle,\n\n        string _workCategory,\n\n        string _workDescription,\n\n        string _workAvarageBudget,\n\n        address _employerAddress,\n\n        address _t\n\n    ) public {\n\n        require(MainContract(_t).isActive());\n\n        require(MainContract(_t).getPersonAccountType(_employerAddress) == 2);\n\n        workTitle = _workTitle;\n\n        workCategory = _workCategory;\n\n        workDescription = _workDescription;\n\n        workCreateTime = now;\n\n        workAvarageBudget = _workAvarageBudget;\n\n        workOfferCount = 0;\n\n        workStatus = false;\n\n        employerAddress = _employerAddress;\n\n        freelancerSendFiles = false;\n\n        employerReceiveFiles = false;\n\n        deployedFromContract = MainContract(_t);\n\n        argonToken = IERC20(MainContract(_t).argonTokenContractAddress());\n",
                    "message": "Reentrancy in WorkContract.constructor (ArgonFreelancers.sol#536-558):\n\tExternal calls:\n\t- require(bool)(MainContract(_t).isActive()) (ArgonFreelancers.sol#544)\n\t- require(bool)(MainContract(_t).getPersonAccountType(_employerAddress) == 2) (ArgonFreelancers.sol#545)\n\t- argonToken = IERC20(MainContract(_t).argonTokenContractAddress()) (ArgonFreelancers.sol#557)\n\tState variables written after the call(s):\n\t- argonToken (ArgonFreelancers.sol#557)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 579,
                    "vulnerability_to_line": 607,
                    "vulnerability_code": "    function createOffer(\n\n        uint256 _offerPrice,\n\n        string _description,\n\n        uint256 _deadline,\n\n        string _title,\n\n        address _tokenContract,\n\n        bool _isBNB,\n\n        bool _ArgonShield\n\n    ) external mustActive {\n\n        require(deployedFromContract.getPersonAccountType(msg.sender) == 0);\n\n        if (!_isBNB) {\n\n            require(_tokenContract != address(0));\n\n            require(deployedFromContract.availableTokens(_tokenContract));\n\n        }\n\n        Offer memory newOffer =\n\n            Offer({\n\n                offerPrice: _offerPrice,\n\n                freelancerAddress: msg.sender,\n\n                description: _description,\n\n                deadline: _deadline,\n\n                title: _title,\n\n                offerTokenContract: _tokenContract,\n\n                tokenContractIsBNB: _isBNB,\n\n                ArgonShield: _ArgonShield\n\n            });\n\n        offers[msg.sender] = newOffer;\n\n        allFreelancerAddress.push(msg.sender);\n\n        workOfferCount++;\n",
                    "message": "Reentrancy in WorkContract.createOffer (ArgonFreelancers.sol#579-607):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.getPersonAccountType(msg.sender) == 0) (ArgonFreelancers.sol#588)\n\t- require(bool)(deployedFromContract.availableTokens(_tokenContract)) (ArgonFreelancers.sol#591)\n\tState variables written after the call(s):\n\t- allFreelancerAddress (ArgonFreelancers.sol#605)\n\t- offers (ArgonFreelancers.sol#604)\n\t- workOfferCount (ArgonFreelancers.sol#606)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": 773,
                    "vulnerability_code": "    function employerReceiveFile(uint256 _puan, string _remark)\n\n        external\n\n        nonReentrant\n\n    {\n\n        require(msg.sender == employerAddress);\n\n        require(freelancerSendFiles, \"freelancer must be sent files\");\n\n        require(!employerReceiveFiles);\n\n        _payFreelancer();\n\n        deployedFromContract.setPuan(_puan, freelancerAddress);\n\n        employerRemark = _remark;\n\n        employerReceiveFiles = true;\n\n        workEndDate = now;\n",
                    "message": "Reentrancy in WorkContract.employerReceiveFile (ArgonFreelancers.sol#761-773):\n\tExternal calls:\n\t- _payFreelancer() (ArgonFreelancers.sol#768)\n\t- deployedFromContract.setPuan(_puan,freelancerAddress) (ArgonFreelancers.sol#769)\n\tExternal calls sending eth:\n\t- _payFreelancer() (ArgonFreelancers.sol#768)\n\tState variables written after the call(s):\n\t- employerRemark (ArgonFreelancers.sol#770)\n\t- workEndDate (ArgonFreelancers.sol#772)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 654,
                    "vulnerability_to_line": 679,
                    "vulnerability_code": "    function selectOffer(address _freelancerAddress, address _approveraddress)\n\n        external\n\n        payable\n\n        mustActive\n\n    {\n\n        require(msg.sender == employerAddress);\n\n        Offer storage data = offers[_freelancerAddress];\n\n        require(data.tokenContractIsBNB);\n\n        if (data.ArgonShield) {\n\n            require(\n\n                deployedFromContract.approverLockBalances(_approveraddress) >=\n\n                    deployedFromContract.approverMinArgonLimit()\n\n            );\n\n            approverAddress = _approveraddress;\n\n            deployedFromContract.setApproverWorkAddress(this, _approveraddress);\n\n        }\n\n\n\n        require(msg.value >= data.offerPrice);\n\n        freelancerAddress = data.freelancerAddress;\n\n        workStatus = true;\n\n        workStartDate = now;\n\n        deadLine = data.deadline;\n\n        workPrice = data.offerPrice;\n\n        isBNB = true;\n\n        argonShield = data.ArgonShield;\n",
                    "message": "Reentrancy in WorkContract.selectOffer (ArgonFreelancers.sol#654-679):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.approverLockBalances(_approveraddress) >= deployedFromContract.approverMinArgonLimit()) (ArgonFreelancers.sol#663-666)\n\tState variables written after the call(s):\n\t- approverAddress (ArgonFreelancers.sol#667)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 654,
                    "vulnerability_to_line": 679,
                    "vulnerability_code": "    function selectOffer(address _freelancerAddress, address _approveraddress)\n\n        external\n\n        payable\n\n        mustActive\n\n    {\n\n        require(msg.sender == employerAddress);\n\n        Offer storage data = offers[_freelancerAddress];\n\n        require(data.tokenContractIsBNB);\n\n        if (data.ArgonShield) {\n\n            require(\n\n                deployedFromContract.approverLockBalances(_approveraddress) >=\n\n                    deployedFromContract.approverMinArgonLimit()\n\n            );\n\n            approverAddress = _approveraddress;\n\n            deployedFromContract.setApproverWorkAddress(this, _approveraddress);\n\n        }\n\n\n\n        require(msg.value >= data.offerPrice);\n\n        freelancerAddress = data.freelancerAddress;\n\n        workStatus = true;\n\n        workStartDate = now;\n\n        deadLine = data.deadline;\n\n        workPrice = data.offerPrice;\n\n        isBNB = true;\n\n        argonShield = data.ArgonShield;\n",
                    "message": "Reentrancy in WorkContract.selectOffer (ArgonFreelancers.sol#654-679):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.approverLockBalances(_approveraddress) >= deployedFromContract.approverMinArgonLimit()) (ArgonFreelancers.sol#663-666)\n\t- deployedFromContract.setApproverWorkAddress(this,_approveraddress) (ArgonFreelancers.sol#668)\n\tState variables written after the call(s):\n\t- argonShield (ArgonFreelancers.sol#678)\n\t- deadLine (ArgonFreelancers.sol#675)\n\t- freelancerAddress (ArgonFreelancers.sol#672)\n\t- isBNB (ArgonFreelancers.sol#677)\n\t- workPrice (ArgonFreelancers.sol#676)\n\t- workStartDate (ArgonFreelancers.sol#674)\n\t- workStatus (ArgonFreelancers.sol#673)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 681,
                    "vulnerability_to_line": 712,
                    "vulnerability_code": "    function selectOfferWithToken(\n\n        address _freelancerAddress,\n\n        address _approveraddress\n\n    ) external mustActive {\n\n        require(msg.sender == employerAddress);\n\n        Offer storage data = offers[_freelancerAddress];\n\n        require(!data.tokenContractIsBNB);\n\n        if (data.ArgonShield) {\n\n            require(\n\n                deployedFromContract.approverLockBalances(_approveraddress) >=\n\n                    deployedFromContract.approverMinArgonLimit()\n\n            );\n\n\n\n            approverAddress = _approveraddress;\n\n            deployedFromContract.setApproverWorkAddress(this, _approveraddress);\n\n        }\n\n        freelancerAddress = data.freelancerAddress;\n\n        workStatus = true;\n\n        workStartDate = now;\n\n        deadLine = data.deadline;\n\n        workPrice = data.offerPrice;\n\n        isBNB = false;\n\n        tokenContractAddress = data.offerTokenContract;\n\n        require(\n\n            IERC20(data.offerTokenContract).transferFrom(\n\n                msg.sender,\n\n                address(this),\n\n                data.offerPrice\n\n            )\n\n        );\n\n        argonShield = data.ArgonShield;\n",
                    "message": "Reentrancy in WorkContract.selectOfferWithToken (ArgonFreelancers.sol#681-712):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.approverLockBalances(_approveraddress) >= deployedFromContract.approverMinArgonLimit()) (ArgonFreelancers.sol#689-692)\n\tState variables written after the call(s):\n\t- approverAddress (ArgonFreelancers.sol#694)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 681,
                    "vulnerability_to_line": 712,
                    "vulnerability_code": "    function selectOfferWithToken(\n\n        address _freelancerAddress,\n\n        address _approveraddress\n\n    ) external mustActive {\n\n        require(msg.sender == employerAddress);\n\n        Offer storage data = offers[_freelancerAddress];\n\n        require(!data.tokenContractIsBNB);\n\n        if (data.ArgonShield) {\n\n            require(\n\n                deployedFromContract.approverLockBalances(_approveraddress) >=\n\n                    deployedFromContract.approverMinArgonLimit()\n\n            );\n\n\n\n            approverAddress = _approveraddress;\n\n            deployedFromContract.setApproverWorkAddress(this, _approveraddress);\n\n        }\n\n        freelancerAddress = data.freelancerAddress;\n\n        workStatus = true;\n\n        workStartDate = now;\n\n        deadLine = data.deadline;\n\n        workPrice = data.offerPrice;\n\n        isBNB = false;\n\n        tokenContractAddress = data.offerTokenContract;\n\n        require(\n\n            IERC20(data.offerTokenContract).transferFrom(\n\n                msg.sender,\n\n                address(this),\n\n                data.offerPrice\n\n            )\n\n        );\n\n        argonShield = data.ArgonShield;\n",
                    "message": "Reentrancy in WorkContract.selectOfferWithToken (ArgonFreelancers.sol#681-712):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.approverLockBalances(_approveraddress) >= deployedFromContract.approverMinArgonLimit()) (ArgonFreelancers.sol#689-692)\n\t- deployedFromContract.setApproverWorkAddress(this,_approveraddress) (ArgonFreelancers.sol#695)\n\tState variables written after the call(s):\n\t- deadLine (ArgonFreelancers.sol#700)\n\t- freelancerAddress (ArgonFreelancers.sol#697)\n\t- isBNB (ArgonFreelancers.sol#702)\n\t- tokenContractAddress (ArgonFreelancers.sol#703)\n\t- workPrice (ArgonFreelancers.sol#701)\n\t- workStartDate (ArgonFreelancers.sol#699)\n\t- workStatus (ArgonFreelancers.sol#698)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 681,
                    "vulnerability_to_line": 712,
                    "vulnerability_code": "    function selectOfferWithToken(\n\n        address _freelancerAddress,\n\n        address _approveraddress\n\n    ) external mustActive {\n\n        require(msg.sender == employerAddress);\n\n        Offer storage data = offers[_freelancerAddress];\n\n        require(!data.tokenContractIsBNB);\n\n        if (data.ArgonShield) {\n\n            require(\n\n                deployedFromContract.approverLockBalances(_approveraddress) >=\n\n                    deployedFromContract.approverMinArgonLimit()\n\n            );\n\n\n\n            approverAddress = _approveraddress;\n\n            deployedFromContract.setApproverWorkAddress(this, _approveraddress);\n\n        }\n\n        freelancerAddress = data.freelancerAddress;\n\n        workStatus = true;\n\n        workStartDate = now;\n\n        deadLine = data.deadline;\n\n        workPrice = data.offerPrice;\n\n        isBNB = false;\n\n        tokenContractAddress = data.offerTokenContract;\n\n        require(\n\n            IERC20(data.offerTokenContract).transferFrom(\n\n                msg.sender,\n\n                address(this),\n\n                data.offerPrice\n\n            )\n\n        );\n\n        argonShield = data.ArgonShield;\n",
                    "message": "Reentrancy in WorkContract.selectOfferWithToken (ArgonFreelancers.sol#681-712):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.approverLockBalances(_approveraddress) >= deployedFromContract.approverMinArgonLimit()) (ArgonFreelancers.sol#689-692)\n\t- deployedFromContract.setApproverWorkAddress(this,_approveraddress) (ArgonFreelancers.sol#695)\n\t- require(bool)(IERC20(data.offerTokenContract).transferFrom(msg.sender,address(this),data.offerPrice)) (ArgonFreelancers.sol#704-710)\n\tState variables written after the call(s):\n\t- argonShield (ArgonFreelancers.sol#711)\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 95,
                    "vulnerability_code": "    function _addApprover(address account) internal {\n\n        _approvers.add(account);\n\n        emit ApproverAdded(account);\n",
                    "message": "Function 'ApproverRole._addApprover' (ArgonFreelancers.sol#92-95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 100,
                    "vulnerability_code": "    function _removeApprover(address account) internal {\n\n        _approvers.remove(account);\n\n        emit ApproverRemoved(account);\n",
                    "message": "Function 'ApproverRole._removeApprover' (ArgonFreelancers.sol#97-100) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _argonTokenAddress,\n",
                    "message": "Parameter '_argonTokenAddress' of MainContract. (ArgonFreelancers.sol#249) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _bnbFeeRate,\n",
                    "message": "Parameter '_bnbFeeRate' of MainContract. (ArgonFreelancers.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _feeAddress\n",
                    "message": "Parameter '_feeAddress' of MainContract. (ArgonFreelancers.sol#251) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeActive(bool _active) external onlyApprover {\n",
                    "message": "Parameter '_active' of MainContract.changeActive (ArgonFreelancers.sol#261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenAddress,\n",
                    "message": "Parameter '_tokenAddress' of MainContract.changeAvailableTokenFee (ArgonFreelancers.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _feeRate,\n",
                    "message": "Parameter '_feeRate' of MainContract.changeAvailableTokenFee (ArgonFreelancers.sol#267) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _available\n",
                    "message": "Parameter '_available' of MainContract.changeAvailableTokenFee (ArgonFreelancers.sol#268) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _approverMinArgonLimit,\n",
                    "message": "Parameter '_approverMinArgonLimit' of MainContract.changeSettings (ArgonFreelancers.sol#275) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _bnbFeeRate,\n",
                    "message": "Parameter '_bnbFeeRate' of MainContract.changeSettings (ArgonFreelancers.sol#276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _feeAddress\n",
                    "message": "Parameter '_feeAddress' of MainContract.changeSettings (ArgonFreelancers.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendArgonTokenAdmin(address _address, uint256 amount)\n",
                    "message": "Parameter '_address' of MainContract.sendArgonTokenAdmin (ArgonFreelancers.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addPerson(uint8 _accountType, string _personInfoData)\n",
                    "message": "Parameter '_accountType' of MainContract.addPerson (ArgonFreelancers.sol#311) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addPerson(uint8 _accountType, string _personInfoData)\n",
                    "message": "Parameter '_personInfoData' of MainContract.addPerson (ArgonFreelancers.sol#311) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPersonInfoData(address _personAddress)\n",
                    "message": "Parameter '_personAddress' of MainContract.getPersonInfoData (ArgonFreelancers.sol#343) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPersonAccountType(address _personAddress)\n",
                    "message": "Parameter '_personAddress' of MainContract.getPersonAccountType (ArgonFreelancers.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updatePerson(string _personInfoData)\n",
                    "message": "Parameter '_personInfoData' of MainContract.updatePerson (ArgonFreelancers.sol#373) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workTitle,\n",
                    "message": "Parameter '_workTitle' of MainContract.createWork (ArgonFreelancers.sol#383) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workCategory,\n",
                    "message": "Parameter '_workCategory' of MainContract.createWork (ArgonFreelancers.sol#384) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workDescription,\n",
                    "message": "Parameter '_workDescription' of MainContract.createWork (ArgonFreelancers.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workAvarageBudget\n",
                    "message": "Parameter '_workAvarageBudget' of MainContract.createWork (ArgonFreelancers.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setPuan(uint256 _puan, address _freelancerAddress) external {\n",
                    "message": "Parameter '_puan' of MainContract.setPuan (ArgonFreelancers.sol#408) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setPuan(uint256 _puan, address _freelancerAddress) external {\n",
                    "message": "Parameter '_freelancerAddress' of MainContract.setPuan (ArgonFreelancers.sol#408) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _workAddress,\n",
                    "message": "Parameter '_workAddress' of MainContract.setApproverWorkAddress (ArgonFreelancers.sol#415) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _approveraddress\n",
                    "message": "Parameter '_approveraddress' of MainContract.setApproverWorkAddress (ArgonFreelancers.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "    function _removeApproverWorkAddressArray(\n\n        uint256 index,\n\n        address _approveraddress\n\n    ) private {\n\n        AccountData storage data = accounts[_approveraddress];\n\n\n\n        if (index >= data.WorkAddresses.length) return;\n\n\n\n        for (uint256 i = index; i < data.WorkAddresses.length - 1; i++) {\n\n            data.WorkAddresses[i] = data.WorkAddresses[i + 1];\n\n        }\n\n        delete data.WorkAddresses[data.WorkAddresses.length - 1];\n\n        data.WorkAddresses.length--;\n",
                    "message": "Function 'MainContract._removeApproverWorkAddressArray' (ArgonFreelancers.sol#424-437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _approveraddress\n",
                    "message": "Parameter '_approveraddress' of MainContract._removeApproverWorkAddressArray (ArgonFreelancers.sol#426) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _workAddress,\n",
                    "message": "Parameter '_workAddress' of MainContract.deleteApproverWorkAddress (ArgonFreelancers.sol#440) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _approveraddress\n",
                    "message": "Parameter '_approveraddress' of MainContract.deleteApproverWorkAddress (ArgonFreelancers.sol#441) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function checkDeadline(address _workAddress)\n",
                    "message": "Parameter '_workAddress' of MainContract.checkDeadline (ArgonFreelancers.sol#453) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendApproverArgonCoin(address _approveraddress) external {\n",
                    "message": "Parameter '_approveraddress' of MainContract.sendApproverArgonCoin (ArgonFreelancers.sol#467) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workTitle,\n",
                    "message": "Parameter '_workTitle' of WorkContract. (ArgonFreelancers.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workCategory,\n",
                    "message": "Parameter '_workCategory' of WorkContract. (ArgonFreelancers.sol#538) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workDescription,\n",
                    "message": "Parameter '_workDescription' of WorkContract. (ArgonFreelancers.sol#539) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workAvarageBudget,\n",
                    "message": "Parameter '_workAvarageBudget' of WorkContract. (ArgonFreelancers.sol#540) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _employerAddress,\n",
                    "message": "Parameter '_employerAddress' of WorkContract. (ArgonFreelancers.sol#541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _t\n",
                    "message": "Parameter '_t' of WorkContract. (ArgonFreelancers.sol#542) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workTitle,\n",
                    "message": "Parameter '_workTitle' of WorkContract.updateWork (ArgonFreelancers.sol#565) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workCategory,\n",
                    "message": "Parameter '_workCategory' of WorkContract.updateWork (ArgonFreelancers.sol#566) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workDescription,\n",
                    "message": "Parameter '_workDescription' of WorkContract.updateWork (ArgonFreelancers.sol#567) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workAvarageBudget,\n",
                    "message": "Parameter '_workAvarageBudget' of WorkContract.updateWork (ArgonFreelancers.sol#568) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _workaddress\n",
                    "message": "Parameter '_workaddress' of WorkContract.updateWork (ArgonFreelancers.sol#569) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _offerPrice,\n",
                    "message": "Parameter '_offerPrice' of WorkContract.createOffer (ArgonFreelancers.sol#580) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 581,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _description,\n",
                    "message": "Parameter '_description' of WorkContract.createOffer (ArgonFreelancers.sol#581) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _deadline,\n",
                    "message": "Parameter '_deadline' of WorkContract.createOffer (ArgonFreelancers.sol#582) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _title,\n",
                    "message": "Parameter '_title' of WorkContract.createOffer (ArgonFreelancers.sol#583) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenContract,\n",
                    "message": "Parameter '_tokenContract' of WorkContract.createOffer (ArgonFreelancers.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _isBNB,\n",
                    "message": "Parameter '_isBNB' of WorkContract.createOffer (ArgonFreelancers.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _ArgonShield\n",
                    "message": "Parameter '_ArgonShield' of WorkContract.createOffer (ArgonFreelancers.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _offerPrice,\n",
                    "message": "Parameter '_offerPrice' of WorkContract.updateOffer (ArgonFreelancers.sol#615) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _description,\n",
                    "message": "Parameter '_description' of WorkContract.updateOffer (ArgonFreelancers.sol#616) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _title,\n",
                    "message": "Parameter '_title' of WorkContract.updateOffer (ArgonFreelancers.sol#617) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _ArgonShield\n",
                    "message": "Parameter '_ArgonShield' of WorkContract.updateOffer (ArgonFreelancers.sol#618) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOfferData(address _freelancerAddress)\n",
                    "message": "Parameter '_freelancerAddress' of WorkContract.getOfferData (ArgonFreelancers.sol#627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 654,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function selectOffer(address _freelancerAddress, address _approveraddress)\n",
                    "message": "Parameter '_freelancerAddress' of WorkContract.selectOffer (ArgonFreelancers.sol#654) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 654,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function selectOffer(address _freelancerAddress, address _approveraddress)\n",
                    "message": "Parameter '_approveraddress' of WorkContract.selectOffer (ArgonFreelancers.sol#654) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _freelancerAddress,\n",
                    "message": "Parameter '_freelancerAddress' of WorkContract.selectOfferWithToken (ArgonFreelancers.sol#682) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _approveraddress\n",
                    "message": "Parameter '_approveraddress' of WorkContract.selectOfferWithToken (ArgonFreelancers.sol#683) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 714,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function freelancerSendFile(string _workFilesLink) external {\n",
                    "message": "Parameter '_workFilesLink' of WorkContract.freelancerSendFile (ArgonFreelancers.sol#714) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": 751,
                    "vulnerability_code": "    function _payFreelancer() private {\n\n        uint256 amount;\n\n\n\n        if (isBNB) {\n\n            amount = workPrice.safeSub(\n\n                (workPrice.safeMul(deployedFromContract.bnbFeeRate())).safeDiv(\n\n                    1e6\n\n                )\n\n            );\n\n            freelancerAddress.transfer(amount);\n\n            deployedFromContract.feeAddress().transfer(\n\n                workPrice.safeSub(amount)\n\n            );\n\n        } else {\n\n            amount = workPrice.safeSub(\n\n                (\n\n                    workPrice.safeMul(\n\n                        deployedFromContract.feeRates(tokenContractAddress)\n\n                    )\n\n                )\n\n                    .safeDiv(1e6)\n\n            );\n\n\n\n            IERC20(tokenContractAddress).transfer(freelancerAddress, amount);\n\n            IERC20(tokenContractAddress).transfer(\n\n                deployedFromContract.feeAddress(),\n\n                workPrice.safeSub(amount)\n\n            );\n\n        }\n",
                    "message": "Function 'WorkContract._payFreelancer' (ArgonFreelancers.sol#722-751) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": 759,
                    "vulnerability_code": "    function _payEmployer() private {\n\n        if (isBNB) {\n\n            employerAddress.transfer(workPrice);\n\n        } else {\n\n            IERC20(tokenContractAddress).transfer(employerAddress, workPrice);\n\n        }\n",
                    "message": "Function 'WorkContract._payEmployer' (ArgonFreelancers.sol#753-759) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function employerReceiveFile(uint256 _puan, string _remark)\n",
                    "message": "Parameter '_puan' of WorkContract.employerReceiveFile (ArgonFreelancers.sol#761) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function employerReceiveFile(uint256 _puan, string _remark)\n",
                    "message": "Parameter '_remark' of WorkContract.employerReceiveFile (ArgonFreelancers.sol#761) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function employerCancel(string _depscription) external {\n",
                    "message": "Parameter '_depscription' of WorkContract.employerCancel (ArgonFreelancers.sol#775) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function confirmApprover(string _description)\n",
                    "message": "Parameter '_description' of WorkContract.confirmApprover (ArgonFreelancers.sol#787) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cancelApprover(string _description)\n",
                    "message": "Parameter '_description' of WorkContract.cancelApprover (ArgonFreelancers.sol#811) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        firstSignAddress = 0xBdCf81639242C471f79f985D66BE8A289bD78428; // You should change this address to your first sign address\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        secondSignAddress = 0xFb46431618d4769F2b14178C19402eca7fbb2b5f; // You should change this address to your second sign address\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        data.WorkAddresses.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address tokenOwner)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address tokenOwner, address spender)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = index; i < data.WorkAddresses.length - 1; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < data.WorkAddresses.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < data.WorkAddresses.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Roles.Role private _approvers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant _NOT_ENTERED = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant _ENTERED = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _status;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workTitle,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workCategory,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workDescription,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _workAvarageBudget,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address firstSignAddress;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address secondSignAddress;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => bool) signed; // Signed flag\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => AccountData) accounts;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => bool) personsAddress;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MainContract deployedFromContract;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => Offer) offers;\n",
                    "message": null
                }
            ]
        }
    }
}