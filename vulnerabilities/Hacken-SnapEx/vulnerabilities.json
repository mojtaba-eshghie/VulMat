{
    "SnapToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _addPauser(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _paused = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (uint256 cap) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(cap > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _cap = cap;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 656,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimals,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 cap\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ERC20Burnable()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 663,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ERC20Mintable()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ERC20Detailed(name, symbol, decimals)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ERC20Capped(cap * (10**uint256(decimals)))\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_37"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ SnapToken.sol#490) shadows:\n\t- ERC20Detailed.name (function @ SnapToken.sol#499-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ SnapToken.sol#490) shadows:\n\t- ERC20Detailed.symbol (function @ SnapToken.sol#506-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ SnapToken.sol#490) shadows:\n\t- ERC20Detailed.decimals (function @ SnapToken.sol#513-515)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (uint256 cap) public {\n",
                    "message": "ERC20Capped.constructor.cap (local variable @ SnapToken.sol#626) shadows:\n\t- ERC20Capped.cap (function @ SnapToken.sol#634-636)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "SnapToken.constructor.name (local variable @ SnapToken.sol#657) shadows:\n\t- ERC20Detailed.name (function @ SnapToken.sol#499-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol,\n",
                    "message": "SnapToken.constructor.symbol (local variable @ SnapToken.sol#658) shadows:\n\t- ERC20Detailed.symbol (function @ SnapToken.sol#506-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimals,\n",
                    "message": "SnapToken.constructor.decimals (local variable @ SnapToken.sol#659) shadows:\n\t- ERC20Detailed.decimals (function @ SnapToken.sol#513-515)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 cap\n",
                    "message": "SnapToken.constructor.cap (local variable @ SnapToken.sol#660) shadows:\n\t- ERC20Capped.cap (function @ SnapToken.sol#634-636)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Different versions of Solidity is used in SnapToken.sol:\n\t- Version used: ['^0.5.0', '^0.5.3']\n\t- SnapToken.sol#14 declares pragma solidity^0.5.0\n\t- SnapToken.sol#40 declares pragma solidity^0.5.0\n\t- SnapToken.sol#108 declares pragma solidity^0.5.0\n\t- SnapToken.sol#297 declares pragma solidity^0.5.0\n\t- SnapToken.sol#340 declares pragma solidity^0.5.0\n\t- SnapToken.sol#385 declares pragma solidity^0.5.0\n\t- SnapToken.sol#444 declares pragma solidity^0.5.0\n\t- SnapToken.sol#476 declares pragma solidity^0.5.0\n\t- SnapToken.sol#520 declares pragma solidity^0.5.0\n\t- SnapToken.sol#565 declares pragma solidity^0.5.0\n\t- SnapToken.sol#588 declares pragma solidity^0.5.0\n\t- SnapToken.sol#616 declares pragma solidity^0.5.0\n\t- SnapToken.sol#646 declares pragma solidity^0.5.3\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n",
                    "message": "ERC20.balanceOf (SnapToken.sol#145-147) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (SnapToken.sol#29) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 157,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (SnapToken.sol#155-157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
                    "message": "IERC20.allowance (SnapToken.sol#31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "    function addPauser(address account) public onlyPauser {\n\n        _addPauser(account);\n",
                    "message": "PauserRole.addPauser (SnapToken.sol#364-366) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": 370,
                    "vulnerability_code": "    function renouncePauser() public {\n\n        _removePauser(msg.sender);\n",
                    "message": "PauserRole.renouncePauser (SnapToken.sol#368-370) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "    function paused() public view returns (bool) {\n\n        return _paused;\n",
                    "message": "Pausable.paused (SnapToken.sol#405-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "    function pause() public onlyPauser whenNotPaused {\n\n        _paused = true;\n\n        emit Paused(msg.sender);\n",
                    "message": "Pausable.pause (SnapToken.sol#428-431) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": 439,
                    "vulnerability_code": "    function unpause() public onlyPauser whenPaused {\n\n        _paused = false;\n\n        emit Unpaused(msg.sender);\n",
                    "message": "Pausable.unpause (SnapToken.sol#436-439) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (SnapToken.sol#499-501) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": 508,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (SnapToken.sol#506-508) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": 515,
                    "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Detailed.decimals (SnapToken.sol#513-515) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": 546,
                    "vulnerability_code": "    function addMinter(address account) public onlyMinter {\n\n        _addMinter(account);\n",
                    "message": "MinterRole.addMinter (SnapToken.sol#544-546) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": 550,
                    "vulnerability_code": "    function renounceMinter() public {\n\n        _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (SnapToken.sol#548-550) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n\n        _mint(to, value);\n\n        return true;\n",
                    "message": "ERC20Mintable.mint (SnapToken.sol#580-583) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": 602,
                    "vulnerability_code": "    function burn(uint256 value) public {\n\n        _burn(msg.sender, value);\n",
                    "message": "ERC20Burnable.burn (SnapToken.sol#600-602) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": 611,
                    "vulnerability_code": "    function burnFrom(address from, uint256 value) public {\n\n        _burnFrom(from, value);\n",
                    "message": "ERC20Burnable.burnFrom (SnapToken.sol#609-611) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "    function cap() public view returns (uint256) {\n\n        return _cap;\n",
                    "message": "ERC20Capped.cap (SnapToken.sol#634-636) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in SnapToken.sol:\n\t- pragma solidity^0.5.0 (SnapToken.sol#14): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#40): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#108): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#297): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#340): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#385): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#444): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#476): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#520): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#565): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#588): it allows old versions\n\t- pragma solidity^0.5.0 (SnapToken.sol#616): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": 249,
                    "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0));\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (SnapToken.sol#243-249) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.add(value);\n\n        _balances[account] = _balances[account].add(value);\n\n        emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (SnapToken.sol#258-264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 278,
                    "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (SnapToken.sol#272-278) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 292,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 value) internal {\n\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n\n        _burn(account, value);\n\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n",
                    "message": "Function 'ERC20._burnFrom' (SnapToken.sol#288-292) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": 375,
                    "vulnerability_code": "    function _addPauser(address account) internal {\n\n        _pausers.add(account);\n\n        emit PauserAdded(account);\n",
                    "message": "Function 'PauserRole._addPauser' (SnapToken.sol#372-375) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "    function _removePauser(address account) internal {\n\n        _pausers.remove(account);\n\n        emit PauserRemoved(account);\n",
                    "message": "Function 'PauserRole._removePauser' (SnapToken.sol#377-380) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": 555,
                    "vulnerability_code": "    function _addMinter(address account) internal {\n\n        _minters.add(account);\n\n        emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (SnapToken.sol#552-555) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": 560,
                    "vulnerability_code": "    function _removeMinter(address account) internal {\n\n        _minters.remove(account);\n\n        emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (SnapToken.sol#557-560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 638,
                    "vulnerability_to_line": 641,
                    "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        require(totalSupply().add(value) <= _cap);\n\n        super._mint(account, value);\n",
                    "message": "Function 'ERC20Capped._mint' (SnapToken.sol#638-641) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 646,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Roles.Role private _pausers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _paused;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Roles.Role private _minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _cap;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    }
}