{
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) public restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/identity/ERC725.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
                    "message": "ERC725.getKey (ERC725.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\n",
                    "message": "ERC725.keyHasPurpose (ERC725.sol#20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
                    "message": "ERC725.getKeysByPurpose (ERC725.sol#21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\n",
                    "message": "ERC725.addKey (ERC725.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\n",
                    "message": "ERC725.removeKey (ERC725.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
                    "message": "ERC725.execute (ERC725.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve) public returns (bool success);\n",
                    "message": "ERC725.approve (ERC725.sol#25) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ACTION_KEY = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant CLAIM_SIGNER_KEY = 3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ENCRYPTION_KEY = 4;\n",
                    "message": null
                }
            ]
        }
    },
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/identity/KeyHolder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes[i] = purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys[j] = keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.init(keyHolderData);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _keyHolderData.executionNonce++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_64"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool isThere;\n",
                    "message": "isThere in KeyHolderLibrary.keyHasPurpose (KeyHolder.sol#222) is a local variable never initialiazed\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
                    "message": "ERC725.getKey (KeyHolder.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 256,
                    "vulnerability_code": "    function getKey(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\n",
                    "message": "KeyHolder.getKey (KeyHolder.sol#250-256) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": 308,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bool exists)\n\n    {\n\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\n",
                    "message": "KeyHolder.keyHasPurpose (KeyHolder.sol#302-308) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\n",
                    "message": "ERC725.keyHasPurpose (KeyHolder.sol#20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
                    "message": "ERC725.getKeysByPurpose (KeyHolder.sol#21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": 272,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\n",
                    "message": "KeyHolder.getKeysByPurpose (KeyHolder.sol#266-272) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\n",
                    "message": "KeyHolder.addKey (KeyHolder.sol#274-279) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\n",
                    "message": "ERC725.addKey (KeyHolder.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\n",
                    "message": "ERC725.removeKey (KeyHolder.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 300,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\n",
                    "message": "KeyHolder.removeKey (KeyHolder.sol#295-300) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\n",
                    "message": "KeyHolder.execute (KeyHolder.sol#288-293) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
                    "message": "ERC725.execute (KeyHolder.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": 286,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\n",
                    "message": "KeyHolder.approve (KeyHolder.sol#281-286) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve) public returns (bool success);\n",
                    "message": "ERC725.approve (KeyHolder.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n\n        public\n\n    {\n\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(1);\n\n        _keyHolderData.keys[_key].keyType = 1;\n\n        _keyHolderData.keysByPurpose[1].push(_key);\n\n        emit KeyAdded(_key, 1, 1);\n",
                    "message": "KeyHolderLibrary.init (KeyHolder.sol#62-71) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return (\n\n            _keyHolderData.keys[_key].purposes,\n\n            _keyHolderData.keys[_key].keyType,\n\n            _keyHolderData.keys[_key].key\n\n        );\n",
                    "message": "KeyHolderLibrary.getKey (KeyHolder.sol#73-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return (_keyHolderData.keys[_key].purposes);\n",
                    "message": "KeyHolderLibrary.getKeyPurposes (KeyHolder.sol#85-91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return _keyHolderData.keysByPurpose[_purpose];\n",
                    "message": "KeyHolderLibrary.getKeysByPurpose (KeyHolder.sol#93-99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n\n        _keyHolderData.keys[_key].keyType = _type;\n\n\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n\n\n        emit KeyAdded(_key, _purpose, _type);\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.addKey (KeyHolder.sol#101-119) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n\n        }\n\n\n\n        _keyHolderData.executionNonce++;\n\n        return _keyHolderData.executionNonce-1;\n",
                    "message": "KeyHolderLibrary.execute (KeyHolder.sol#157-174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n\n\n        // Remove purpose from key\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n\n        for (uint i = 0; i < purposes.length; i++) {\n\n            if (purposes[i] == _purpose) {\n\n                purposes[i] = purposes[purposes.length - 1];\n\n                delete purposes[purposes.length - 1];\n\n                purposes.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // If no more purposes, delete key\n\n        if (purposes.length == 0) {\n\n            delete _keyHolderData.keys[_key];\n\n        }\n\n\n\n        // Remove key from keysByPurpose\n\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n\n        for (uint j = 0; j < keys.length; j++) {\n\n            if (keys[j] == _key) {\n\n                keys[j] = keys[keys.length - 1];\n\n                delete keys[keys.length - 1];\n\n                keys.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.removeKey (KeyHolder.sol#176-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\n",
                    "message": "KeyHolder.getKeyPurposes (KeyHolder.sol#258-264) should be declared external\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n\n\n        emit Approved(_id, _approve);\n\n\n\n        if (_approve == true) {\n\n            _keyHolderData.executions[_id].approved = true;\n\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n\n            if (success) {\n\n                _keyHolderData.executions[_id].executed = true;\n\n                emit Executed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            } else {\n\n                emit ExecutionFailed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            }\n\n        } else {\n\n            _keyHolderData.executions[_id].approved = false;\n\n        }\n\n        return true;\n",
                    "message": "Low level call in KeyHolderLibrary.approve (KeyHolder.sol#121-155):\n\t-success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data,0) KeyHolder.sol#132\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.init (KeyHolder.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKey (KeyHolder.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKey (KeyHolder.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeyPurposes (KeyHolder.sol#85) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKeyPurposes (KeyHolder.sol#85) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeysByPurpose (KeyHolder.sol#93) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.getKeysByPurpose (KeyHolder.sol#93) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.addKey (KeyHolder.sol#101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.addKey (KeyHolder.sol#101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.addKey (KeyHolder.sol#101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_type' of KeyHolderLibrary.addKey (KeyHolder.sol#101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.approve (KeyHolder.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_id' of KeyHolderLibrary.approve (KeyHolder.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_approve' of KeyHolderLibrary.approve (KeyHolder.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.execute (KeyHolder.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_to' of KeyHolderLibrary.execute (KeyHolder.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_value' of KeyHolderLibrary.execute (KeyHolder.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_data' of KeyHolderLibrary.execute (KeyHolder.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.removeKey (KeyHolder.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.removeKey (KeyHolder.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.removeKey (KeyHolder.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.keyHasPurpose (KeyHolder.sol#217) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.keyHasPurpose (KeyHolder.sol#217) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.keyHasPurpose (KeyHolder.sol#217) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolder.getKey (KeyHolder.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolder.keyHasPurpose (KeyHolder.sol#302) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.keyHasPurpose (KeyHolder.sol#302) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.getKeysByPurpose (KeyHolder.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_key' of KeyHolder.addKey (KeyHolder.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_purpose' of KeyHolder.addKey (KeyHolder.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_type' of KeyHolder.addKey (KeyHolder.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolder.removeKey (KeyHolder.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.removeKey (KeyHolder.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_to' of KeyHolder.execute (KeyHolder.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_value' of KeyHolder.execute (KeyHolder.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_data' of KeyHolder.execute (KeyHolder.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
                    "message": "Parameter '_id' of KeyHolder.approve (KeyHolder.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
                    "message": "Parameter '_approve' of KeyHolder.approve (KeyHolder.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolder.getKeyPurposes (KeyHolder.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
                    "message": "ERC725.MANAGEMENT_KEY (KeyHolder.sol#8) is never used in KeyHolder\nERC725.ACTION_KEY (KeyHolder.sol#9) is never used in KeyHolder\nERC725.CLAIM_SIGNER_KEY (KeyHolder.sol#10) is never used in KeyHolder\nERC725.ENCRYPTION_KEY (KeyHolder.sol#11) is never used in KeyHolder\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] _keys)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] _keys)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ACTION_KEY = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant CLAIM_SIGNER_KEY = 3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ENCRYPTION_KEY = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    KeyHolderLibrary.KeyHolderData keyHolderData;\n",
                    "message": null
                }
            ]
        }
    },
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/identity/ERC735.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": "ERC735.getClaim (ERC735.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n",
                    "message": "ERC735.getClaimIdsByTopic (ERC735.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": "ERC735.addClaim (ERC735.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success);\n",
                    "message": "ERC735.removeClaim (ERC735.sol#25) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                }
            ]
        }
    },
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/identity/KeyHolderLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes[i] = purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys[j] = keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _keyHolderData.executionNonce++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_33"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool isThere;\n",
                    "message": "isThere in KeyHolderLibrary.keyHasPurpose (KeyHolderLibrary.sol#195) is a local variable never initialiazed\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n\n        public\n\n    {\n\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(1);\n\n        _keyHolderData.keys[_key].keyType = 1;\n\n        _keyHolderData.keysByPurpose[1].push(_key);\n\n        emit KeyAdded(_key, 1, 1);\n",
                    "message": "KeyHolderLibrary.init (KeyHolderLibrary.sol#35-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return (\n\n            _keyHolderData.keys[_key].purposes,\n\n            _keyHolderData.keys[_key].keyType,\n\n            _keyHolderData.keys[_key].key\n\n        );\n",
                    "message": "KeyHolderLibrary.getKey (KeyHolderLibrary.sol#46-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return (_keyHolderData.keys[_key].purposes);\n",
                    "message": "KeyHolderLibrary.getKeyPurposes (KeyHolderLibrary.sol#58-64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return _keyHolderData.keysByPurpose[_purpose];\n",
                    "message": "KeyHolderLibrary.getKeysByPurpose (KeyHolderLibrary.sol#66-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": 92,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n\n        _keyHolderData.keys[_key].keyType = _type;\n\n\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n\n\n        emit KeyAdded(_key, _purpose, _type);\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.addKey (KeyHolderLibrary.sol#74-92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n\n        }\n\n\n\n        _keyHolderData.executionNonce++;\n\n        return _keyHolderData.executionNonce-1;\n",
                    "message": "KeyHolderLibrary.execute (KeyHolderLibrary.sol#130-147) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 188,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n\n\n        // Remove purpose from key\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n\n        for (uint i = 0; i < purposes.length; i++) {\n\n            if (purposes[i] == _purpose) {\n\n                purposes[i] = purposes[purposes.length - 1];\n\n                delete purposes[purposes.length - 1];\n\n                purposes.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // If no more purposes, delete key\n\n        if (purposes.length == 0) {\n\n            delete _keyHolderData.keys[_key];\n\n        }\n\n\n\n        // Remove key from keysByPurpose\n\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n\n        for (uint j = 0; j < keys.length; j++) {\n\n            if (keys[j] == _key) {\n\n                keys[j] = keys[keys.length - 1];\n\n                delete keys[keys.length - 1];\n\n                keys.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.removeKey (KeyHolderLibrary.sol#149-188) should be declared external\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n\n\n        emit Approved(_id, _approve);\n\n\n\n        if (_approve == true) {\n\n            _keyHolderData.executions[_id].approved = true;\n\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n\n            if (success) {\n\n                _keyHolderData.executions[_id].executed = true;\n\n                emit Executed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            } else {\n\n                emit ExecutionFailed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            }\n\n        } else {\n\n            _keyHolderData.executions[_id].approved = false;\n\n        }\n\n        return true;\n",
                    "message": "Low level call in KeyHolderLibrary.approve (KeyHolderLibrary.sol#94-128):\n\t-success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data,0) KeyHolderLibrary.sol#105\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.init (KeyHolderLibrary.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKey (KeyHolderLibrary.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKey (KeyHolderLibrary.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeyPurposes (KeyHolderLibrary.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKeyPurposes (KeyHolderLibrary.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeysByPurpose (KeyHolderLibrary.sol#66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.getKeysByPurpose (KeyHolderLibrary.sol#66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.addKey (KeyHolderLibrary.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.addKey (KeyHolderLibrary.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.addKey (KeyHolderLibrary.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_type' of KeyHolderLibrary.addKey (KeyHolderLibrary.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.approve (KeyHolderLibrary.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_id' of KeyHolderLibrary.approve (KeyHolderLibrary.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_approve' of KeyHolderLibrary.approve (KeyHolderLibrary.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.execute (KeyHolderLibrary.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_to' of KeyHolderLibrary.execute (KeyHolderLibrary.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_value' of KeyHolderLibrary.execute (KeyHolderLibrary.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_data' of KeyHolderLibrary.execute (KeyHolderLibrary.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.removeKey (KeyHolderLibrary.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.removeKey (KeyHolderLibrary.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.removeKey (KeyHolderLibrary.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.keyHasPurpose (KeyHolderLibrary.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.keyHasPurpose (KeyHolderLibrary.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.keyHasPurpose (KeyHolderLibrary.sol#190) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] _keys)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": null
                }
            ]
        }
    },
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/identity/OriginIdentity.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes[i] = purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys[j] = keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.init(keyHolderData);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _keyHolderData.executionNonce++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            j++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_113"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool isThere;\n",
                    "message": "isThere in KeyHolderLibrary.keyHasPurpose (OriginIdentity.sol#249) is a local variable never initialiazed\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": 564,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId)\n\n        public\n\n        view\n\n        returns(\n\n            uint256 topic,\n\n            uint256 scheme,\n\n            address issuer,\n\n            bytes signature,\n\n            bytes data,\n\n            string uri\n\n        )\n\n    {\n\n        return ClaimHolderLibrary.getClaim(claims, _claimId);\n",
                    "message": "ClaimHolder.getClaim (OriginIdentity.sol#551-564) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": "ERC735.getClaim (OriginIdentity.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n",
                    "message": "ERC735.getClaimIdsByTopic (OriginIdentity.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": 572,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic)\n\n        public\n\n        view\n\n        returns(bytes32[] claimIds)\n\n    {\n\n        return claims.byTopic[_topic];\n",
                    "message": "ClaimHolder.getClaimIdsByTopic (OriginIdentity.sol#566-572) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "    function addClaim(\n\n        uint256 _topic,\n\n        uint256 _scheme,\n\n        address _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        string _uri\n\n    )\n\n        public\n\n        returns (bytes32 claimRequestId)\n\n    {\n\n        return ClaimHolderLibrary.addClaim(\n\n            keyHolderData,\n\n            claims,\n\n            _topic,\n\n            _scheme,\n\n            _issuer,\n\n            _signature,\n\n            _data,\n\n            _uri\n\n        );\n",
                    "message": "ClaimHolder.addClaim (OriginIdentity.sol#504-525) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": "ERC735.addClaim (OriginIdentity.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success);\n",
                    "message": "ERC735.removeClaim (OriginIdentity.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success) {\n\n        return ClaimHolderLibrary.removeClaim(keyHolderData, claims, _claimId);\n",
                    "message": "ClaimHolder.removeClaim (OriginIdentity.sol#547-549) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function getKey(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\n",
                    "message": "KeyHolder.getKey (OriginIdentity.sol#277-283) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
                    "message": "ERC725.getKey (OriginIdentity.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bool exists)\n\n    {\n\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\n",
                    "message": "KeyHolder.keyHasPurpose (OriginIdentity.sol#329-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\n",
                    "message": "ERC725.keyHasPurpose (OriginIdentity.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": 299,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\n",
                    "message": "KeyHolder.getKeysByPurpose (OriginIdentity.sol#293-299) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
                    "message": "ERC725.getKeysByPurpose (OriginIdentity.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\n",
                    "message": "KeyHolder.addKey (OriginIdentity.sol#301-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\n",
                    "message": "ERC725.addKey (OriginIdentity.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\n",
                    "message": "ERC725.removeKey (OriginIdentity.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\n",
                    "message": "KeyHolder.removeKey (OriginIdentity.sol#322-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
                    "message": "ERC725.execute (OriginIdentity.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\n",
                    "message": "KeyHolder.execute (OriginIdentity.sol#315-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\n",
                    "message": "KeyHolder.approve (OriginIdentity.sol#308-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve) public returns (bool success);\n",
                    "message": "ERC725.approve (OriginIdentity.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 98,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n\n        public\n\n    {\n\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(1);\n\n        _keyHolderData.keys[_key].keyType = 1;\n\n        _keyHolderData.keysByPurpose[1].push(_key);\n\n        emit KeyAdded(_key, 1, 1);\n",
                    "message": "KeyHolderLibrary.init (OriginIdentity.sol#89-98) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": 110,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return (\n\n            _keyHolderData.keys[_key].purposes,\n\n            _keyHolderData.keys[_key].keyType,\n\n            _keyHolderData.keys[_key].key\n\n        );\n",
                    "message": "KeyHolderLibrary.getKey (OriginIdentity.sol#100-110) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return (_keyHolderData.keys[_key].purposes);\n",
                    "message": "KeyHolderLibrary.getKeyPurposes (OriginIdentity.sol#112-118) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": 126,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return _keyHolderData.keysByPurpose[_purpose];\n",
                    "message": "KeyHolderLibrary.getKeysByPurpose (OriginIdentity.sol#120-126) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n\n        _keyHolderData.keys[_key].keyType = _type;\n\n\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n\n\n        emit KeyAdded(_key, _purpose, _type);\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.addKey (OriginIdentity.sol#128-146) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": 201,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n\n        }\n\n\n\n        _keyHolderData.executionNonce++;\n\n        return _keyHolderData.executionNonce-1;\n",
                    "message": "KeyHolderLibrary.execute (OriginIdentity.sol#184-201) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n\n\n        // Remove purpose from key\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n\n        for (uint i = 0; i < purposes.length; i++) {\n\n            if (purposes[i] == _purpose) {\n\n                purposes[i] = purposes[purposes.length - 1];\n\n                delete purposes[purposes.length - 1];\n\n                purposes.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // If no more purposes, delete key\n\n        if (purposes.length == 0) {\n\n            delete _keyHolderData.keys[_key];\n\n        }\n\n\n\n        // Remove key from keysByPurpose\n\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n\n        for (uint j = 0; j < keys.length; j++) {\n\n            if (keys[j] == _key) {\n\n                keys[j] = keys[keys.length - 1];\n\n                delete keys[keys.length - 1];\n\n                keys.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.removeKey (OriginIdentity.sol#203-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\n",
                    "message": "KeyHolder.getKeyPurposes (OriginIdentity.sol#285-291) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "    function addClaims(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        uint256[] _topic,\n\n        address[] _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        uint256[] _offsets\n\n    )\n\n        public\n\n    {\n\n        uint offset = 0;\n\n        for (uint16 i = 0; i < _topic.length; i++) {\n\n            addClaim(\n\n                _keyHolderData,\n\n                _claims,\n\n                _topic[i],\n\n                1,\n\n                _issuer[i],\n\n                getBytes(_signature, (i * 65), 65),\n\n                getBytes(_data, offset, _offsets[i]),\n\n                \"\"\n\n            );\n\n            offset += _offsets[i];\n\n        }\n",
                    "message": "ClaimHolderLibrary.addClaims (OriginIdentity.sol#404-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 455,
                    "vulnerability_code": "    function removeClaim(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        bytes32 _claimId\n\n    )\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n\n        }\n\n\n\n        emit ClaimRemoved(\n\n            _claimId,\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n\n\n\n        delete _claims.byId[_claimId];\n\n        return true;\n",
                    "message": "ClaimHolderLibrary.removeClaim (OriginIdentity.sol#431-455) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n\n        public\n\n        view\n\n        returns(\n\n          uint256 topic,\n\n          uint256 scheme,\n\n          address issuer,\n\n          bytes signature,\n\n          bytes data,\n\n          string uri\n\n        )\n\n    {\n\n        return (\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n",
                    "message": "ClaimHolderLibrary.getClaim (OriginIdentity.sol#457-477) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": 545,
                    "vulnerability_code": "    function addClaims(\n\n        uint256[] _topic,\n\n        address[] _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        uint256[] _offsets\n\n    )\n\n        public\n\n    {\n\n        ClaimHolderLibrary.addClaims(\n\n            keyHolderData,\n\n            claims,\n\n            _topic,\n\n            _issuer,\n\n            _signature,\n\n            _data,\n\n            _offsets\n\n        );\n",
                    "message": "ClaimHolder.addClaims (OriginIdentity.sol#527-545) should be declared external\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": 182,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n\n\n        emit Approved(_id, _approve);\n\n\n\n        if (_approve == true) {\n\n            _keyHolderData.executions[_id].approved = true;\n\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n\n            if (success) {\n\n                _keyHolderData.executions[_id].executed = true;\n\n                emit Executed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            } else {\n\n                emit ExecutionFailed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            }\n\n        } else {\n\n            _keyHolderData.executions[_id].approved = false;\n\n        }\n\n        return true;\n",
                    "message": "Low level call in KeyHolderLibrary.approve (OriginIdentity.sol#148-182):\n\t-success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data,0) OriginIdentity.sol#159\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.init (OriginIdentity.sol#89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKey (OriginIdentity.sol#100) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKey (OriginIdentity.sol#100) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeyPurposes (OriginIdentity.sol#112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKeyPurposes (OriginIdentity.sol#112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeysByPurpose (OriginIdentity.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.getKeysByPurpose (OriginIdentity.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.addKey (OriginIdentity.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.addKey (OriginIdentity.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.addKey (OriginIdentity.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_type' of KeyHolderLibrary.addKey (OriginIdentity.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.approve (OriginIdentity.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_id' of KeyHolderLibrary.approve (OriginIdentity.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_approve' of KeyHolderLibrary.approve (OriginIdentity.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.execute (OriginIdentity.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_to' of KeyHolderLibrary.execute (OriginIdentity.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_value' of KeyHolderLibrary.execute (OriginIdentity.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_data' of KeyHolderLibrary.execute (OriginIdentity.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.removeKey (OriginIdentity.sol#203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.removeKey (OriginIdentity.sol#203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.removeKey (OriginIdentity.sol#203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.keyHasPurpose (OriginIdentity.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.keyHasPurpose (OriginIdentity.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.keyHasPurpose (OriginIdentity.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolder.getKey (OriginIdentity.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolder.keyHasPurpose (OriginIdentity.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.keyHasPurpose (OriginIdentity.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.getKeysByPurpose (OriginIdentity.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_key' of KeyHolder.addKey (OriginIdentity.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_purpose' of KeyHolder.addKey (OriginIdentity.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_type' of KeyHolder.addKey (OriginIdentity.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolder.removeKey (OriginIdentity.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.removeKey (OriginIdentity.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_to' of KeyHolder.execute (OriginIdentity.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_value' of KeyHolder.execute (OriginIdentity.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_data' of KeyHolder.execute (OriginIdentity.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
                    "message": "Parameter '_id' of KeyHolder.approve (OriginIdentity.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
                    "message": "Parameter '_approve' of KeyHolder.approve (OriginIdentity.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolder.getKeyPurposes (OriginIdentity.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaim (OriginIdentity.sol#362) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.addClaim (OriginIdentity.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolderLibrary.addClaim (OriginIdentity.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _scheme,\n",
                    "message": "Parameter '_scheme' of ClaimHolderLibrary.addClaim (OriginIdentity.sol#365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaim (OriginIdentity.sol#366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolderLibrary.addClaim (OriginIdentity.sol#367) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolderLibrary.addClaim (OriginIdentity.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": "Parameter '_uri' of ClaimHolderLibrary.addClaim (OriginIdentity.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaims (OriginIdentity.sol#405) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.addClaims (OriginIdentity.sol#406) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolderLibrary.addClaims (OriginIdentity.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaims (OriginIdentity.sol#408) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolderLibrary.addClaims (OriginIdentity.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolderLibrary.addClaims (OriginIdentity.sol#410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": "Parameter '_offsets' of ClaimHolderLibrary.addClaims (OriginIdentity.sol#411) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.removeClaim (OriginIdentity.sol#432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.removeClaim (OriginIdentity.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _claimId\n",
                    "message": "Parameter '_claimId' of ClaimHolderLibrary.removeClaim (OriginIdentity.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.getClaim (OriginIdentity.sol#457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
                    "message": "Parameter '_claimId' of ClaimHolderLibrary.getClaim (OriginIdentity.sol#457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_str' of ClaimHolderLibrary.getBytes (OriginIdentity.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_offset' of ClaimHolderLibrary.getBytes (OriginIdentity.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_length' of ClaimHolderLibrary.getBytes (OriginIdentity.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId)\n",
                    "message": "Parameter '_claimId' of ClaimHolder.getClaim (OriginIdentity.sol#551) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic)\n",
                    "message": "Parameter '_topic' of ClaimHolder.getClaimIdsByTopic (OriginIdentity.sol#566) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolder.addClaim (OriginIdentity.sol#505) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _scheme,\n",
                    "message": "Parameter '_scheme' of ClaimHolder.addClaim (OriginIdentity.sol#506) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolder.addClaim (OriginIdentity.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolder.addClaim (OriginIdentity.sol#508) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolder.addClaim (OriginIdentity.sol#509) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": "Parameter '_uri' of ClaimHolder.addClaim (OriginIdentity.sol#510) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success) {\n",
                    "message": "Parameter '_claimId' of ClaimHolder.removeClaim (OriginIdentity.sol#547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolder.addClaims (OriginIdentity.sol#528) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolder.addClaims (OriginIdentity.sol#529) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolder.addClaims (OriginIdentity.sol#530) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolder.addClaims (OriginIdentity.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": "Parameter '_offsets' of ClaimHolder.addClaims (OriginIdentity.sol#532) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
                    "message": "ERC725.MANAGEMENT_KEY (OriginIdentity.sol#35) is never used in OriginIdentity\nERC725.ACTION_KEY (OriginIdentity.sol#36) is never used in OriginIdentity\nERC725.CLAIM_SIGNER_KEY (OriginIdentity.sol#37) is never used in OriginIdentity\nERC725.ENCRYPTION_KEY (OriginIdentity.sol#38) is never used in OriginIdentity\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] _keys)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] _keys)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          bytes signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          bytes data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          string uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            bytes signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            bytes data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            string uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] claimIds)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ACTION_KEY = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant CLAIM_SIGNER_KEY = 3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ENCRYPTION_KEY = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    KeyHolderLibrary.KeyHolderData keyHolderData;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ClaimHolderLibrary.Claims claims;\n",
                    "message": null
                }
            ]
        }
    },
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/identity/ClaimVerifier.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes[i] = purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys[j] = keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.init(keyHolderData);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _trustedClaimHolder) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        trustedClaimHolder = ClaimHolder(_trustedClaimHolder);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _keyHolderData.executionNonce++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            j++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_119"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": 661,
                    "vulnerability_code": "    function getRecoveredAddress(bytes sig, bytes32 dataHash)\n\n        public\n\n        pure\n\n        returns (address addr)\n\n    {\n\n        bytes32 ra;\n\n        bytes32 sa;\n\n        uint8 va;\n\n\n\n        // Check the signature length\n\n        if (sig.length != 65) {\n\n            return (0);\n\n        }\n\n\n\n        // Divide the signature in r, s and v variables\n\n        assembly {\n\n            ra := mload(add(sig, 32))\n\n            sa := mload(add(sig, 64))\n\n            va := byte(0, mload(add(sig, 96)))\n\n        }\n\n\n\n        if (va < 27) {\n\n            va += 27;\n\n        }\n\n\n\n        address recoveredAddress = ecrecover(dataHash, va, ra, sa);\n\n\n\n        return (recoveredAddress);\n",
                    "message": "ClaimVerifier.getRecoveredAddress (ClaimVerifier.sol#633-661) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool isThere;\n",
                    "message": "isThere in KeyHolderLibrary.keyHasPurpose (ClaimVerifier.sol#249) is a local variable never initialiazed\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": 661,
                    "vulnerability_code": "    function getRecoveredAddress(bytes sig, bytes32 dataHash)\n\n        public\n\n        pure\n\n        returns (address addr)\n\n    {\n\n        bytes32 ra;\n\n        bytes32 sa;\n\n        uint8 va;\n\n\n\n        // Check the signature length\n\n        if (sig.length != 65) {\n\n            return (0);\n\n        }\n\n\n\n        // Divide the signature in r, s and v variables\n\n        assembly {\n\n            ra := mload(add(sig, 32))\n\n            sa := mload(add(sig, 64))\n\n            va := byte(0, mload(add(sig, 96)))\n\n        }\n\n\n\n        if (va < 27) {\n\n            va += 27;\n\n        }\n\n\n\n        address recoveredAddress = ecrecover(dataHash, va, ra, sa);\n\n\n\n        return (recoveredAddress);\n",
                    "message": "ClaimVerifier.getRecoveredAddress uses assembly (ClaimVerifier.sol#633-661)\n\t- ClaimVerifier.sol#648-654\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": 564,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId)\n\n        public\n\n        view\n\n        returns(\n\n            uint256 topic,\n\n            uint256 scheme,\n\n            address issuer,\n\n            bytes signature,\n\n            bytes data,\n\n            string uri\n\n        )\n\n    {\n\n        return ClaimHolderLibrary.getClaim(claims, _claimId);\n",
                    "message": "ClaimHolder.getClaim (ClaimVerifier.sol#551-564) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": "ERC735.getClaim (ClaimVerifier.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": 572,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic)\n\n        public\n\n        view\n\n        returns(bytes32[] claimIds)\n\n    {\n\n        return claims.byTopic[_topic];\n",
                    "message": "ClaimHolder.getClaimIdsByTopic (ClaimVerifier.sol#566-572) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n",
                    "message": "ERC735.getClaimIdsByTopic (ClaimVerifier.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": "ERC735.addClaim (ClaimVerifier.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "    function addClaim(\n\n        uint256 _topic,\n\n        uint256 _scheme,\n\n        address _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        string _uri\n\n    )\n\n        public\n\n        returns (bytes32 claimRequestId)\n\n    {\n\n        return ClaimHolderLibrary.addClaim(\n\n            keyHolderData,\n\n            claims,\n\n            _topic,\n\n            _scheme,\n\n            _issuer,\n\n            _signature,\n\n            _data,\n\n            _uri\n\n        );\n",
                    "message": "ClaimHolder.addClaim (ClaimVerifier.sol#504-525) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success);\n",
                    "message": "ERC735.removeClaim (ClaimVerifier.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success) {\n\n        return ClaimHolderLibrary.removeClaim(keyHolderData, claims, _claimId);\n",
                    "message": "ClaimHolder.removeClaim (ClaimVerifier.sol#547-549) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function getKey(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\n",
                    "message": "KeyHolder.getKey (ClaimVerifier.sol#277-283) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
                    "message": "ERC725.getKey (ClaimVerifier.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bool exists)\n\n    {\n\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\n",
                    "message": "KeyHolder.keyHasPurpose (ClaimVerifier.sol#329-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\n",
                    "message": "ERC725.keyHasPurpose (ClaimVerifier.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
                    "message": "ERC725.getKeysByPurpose (ClaimVerifier.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": 299,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\n",
                    "message": "KeyHolder.getKeysByPurpose (ClaimVerifier.sol#293-299) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\n",
                    "message": "KeyHolder.addKey (ClaimVerifier.sol#301-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\n",
                    "message": "ERC725.addKey (ClaimVerifier.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\n",
                    "message": "ERC725.removeKey (ClaimVerifier.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\n",
                    "message": "KeyHolder.removeKey (ClaimVerifier.sol#322-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\n",
                    "message": "KeyHolder.execute (ClaimVerifier.sol#315-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
                    "message": "ERC725.execute (ClaimVerifier.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\n",
                    "message": "KeyHolder.approve (ClaimVerifier.sol#308-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve) public returns (bool success);\n",
                    "message": "ERC725.approve (ClaimVerifier.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 98,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n\n        public\n\n    {\n\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(1);\n\n        _keyHolderData.keys[_key].keyType = 1;\n\n        _keyHolderData.keysByPurpose[1].push(_key);\n\n        emit KeyAdded(_key, 1, 1);\n",
                    "message": "KeyHolderLibrary.init (ClaimVerifier.sol#89-98) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": 110,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return (\n\n            _keyHolderData.keys[_key].purposes,\n\n            _keyHolderData.keys[_key].keyType,\n\n            _keyHolderData.keys[_key].key\n\n        );\n",
                    "message": "KeyHolderLibrary.getKey (ClaimVerifier.sol#100-110) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return (_keyHolderData.keys[_key].purposes);\n",
                    "message": "KeyHolderLibrary.getKeyPurposes (ClaimVerifier.sol#112-118) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": 126,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return _keyHolderData.keysByPurpose[_purpose];\n",
                    "message": "KeyHolderLibrary.getKeysByPurpose (ClaimVerifier.sol#120-126) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n\n        _keyHolderData.keys[_key].keyType = _type;\n\n\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n\n\n        emit KeyAdded(_key, _purpose, _type);\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.addKey (ClaimVerifier.sol#128-146) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": 201,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n\n        }\n\n\n\n        _keyHolderData.executionNonce++;\n\n        return _keyHolderData.executionNonce-1;\n",
                    "message": "KeyHolderLibrary.execute (ClaimVerifier.sol#184-201) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n\n\n        // Remove purpose from key\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n\n        for (uint i = 0; i < purposes.length; i++) {\n\n            if (purposes[i] == _purpose) {\n\n                purposes[i] = purposes[purposes.length - 1];\n\n                delete purposes[purposes.length - 1];\n\n                purposes.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // If no more purposes, delete key\n\n        if (purposes.length == 0) {\n\n            delete _keyHolderData.keys[_key];\n\n        }\n\n\n\n        // Remove key from keysByPurpose\n\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n\n        for (uint j = 0; j < keys.length; j++) {\n\n            if (keys[j] == _key) {\n\n                keys[j] = keys[keys.length - 1];\n\n                delete keys[keys.length - 1];\n\n                keys.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.removeKey (ClaimVerifier.sol#203-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\n",
                    "message": "KeyHolder.getKeyPurposes (ClaimVerifier.sol#285-291) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "    function addClaims(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        uint256[] _topic,\n\n        address[] _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        uint256[] _offsets\n\n    )\n\n        public\n\n    {\n\n        uint offset = 0;\n\n        for (uint16 i = 0; i < _topic.length; i++) {\n\n            addClaim(\n\n                _keyHolderData,\n\n                _claims,\n\n                _topic[i],\n\n                1,\n\n                _issuer[i],\n\n                getBytes(_signature, (i * 65), 65),\n\n                getBytes(_data, offset, _offsets[i]),\n\n                \"\"\n\n            );\n\n            offset += _offsets[i];\n\n        }\n",
                    "message": "ClaimHolderLibrary.addClaims (ClaimVerifier.sol#404-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 455,
                    "vulnerability_code": "    function removeClaim(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        bytes32 _claimId\n\n    )\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n\n        }\n\n\n\n        emit ClaimRemoved(\n\n            _claimId,\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n\n\n\n        delete _claims.byId[_claimId];\n\n        return true;\n",
                    "message": "ClaimHolderLibrary.removeClaim (ClaimVerifier.sol#431-455) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n\n        public\n\n        view\n\n        returns(\n\n          uint256 topic,\n\n          uint256 scheme,\n\n          address issuer,\n\n          bytes signature,\n\n          bytes data,\n\n          string uri\n\n        )\n\n    {\n\n        return (\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n",
                    "message": "ClaimHolderLibrary.getClaim (ClaimVerifier.sol#457-477) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": 545,
                    "vulnerability_code": "    function addClaims(\n\n        uint256[] _topic,\n\n        address[] _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        uint256[] _offsets\n\n    )\n\n        public\n\n    {\n\n        ClaimHolderLibrary.addClaims(\n\n            keyHolderData,\n\n            claims,\n\n            _topic,\n\n            _issuer,\n\n            _signature,\n\n            _data,\n\n            _offsets\n\n        );\n",
                    "message": "ClaimHolder.addClaims (ClaimVerifier.sol#527-545) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": 601,
                    "vulnerability_code": "    function checkClaim(ClaimHolder _identity, uint256 topic)\n\n        public\n\n        returns (bool claimValid)\n\n    {\n\n        if (claimIsValid(_identity, topic)) {\n\n            emit ClaimValid(_identity, topic);\n\n            return true;\n\n        } else {\n\n            emit ClaimInvalid(_identity, topic);\n\n            return false;\n\n        }\n",
                    "message": "ClaimVerifier.checkClaim (ClaimVerifier.sol#590-601) should be declared external\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": 182,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n\n\n        emit Approved(_id, _approve);\n\n\n\n        if (_approve == true) {\n\n            _keyHolderData.executions[_id].approved = true;\n\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n\n            if (success) {\n\n                _keyHolderData.executions[_id].executed = true;\n\n                emit Executed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            } else {\n\n                emit ExecutionFailed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            }\n\n        } else {\n\n            _keyHolderData.executions[_id].approved = false;\n\n        }\n\n        return true;\n",
                    "message": "Low level call in KeyHolderLibrary.approve (ClaimVerifier.sol#148-182):\n\t-success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data,0) ClaimVerifier.sol#159\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.init (ClaimVerifier.sol#89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKey (ClaimVerifier.sol#100) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKey (ClaimVerifier.sol#100) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeyPurposes (ClaimVerifier.sol#112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKeyPurposes (ClaimVerifier.sol#112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeysByPurpose (ClaimVerifier.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.getKeysByPurpose (ClaimVerifier.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.addKey (ClaimVerifier.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.addKey (ClaimVerifier.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.addKey (ClaimVerifier.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_type' of KeyHolderLibrary.addKey (ClaimVerifier.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.approve (ClaimVerifier.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_id' of KeyHolderLibrary.approve (ClaimVerifier.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_approve' of KeyHolderLibrary.approve (ClaimVerifier.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.execute (ClaimVerifier.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_to' of KeyHolderLibrary.execute (ClaimVerifier.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_value' of KeyHolderLibrary.execute (ClaimVerifier.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_data' of KeyHolderLibrary.execute (ClaimVerifier.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.removeKey (ClaimVerifier.sol#203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.removeKey (ClaimVerifier.sol#203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.removeKey (ClaimVerifier.sol#203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.keyHasPurpose (ClaimVerifier.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.keyHasPurpose (ClaimVerifier.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.keyHasPurpose (ClaimVerifier.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolder.getKey (ClaimVerifier.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolder.keyHasPurpose (ClaimVerifier.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.keyHasPurpose (ClaimVerifier.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.getKeysByPurpose (ClaimVerifier.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_key' of KeyHolder.addKey (ClaimVerifier.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_purpose' of KeyHolder.addKey (ClaimVerifier.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_type' of KeyHolder.addKey (ClaimVerifier.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolder.removeKey (ClaimVerifier.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.removeKey (ClaimVerifier.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_to' of KeyHolder.execute (ClaimVerifier.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_value' of KeyHolder.execute (ClaimVerifier.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_data' of KeyHolder.execute (ClaimVerifier.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
                    "message": "Parameter '_id' of KeyHolder.approve (ClaimVerifier.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
                    "message": "Parameter '_approve' of KeyHolder.approve (ClaimVerifier.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolder.getKeyPurposes (ClaimVerifier.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaim (ClaimVerifier.sol#362) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.addClaim (ClaimVerifier.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolderLibrary.addClaim (ClaimVerifier.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _scheme,\n",
                    "message": "Parameter '_scheme' of ClaimHolderLibrary.addClaim (ClaimVerifier.sol#365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaim (ClaimVerifier.sol#366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolderLibrary.addClaim (ClaimVerifier.sol#367) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolderLibrary.addClaim (ClaimVerifier.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": "Parameter '_uri' of ClaimHolderLibrary.addClaim (ClaimVerifier.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaims (ClaimVerifier.sol#405) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.addClaims (ClaimVerifier.sol#406) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolderLibrary.addClaims (ClaimVerifier.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaims (ClaimVerifier.sol#408) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolderLibrary.addClaims (ClaimVerifier.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolderLibrary.addClaims (ClaimVerifier.sol#410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": "Parameter '_offsets' of ClaimHolderLibrary.addClaims (ClaimVerifier.sol#411) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.removeClaim (ClaimVerifier.sol#432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.removeClaim (ClaimVerifier.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _claimId\n",
                    "message": "Parameter '_claimId' of ClaimHolderLibrary.removeClaim (ClaimVerifier.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.getClaim (ClaimVerifier.sol#457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
                    "message": "Parameter '_claimId' of ClaimHolderLibrary.getClaim (ClaimVerifier.sol#457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_str' of ClaimHolderLibrary.getBytes (ClaimVerifier.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_offset' of ClaimHolderLibrary.getBytes (ClaimVerifier.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_length' of ClaimHolderLibrary.getBytes (ClaimVerifier.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId)\n",
                    "message": "Parameter '_claimId' of ClaimHolder.getClaim (ClaimVerifier.sol#551) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic)\n",
                    "message": "Parameter '_topic' of ClaimHolder.getClaimIdsByTopic (ClaimVerifier.sol#566) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolder.addClaim (ClaimVerifier.sol#505) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _scheme,\n",
                    "message": "Parameter '_scheme' of ClaimHolder.addClaim (ClaimVerifier.sol#506) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolder.addClaim (ClaimVerifier.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolder.addClaim (ClaimVerifier.sol#508) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolder.addClaim (ClaimVerifier.sol#509) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": "Parameter '_uri' of ClaimHolder.addClaim (ClaimVerifier.sol#510) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success) {\n",
                    "message": "Parameter '_claimId' of ClaimHolder.removeClaim (ClaimVerifier.sol#547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolder.addClaims (ClaimVerifier.sol#528) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolder.addClaims (ClaimVerifier.sol#529) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolder.addClaims (ClaimVerifier.sol#530) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolder.addClaims (ClaimVerifier.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": "Parameter '_offsets' of ClaimHolder.addClaims (ClaimVerifier.sol#532) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _trustedClaimHolder) public {\n",
                    "message": "Parameter '_trustedClaimHolder' of ClaimVerifier. (ClaimVerifier.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function checkClaim(ClaimHolder _identity, uint256 topic)\n",
                    "message": "Parameter '_identity' of ClaimVerifier.checkClaim (ClaimVerifier.sol#590) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimIsValid(ClaimHolder _identity, uint256 topic)\n",
                    "message": "Parameter '_identity' of ClaimVerifier.claimIsValid (ClaimVerifier.sol#603) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
                    "message": "ERC725.MANAGEMENT_KEY (ClaimVerifier.sol#35) is never used in ClaimHolder\nERC725.ACTION_KEY (ClaimVerifier.sol#36) is never used in ClaimHolder\nERC725.CLAIM_SIGNER_KEY (ClaimVerifier.sol#37) is never used in ClaimHolder\nERC725.ENCRYPTION_KEY (ClaimVerifier.sol#38) is never used in ClaimHolder\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRecoveredAddress(bytes sig, bytes32 dataHash)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] _keys)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] _keys)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          bytes signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          bytes data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          string uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            bytes signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            bytes data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            string uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] claimIds)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getRecoveredAddress(bytes sig, bytes32 dataHash)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ACTION_KEY = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant CLAIM_SIGNER_KEY = 3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ENCRYPTION_KEY = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    KeyHolderLibrary.KeyHolderData keyHolderData;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ClaimHolderLibrary.Claims claims;\n",
                    "message": null
                }
            ]
        }
    },
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/identity/ClaimHolderLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes[i] = purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys[j] = keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _keyHolderData.executionNonce++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            j++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_59"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool isThere;\n",
                    "message": "isThere in KeyHolderLibrary.keyHasPurpose (ClaimHolderLibrary.sol#195) is a local variable never initialiazed\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n\n        public\n\n    {\n\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(1);\n\n        _keyHolderData.keys[_key].keyType = 1;\n\n        _keyHolderData.keysByPurpose[1].push(_key);\n\n        emit KeyAdded(_key, 1, 1);\n",
                    "message": "KeyHolderLibrary.init (ClaimHolderLibrary.sol#35-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return (\n\n            _keyHolderData.keys[_key].purposes,\n\n            _keyHolderData.keys[_key].keyType,\n\n            _keyHolderData.keys[_key].key\n\n        );\n",
                    "message": "KeyHolderLibrary.getKey (ClaimHolderLibrary.sol#46-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return (_keyHolderData.keys[_key].purposes);\n",
                    "message": "KeyHolderLibrary.getKeyPurposes (ClaimHolderLibrary.sol#58-64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return _keyHolderData.keysByPurpose[_purpose];\n",
                    "message": "KeyHolderLibrary.getKeysByPurpose (ClaimHolderLibrary.sol#66-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": 92,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n\n        _keyHolderData.keys[_key].keyType = _type;\n\n\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n\n\n        emit KeyAdded(_key, _purpose, _type);\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.addKey (ClaimHolderLibrary.sol#74-92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n\n        }\n\n\n\n        _keyHolderData.executionNonce++;\n\n        return _keyHolderData.executionNonce-1;\n",
                    "message": "KeyHolderLibrary.execute (ClaimHolderLibrary.sol#130-147) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 188,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n\n\n        // Remove purpose from key\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n\n        for (uint i = 0; i < purposes.length; i++) {\n\n            if (purposes[i] == _purpose) {\n\n                purposes[i] = purposes[purposes.length - 1];\n\n                delete purposes[purposes.length - 1];\n\n                purposes.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // If no more purposes, delete key\n\n        if (purposes.length == 0) {\n\n            delete _keyHolderData.keys[_key];\n\n        }\n\n\n\n        // Remove key from keysByPurpose\n\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n\n        for (uint j = 0; j < keys.length; j++) {\n\n            if (keys[j] == _key) {\n\n                keys[j] = keys[keys.length - 1];\n\n                delete keys[keys.length - 1];\n\n                keys.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.removeKey (ClaimHolderLibrary.sol#149-188) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": 301,
                    "vulnerability_code": "    function addClaims(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        uint256[] _topic,\n\n        address[] _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        uint256[] _offsets\n\n    )\n\n        public\n\n    {\n\n        uint offset = 0;\n\n        for (uint16 i = 0; i < _topic.length; i++) {\n\n            addClaim(\n\n                _keyHolderData,\n\n                _claims,\n\n                _topic[i],\n\n                1,\n\n                _issuer[i],\n\n                getBytes(_signature, (i * 65), 65),\n\n                getBytes(_data, offset, _offsets[i]),\n\n                \"\"\n\n            );\n\n            offset += _offsets[i];\n\n        }\n",
                    "message": "ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#276-301) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "    function removeClaim(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        bytes32 _claimId\n\n    )\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n\n        }\n\n\n\n        emit ClaimRemoved(\n\n            _claimId,\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n\n\n\n        delete _claims.byId[_claimId];\n\n        return true;\n",
                    "message": "ClaimHolderLibrary.removeClaim (ClaimHolderLibrary.sol#303-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 349,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n\n        public\n\n        view\n\n        returns(\n\n          uint256 topic,\n\n          uint256 scheme,\n\n          address issuer,\n\n          bytes signature,\n\n          bytes data,\n\n          string uri\n\n        )\n\n    {\n\n        return (\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n",
                    "message": "ClaimHolderLibrary.getClaim (ClaimHolderLibrary.sol#329-349) should be declared external\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n\n\n        emit Approved(_id, _approve);\n\n\n\n        if (_approve == true) {\n\n            _keyHolderData.executions[_id].approved = true;\n\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n\n            if (success) {\n\n                _keyHolderData.executions[_id].executed = true;\n\n                emit Executed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            } else {\n\n                emit ExecutionFailed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            }\n\n        } else {\n\n            _keyHolderData.executions[_id].approved = false;\n\n        }\n\n        return true;\n",
                    "message": "Low level call in KeyHolderLibrary.approve (ClaimHolderLibrary.sol#94-128):\n\t-success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data,0) ClaimHolderLibrary.sol#105\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.init (ClaimHolderLibrary.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKey (ClaimHolderLibrary.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKey (ClaimHolderLibrary.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeyPurposes (ClaimHolderLibrary.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKeyPurposes (ClaimHolderLibrary.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeysByPurpose (ClaimHolderLibrary.sol#66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.getKeysByPurpose (ClaimHolderLibrary.sol#66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.addKey (ClaimHolderLibrary.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.addKey (ClaimHolderLibrary.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.addKey (ClaimHolderLibrary.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_type' of KeyHolderLibrary.addKey (ClaimHolderLibrary.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.approve (ClaimHolderLibrary.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_id' of KeyHolderLibrary.approve (ClaimHolderLibrary.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_approve' of KeyHolderLibrary.approve (ClaimHolderLibrary.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.execute (ClaimHolderLibrary.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_to' of KeyHolderLibrary.execute (ClaimHolderLibrary.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_value' of KeyHolderLibrary.execute (ClaimHolderLibrary.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_data' of KeyHolderLibrary.execute (ClaimHolderLibrary.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.removeKey (ClaimHolderLibrary.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.removeKey (ClaimHolderLibrary.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.removeKey (ClaimHolderLibrary.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.keyHasPurpose (ClaimHolderLibrary.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.keyHasPurpose (ClaimHolderLibrary.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.keyHasPurpose (ClaimHolderLibrary.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#234) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#235) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _scheme,\n",
                    "message": "Parameter '_scheme' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#237) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#238) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#239) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": "Parameter '_uri' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#278) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": "Parameter '_offsets' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.removeClaim (ClaimHolderLibrary.sol#304) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.removeClaim (ClaimHolderLibrary.sol#305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _claimId\n",
                    "message": "Parameter '_claimId' of ClaimHolderLibrary.removeClaim (ClaimHolderLibrary.sol#306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.getClaim (ClaimHolderLibrary.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
                    "message": "Parameter '_claimId' of ClaimHolderLibrary.getClaim (ClaimHolderLibrary.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_str' of ClaimHolderLibrary.getBytes (ClaimHolderLibrary.sol#351) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_offset' of ClaimHolderLibrary.getBytes (ClaimHolderLibrary.sol#351) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_length' of ClaimHolderLibrary.getBytes (ClaimHolderLibrary.sol#351) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] _keys)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          bytes signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          bytes data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          string uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes)\n",
                    "message": null
                }
            ]
        }
    },
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/identity/ClaimHolder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes[i] = purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete purposes[purposes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys[j] = keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete keys[keys.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.init(keyHolderData);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _keyHolderData.executionNonce++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            j++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_113"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool isThere;\n",
                    "message": "isThere in KeyHolderLibrary.keyHasPurpose (ClaimHolder.sol#249) is a local variable never initialiazed\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": 564,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId)\n\n        public\n\n        view\n\n        returns(\n\n            uint256 topic,\n\n            uint256 scheme,\n\n            address issuer,\n\n            bytes signature,\n\n            bytes data,\n\n            string uri\n\n        )\n\n    {\n\n        return ClaimHolderLibrary.getClaim(claims, _claimId);\n",
                    "message": "ClaimHolder.getClaim (ClaimHolder.sol#551-564) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": "ERC735.getClaim (ClaimHolder.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n",
                    "message": "ERC735.getClaimIdsByTopic (ClaimHolder.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": 572,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic)\n\n        public\n\n        view\n\n        returns(bytes32[] claimIds)\n\n    {\n\n        return claims.byTopic[_topic];\n",
                    "message": "ClaimHolder.getClaimIdsByTopic (ClaimHolder.sol#566-572) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": "ERC735.addClaim (ClaimHolder.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "    function addClaim(\n\n        uint256 _topic,\n\n        uint256 _scheme,\n\n        address _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        string _uri\n\n    )\n\n        public\n\n        returns (bytes32 claimRequestId)\n\n    {\n\n        return ClaimHolderLibrary.addClaim(\n\n            keyHolderData,\n\n            claims,\n\n            _topic,\n\n            _scheme,\n\n            _issuer,\n\n            _signature,\n\n            _data,\n\n            _uri\n\n        );\n",
                    "message": "ClaimHolder.addClaim (ClaimHolder.sol#504-525) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success);\n",
                    "message": "ERC735.removeClaim (ClaimHolder.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success) {\n\n        return ClaimHolderLibrary.removeClaim(keyHolderData, claims, _claimId);\n",
                    "message": "ClaimHolder.removeClaim (ClaimHolder.sol#547-549) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function getKey(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\n",
                    "message": "KeyHolder.getKey (ClaimHolder.sol#277-283) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
                    "message": "ERC725.getKey (ClaimHolder.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bool exists)\n\n    {\n\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\n",
                    "message": "KeyHolder.keyHasPurpose (ClaimHolder.sol#329-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\n",
                    "message": "ERC725.keyHasPurpose (ClaimHolder.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
                    "message": "ERC725.getKeysByPurpose (ClaimHolder.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": 299,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\n",
                    "message": "KeyHolder.getKeysByPurpose (ClaimHolder.sol#293-299) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\n",
                    "message": "ERC725.addKey (ClaimHolder.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\n",
                    "message": "KeyHolder.addKey (ClaimHolder.sol#301-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\n",
                    "message": "KeyHolder.removeKey (ClaimHolder.sol#322-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\n",
                    "message": "ERC725.removeKey (ClaimHolder.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\n",
                    "message": "KeyHolder.execute (ClaimHolder.sol#315-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
                    "message": "ERC725.execute (ClaimHolder.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\n",
                    "message": "KeyHolder.approve (ClaimHolder.sol#308-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve) public returns (bool success);\n",
                    "message": "ERC725.approve (ClaimHolder.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 98,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n\n        public\n\n    {\n\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(1);\n\n        _keyHolderData.keys[_key].keyType = 1;\n\n        _keyHolderData.keysByPurpose[1].push(_key);\n\n        emit KeyAdded(_key, 1, 1);\n",
                    "message": "KeyHolderLibrary.init (ClaimHolder.sol#89-98) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": 110,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return (\n\n            _keyHolderData.keys[_key].purposes,\n\n            _keyHolderData.keys[_key].keyType,\n\n            _keyHolderData.keys[_key].key\n\n        );\n",
                    "message": "KeyHolderLibrary.getKey (ClaimHolder.sol#100-110) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return (_keyHolderData.keys[_key].purposes);\n",
                    "message": "KeyHolderLibrary.getKeyPurposes (ClaimHolder.sol#112-118) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": 126,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return _keyHolderData.keysByPurpose[_purpose];\n",
                    "message": "KeyHolderLibrary.getKeysByPurpose (ClaimHolder.sol#120-126) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n\n        _keyHolderData.keys[_key].keyType = _type;\n\n\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n\n\n        emit KeyAdded(_key, _purpose, _type);\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.addKey (ClaimHolder.sol#128-146) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": 201,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n\n        }\n\n\n\n        _keyHolderData.executionNonce++;\n\n        return _keyHolderData.executionNonce-1;\n",
                    "message": "KeyHolderLibrary.execute (ClaimHolder.sol#184-201) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n\n\n        // Remove purpose from key\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n\n        for (uint i = 0; i < purposes.length; i++) {\n\n            if (purposes[i] == _purpose) {\n\n                purposes[i] = purposes[purposes.length - 1];\n\n                delete purposes[purposes.length - 1];\n\n                purposes.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // If no more purposes, delete key\n\n        if (purposes.length == 0) {\n\n            delete _keyHolderData.keys[_key];\n\n        }\n\n\n\n        // Remove key from keysByPurpose\n\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n\n        for (uint j = 0; j < keys.length; j++) {\n\n            if (keys[j] == _key) {\n\n                keys[j] = keys[keys.length - 1];\n\n                delete keys[keys.length - 1];\n\n                keys.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        return true;\n",
                    "message": "KeyHolderLibrary.removeKey (ClaimHolder.sol#203-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\n",
                    "message": "KeyHolder.getKeyPurposes (ClaimHolder.sol#285-291) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "    function addClaims(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        uint256[] _topic,\n\n        address[] _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        uint256[] _offsets\n\n    )\n\n        public\n\n    {\n\n        uint offset = 0;\n\n        for (uint16 i = 0; i < _topic.length; i++) {\n\n            addClaim(\n\n                _keyHolderData,\n\n                _claims,\n\n                _topic[i],\n\n                1,\n\n                _issuer[i],\n\n                getBytes(_signature, (i * 65), 65),\n\n                getBytes(_data, offset, _offsets[i]),\n\n                \"\"\n\n            );\n\n            offset += _offsets[i];\n\n        }\n",
                    "message": "ClaimHolderLibrary.addClaims (ClaimHolder.sol#404-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 455,
                    "vulnerability_code": "    function removeClaim(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        bytes32 _claimId\n\n    )\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n\n        }\n\n\n\n        emit ClaimRemoved(\n\n            _claimId,\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n\n\n\n        delete _claims.byId[_claimId];\n\n        return true;\n",
                    "message": "ClaimHolderLibrary.removeClaim (ClaimHolder.sol#431-455) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n\n        public\n\n        view\n\n        returns(\n\n          uint256 topic,\n\n          uint256 scheme,\n\n          address issuer,\n\n          bytes signature,\n\n          bytes data,\n\n          string uri\n\n        )\n\n    {\n\n        return (\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n",
                    "message": "ClaimHolderLibrary.getClaim (ClaimHolder.sol#457-477) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": 545,
                    "vulnerability_code": "    function addClaims(\n\n        uint256[] _topic,\n\n        address[] _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        uint256[] _offsets\n\n    )\n\n        public\n\n    {\n\n        ClaimHolderLibrary.addClaims(\n\n            keyHolderData,\n\n            claims,\n\n            _topic,\n\n            _issuer,\n\n            _signature,\n\n            _data,\n\n            _offsets\n\n        );\n",
                    "message": "ClaimHolder.addClaims (ClaimHolder.sol#527-545) should be declared external\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": 182,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n\n\n        emit Approved(_id, _approve);\n\n\n\n        if (_approve == true) {\n\n            _keyHolderData.executions[_id].approved = true;\n\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n\n            if (success) {\n\n                _keyHolderData.executions[_id].executed = true;\n\n                emit Executed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            } else {\n\n                emit ExecutionFailed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            }\n\n        } else {\n\n            _keyHolderData.executions[_id].approved = false;\n\n        }\n\n        return true;\n",
                    "message": "Low level call in KeyHolderLibrary.approve (ClaimHolder.sol#148-182):\n\t-success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data,0) ClaimHolder.sol#159\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.init (ClaimHolder.sol#89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKey (ClaimHolder.sol#100) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKey (ClaimHolder.sol#100) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeyPurposes (ClaimHolder.sol#112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.getKeyPurposes (ClaimHolder.sol#112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeysByPurpose (ClaimHolder.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.getKeysByPurpose (ClaimHolder.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.addKey (ClaimHolder.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.addKey (ClaimHolder.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.addKey (ClaimHolder.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_type' of KeyHolderLibrary.addKey (ClaimHolder.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.approve (ClaimHolder.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_id' of KeyHolderLibrary.approve (ClaimHolder.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
                    "message": "Parameter '_approve' of KeyHolderLibrary.approve (ClaimHolder.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.execute (ClaimHolder.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_to' of KeyHolderLibrary.execute (ClaimHolder.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_value' of KeyHolderLibrary.execute (ClaimHolder.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_data' of KeyHolderLibrary.execute (ClaimHolder.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.removeKey (ClaimHolder.sol#203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.removeKey (ClaimHolder.sol#203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.removeKey (ClaimHolder.sol#203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_keyHolderData' of KeyHolderLibrary.keyHasPurpose (ClaimHolder.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolderLibrary.keyHasPurpose (ClaimHolder.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolderLibrary.keyHasPurpose (ClaimHolder.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolder.getKey (ClaimHolder.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolder.keyHasPurpose (ClaimHolder.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.keyHasPurpose (ClaimHolder.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.getKeysByPurpose (ClaimHolder.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_key' of KeyHolder.addKey (ClaimHolder.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_purpose' of KeyHolder.addKey (ClaimHolder.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
                    "message": "Parameter '_type' of KeyHolder.addKey (ClaimHolder.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_key' of KeyHolder.removeKey (ClaimHolder.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
                    "message": "Parameter '_purpose' of KeyHolder.removeKey (ClaimHolder.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_to' of KeyHolder.execute (ClaimHolder.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_value' of KeyHolder.execute (ClaimHolder.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": "Parameter '_data' of KeyHolder.execute (ClaimHolder.sol#315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
                    "message": "Parameter '_id' of KeyHolder.approve (ClaimHolder.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
                    "message": "Parameter '_approve' of KeyHolder.approve (ClaimHolder.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n",
                    "message": "Parameter '_key' of KeyHolder.getKeyPurposes (ClaimHolder.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#362) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _scheme,\n",
                    "message": "Parameter '_scheme' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#367) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": "Parameter '_uri' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#405) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#406) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#408) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": "Parameter '_offsets' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#411) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
                    "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.removeClaim (ClaimHolder.sol#432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Claims storage _claims,\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.removeClaim (ClaimHolder.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _claimId\n",
                    "message": "Parameter '_claimId' of ClaimHolderLibrary.removeClaim (ClaimHolder.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
                    "message": "Parameter '_claims' of ClaimHolderLibrary.getClaim (ClaimHolder.sol#457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
                    "message": "Parameter '_claimId' of ClaimHolderLibrary.getClaim (ClaimHolder.sol#457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_str' of ClaimHolderLibrary.getBytes (ClaimHolder.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_offset' of ClaimHolderLibrary.getBytes (ClaimHolder.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": "Parameter '_length' of ClaimHolderLibrary.getBytes (ClaimHolder.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId)\n",
                    "message": "Parameter '_claimId' of ClaimHolder.getClaim (ClaimHolder.sol#551) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic)\n",
                    "message": "Parameter '_topic' of ClaimHolder.getClaimIdsByTopic (ClaimHolder.sol#566) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolder.addClaim (ClaimHolder.sol#505) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _scheme,\n",
                    "message": "Parameter '_scheme' of ClaimHolder.addClaim (ClaimHolder.sol#506) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolder.addClaim (ClaimHolder.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolder.addClaim (ClaimHolder.sol#508) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolder.addClaim (ClaimHolder.sol#509) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": "Parameter '_uri' of ClaimHolder.addClaim (ClaimHolder.sol#510) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success) {\n",
                    "message": "Parameter '_claimId' of ClaimHolder.removeClaim (ClaimHolder.sol#547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": "Parameter '_topic' of ClaimHolder.addClaims (ClaimHolder.sol#528) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": "Parameter '_issuer' of ClaimHolder.addClaims (ClaimHolder.sol#529) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": "Parameter '_signature' of ClaimHolder.addClaims (ClaimHolder.sol#530) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": "Parameter '_data' of ClaimHolder.addClaims (ClaimHolder.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": "Parameter '_offsets' of ClaimHolder.addClaims (ClaimHolder.sol#532) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
                    "message": "ERC725.MANAGEMENT_KEY (ClaimHolder.sol#35) is never used in ClaimHolder\nERC725.ACTION_KEY (ClaimHolder.sol#36) is never used in ClaimHolder\nERC725.CLAIM_SIGNER_KEY (ClaimHolder.sol#37) is never used in ClaimHolder\nERC725.ENCRYPTION_KEY (ClaimHolder.sol#38) is never used in ClaimHolder\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                purposes.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keys.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] _keys)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256[] purposes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] _keys)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          bytes signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          bytes data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          string uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _topic,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _issuer,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _offsets\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            bytes signature,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            bytes data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            string uri\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(bytes32[] claimIds)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ACTION_KEY = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant CLAIM_SIGNER_KEY = 3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ENCRYPTION_KEY = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    KeyHolderLibrary.KeyHolderData keyHolderData;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ClaimHolderLibrary.Claims claims;\n",
                    "message": null
                }
            ]
        }
    },
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/multisig/IMultiSigWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public required;\n",
                    "message": "IMultiSigWallet.required should be constant (IMultiSigWallet.sol#16)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "    function submitTransaction(address destination, uint value, bytes data)\n\n        public\n",
                    "message": "IMultiSigWallet.submitTransaction (IMultiSigWallet.sol#23-25) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function submitTransaction(address destination, uint value, bytes data)\n",
                    "message": null
                }
            ]
        }
    },
    "origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/test-alt/contracts/MultiSigWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<_owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        transactionCount += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(!isOwner[_owners[i]] && _owners[i] != 0);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            isOwner[_owners[i]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (confirmations[transactionId][owners[i]])\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (confirmations[transactionId][owners[i]])\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (count == required)\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<_owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ownerCount <= MAX_OWNER_COUNT\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            && _required <= ownerCount\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            && _required != 0\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            && ownerCount != 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(!isOwner[_owners[i]] && _owners[i] != 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (   pending && !transactions[i].executed\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                || executed && transactions[i].executed)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (   pending && !transactions[i].executed\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                || executed && transactions[i].executed)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                transactionIdsTemp[count] = i;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<_owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length - 1; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<transactionCount; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<owners.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<count; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<transactionCount; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=from; i<to; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "    function()\n\n        payable\n\n    {\n\n        if (msg.value > 0)\n\n            Deposit(msg.sender, msg.value);\n",
                    "message": "Contract locking ether found in MultiSigWallet.sol:\n\tContract MultiSigWallet has payable functions:\n\t - fallback (MultiSigWallet.sol#100-105)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": 267,
                    "vulnerability_code": "    function external_call(address destination, uint value, uint dataLength, bytes data) private returns (bool) {\n\n        bool result;\n\n        assembly {\n\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n\n            result := call(\n\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n\n                destination,\n\n                value,\n\n                d,\n\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n\n                x,\n\n                0                  // Output is ignored, therefore the output size is zero\n\n            )\n\n        }\n\n        return result;\n",
                    "message": "MultiSigWallet.external_call uses assembly (MultiSigWallet.sol#249-267)\n\t- MultiSigWallet.sol#251-266\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "    function()\n\n        payable\n\n    {\n\n        if (msg.value > 0)\n\n            Deposit(msg.sender, msg.value);\n",
                    "message": "MultiSigWallet.fallback (MultiSigWallet.sol#100-105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": 137,
                    "vulnerability_code": "    function addOwner(address owner)\n\n        public\n\n        onlyWallet\n\n        ownerDoesNotExist(owner)\n\n        notNull(owner)\n\n        validRequirement(owners.length + 1, required)\n\n    {\n\n        isOwner[owner] = true;\n\n        owners.push(owner);\n\n        OwnerAddition(owner);\n",
                    "message": "MultiSigWallet.addOwner (MultiSigWallet.sol#127-137) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "    function removeOwner(address owner)\n\n        public\n\n        onlyWallet\n\n        ownerExists(owner)\n\n    {\n\n        isOwner[owner] = false;\n\n        for (uint i=0; i<owners.length - 1; i++)\n\n            if (owners[i] == owner) {\n\n                owners[i] = owners[owners.length - 1];\n\n                break;\n\n            }\n\n        owners.length -= 1;\n\n        if (required > owners.length)\n\n            changeRequirement(owners.length);\n\n        OwnerRemoval(owner);\n",
                    "message": "MultiSigWallet.removeOwner (MultiSigWallet.sol#141-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "    function replaceOwner(address owner, address newOwner)\n\n        public\n\n        onlyWallet\n\n        ownerExists(owner)\n\n        ownerDoesNotExist(newOwner)\n\n    {\n\n        for (uint i=0; i<owners.length; i++)\n\n            if (owners[i] == owner) {\n\n                owners[i] = newOwner;\n\n                break;\n\n            }\n\n        isOwner[owner] = false;\n\n        isOwner[newOwner] = true;\n\n        OwnerRemoval(owner);\n\n        OwnerAddition(newOwner);\n",
                    "message": "MultiSigWallet.replaceOwner (MultiSigWallet.sol#161-176) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    function submitTransaction(address destination, uint value, bytes data)\n\n        public\n\n        returns (uint transactionId)\n\n    {\n\n        transactionId = addTransaction(destination, value, data);\n\n        confirmTransaction(transactionId);\n",
                    "message": "MultiSigWallet.submitTransaction (MultiSigWallet.sol#194-200) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 225,
                    "vulnerability_code": "    function revokeConfirmation(uint transactionId)\n\n        public\n\n        ownerExists(msg.sender)\n\n        confirmed(transactionId, msg.sender)\n\n        notExecuted(transactionId)\n\n    {\n\n        confirmations[transactionId][msg.sender] = false;\n\n        Revocation(msg.sender, transactionId);\n",
                    "message": "MultiSigWallet.revokeConfirmation (MultiSigWallet.sol#217-225) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "    function getConfirmationCount(uint transactionId)\n\n        public\n\n        constant\n\n        returns (uint count)\n\n    {\n\n        for (uint i=0; i<owners.length; i++)\n\n            if (confirmations[transactionId][owners[i]])\n\n                count += 1;\n",
                    "message": "MultiSigWallet.getConfirmationCount (MultiSigWallet.sol#316-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": 339,
                    "vulnerability_code": "    function getTransactionCount(bool pending, bool executed)\n\n        public\n\n        constant\n\n        returns (uint count)\n\n    {\n\n        for (uint i=0; i<transactionCount; i++)\n\n            if (   pending && !transactions[i].executed\n\n                || executed && transactions[i].executed)\n\n                count += 1;\n",
                    "message": "MultiSigWallet.getTransactionCount (MultiSigWallet.sol#330-339) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 349,
                    "vulnerability_code": "    function getOwners()\n\n        public\n\n        constant\n\n        returns (address[])\n\n    {\n\n        return owners;\n",
                    "message": "MultiSigWallet.getOwners (MultiSigWallet.sol#343-349) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": 370,
                    "vulnerability_code": "    function getConfirmations(uint transactionId)\n\n        public\n\n        constant\n\n        returns (address[] _confirmations)\n\n    {\n\n        address[] memory confirmationsTemp = new address[](owners.length);\n\n        uint count = 0;\n\n        uint i;\n\n        for (i=0; i<owners.length; i++)\n\n            if (confirmations[transactionId][owners[i]]) {\n\n                confirmationsTemp[count] = owners[i];\n\n                count += 1;\n\n            }\n\n        _confirmations = new address[](count);\n\n        for (i=0; i<count; i++)\n\n            _confirmations[i] = confirmationsTemp[i];\n",
                    "message": "MultiSigWallet.getConfirmations (MultiSigWallet.sol#354-370) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n\n        public\n\n        constant\n\n        returns (uint[] _transactionIds)\n\n    {\n\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n\n        uint count = 0;\n\n        uint i;\n\n        for (i=0; i<transactionCount; i++)\n\n            if (   pending && !transactions[i].executed\n\n                || executed && transactions[i].executed)\n\n            {\n\n                transactionIdsTemp[count] = i;\n\n                count += 1;\n\n            }\n\n        _transactionIds = new uint[](to - from);\n\n        for (i=from; i<to; i++)\n\n            _transactionIds[i - from] = transactionIdsTemp[i];\n",
                    "message": "MultiSigWallet.getTransactionIds (MultiSigWallet.sol#378-396) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in MultiSigWallet.sol:\n\t- pragma solidity^0.4.15 (MultiSigWallet.sol#6): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 123,
                    "vulnerability_code": "    function MultiSigWallet(address[] _owners, uint _required)\n\n        public\n\n        validRequirement(_owners.length, _required)\n\n    {\n\n        for (uint i=0; i<_owners.length; i++) {\n\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n\n            isOwner[_owners[i]] = true;\n\n        }\n\n        owners = _owners;\n\n        required = _required;\n",
                    "message": "Function 'MultiSigWallet.MultiSigWallet' (MultiSigWallet.sol#113-123) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MultiSigWallet(address[] _owners, uint _required)\n",
                    "message": "Parameter '_owners' of MultiSigWallet.MultiSigWallet (MultiSigWallet.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MultiSigWallet(address[] _owners, uint _required)\n",
                    "message": "Parameter '_required' of MultiSigWallet.MultiSigWallet (MultiSigWallet.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeRequirement(uint _required)\n",
                    "message": "Parameter '_required' of MultiSigWallet.changeRequirement (MultiSigWallet.sol#180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": 267,
                    "vulnerability_code": "    function external_call(address destination, uint value, uint dataLength, bytes data) private returns (bool) {\n\n        bool result;\n\n        assembly {\n\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n\n            result := call(\n\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n\n                destination,\n\n                value,\n\n                d,\n\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n\n                x,\n\n                0                  // Output is ignored, therefore the output size is zero\n\n            )\n\n        }\n\n        return result;\n",
                    "message": "Function 'MultiSigWallet.external_call' (MultiSigWallet.sol#249-267) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owners.length -= 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isConfirmed(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getConfirmationCount(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTransactionCount(bool pending, bool executed)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners()\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getConfirmations(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length - 1; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<transactionCount; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<transactionCount; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getConfirmationCount(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTransactionCount(bool pending, bool executed)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MultiSigWallet {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MultiSigWallet(address[] _owners, uint _required)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function submitTransaction(address destination, uint value, bytes data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function external_call(address destination, uint value, uint dataLength, bytes data) private returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTransaction(address destination, uint value, bytes data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address[] _confirmations)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint[] _transactionIds)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function()\n",
                    "message": null
                }
            ]
        }
    }
}