{
    "defi-saving-880e9aaa883b4d9b68ed9ff3c47e9347345526cc/contracts/ISavingAccount.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.14;\n",
                    "message": "Detected issues with version pragma in ISavingAccount.sol:\n\t- pragma solidity0.5.14 (ISavingAccount.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "defi-saving-880e9aaa883b4d9b68ed9ff3c47e9347345526cc/contracts/InitializableReentrancyGuard.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.14;\n",
                    "message": "Detected issues with version pragma in InitializableReentrancyGuard.sol:\n\t- pragma solidity0.5.14 (InitializableReentrancyGuard.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function _initialize() internal {\n\n        // Storing an initial non-zero value makes deployment a bit more\n\n        // expensive, but in exchange the refund on every call to nonReentrant\n\n        // will be lower in amount. Since refunds are capped to a percetange of\n\n        // the total transaction's gas, it is best to keep them low in cases\n\n        // like this one, to increase the likelihood of the full refund coming\n\n        // into effect.\n\n        _notEntered = true;\n",
                    "message": "Function 'InitializableReentrancyGuard._initialize' (InitializableReentrancyGuard.sol#30-38) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _notEntered;\n",
                    "message": null
                }
            ]
        }
    },
    "defi-saving-880e9aaa883b4d9b68ed9ff3c47e9347345526cc/contracts/mocks/MockCToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "MockCToken.totalSupply (MockCToken.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address account) public view returns (uint256);\n",
                    "message": "MockCToken.balanceOf (MockCToken.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) public returns (bool);\n",
                    "message": "MockCToken.transfer (MockCToken.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "MockCToken.allowance (MockCToken.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public returns (bool);\n",
                    "message": "MockCToken.approve (MockCToken.sol#26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool);\n",
                    "message": "MockCToken.transferFrom (MockCToken.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool);\n",
                    "message": "MockCToken.increaseAllowance (MockCToken.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool);\n",
                    "message": "MockCToken.decreaseAllowance (MockCToken.sol#29) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.14;\n",
                    "message": "Detected issues with version pragma in MockCToken.sol:\n\t- pragma solidity0.5.14 (MockCToken.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MockCToken {\n",
                    "message": null
                }
            ]
        }
    },
    "defi-saving-880e9aaa883b4d9b68ed9ff3c47e9347345526cc/contracts/config/Constant.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.14;\n",
                    "message": "Detected issues with version pragma in Constant.sol:\n\t- pragma solidity0.5.14 (Constant.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public constant ETH_ADDR = 0x000000000000000000000000000000000000000E;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address payable public constant EMERGENCY_ADDR = 0xc04158f7dB6F9c9fFbD5593236a1a3D69F92167c;\n",
                    "message": null
                }
            ]
        }
    },
    "defi-saving-880e9aaa883b4d9b68ed9ff3c47e9347345526cc/contracts/lib/BitmapLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < 128, \"Index out of range for bit operation\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < 128, \"Index out of range for bit operation\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.14;\n",
                    "message": "Detected issues with version pragma in BitmapLib.sol:\n\t- pragma solidity0.5.14 (BitmapLib.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBit(uint128 _bitmap, uint8 _index) internal pure returns (uint128) {\n",
                    "message": "Parameter '_bitmap' of BitmapLib.setBit (BitmapLib.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBit(uint128 _bitmap, uint8 _index) internal pure returns (uint128) {\n",
                    "message": "Parameter '_index' of BitmapLib.setBit (BitmapLib.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unsetBit(uint128 _bitmap, uint8 _index) internal pure returns (uint128) {\n",
                    "message": "Parameter '_bitmap' of BitmapLib.unsetBit (BitmapLib.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unsetBit(uint128 _bitmap, uint8 _index) internal pure returns (uint128) {\n",
                    "message": "Parameter '_index' of BitmapLib.unsetBit (BitmapLib.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isBitSet(uint128 _bitmap, uint8 _index) internal pure returns (bool) {\n",
                    "message": "Parameter '_bitmap' of BitmapLib.isBitSet (BitmapLib.sol#78) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isBitSet(uint128 _bitmap, uint8 _index) internal pure returns (bool) {\n",
                    "message": "Parameter '_index' of BitmapLib.isBitSet (BitmapLib.sol#78) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "defi-saving-880e9aaa883b4d9b68ed9ff3c47e9347345526cc/contracts/compound/ICompound.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.14;\n",
                    "message": "Detected issues with version pragma in ICompound.sol:\n\t- pragma solidity0.5.14 (ICompound.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    }
}