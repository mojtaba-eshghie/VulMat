{
    "openzeppelin-contracts-2.0.1/contracts/mocks/CrowdsaleMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Crowdsale(rate, wallet, token) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_17"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ CrowdsaleMock.sol#276) shadows:\n\t- Crowdsale.rate (function @ CrowdsaleMock.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ CrowdsaleMock.sol#276) shadows:\n\t- Crowdsale.wallet (function @ CrowdsaleMock.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ CrowdsaleMock.sol#276) shadows:\n\t- Crowdsale.token (function @ CrowdsaleMock.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) public\n",
                    "message": "CrowdsaleMock.constructor.rate (local variable @ CrowdsaleMock.sol#463) shadows:\n\t- Crowdsale.rate (function @ CrowdsaleMock.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) public\n",
                    "message": "CrowdsaleMock.constructor.wallet (local variable @ CrowdsaleMock.sol#463) shadows:\n\t- Crowdsale.wallet (function @ CrowdsaleMock.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) public\n",
                    "message": "CrowdsaleMock.constructor.token (local variable @ CrowdsaleMock.sol#463) shadows:\n\t- Crowdsale.token (function @ CrowdsaleMock.sol#303-306)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (CrowdsaleMock.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (CrowdsaleMock.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (CrowdsaleMock.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (CrowdsaleMock.sol#324-327) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (CrowdsaleMock.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (CrowdsaleMock.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (CrowdsaleMock.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (CrowdsaleMock.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (CrowdsaleMock.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (CrowdsaleMock.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (CrowdsaleMock.sol#453-456) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/SignatureBouncerMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addSigner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (v != 27 && v != 28) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      // solium-disable-next-line arg-overflow\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return ecrecover(hash, v, r, s);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_25"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n\n    internal\n\n    pure\n\n    returns (address)\n\n  {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Check the signature length\n\n    if (signature.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    // ecrecover takes the signature parameters, and the only way to get them\n\n    // currently is to use assembly.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      r := mload(add(signature, 0x20))\n\n      s := mload(add(signature, 0x40))\n\n      v := byte(0, mload(add(signature, 0x60)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      // solium-disable-next-line arg-overflow\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECDSA.recover (SignatureBouncerMock.sol#110-146) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n\n    internal\n\n    pure\n\n    returns (address)\n\n  {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Check the signature length\n\n    if (signature.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    // ecrecover takes the signature parameters, and the only way to get them\n\n    // currently is to use assembly.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      r := mload(add(signature, 0x20))\n\n      s := mload(add(signature, 0x40))\n\n      v := byte(0, mload(add(signature, 0x60)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      // solium-disable-next-line arg-overflow\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECDSA.recover uses assembly (SignatureBouncerMock.sol#110-146)\n\t- SignatureBouncerMock.sol#128-135\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function addSigner(address account) public onlySigner {\n\n    _addSigner(account);\n",
                    "message": "SignerRole.addSigner (SignatureBouncerMock.sol#73-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function renounceSigner() public {\n\n    _removeSigner(msg.sender);\n",
                    "message": "SignerRole.renounceSigner (SignatureBouncerMock.sol#77-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function removeSigner(address account) public {\n\n    _removeSigner(account);\n",
                    "message": "SignerRoleMock.removeSigner (SignatureBouncerMock.sol#318-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "  function onlySignerMock() public view onlySigner {\n",
                    "message": "SignerRoleMock.onlySignerMock (SignatureBouncerMock.sol#322-323) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "  function checkValidSignature(address account, bytes signature)\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _isValidSignature(account, signature);\n",
                    "message": "SignatureBouncerMock.checkValidSignature (SignatureBouncerMock.sol#337-343) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function onlyWithValidSignature(bytes signature)\n\n    public\n\n    onlyValidSignature(signature)\n\n    view\n\n  {\n\n\n",
                    "message": "SignatureBouncerMock.onlyWithValidSignature (SignatureBouncerMock.sol#345-351) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 359,
                    "vulnerability_code": "  function checkValidSignatureAndMethod(address account, bytes signature)\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _isValidSignatureAndMethod(account, signature);\n",
                    "message": "SignatureBouncerMock.checkValidSignatureAndMethod (SignatureBouncerMock.sol#353-359) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": 367,
                    "vulnerability_code": "  function onlyWithValidSignatureAndMethod(bytes signature)\n\n    public\n\n    onlyValidSignatureAndMethod(signature)\n\n    view\n\n  {\n\n\n",
                    "message": "SignatureBouncerMock.onlyWithValidSignatureAndMethod (SignatureBouncerMock.sol#361-367) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "  function checkValidSignatureAndData(\n\n    address account,\n\n    bytes,\n\n    uint,\n\n    bytes signature\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _isValidSignatureAndData(account, signature);\n",
                    "message": "SignatureBouncerMock.checkValidSignatureAndData (SignatureBouncerMock.sol#369-380) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": 388,
                    "vulnerability_code": "  function onlyWithValidSignatureAndData(uint, bytes signature)\n\n    public\n\n    onlyValidSignatureAndData(signature)\n\n    view\n\n  {\n\n\n",
                    "message": "SignatureBouncerMock.onlyWithValidSignatureAndData (SignatureBouncerMock.sol#382-388) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 395,
                    "vulnerability_code": "  function theWrongMethod(bytes)\n\n    public\n\n    pure\n\n  {\n\n\n",
                    "message": "SignatureBouncerMock.theWrongMethod (SignatureBouncerMock.sol#390-395) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": 402,
                    "vulnerability_code": "  function tooShortMsgData()\n\n    public\n\n    onlyValidSignatureAndData(\"\")\n\n    view\n\n  {\n",
                    "message": "SignatureBouncerMock.tooShortMsgData (SignatureBouncerMock.sol#397-402) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function _addSigner(address account) internal {\n\n    signers.add(account);\n\n    emit SignerAdded(account);\n",
                    "message": "Function 'SignerRole._addSigner' (SignatureBouncerMock.sol#81-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function _removeSigner(address account) internal {\n\n    signers.remove(account);\n\n    emit SignerRemoved(account);\n",
                    "message": "Function 'SignerRole._removeSigner' (SignatureBouncerMock.sol#86-89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 253,
                    "vulnerability_code": "  function _isValidSignature(address account, bytes signature)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _isValidDataHash(\n\n      keccak256(abi.encodePacked(address(this), account)),\n\n      signature\n\n    );\n",
                    "message": "Function 'SignatureBouncer._isValidSignature' (SignatureBouncerMock.sol#244-253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 272,
                    "vulnerability_code": "  function _isValidSignatureAndMethod(address account, bytes signature)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    bytes memory data = new bytes(_METHOD_ID_SIZE);\n\n    for (uint i = 0; i < data.length; i++) {\n\n      data[i] = msg.data[i];\n\n    }\n\n    return _isValidDataHash(\n\n      keccak256(abi.encodePacked(address(this), account, data)),\n\n      signature\n\n    );\n",
                    "message": "Function 'SignatureBouncer._isValidSignatureAndMethod' (SignatureBouncerMock.sol#259-272) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "  function _isValidSignatureAndData(address account, bytes signature)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    require(msg.data.length > _SIGNATURE_SIZE);\n\n    bytes memory data = new bytes(msg.data.length - _SIGNATURE_SIZE);\n\n    for (uint i = 0; i < data.length; i++) {\n\n      data[i] = msg.data[i];\n\n    }\n\n    return _isValidDataHash(\n\n      keccak256(abi.encodePacked(address(this), account, data)),\n\n      signature\n\n    );\n",
                    "message": "Function 'SignatureBouncer._isValidSignatureAndData' (SignatureBouncerMock.sol#279-293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "  function _isValidDataHash(bytes32 hash, bytes signature)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address signer = hash\n\n      .toEthSignedMessageHash()\n\n      .recover(signature);\n\n\n\n    return signer != address(0) && isSigner(signer);\n",
                    "message": "Function 'SignatureBouncer._isValidDataHash' (SignatureBouncerMock.sol#300-310) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": 328,
                    "vulnerability_code": "  function _removeSigner(address account) internal {\n\n    super._removeSigner(account);\n",
                    "message": "Function 'SignerRoleMock._removeSigner' (SignatureBouncerMock.sol#326-328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes,\n",
                    "message": "Parameter '' of SignatureBouncerMock.checkValidSignatureAndData (SignatureBouncerMock.sol#371) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint,\n",
                    "message": "Parameter '_scope_0' of SignatureBouncerMock.checkValidSignatureAndData (SignatureBouncerMock.sol#372) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function onlyWithValidSignatureAndData(uint, bytes signature)\n",
                    "message": "Parameter '' of SignatureBouncerMock.onlyWithValidSignatureAndData (SignatureBouncerMock.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function theWrongMethod(bytes)\n",
                    "message": "Parameter '' of SignatureBouncerMock.theWrongMethod (SignatureBouncerMock.sol#390) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private signers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private constant _METHOD_ID_SIZE = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private constant _SIGNATURE_SIZE = 96;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _isValidSignature(address account, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _isValidSignatureAndMethod(address account, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _isValidSignatureAndData(address account, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _isValidDataHash(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkValidSignature(address account, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function onlyWithValidSignature(bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkValidSignatureAndMethod(address account, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function onlyWithValidSignatureAndMethod(bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes signature\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function onlyWithValidSignatureAndData(uint, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function theWrongMethod(bytes)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/AddressImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (AddressImpl.sol#17-28) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (AddressImpl.sol#17-28)\n\t- AddressImpl.sol#26-27\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/SafeMathMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": 77,
                    "vulnerability_code": "  function mul(uint256 a, uint256 b) public pure returns (uint256) {\n\n    return SafeMath.mul(a, b);\n",
                    "message": "SafeMathMock.mul (SafeMathMock.sol#75-77) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function div(uint256 a, uint256 b) public pure returns (uint256) {\n\n    return SafeMath.div(a, b);\n",
                    "message": "SafeMathMock.div (SafeMathMock.sol#79-81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "  function sub(uint256 a, uint256 b) public pure returns (uint256) {\n\n    return SafeMath.sub(a, b);\n",
                    "message": "SafeMathMock.sub (SafeMathMock.sol#83-85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function add(uint256 a, uint256 b) public pure returns (uint256) {\n\n    return SafeMath.add(a, b);\n",
                    "message": "SafeMathMock.add (SafeMathMock.sol#87-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "  function mod(uint256 a, uint256 b) public pure returns (uint256) {\n\n    return SafeMath.mod(a, b);\n",
                    "message": "SafeMathMock.mod (SafeMathMock.sol#91-93) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/MintedCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 827,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 828,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 829,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC20Mintable token\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 831,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 833,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Crowdsale(rate, wallet, token)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 834,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_40"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ MintedCrowdsaleImpl.sol#608) shadows:\n\t- Crowdsale.rate (function @ MintedCrowdsaleImpl.sol#649-652)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ MintedCrowdsaleImpl.sol#608) shadows:\n\t- Crowdsale.wallet (function @ MintedCrowdsaleImpl.sol#642-645)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ MintedCrowdsaleImpl.sol#608) shadows:\n\t- Crowdsale.token (function @ MintedCrowdsaleImpl.sol#635-638)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 828,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "MintedCrowdsaleImpl.constructor.rate (local variable @ MintedCrowdsaleImpl.sol#828) shadows:\n\t- Crowdsale.rate (function @ MintedCrowdsaleImpl.sol#649-652)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 829,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "MintedCrowdsaleImpl.constructor.wallet (local variable @ MintedCrowdsaleImpl.sol#829) shadows:\n\t- Crowdsale.wallet (function @ MintedCrowdsaleImpl.sol#642-645)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": 831,
                    "vulnerability_code": "    ERC20Mintable token\n",
                    "message": "MintedCrowdsaleImpl.constructor.token (local variable @ MintedCrowdsaleImpl.sol#830-831) shadows:\n\t- Crowdsale.token (function @ MintedCrowdsaleImpl.sol#635-638)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (MintedCrowdsaleImpl.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (MintedCrowdsaleImpl.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (MintedCrowdsaleImpl.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (MintedCrowdsaleImpl.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (MintedCrowdsaleImpl.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (MintedCrowdsaleImpl.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (MintedCrowdsaleImpl.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (MintedCrowdsaleImpl.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (MintedCrowdsaleImpl.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (MintedCrowdsaleImpl.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (MintedCrowdsaleImpl.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (MintedCrowdsaleImpl.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (MintedCrowdsaleImpl.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (MintedCrowdsaleImpl.sol#241-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 392,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (MintedCrowdsaleImpl.sol#390-392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (MintedCrowdsaleImpl.sol#394-396) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": 435,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, value);\n\n    return true;\n",
                    "message": "ERC20Mintable.mint (MintedCrowdsaleImpl.sol#425-435) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 642,
                    "vulnerability_to_line": 645,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (MintedCrowdsaleImpl.sol#642-645) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": 652,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (MintedCrowdsaleImpl.sol#649-652) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 656,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (MintedCrowdsaleImpl.sol#656-659) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (MintedCrowdsaleImpl.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (MintedCrowdsaleImpl.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (MintedCrowdsaleImpl.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (MintedCrowdsaleImpl.sol#307-315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (MintedCrowdsaleImpl.sol#398-401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (MintedCrowdsaleImpl.sol#403-406) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": 713,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (MintedCrowdsaleImpl.sol#703-713) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": 728,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (MintedCrowdsaleImpl.sol#719-728) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": 742,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (MintedCrowdsaleImpl.sol#734-742) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 748,
                    "vulnerability_to_line": 756,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (MintedCrowdsaleImpl.sol#748-756) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 762,
                    "vulnerability_to_line": 770,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (MintedCrowdsaleImpl.sol#762-770) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": 781,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (MintedCrowdsaleImpl.sol#776-781) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 785,
                    "vulnerability_to_line": 788,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (MintedCrowdsaleImpl.sol#785-788) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 808,
                    "vulnerability_to_line": 818,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    // Potentially dangerous assumption about the type of the token.\n\n    require(\n\n      ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));\n\n  }\n",
                    "message": "Function 'MintedCrowdsale._deliverTokens' (MintedCrowdsaleImpl.sol#808-818) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 572,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 581,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/MinterRoleMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (MinterRoleMock.sol#73-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (MinterRoleMock.sol#77-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "  function removeMinter(address account) public {\n\n    _removeMinter(account);\n",
                    "message": "MinterRoleMock.removeMinter (MinterRoleMock.sol#97-99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "  function onlyMinterMock() public view onlyMinter {\n",
                    "message": "MinterRoleMock.onlyMinterMock (MinterRoleMock.sol#101-102) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (MinterRoleMock.sol#81-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (MinterRoleMock.sol#86-89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    super._removeMinter(account);\n",
                    "message": "Function 'MinterRoleMock._removeMinter' (MinterRoleMock.sol#105-107) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ReentrancyAttack.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender.call(abi.encodeWithSelector(data)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "  function callSender(bytes4 data) public {\n\n    // solium-disable-next-line security/no-low-level-calls\n\n    require(msg.sender.call(abi.encodeWithSelector(data)));\n",
                    "message": "ReentrancyAttack.callSender (ReentrancyAttack.sol#7-10) should be declared external\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "  function callSender(bytes4 data) public {\n\n    // solium-disable-next-line security/no-low-level-calls\n\n    require(msg.sender.call(abi.encodeWithSelector(data)));\n",
                    "message": "Low level call in ReentrancyAttack.callSender (ReentrancyAttack.sol#7-10):\n\t-require(bool)(msg.sender.call(abi.encodeWithSelector(data))) ReentrancyAttack.sol#9\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/CappedCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 cap) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(cap > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _cap = cap;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 cap\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Crowdsale(rate, wallet, token)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    CappedCrowdsale(cap)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_21"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ CappedCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.rate (function @ CappedCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ CappedCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.wallet (function @ CappedCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ CappedCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.token (function @ CappedCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 cap) internal {\n",
                    "message": "CappedCrowdsale.constructor.cap (local variable @ CappedCrowdsaleImpl.sol#476) shadows:\n\t- CappedCrowdsale.cap (function @ CappedCrowdsaleImpl.sol#484-487)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "CappedCrowdsaleImpl.constructor.rate (local variable @ CappedCrowdsaleImpl.sol#522) shadows:\n\t- Crowdsale.rate (function @ CappedCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "CappedCrowdsaleImpl.constructor.wallet (local variable @ CappedCrowdsaleImpl.sol#523) shadows:\n\t- Crowdsale.wallet (function @ CappedCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token,\n",
                    "message": "CappedCrowdsaleImpl.constructor.token (local variable @ CappedCrowdsaleImpl.sol#524) shadows:\n\t- Crowdsale.token (function @ CappedCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": 526,
                    "vulnerability_code": "    uint256 cap\n",
                    "message": "CappedCrowdsaleImpl.constructor.cap (local variable @ CappedCrowdsaleImpl.sol#525-526) shadows:\n\t- CappedCrowdsale.cap (function @ CappedCrowdsaleImpl.sol#484-487)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (CappedCrowdsaleImpl.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (CappedCrowdsaleImpl.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (CappedCrowdsaleImpl.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": 487,
                    "vulnerability_code": "  function cap() public view returns(uint256) {\n\n    return _cap;\n\n  }\n",
                    "message": "CappedCrowdsale.cap (CappedCrowdsaleImpl.sol#484-487) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 495,
                    "vulnerability_code": "  function capReached() public view returns (bool) {\n\n    return weiRaised() >= _cap;\n\n  }\n",
                    "message": "CappedCrowdsale.capReached (CappedCrowdsaleImpl.sol#492-495) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (CappedCrowdsaleImpl.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (CappedCrowdsaleImpl.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (CappedCrowdsaleImpl.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (CappedCrowdsaleImpl.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (CappedCrowdsaleImpl.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (CappedCrowdsaleImpl.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (CappedCrowdsaleImpl.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n    require(weiRaised().add(weiAmount) <= _cap);\n\n  }\n",
                    "message": "Function 'CappedCrowdsale._preValidatePurchase' (CappedCrowdsaleImpl.sol#501-511) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _cap;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC20PausableMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addPauser(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _paused = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address initialAccount, uint initialBalance) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _mint(initialAccount, initialBalance);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_20"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20PausableMock.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20PausableMock.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20PausableMock.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20PausableMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20PausableMock.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20PausableMock.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 392,
                    "vulnerability_code": "  function addPauser(address account) public onlyPauser {\n\n    _addPauser(account);\n",
                    "message": "PauserRole.addPauser (ERC20PausableMock.sol#390-392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function renouncePauser() public {\n\n    _removePauser(msg.sender);\n",
                    "message": "PauserRole.renouncePauser (ERC20PausableMock.sol#394-396) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 432,
                    "vulnerability_code": "  function paused() public view returns(bool) {\n\n    return _paused;\n",
                    "message": "Pausable.paused (ERC20PausableMock.sol#430-432) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function pause() public onlyPauser whenNotPaused {\n\n    _paused = true;\n\n    emit Paused(msg.sender);\n",
                    "message": "Pausable.pause (ERC20PausableMock.sol#453-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function unpause() public onlyPauser whenPaused {\n\n    _paused = false;\n\n    emit Unpaused(msg.sender);\n",
                    "message": "Pausable.unpause (ERC20PausableMock.sol#461-464) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": 542,
                    "vulnerability_code": "  function removePauser(address account) public {\n\n    _removePauser(account);\n",
                    "message": "PauserRoleMock.removePauser (ERC20PausableMock.sol#540-542) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": 545,
                    "vulnerability_code": "  function onlyPauserMock() public view onlyPauser {\n",
                    "message": "PauserRoleMock.onlyPauserMock (ERC20PausableMock.sol#544-545) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20PausableMock.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20PausableMock.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20PausableMock.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20PausableMock.sol#307-315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "  function _addPauser(address account) internal {\n\n    pausers.add(account);\n\n    emit PauserAdded(account);\n",
                    "message": "Function 'PauserRole._addPauser' (ERC20PausableMock.sol#398-401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    pausers.remove(account);\n\n    emit PauserRemoved(account);\n",
                    "message": "Function 'PauserRole._removePauser' (ERC20PausableMock.sol#403-406) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": 550,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    super._removePauser(account);\n",
                    "message": "Function 'PauserRoleMock._removePauser' (ERC20PausableMock.sol#548-550) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private pausers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _paused;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ArraysImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256[] _array) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array = _array;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (low > 0 && array[low - 1] == element) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return low - 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return low;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": "Different versions of Solidity is used in ArraysImpl.sol:\n\t- Version used: ['^0.4.23', '^0.4.24']\n\t- ArraysImpl.sol#3 declares pragma solidity^0.4.24\n\t- ArraysImpl.sol#37 declares pragma solidity^0.4.23\n\t- ArraysImpl.sol#93 declares pragma solidity^0.4.24\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in ArraysImpl.sol:\n\t- pragma solidity^0.4.23 (ArraysImpl.sol#37): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256[] _array) public {\n",
                    "message": "Parameter '_array' of ArraysImpl. (ArraysImpl.sol#101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function findUpperBound(uint256 _element) external view returns (uint256) {\n",
                    "message": "Parameter '_element' of ArraysImpl.findUpperBound (ArraysImpl.sol#105) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (low < high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256[] private array;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256[] _array) public {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/SecondaryMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n",
                    "message": "Secondary.primary (SecondaryMock.sol#35-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n",
                    "message": "Secondary.transferPrimary (SecondaryMock.sol#43-47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "  function onlyPrimaryMock() public view onlyPrimary {\n",
                    "message": "SecondaryMock.onlyPrimaryMock (SecondaryMock.sol#55-56) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/CounterImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(string => Counter.Counter) private _counters;\n",
                    "message": "CounterImpl._counters (CounterImpl.sol#42) is never initialized. It is used in:\n\t- doThing (CounterImpl.sol#44-50)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "  function doThing(string key)\n\n    public\n\n    returns (uint256)\n\n  {\n\n    theId = _counters[key].next();\n\n    return theId;\n",
                    "message": "CounterImpl.doThing (CounterImpl.sol#44-50) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(string => Counter.Counter) private _counters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doThing(string key)\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC165Mock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "  function registerInterface(bytes4 interfaceId)\n\n    public\n\n  {\n\n    _registerInterface(interfaceId);\n",
                    "message": "ERC165Mock.registerInterface (ERC165Mock.sol#82-86) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC165Mock.sol#69-74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC165Mock.sol#34) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ECDSAMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (v != 27 && v != 28) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      // solium-disable-next-line arg-overflow\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return ecrecover(hash, v, r, s);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 55,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n\n    internal\n\n    pure\n\n    returns (address)\n\n  {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Check the signature length\n\n    if (signature.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    // ecrecover takes the signature parameters, and the only way to get them\n\n    // currently is to use assembly.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      r := mload(add(signature, 0x20))\n\n      s := mload(add(signature, 0x40))\n\n      v := byte(0, mload(add(signature, 0x60)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      // solium-disable-next-line arg-overflow\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECDSA.recover (ECDSAMock.sol#19-55) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 55,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n\n    internal\n\n    pure\n\n    returns (address)\n\n  {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Check the signature length\n\n    if (signature.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    // ecrecover takes the signature parameters, and the only way to get them\n\n    // currently is to use assembly.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      r := mload(add(signature, 0x20))\n\n      s := mload(add(signature, 0x40))\n\n      v := byte(0, mload(add(signature, 0x60)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      // solium-disable-next-line arg-overflow\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECDSA.recover uses assembly (ECDSAMock.sol#19-55)\n\t- ECDSAMock.sol#37-44\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n\n    public\n\n    pure\n\n    returns (address)\n\n  {\n\n    return hash.recover(signature);\n",
                    "message": "ECDSAMock.recover (ECDSAMock.sol#82-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "  function toEthSignedMessageHash(bytes32 hash)\n\n    public\n\n    pure\n\n    returns (bytes32)\n\n  {\n\n    return hash.toEthSignedMessageHash();\n",
                    "message": "ECDSAMock.toEthSignedMessageHash (ECDSAMock.sol#90-96) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/IncreasingPriceCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 initialRate, uint256 finalRate) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(finalRate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(initialRate > finalRate);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _initialRate = initialRate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _finalRate = finalRate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 636,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 637,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 638,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 initialRate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 finalRate\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 641,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 642,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Crowdsale(initialRate, wallet, token)\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_33"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ IncreasingPriceCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.rate (function @ IncreasingPriceCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ IncreasingPriceCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.wallet (function @ IncreasingPriceCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ IncreasingPriceCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.token (function @ IncreasingPriceCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ IncreasingPriceCrowdsaleImpl.sol#486) shadows:\n\t- TimedCrowdsale.openingTime (function @ IncreasingPriceCrowdsaleImpl.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ IncreasingPriceCrowdsaleImpl.sol#486) shadows:\n\t- TimedCrowdsale.closingTime (function @ IncreasingPriceCrowdsaleImpl.sol#505-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 initialRate, uint256 finalRate) internal {\n",
                    "message": "IncreasingPriceCrowdsale.constructor.initialRate (local variable @ IncreasingPriceCrowdsaleImpl.sol#566) shadows:\n\t- IncreasingPriceCrowdsale.initialRate (function @ IncreasingPriceCrowdsaleImpl.sol#584-587)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 initialRate, uint256 finalRate) internal {\n",
                    "message": "IncreasingPriceCrowdsale.constructor.finalRate (local variable @ IncreasingPriceCrowdsaleImpl.sol#566) shadows:\n\t- IncreasingPriceCrowdsale.finalRate (function @ IncreasingPriceCrowdsaleImpl.sol#591-594)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "IncreasingPriceCrowdsaleImpl.constructor.openingTime (local variable @ IncreasingPriceCrowdsaleImpl.sol#634) shadows:\n\t- TimedCrowdsale.openingTime (function @ IncreasingPriceCrowdsaleImpl.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "IncreasingPriceCrowdsaleImpl.constructor.closingTime (local variable @ IncreasingPriceCrowdsaleImpl.sol#635) shadows:\n\t- TimedCrowdsale.closingTime (function @ IncreasingPriceCrowdsaleImpl.sol#505-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 636,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "IncreasingPriceCrowdsaleImpl.constructor.wallet (local variable @ IncreasingPriceCrowdsaleImpl.sol#636) shadows:\n\t- Crowdsale.wallet (function @ IncreasingPriceCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 637,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token,\n",
                    "message": "IncreasingPriceCrowdsaleImpl.constructor.token (local variable @ IncreasingPriceCrowdsaleImpl.sol#637) shadows:\n\t- Crowdsale.token (function @ IncreasingPriceCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 638,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 initialRate,\n",
                    "message": "IncreasingPriceCrowdsaleImpl.constructor.initialRate (local variable @ IncreasingPriceCrowdsaleImpl.sol#638) shadows:\n\t- IncreasingPriceCrowdsale.initialRate (function @ IncreasingPriceCrowdsaleImpl.sol#584-587)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": 640,
                    "vulnerability_code": "    uint256 finalRate\n",
                    "message": "IncreasingPriceCrowdsaleImpl.constructor.finalRate (local variable @ IncreasingPriceCrowdsaleImpl.sol#639-640) shadows:\n\t- IncreasingPriceCrowdsale.finalRate (function @ IncreasingPriceCrowdsaleImpl.sol#591-594)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (IncreasingPriceCrowdsaleImpl.sol#486-494) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (IncreasingPriceCrowdsaleImpl.sol#488)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (IncreasingPriceCrowdsaleImpl.sol#512-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (IncreasingPriceCrowdsaleImpl.sol#514)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (IncreasingPriceCrowdsaleImpl.sol#521-525) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (IncreasingPriceCrowdsaleImpl.sol#523)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (IncreasingPriceCrowdsaleImpl.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (IncreasingPriceCrowdsaleImpl.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 580,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    revert();\n\n  }\n",
                    "message": "IncreasingPriceCrowdsale.rate (IncreasingPriceCrowdsaleImpl.sol#577-580) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (IncreasingPriceCrowdsaleImpl.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (IncreasingPriceCrowdsaleImpl.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (IncreasingPriceCrowdsaleImpl.sol#521-525) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "  function initialRate() public view returns(uint256) {\n\n    return _initialRate;\n\n  }\n",
                    "message": "IncreasingPriceCrowdsale.initialRate (IncreasingPriceCrowdsaleImpl.sol#584-587) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 594,
                    "vulnerability_code": "  function finalRate() public view returns (uint256) {\n\n    return _finalRate;\n\n  }\n",
                    "message": "IncreasingPriceCrowdsale.finalRate (IncreasingPriceCrowdsaleImpl.sol#591-594) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (IncreasingPriceCrowdsaleImpl.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (IncreasingPriceCrowdsaleImpl.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (IncreasingPriceCrowdsaleImpl.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (IncreasingPriceCrowdsaleImpl.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (IncreasingPriceCrowdsaleImpl.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (IncreasingPriceCrowdsaleImpl.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (IncreasingPriceCrowdsaleImpl.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (IncreasingPriceCrowdsaleImpl.sol#531-541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 623,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    uint256 currentRate = getCurrentRate();\n\n    return currentRate.mul(weiAmount);\n\n  }\n",
                    "message": "Function 'IncreasingPriceCrowdsale._getTokenAmount' (IncreasingPriceCrowdsaleImpl.sol#617-623) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _initialRate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _finalRate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/PauserRoleMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addPauser(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function addPauser(address account) public onlyPauser {\n\n    _addPauser(account);\n",
                    "message": "PauserRole.addPauser (PauserRoleMock.sol#73-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function renouncePauser() public {\n\n    _removePauser(msg.sender);\n",
                    "message": "PauserRole.renouncePauser (PauserRoleMock.sol#77-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "  function removePauser(address account) public {\n\n    _removePauser(account);\n",
                    "message": "PauserRoleMock.removePauser (PauserRoleMock.sol#97-99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "  function onlyPauserMock() public view onlyPauser {\n",
                    "message": "PauserRoleMock.onlyPauserMock (PauserRoleMock.sol#101-102) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function _addPauser(address account) internal {\n\n    pausers.add(account);\n\n    emit PauserAdded(account);\n",
                    "message": "Function 'PauserRole._addPauser' (PauserRoleMock.sol#81-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    pausers.remove(account);\n\n    emit PauserRemoved(account);\n",
                    "message": "Function 'PauserRole._removePauser' (PauserRoleMock.sol#86-89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    super._removePauser(account);\n",
                    "message": "Function 'PauserRoleMock._removePauser' (PauserRoleMock.sol#105-107) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private pausers;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/OwnableMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract OwnableMock is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit OwnershipTransferred(address(0), _owner);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "  function owner() public view returns(address) {\n\n    return _owner;\n",
                    "message": "Ownable.owner (OwnableMock.sol#30-32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipTransferred(_owner, address(0));\n\n    _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (OwnableMock.sol#55-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 66,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (OwnableMock.sol#64-66) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function _transferOwnership(address newOwner) internal {\n\n    require(newOwner != address(0));\n\n    emit OwnershipTransferred(_owner, newOwner);\n\n    _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (OwnableMock.sol#72-76) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _owner;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/TimedCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Crowdsale(rate, wallet, token)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    TimedCrowdsale(openingTime, closingTime)\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_28"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ TimedCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.rate (function @ TimedCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ TimedCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.wallet (function @ TimedCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ TimedCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.token (function @ TimedCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ TimedCrowdsaleImpl.sol#486) shadows:\n\t- TimedCrowdsale.openingTime (function @ TimedCrowdsaleImpl.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ TimedCrowdsaleImpl.sol#486) shadows:\n\t- TimedCrowdsale.closingTime (function @ TimedCrowdsaleImpl.sol#505-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "TimedCrowdsaleImpl.constructor.openingTime (local variable @ TimedCrowdsaleImpl.sol#552) shadows:\n\t- TimedCrowdsale.openingTime (function @ TimedCrowdsaleImpl.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "TimedCrowdsaleImpl.constructor.closingTime (local variable @ TimedCrowdsaleImpl.sol#553) shadows:\n\t- TimedCrowdsale.closingTime (function @ TimedCrowdsaleImpl.sol#505-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "TimedCrowdsaleImpl.constructor.rate (local variable @ TimedCrowdsaleImpl.sol#554) shadows:\n\t- Crowdsale.rate (function @ TimedCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "TimedCrowdsaleImpl.constructor.wallet (local variable @ TimedCrowdsaleImpl.sol#555) shadows:\n\t- Crowdsale.wallet (function @ TimedCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 557,
                    "vulnerability_code": "    IERC20 token\n",
                    "message": "TimedCrowdsaleImpl.constructor.token (local variable @ TimedCrowdsaleImpl.sol#556-557) shadows:\n\t- Crowdsale.token (function @ TimedCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (TimedCrowdsaleImpl.sol#486-494) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (TimedCrowdsaleImpl.sol#488)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (TimedCrowdsaleImpl.sol#512-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (TimedCrowdsaleImpl.sol#514)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (TimedCrowdsaleImpl.sol#521-525) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (TimedCrowdsaleImpl.sol#523)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (TimedCrowdsaleImpl.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (TimedCrowdsaleImpl.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (TimedCrowdsaleImpl.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (TimedCrowdsaleImpl.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "  function openingTime() public view returns(uint256) {\n\n    return _openingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.openingTime (TimedCrowdsaleImpl.sol#498-501) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": 508,
                    "vulnerability_code": "  function closingTime() public view returns(uint256) {\n\n    return _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.closingTime (TimedCrowdsaleImpl.sol#505-508) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (TimedCrowdsaleImpl.sol#521-525) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (TimedCrowdsaleImpl.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (TimedCrowdsaleImpl.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (TimedCrowdsaleImpl.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (TimedCrowdsaleImpl.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (TimedCrowdsaleImpl.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (TimedCrowdsaleImpl.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (TimedCrowdsaleImpl.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (TimedCrowdsaleImpl.sol#531-541) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ReentrancyMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender.call(abi.encodeWithSelector(data)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    counter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    counter = 0;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 48,
                    "vulnerability_code": "  function callSender(bytes4 data) public {\n\n    // solium-disable-next-line security/no-low-level-calls\n\n    require(msg.sender.call(abi.encodeWithSelector(data)));\n\n  }\n",
                    "message": "ReentrancyAttack.callSender (ReentrancyMock.sol#44-48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "  function countThisRecursive(uint256 n) public nonReentrant {\n\n    if (n > 0) {\n\n      count();\n\n      // solium-disable-next-line security/no-low-level-calls\n\n      bool result = address(this).call(abi.encodeWithSignature(\"countThisRecursive(uint256)\", n - 1));\n\n      require(result == true);\n\n    }\n\n  }\n",
                    "message": "ReentrancyMock.countThisRecursive (ReentrancyMock.sol#75-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function countAndCall(ReentrancyAttack attacker) public nonReentrant {\n\n    count();\n\n    bytes4 func = bytes4(keccak256(\"callback()\"));\n\n    attacker.callSender(func);\n\n  }\n",
                    "message": "ReentrancyMock.countAndCall (ReentrancyMock.sol#84-89) should be declared external\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 48,
                    "vulnerability_code": "  function callSender(bytes4 data) public {\n\n    // solium-disable-next-line security/no-low-level-calls\n\n    require(msg.sender.call(abi.encodeWithSelector(data)));\n\n  }\n",
                    "message": "Low level call in ReentrancyAttack.callSender (ReentrancyMock.sol#44-48):\n\t-require(bool)(msg.sender.call(abi.encodeWithSelector(data))) ReentrancyMock.sol#46\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "  function countThisRecursive(uint256 n) public nonReentrant {\n\n    if (n > 0) {\n\n      count();\n\n      // solium-disable-next-line security/no-low-level-calls\n\n      bool result = address(this).call(abi.encodeWithSignature(\"countThisRecursive(uint256)\", n - 1));\n\n      require(result == true);\n\n    }\n\n  }\n",
                    "message": "Low level call in ReentrancyMock.countThisRecursive (ReentrancyMock.sol#75-83):\n\t-result = address(this).call(abi.encodeWithSignature(countThisRecursive(uint256),n - 1)) ReentrancyMock.sol#79\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    attacker.callSender(func);\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC20Mock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address initialAccount, uint256 initialBalance) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _mint(initialAccount, initialBalance);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burn(address account, uint256 amount) public {\n",
                    "message": "Anyone can burn tokens of other accounts"
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _burn(account, amount);\n",
                    "message": "Anyone can burn tokens of other accounts"
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Anyone can burn tokens of other accounts"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_21"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20Mock.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20Mock.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20Mock.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20Mock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20Mock.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20Mock.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (ERC20Mock.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20Mock.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (ERC20Mock.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20Mock.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (ERC20Mock.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20Mock.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20Mock.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20Mock.sol#241-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 331,
                    "vulnerability_code": "  function mint(address account, uint256 amount) public {\n\n    _mint(account, amount);\n",
                    "message": "ERC20Mock.mint (ERC20Mock.sol#329-331) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "  function burn(address account, uint256 amount) public {\n\n    _burn(account, amount);\n",
                    "message": "ERC20Mock.burn (ERC20Mock.sol#333-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": 339,
                    "vulnerability_code": "  function burnFrom(address account, uint256 amount) public {\n\n    _burnFrom(account, amount);\n",
                    "message": "ERC20Mock.burnFrom (ERC20Mock.sol#337-339) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20Mock.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20Mock.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20Mock.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20Mock.sol#307-315) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/MerkleProofWrapper.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proof.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proof.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proof.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function verify(\n\n    bytes32[] proof,\n\n    bytes32 root,\n\n    bytes32 leaf\n\n  )\n\n    public\n\n    pure\n\n    returns (bool)\n\n  {\n\n    return MerkleProof.verify(proof, root, leaf);\n",
                    "message": "MerkleProofWrapper.verify (MerkleProofWrapper.sol#52-62) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proof.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proof.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32[] proof,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32[] proof,\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC721Mock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burn(uint256 tokenId) public {\n",
                    "message": "Anyone can burn tokens of other accounts"
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _burn(ownerOf(tokenId), tokenId);\n",
                    "message": "Anyone can burn tokens of other accounts"
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Anyone can burn tokens of other accounts"
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_28"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721Mock.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721Mock.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Mock.sol#52)\n\t-transferFrom (ERC721Mock.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721Mock.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Mock.sol#343-350)\n\t-transferFrom (ERC721Mock.sol#400-415)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721Mock.sol#191-202)\n\t- ERC721Mock.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (ERC721Mock.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n",
                    "message": "ERC721.balanceOf (ERC721Mock.sol#319-322) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721Mock.sol#343-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721Mock.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721Mock.sol#369-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721Mock.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721Mock.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721Mock.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721Mock.sol#97-104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": 602,
                    "vulnerability_code": "  function mint(address to, uint256 tokenId) public {\n\n    _mint(to, tokenId);\n",
                    "message": "ERC721Mock.mint (ERC721Mock.sol#600-602) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": 606,
                    "vulnerability_code": "  function burn(uint256 tokenId) public {\n\n    _burn(ownerOf(tokenId), tokenId);\n",
                    "message": "ERC721Mock.burn (ERC721Mock.sol#604-606) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721Mock.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721Mock.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721Mock.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721Mock.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721Mock.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721Mock.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721Mock.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721Mock.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721Mock.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721Mock.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721Mock.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721Mock.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721Mock.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC20MintableMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_26"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20MintableMock.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20MintableMock.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20MintableMock.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20MintableMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20MintableMock.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20MintableMock.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (ERC20MintableMock.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20MintableMock.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (ERC20MintableMock.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20MintableMock.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (ERC20MintableMock.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20MintableMock.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20MintableMock.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20MintableMock.sol#241-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 392,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (ERC20MintableMock.sol#390-392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (ERC20MintableMock.sol#394-396) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": 435,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, value);\n\n    return true;\n",
                    "message": "ERC20Mintable.mint (ERC20MintableMock.sol#425-435) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "  function removeMinter(address account) public {\n\n    _removeMinter(account);\n",
                    "message": "MinterRoleMock.removeMinter (ERC20MintableMock.sol#443-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 448,
                    "vulnerability_code": "  function onlyMinterMock() public view onlyMinter {\n",
                    "message": "MinterRoleMock.onlyMinterMock (ERC20MintableMock.sol#447-448) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20MintableMock.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20MintableMock.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20MintableMock.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20MintableMock.sol#307-315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (ERC20MintableMock.sol#398-401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (ERC20MintableMock.sol#403-406) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 453,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    super._removeMinter(account);\n",
                    "message": "Function 'MinterRoleMock._removeMinter' (ERC20MintableMock.sol#451-453) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/PullPaymentMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _escrow = new Escrow();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n",
                    "message": "Secondary.primary (PullPaymentMock.sol#103-105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n",
                    "message": "Secondary.transferPrimary (PullPaymentMock.sol#111-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 145,
                    "vulnerability_code": "  function depositsOf(address payee) public view returns (uint256) {\n\n    return _deposits[payee];\n",
                    "message": "Escrow.depositsOf (PullPaymentMock.sol#143-145) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function deposit(address payee) public onlyPrimary payable {\n\n    uint256 amount = msg.value;\n\n    _deposits[payee] = _deposits[payee].add(amount);\n\n\n\n    emit Deposited(payee, amount);\n",
                    "message": "Escrow.deposit (PullPaymentMock.sol#151-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "  function withdraw(address payee) public onlyPrimary {\n\n    uint256 payment = _deposits[payee];\n\n\n\n    _deposits[payee] = 0;\n\n\n\n    payee.transfer(payment);\n\n\n\n    emit Withdrawn(payee, payment);\n",
                    "message": "Escrow.withdraw (PullPaymentMock.sol#162-170) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 195,
                    "vulnerability_code": "  function withdrawPayments(address payee) public {\n\n    _escrow.withdraw(payee);\n",
                    "message": "PullPayment.withdrawPayments (PullPaymentMock.sol#193-195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 203,
                    "vulnerability_code": "  function payments(address dest) public view returns (uint256) {\n\n    return _escrow.depositsOf(dest);\n",
                    "message": "PullPayment.payments (PullPaymentMock.sol#201-203) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 227,
                    "vulnerability_code": "  function callTransfer(address dest, uint256 amount) public {\n\n    _asyncTransfer(dest, amount);\n",
                    "message": "PullPaymentMock.callTransfer (PullPaymentMock.sol#225-227) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "  function _asyncTransfer(address dest, uint256 amount) internal {\n\n    _escrow.deposit.value(amount)(dest);\n",
                    "message": "Function 'PullPayment._asyncTransfer' (PullPaymentMock.sol#210-212) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract PullPaymentMock is PullPayment {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _deposits;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Escrow private _escrow;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/PostDeliveryCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 602,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    TimedCrowdsale(openingTime, closingTime)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Crowdsale(rate, wallet, token)\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_30"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ PostDeliveryCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.rate (function @ PostDeliveryCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ PostDeliveryCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.wallet (function @ PostDeliveryCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ PostDeliveryCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.token (function @ PostDeliveryCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ PostDeliveryCrowdsaleImpl.sol#486) shadows:\n\t- TimedCrowdsale.openingTime (function @ PostDeliveryCrowdsaleImpl.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ PostDeliveryCrowdsaleImpl.sol#486) shadows:\n\t- TimedCrowdsale.closingTime (function @ PostDeliveryCrowdsaleImpl.sol#505-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "PostDeliveryCrowdsaleImpl.constructor.openingTime (local variable @ PostDeliveryCrowdsaleImpl.sol#603) shadows:\n\t- TimedCrowdsale.openingTime (function @ PostDeliveryCrowdsaleImpl.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "PostDeliveryCrowdsaleImpl.constructor.closingTime (local variable @ PostDeliveryCrowdsaleImpl.sol#604) shadows:\n\t- TimedCrowdsale.closingTime (function @ PostDeliveryCrowdsaleImpl.sol#505-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "PostDeliveryCrowdsaleImpl.constructor.rate (local variable @ PostDeliveryCrowdsaleImpl.sol#605) shadows:\n\t- Crowdsale.rate (function @ PostDeliveryCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "PostDeliveryCrowdsaleImpl.constructor.wallet (local variable @ PostDeliveryCrowdsaleImpl.sol#606) shadows:\n\t- Crowdsale.wallet (function @ PostDeliveryCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": 608,
                    "vulnerability_code": "    IERC20 token\n",
                    "message": "PostDeliveryCrowdsaleImpl.constructor.token (local variable @ PostDeliveryCrowdsaleImpl.sol#607-608) shadows:\n\t- Crowdsale.token (function @ PostDeliveryCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (PostDeliveryCrowdsaleImpl.sol#486-494) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (PostDeliveryCrowdsaleImpl.sol#488)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (PostDeliveryCrowdsaleImpl.sol#512-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (PostDeliveryCrowdsaleImpl.sol#514)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (PostDeliveryCrowdsaleImpl.sol#521-525) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (PostDeliveryCrowdsaleImpl.sol#523)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (PostDeliveryCrowdsaleImpl.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (PostDeliveryCrowdsaleImpl.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (PostDeliveryCrowdsaleImpl.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (PostDeliveryCrowdsaleImpl.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "  function openingTime() public view returns(uint256) {\n\n    return _openingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.openingTime (PostDeliveryCrowdsaleImpl.sol#498-501) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": 508,
                    "vulnerability_code": "  function closingTime() public view returns(uint256) {\n\n    return _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.closingTime (PostDeliveryCrowdsaleImpl.sol#505-508) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 571,
                    "vulnerability_code": "  function withdrawTokens(address beneficiary) public {\n\n    require(hasClosed());\n\n    uint256 amount = _balances[beneficiary];\n\n    require(amount > 0);\n\n    _balances[beneficiary] = 0;\n\n    _deliverTokens(beneficiary, amount);\n\n  }\n",
                    "message": "PostDeliveryCrowdsale.withdrawTokens (PostDeliveryCrowdsaleImpl.sol#564-571) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": 578,
                    "vulnerability_code": "  function balanceOf(address account) public view returns(uint256) {\n\n    return _balances[account];\n\n  }\n",
                    "message": "PostDeliveryCrowdsale.balanceOf (PostDeliveryCrowdsaleImpl.sol#575-578) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (PostDeliveryCrowdsaleImpl.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (PostDeliveryCrowdsaleImpl.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (PostDeliveryCrowdsaleImpl.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (PostDeliveryCrowdsaleImpl.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (PostDeliveryCrowdsaleImpl.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (PostDeliveryCrowdsaleImpl.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (PostDeliveryCrowdsaleImpl.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (PostDeliveryCrowdsaleImpl.sol#531-541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": 592,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\n\n  }\n",
                    "message": "Function 'PostDeliveryCrowdsale._processPurchase' (PostDeliveryCrowdsaleImpl.sol#584-592) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC721PausableMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 650,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addPauser(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 696,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 697,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _paused = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_36"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721PausableMock.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721PausableMock.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721PausableMock.sol#52)\n\t-transferFrom (ERC721PausableMock.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721PausableMock.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721PausableMock.sol#343-350)\n\t-transferFrom (ERC721PausableMock.sol#400-415)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 749,
                    "vulnerability_to_line": 780,
                    "vulnerability_code": "contract ERC721Pausable is ERC721, Pausable {\n\n  function approve(\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    whenNotPaused\n\n  {\n\n    super.approve(to, tokenId);\n\n  }\n\n\n\n  function setApprovalForAll(\n\n    address to,\n\n    bool approved\n\n  )\n\n    public\n\n    whenNotPaused\n\n  {\n\n    super.setApprovalForAll(to, approved);\n\n  }\n\n\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    whenNotPaused\n\n  {\n\n    super.transferFrom(from, to, tokenId);\n\n  }\n",
                    "message": "ERC721Pausable (ERC721PausableMock.sol#749-780) has incorrect ERC20 function interface(s):\n\t-approve (ERC721PausableMock.sol#750-758)\n\t-transferFrom (ERC721PausableMock.sol#770-779)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721PausableMock.sol#191-202)\n\t- ERC721PausableMock.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n",
                    "message": "ERC721.balanceOf (ERC721PausableMock.sol#319-322) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (ERC721PausableMock.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721PausableMock.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721PausableMock.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721PausableMock.sol#97-104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 663,
                    "vulnerability_to_line": 665,
                    "vulnerability_code": "  function addPauser(address account) public onlyPauser {\n\n    _addPauser(account);\n",
                    "message": "PauserRole.addPauser (ERC721PausableMock.sol#663-665) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 667,
                    "vulnerability_to_line": 669,
                    "vulnerability_code": "  function renouncePauser() public {\n\n    _removePauser(msg.sender);\n",
                    "message": "PauserRole.renouncePauser (ERC721PausableMock.sol#667-669) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": 705,
                    "vulnerability_code": "  function paused() public view returns(bool) {\n\n    return _paused;\n",
                    "message": "Pausable.paused (ERC721PausableMock.sol#703-705) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": 729,
                    "vulnerability_code": "  function pause() public onlyPauser whenNotPaused {\n\n    _paused = true;\n\n    emit Paused(msg.sender);\n",
                    "message": "Pausable.pause (ERC721PausableMock.sol#726-729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": 737,
                    "vulnerability_code": "  function unpause() public onlyPauser whenPaused {\n\n    _paused = false;\n\n    emit Unpaused(msg.sender);\n",
                    "message": "Pausable.unpause (ERC721PausableMock.sol#734-737) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": 789,
                    "vulnerability_code": "  function removePauser(address account) public {\n\n    _removePauser(account);\n",
                    "message": "PauserRoleMock.removePauser (ERC721PausableMock.sol#787-789) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": 792,
                    "vulnerability_code": "  function onlyPauserMock() public view onlyPauser {\n",
                    "message": "PauserRoleMock.onlyPauserMock (ERC721PausableMock.sol#791-792) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": 812,
                    "vulnerability_code": "  function mint(address to, uint256 tokenId) public {\n\n    super._mint(to, tokenId);\n",
                    "message": "ERC721PausableMock.mint (ERC721PausableMock.sol#810-812) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": 816,
                    "vulnerability_code": "  function burn(uint256 tokenId) public {\n\n    super._burn(ownerOf(tokenId), tokenId);\n",
                    "message": "ERC721PausableMock.burn (ERC721PausableMock.sol#814-816) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": 820,
                    "vulnerability_code": "  function exists(uint256 tokenId) public view returns (bool) {\n\n    return super._exists(tokenId);\n",
                    "message": "ERC721PausableMock.exists (ERC721PausableMock.sol#818-820) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721PausableMock.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721PausableMock.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721PausableMock.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721PausableMock.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721PausableMock.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721PausableMock.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721PausableMock.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721PausableMock.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721PausableMock.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721PausableMock.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721PausableMock.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721PausableMock.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721PausableMock.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": 674,
                    "vulnerability_code": "  function _addPauser(address account) internal {\n\n    pausers.add(account);\n\n    emit PauserAdded(account);\n",
                    "message": "Function 'PauserRole._addPauser' (ERC721PausableMock.sol#671-674) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": 679,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    pausers.remove(account);\n\n    emit PauserRemoved(account);\n",
                    "message": "Function 'PauserRole._removePauser' (ERC721PausableMock.sol#676-679) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 795,
                    "vulnerability_to_line": 797,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    super._removePauser(account);\n",
                    "message": "Function 'PauserRoleMock._removePauser' (ERC721PausableMock.sol#795-797) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 784,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private pausers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _paused;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC721FullMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 642,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interface to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721Enumerable);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 808,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 809,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(InterfaceId_ERC721Metadata);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 880,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 943,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 945,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1065,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC721Mintable()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1066,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC721Full(name, symbol)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1067,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _ownedTokens[from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _allTokens.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_53"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721FullMock.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721FullMock.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721FullMock.sol#52)\n\t-transferFrom (ERC721FullMock.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721FullMock.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721FullMock.sol#343-350)\n\t-transferFrom (ERC721FullMock.sol#400-415)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "ERC721Metadata.constructor.name (local variable @ ERC721FullMock.sol#804) shadows:\n\t- ERC721Metadata.name (function @ ERC721FullMock.sol#816-818)\n\t- IERC721Metadata.name (function @ ERC721FullMock.sol#772)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "ERC721Metadata.constructor.symbol (local variable @ ERC721FullMock.sol#804) shadows:\n\t- ERC721Metadata.symbol (function @ ERC721FullMock.sol#824-826)\n\t- IERC721Metadata.symbol (function @ ERC721FullMock.sol#773)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": "ERC721Full.constructor.name (local variable @ ERC721FullMock.sol#878) shadows:\n\t- ERC721Metadata.name (function @ ERC721FullMock.sol#816-818)\n\t- IERC721Metadata.name (function @ ERC721FullMock.sol#772)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": "ERC721Full.constructor.symbol (local variable @ ERC721FullMock.sol#878) shadows:\n\t- ERC721Metadata.symbol (function @ ERC721FullMock.sol#824-826)\n\t- IERC721Metadata.symbol (function @ ERC721FullMock.sol#773)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string tokenURI\n",
                    "message": "ERC721MetadataMintable.mintWithTokenURI.tokenURI (local variable @ ERC721FullMock.sol#1024) shadows:\n\t- ERC721Metadata.tokenURI (function @ ERC721FullMock.sol#833-836)\n\t- IERC721Metadata.tokenURI (function @ ERC721FullMock.sol#774)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public\n",
                    "message": "ERC721FullMock.constructor.name (local variable @ ERC721FullMock.sol#1064) shadows:\n\t- ERC721Metadata.name (function @ ERC721FullMock.sol#816-818)\n\t- IERC721Metadata.name (function @ ERC721FullMock.sol#772)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public\n",
                    "message": "ERC721FullMock.constructor.symbol (local variable @ ERC721FullMock.sol#1064) shadows:\n\t- ERC721Metadata.symbol (function @ ERC721FullMock.sol#824-826)\n\t- IERC721Metadata.symbol (function @ ERC721FullMock.sol#773)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721FullMock.sol#191-202)\n\t- ERC721FullMock.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721FullMock.sol#343-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721FullMock.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721FullMock.sol#369-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721FullMock.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721FullMock.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721FullMock.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721FullMock.sol#97-104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 601,
                    "vulnerability_to_line": 607,
                    "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (ERC721FullMock.sol#601-607) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 663,
                    "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    require(index < balanceOf(owner));\n\n    return _ownedTokens[owner][index];\n",
                    "message": "ERC721Enumerable.tokenOfOwnerByIndex (ERC721FullMock.sol#653-663) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": 682,
                    "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256) {\n\n    require(index < totalSupply());\n\n    return _allTokens[index];\n",
                    "message": "ERC721Enumerable.tokenByIndex (ERC721FullMock.sol#679-682) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (ERC721FullMock.sol#609) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 956,
                    "vulnerability_to_line": 958,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (ERC721FullMock.sol#956-958) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": 962,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (ERC721FullMock.sol#960-962) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 991,
                    "vulnerability_to_line": 1001,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, tokenId);\n\n    return true;\n",
                    "message": "ERC721Mintable.mint (ERC721FullMock.sol#991-1001) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1021,
                    "vulnerability_to_line": 1033,
                    "vulnerability_code": "  function mintWithTokenURI(\n\n    address to,\n\n    uint256 tokenId,\n\n    string tokenURI\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, tokenId);\n\n    _setTokenURI(tokenId, tokenURI);\n\n    return true;\n",
                    "message": "ERC721MetadataMintable.mintWithTokenURI (ERC721FullMock.sol#1021-1033) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1041,
                    "vulnerability_to_line": 1046,
                    "vulnerability_code": "  function burn(uint256 tokenId)\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    _burn(ownerOf(tokenId), tokenId);\n",
                    "message": "ERC721Burnable.burn (ERC721FullMock.sol#1041-1046) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1069,
                    "vulnerability_to_line": 1071,
                    "vulnerability_code": "  function exists(uint256 tokenId) public view returns (bool) {\n\n    return _exists(tokenId);\n",
                    "message": "ERC721FullMock.exists (ERC721FullMock.sol#1069-1071) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": 1075,
                    "vulnerability_code": "  function setTokenURI(uint256 tokenId, string uri) public {\n\n    _setTokenURI(tokenId, uri);\n",
                    "message": "ERC721FullMock.setTokenURI (ERC721FullMock.sol#1073-1075) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1077,
                    "vulnerability_to_line": 1079,
                    "vulnerability_code": "  function removeTokenFrom(address from, uint256 tokenId) public {\n\n    _removeTokenFrom(from, tokenId);\n",
                    "message": "ERC721FullMock.removeTokenFrom (ERC721FullMock.sol#1077-1079) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721FullMock.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721FullMock.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721FullMock.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721FullMock.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721FullMock.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721FullMock.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721FullMock.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721FullMock.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721FullMock.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721FullMock.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721FullMock.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721FullMock.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721FullMock.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": 738,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    super._mint(to, tokenId);\n\n\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n\n    _allTokens.push(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._mint' (ERC721FullMock.sol#733-738) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 760,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    super._burn(owner, tokenId);\n\n\n\n    // Reorg all tokens array\n\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n\n\n    _allTokens[tokenIndex] = lastToken;\n\n    _allTokens[lastTokenIndex] = 0;\n\n\n\n    _allTokens.length--;\n\n    _allTokensIndex[tokenId] = 0;\n\n    _allTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._burn' (ERC721FullMock.sol#746-760) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": 696,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    super._addTokenTo(to, tokenId);\n\n    uint256 length = _ownedTokens[to].length;\n\n    _ownedTokens[to].push(tokenId);\n\n    _ownedTokensIndex[tokenId] = length;\n",
                    "message": "Function 'ERC721Enumerable._addTokenTo' (ERC721FullMock.sol#691-696) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": 725,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    super._removeTokenFrom(from, tokenId);\n\n\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n\n    // then delete the last slot.\n\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n\n    // This also deletes the contents at the last position of the array\n\n    _ownedTokens[from].length--;\n\n\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\n\n    _ownedTokensIndex[tokenId] = 0;\n\n    _ownedTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._removeTokenFrom' (ERC721FullMock.sol#706-725) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": "Constant 'ERC721Enumerable._InterfaceId_ERC721Enumerable' (ERC721FullMock.sol#631) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": 862,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    super._burn(owner, tokenId);\n\n\n\n    // Clear metadata (if any)\n\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n\n      delete _tokenURIs[tokenId];\n\n    }\n",
                    "message": "Function 'ERC721Metadata._burn' (ERC721FullMock.sol#855-862) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": 847,
                    "vulnerability_code": "  function _setTokenURI(uint256 tokenId, string uri) internal {\n\n    require(_exists(tokenId));\n\n    _tokenURIs[tokenId] = uri;\n",
                    "message": "Function 'ERC721Metadata._setTokenURI' (ERC721FullMock.sol#844-847) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": "Constant 'ERC721Metadata.InterfaceId_ERC721Metadata' (ERC721FullMock.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": 967,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (ERC721FullMock.sol#964-967) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": 972,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (ERC721FullMock.sol#969-972) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _ownedTokens[from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _allTokens.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 765,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 779,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 886,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 933,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 977,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1006,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256[]) private _ownedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => uint256) private _ownedTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => uint256) private _allTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 785,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => string) private _tokenURIs;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 941,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _setTokenURI(uint256 tokenId, string uri) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string tokenURI\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTokenURI(uint256 tokenId, string uri) public {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/AllowanceCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address tokenWallet) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(tokenWallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenWallet = tokenWallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address tokenWallet\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Crowdsale(rate, wallet, token)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    AllowanceCrowdsale(tokenWallet)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_21"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ AllowanceCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.rate (function @ AllowanceCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ AllowanceCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.wallet (function @ AllowanceCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ AllowanceCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.token (function @ AllowanceCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address tokenWallet) internal {\n",
                    "message": "AllowanceCrowdsale.constructor.tokenWallet (local variable @ AllowanceCrowdsaleImpl.sol#514) shadows:\n\t- AllowanceCrowdsale.tokenWallet (function @ AllowanceCrowdsaleImpl.sol#522-525)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "AllowanceCrowdsaleImpl.constructor.rate (local variable @ AllowanceCrowdsaleImpl.sol#560) shadows:\n\t- Crowdsale.rate (function @ AllowanceCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "AllowanceCrowdsaleImpl.constructor.wallet (local variable @ AllowanceCrowdsaleImpl.sol#561) shadows:\n\t- Crowdsale.wallet (function @ AllowanceCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token,\n",
                    "message": "AllowanceCrowdsaleImpl.constructor.token (local variable @ AllowanceCrowdsaleImpl.sol#562) shadows:\n\t- Crowdsale.token (function @ AllowanceCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 564,
                    "vulnerability_code": "    address tokenWallet\n",
                    "message": "AllowanceCrowdsaleImpl.constructor.tokenWallet (local variable @ AllowanceCrowdsaleImpl.sol#563-564) shadows:\n\t- AllowanceCrowdsale.tokenWallet (function @ AllowanceCrowdsaleImpl.sol#522-525)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (AllowanceCrowdsaleImpl.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (AllowanceCrowdsaleImpl.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (AllowanceCrowdsaleImpl.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function tokenWallet() public view returns(address) {\n\n    return _tokenWallet;\n\n  }\n",
                    "message": "AllowanceCrowdsale.tokenWallet (AllowanceCrowdsaleImpl.sol#522-525) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": 536,
                    "vulnerability_code": "  function remainingTokens() public view returns (uint256) {\n\n    return Math.min(\n\n      token().balanceOf(_tokenWallet),\n\n      token().allowance(_tokenWallet, this)\n\n    );\n\n  }\n",
                    "message": "AllowanceCrowdsale.remainingTokens (AllowanceCrowdsaleImpl.sol#530-536) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (AllowanceCrowdsaleImpl.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (AllowanceCrowdsaleImpl.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (AllowanceCrowdsaleImpl.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (AllowanceCrowdsaleImpl.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (AllowanceCrowdsaleImpl.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (AllowanceCrowdsaleImpl.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (AllowanceCrowdsaleImpl.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": 550,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'AllowanceCrowdsale._deliverTokens' (AllowanceCrowdsaleImpl.sol#542-550) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _tokenWallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/RolesMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function add(address account) public {\n\n    dummyRole.add(account);\n",
                    "message": "RolesMock.add (RolesMock.sol#57-59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 63,
                    "vulnerability_code": "  function remove(address account) public {\n\n    dummyRole.remove(account);\n",
                    "message": "RolesMock.remove (RolesMock.sol#61-63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 67,
                    "vulnerability_code": "  function has(address account) public view returns (bool) {\n\n    return dummyRole.has(account);\n",
                    "message": "RolesMock.has (RolesMock.sol#65-67) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private dummyRole;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/IndividuallyCappedCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 519,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addCapper(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 663,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Crowdsale(rate, wallet, token)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 666,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_28"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ IndividuallyCappedCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.rate (function @ IndividuallyCappedCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ IndividuallyCappedCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.wallet (function @ IndividuallyCappedCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ IndividuallyCappedCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.token (function @ IndividuallyCappedCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "IndividuallyCappedCrowdsaleImpl.constructor.rate (local variable @ IndividuallyCappedCrowdsaleImpl.sol#660) shadows:\n\t- Crowdsale.rate (function @ IndividuallyCappedCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "IndividuallyCappedCrowdsaleImpl.constructor.wallet (local variable @ IndividuallyCappedCrowdsaleImpl.sol#661) shadows:\n\t- Crowdsale.wallet (function @ IndividuallyCappedCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": 663,
                    "vulnerability_code": "    IERC20 token\n",
                    "message": "IndividuallyCappedCrowdsaleImpl.constructor.token (local variable @ IndividuallyCappedCrowdsaleImpl.sol#662-663) shadows:\n\t- Crowdsale.token (function @ IndividuallyCappedCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (IndividuallyCappedCrowdsaleImpl.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (IndividuallyCappedCrowdsaleImpl.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (IndividuallyCappedCrowdsaleImpl.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (IndividuallyCappedCrowdsaleImpl.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 534,
                    "vulnerability_code": "  function addCapper(address account) public onlyCapper {\n\n    _addCapper(account);\n\n  }\n",
                    "message": "CapperRole.addCapper (IndividuallyCappedCrowdsaleImpl.sol#531-534) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": 538,
                    "vulnerability_code": "  function renounceCapper() public {\n\n    _removeCapper(msg.sender);\n\n  }\n",
                    "message": "CapperRole.renounceCapper (IndividuallyCappedCrowdsaleImpl.sol#535-538) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": 585,
                    "vulnerability_code": "  function getCap(address beneficiary) public view returns (uint256) {\n\n    return _caps[beneficiary];\n\n  }\n",
                    "message": "IndividuallyCappedCrowdsale.getCap (IndividuallyCappedCrowdsaleImpl.sol#582-585) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 596,
                    "vulnerability_code": "  function getContribution(address beneficiary)\n\n    public view returns (uint256)\n\n  {\n\n    return _contributions[beneficiary];\n\n  }\n",
                    "message": "IndividuallyCappedCrowdsale.getContribution (IndividuallyCappedCrowdsaleImpl.sol#591-596) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 637,
                    "vulnerability_to_line": 640,
                    "vulnerability_code": "  function removeCapper(address account) public {\n\n    _removeCapper(account);\n\n  }\n",
                    "message": "CapperRoleMock.removeCapper (IndividuallyCappedCrowdsaleImpl.sol#637-640) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 641,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "  function onlyCapperMock() public view onlyCapper {\n\n  }\n",
                    "message": "CapperRoleMock.onlyCapperMock (IndividuallyCappedCrowdsaleImpl.sol#641-643) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (IndividuallyCappedCrowdsaleImpl.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (IndividuallyCappedCrowdsaleImpl.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (IndividuallyCappedCrowdsaleImpl.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (IndividuallyCappedCrowdsaleImpl.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (IndividuallyCappedCrowdsaleImpl.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (IndividuallyCappedCrowdsaleImpl.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (IndividuallyCappedCrowdsaleImpl.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": 543,
                    "vulnerability_code": "  function _addCapper(address account) internal {\n\n    cappers.add(account);\n\n    emit CapperAdded(account);\n\n  }\n",
                    "message": "Function 'CapperRole._addCapper' (IndividuallyCappedCrowdsaleImpl.sol#539-543) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": 548,
                    "vulnerability_code": "  function _removeCapper(address account) internal {\n\n    cappers.remove(account);\n\n    emit CapperRemoved(account);\n\n  }\n",
                    "message": "Function 'CapperRole._removeCapper' (IndividuallyCappedCrowdsaleImpl.sol#544-548) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 602,
                    "vulnerability_to_line": 613,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n    require(\n\n      _contributions[beneficiary].add(weiAmount) <= _caps[beneficiary]);\n\n  }\n",
                    "message": "Function 'IndividuallyCappedCrowdsale._preValidatePurchase' (IndividuallyCappedCrowdsaleImpl.sol#602-613) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 619,
                    "vulnerability_to_line": 629,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    super._updatePurchasingState(beneficiary, weiAmount);\n\n    _contributions[beneficiary] = _contributions[beneficiary].add(\n\n      weiAmount);\n\n  }\n",
                    "message": "Function 'IndividuallyCappedCrowdsale._updatePurchasingState' (IndividuallyCappedCrowdsaleImpl.sol#619-629) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": 648,
                    "vulnerability_code": "  function _removeCapper(address account) internal {\n\n    super._removeCapper(account);\n\n  }\n",
                    "message": "Function 'CapperRoleMock._removeCapper' (IndividuallyCappedCrowdsaleImpl.sol#645-648) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private cappers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _contributions;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _caps;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ConditionalEscrowMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n",
                    "message": "Secondary.primary (ConditionalEscrowMock.sol#103-105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n",
                    "message": "Secondary.transferPrimary (ConditionalEscrowMock.sol#111-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 145,
                    "vulnerability_code": "  function depositsOf(address payee) public view returns (uint256) {\n\n    return _deposits[payee];\n",
                    "message": "Escrow.depositsOf (ConditionalEscrowMock.sol#143-145) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function deposit(address payee) public onlyPrimary payable {\n\n    uint256 amount = msg.value;\n\n    _deposits[payee] = _deposits[payee].add(amount);\n\n\n\n    emit Deposited(payee, amount);\n",
                    "message": "Escrow.deposit (ConditionalEscrowMock.sol#151-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function setAllowed(address payee, bool allowed) public {\n\n    _allowed[payee] = allowed;\n",
                    "message": "ConditionalEscrowMock.setAllowed (ConditionalEscrowMock.sol#204-206) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _deposits;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => bool) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/DetailedERC20Mock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string symbol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 decimals\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC20Detailed(name, symbol, decimals)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {}\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_27"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ DetailedERC20Mock.sol#333) shadows:\n\t- ERC20Detailed.name (function @ DetailedERC20Mock.sol#342-344)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ DetailedERC20Mock.sol#333) shadows:\n\t- ERC20Detailed.symbol (function @ DetailedERC20Mock.sol#349-351)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ DetailedERC20Mock.sol#333) shadows:\n\t- ERC20Detailed.decimals (function @ DetailedERC20Mock.sol#356-358)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string name,\n",
                    "message": "ERC20DetailedMock.constructor.name (local variable @ DetailedERC20Mock.sol#368) shadows:\n\t- ERC20Detailed.name (function @ DetailedERC20Mock.sol#342-344)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string symbol,\n",
                    "message": "ERC20DetailedMock.constructor.symbol (local variable @ DetailedERC20Mock.sol#369) shadows:\n\t- ERC20Detailed.symbol (function @ DetailedERC20Mock.sol#349-351)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 decimals\n",
                    "message": "ERC20DetailedMock.constructor.decimals (local variable @ DetailedERC20Mock.sol#370) shadows:\n\t- ERC20Detailed.decimals (function @ DetailedERC20Mock.sol#356-358)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (DetailedERC20Mock.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (DetailedERC20Mock.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (DetailedERC20Mock.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (DetailedERC20Mock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (DetailedERC20Mock.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (DetailedERC20Mock.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (DetailedERC20Mock.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (DetailedERC20Mock.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (DetailedERC20Mock.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (DetailedERC20Mock.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (DetailedERC20Mock.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (DetailedERC20Mock.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (DetailedERC20Mock.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (DetailedERC20Mock.sol#241-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": 344,
                    "vulnerability_code": "  function name() public view returns(string) {\n\n    return _name;\n",
                    "message": "ERC20Detailed.name (DetailedERC20Mock.sol#342-344) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "  function symbol() public view returns(string) {\n\n    return _symbol;\n",
                    "message": "ERC20Detailed.symbol (DetailedERC20Mock.sol#349-351) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": 358,
                    "vulnerability_code": "  function decimals() public view returns(uint8) {\n\n    return _decimals;\n",
                    "message": "ERC20Detailed.decimals (DetailedERC20Mock.sol#356-358) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (DetailedERC20Mock.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (DetailedERC20Mock.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (DetailedERC20Mock.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (DetailedERC20Mock.sol#307-315) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns(string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns(string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string symbol,\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/SignerRoleMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addSigner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function addSigner(address account) public onlySigner {\n\n    _addSigner(account);\n",
                    "message": "SignerRole.addSigner (SignerRoleMock.sol#73-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function renounceSigner() public {\n\n    _removeSigner(msg.sender);\n",
                    "message": "SignerRole.renounceSigner (SignerRoleMock.sol#77-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "  function removeSigner(address account) public {\n\n    _removeSigner(account);\n",
                    "message": "SignerRoleMock.removeSigner (SignerRoleMock.sol#97-99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "  function onlySignerMock() public view onlySigner {\n",
                    "message": "SignerRoleMock.onlySignerMock (SignerRoleMock.sol#101-102) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function _addSigner(address account) internal {\n\n    signers.add(account);\n\n    emit SignerAdded(account);\n",
                    "message": "Function 'SignerRole._addSigner' (SignerRoleMock.sol#81-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function _removeSigner(address account) internal {\n\n    signers.remove(account);\n\n    emit SignerRemoved(account);\n",
                    "message": "Function 'SignerRole._removeSigner' (SignerRoleMock.sol#86-89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "  function _removeSigner(address account) internal {\n\n    super._removeSigner(account);\n",
                    "message": "Function 'SignerRoleMock._removeSigner' (SignerRoleMock.sol#105-107) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private signers;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/RefundableCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 819,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 820,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 821,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 823,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 824,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 894,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _finalized = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 945,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 947,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address beneficiary) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1083,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(beneficiary != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1084,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _beneficiary = beneficiary;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1085,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _state = State.Active;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1086,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 goal) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(goal > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _escrow = new RefundEscrow(wallet());\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _goal = goal;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC20Mintable token,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 goal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Crowdsale(rate, wallet, token)\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_66"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": 1138,
                    "vulnerability_code": "  function beneficiaryWithdraw() public {\n\n    require(_state == State.Closed);\n\n    _beneficiary.transfer(address(this).balance);\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiaryWithdraw (RefundableCrowdsaleImpl.sol#1133-1138) sends eth to arbitrary user\n\tDangerous calls:\n\t- _beneficiary.transfer(address(this).balance) (RefundableCrowdsaleImpl.sol#1135-1136)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ RefundableCrowdsaleImpl.sol#608) shadows:\n\t- Crowdsale.rate (function @ RefundableCrowdsaleImpl.sol#649-652)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ RefundableCrowdsaleImpl.sol#608) shadows:\n\t- Crowdsale.wallet (function @ RefundableCrowdsaleImpl.sol#642-645)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ RefundableCrowdsaleImpl.sol#608) shadows:\n\t- Crowdsale.token (function @ RefundableCrowdsaleImpl.sol#635-638)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ RefundableCrowdsaleImpl.sol#818) shadows:\n\t- TimedCrowdsale.openingTime (function @ RefundableCrowdsaleImpl.sol#830-833)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ RefundableCrowdsaleImpl.sol#818) shadows:\n\t- TimedCrowdsale.closingTime (function @ RefundableCrowdsaleImpl.sol#837-840)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address beneficiary) public {\n",
                    "message": "RefundEscrow.constructor.beneficiary (local variable @ RefundableCrowdsaleImpl.sol#1082) shadows:\n\t- RefundEscrow.beneficiary (function @ RefundableCrowdsaleImpl.sol#1098-1102)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 goal) internal {\n",
                    "message": "RefundableCrowdsale.constructor.goal (local variable @ RefundableCrowdsaleImpl.sol#1183) shadows:\n\t- RefundableCrowdsale.goal (function @ RefundableCrowdsaleImpl.sol#1192-1196)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1246,
                    "vulnerability_to_line": 1247,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "RefundableCrowdsaleImpl.constructor.openingTime (local variable @ RefundableCrowdsaleImpl.sol#1246-1247) shadows:\n\t- TimedCrowdsale.openingTime (function @ RefundableCrowdsaleImpl.sol#830-833)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": 1248,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "RefundableCrowdsaleImpl.constructor.closingTime (local variable @ RefundableCrowdsaleImpl.sol#1247-1248) shadows:\n\t- TimedCrowdsale.closingTime (function @ RefundableCrowdsaleImpl.sol#837-840)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": 1249,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "RefundableCrowdsaleImpl.constructor.rate (local variable @ RefundableCrowdsaleImpl.sol#1248-1249) shadows:\n\t- Crowdsale.rate (function @ RefundableCrowdsaleImpl.sol#649-652)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1249,
                    "vulnerability_to_line": 1250,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "RefundableCrowdsaleImpl.constructor.wallet (local variable @ RefundableCrowdsaleImpl.sol#1249-1250) shadows:\n\t- Crowdsale.wallet (function @ RefundableCrowdsaleImpl.sol#642-645)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": 1251,
                    "vulnerability_code": "    ERC20Mintable token,\n",
                    "message": "RefundableCrowdsaleImpl.constructor.token (local variable @ RefundableCrowdsaleImpl.sol#1250-1251) shadows:\n\t- Crowdsale.token (function @ RefundableCrowdsaleImpl.sol#635-638)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1251,
                    "vulnerability_to_line": 1252,
                    "vulnerability_code": "    uint256 goal\n",
                    "message": "RefundableCrowdsaleImpl.constructor.goal (local variable @ RefundableCrowdsaleImpl.sol#1251-1252) shadows:\n\t- RefundableCrowdsale.goal (function @ RefundableCrowdsaleImpl.sol#1192-1196)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": 826,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (RefundableCrowdsaleImpl.sol#818-826) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (RefundableCrowdsaleImpl.sol#820)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": 848,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (RefundableCrowdsaleImpl.sol#844-848) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (RefundableCrowdsaleImpl.sol#846)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": 857,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (RefundableCrowdsaleImpl.sol#853-857) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (RefundableCrowdsaleImpl.sol#855)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (RefundableCrowdsaleImpl.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (RefundableCrowdsaleImpl.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (RefundableCrowdsaleImpl.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (RefundableCrowdsaleImpl.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (RefundableCrowdsaleImpl.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (RefundableCrowdsaleImpl.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (RefundableCrowdsaleImpl.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (RefundableCrowdsaleImpl.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (RefundableCrowdsaleImpl.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (RefundableCrowdsaleImpl.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (RefundableCrowdsaleImpl.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (RefundableCrowdsaleImpl.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (RefundableCrowdsaleImpl.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (RefundableCrowdsaleImpl.sol#241-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 392,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (RefundableCrowdsaleImpl.sol#390-392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (RefundableCrowdsaleImpl.sol#394-396) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": 435,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, value);\n\n    return true;\n",
                    "message": "ERC20Mintable.mint (RefundableCrowdsaleImpl.sol#425-435) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": 638,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (RefundableCrowdsaleImpl.sol#635-638) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": 652,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (RefundableCrowdsaleImpl.sol#649-652) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": 833,
                    "vulnerability_code": "  function openingTime() public view returns(uint256) {\n\n    return _openingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.openingTime (RefundableCrowdsaleImpl.sol#830-833) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": 840,
                    "vulnerability_code": "  function closingTime() public view returns(uint256) {\n\n    return _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.closingTime (RefundableCrowdsaleImpl.sol#837-840) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": 917,
                    "vulnerability_code": "  function finalize() public {\n\n    require(!_finalized);\n\n    require(hasClosed());\n\n\n\n    _finalized = true;\n\n\n\n    _finalization();\n\n    emit CrowdsaleFinalized();\n\n  }\n",
                    "message": "FinalizableCrowdsale.finalize (RefundableCrowdsaleImpl.sol#908-917) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 961,
                    "vulnerability_to_line": 964,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n\n  }\n",
                    "message": "Secondary.primary (RefundableCrowdsaleImpl.sol#961-964) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": 974,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n\n  }\n",
                    "message": "Secondary.transferPrimary (RefundableCrowdsaleImpl.sol#969-974) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1001,
                    "vulnerability_to_line": 1004,
                    "vulnerability_code": "  function depositsOf(address payee) public view returns (uint256) {\n\n    return _deposits[payee];\n\n  }\n",
                    "message": "Escrow.depositsOf (RefundableCrowdsaleImpl.sol#1001-1004) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1091,
                    "vulnerability_to_line": 1095,
                    "vulnerability_code": "  function state() public view returns (State) {\n\n    return _state;\n\n  }\n\n\n",
                    "message": "RefundEscrow.state (RefundableCrowdsaleImpl.sol#1091-1095) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1098,
                    "vulnerability_to_line": 1102,
                    "vulnerability_code": "  function beneficiary() public view returns (address) {\n\n    return _beneficiary;\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiary (RefundableCrowdsaleImpl.sol#1098-1102) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1115,
                    "vulnerability_to_line": 1121,
                    "vulnerability_code": "  function close() public onlyPrimary {\n\n    require(_state == State.Active);\n\n    _state = State.Closed;\n\n    emit RefundsClosed();\n\n  }\n\n\n",
                    "message": "RefundEscrow.close (RefundableCrowdsaleImpl.sol#1115-1121) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1124,
                    "vulnerability_to_line": 1130,
                    "vulnerability_code": "  function enableRefunds() public onlyPrimary {\n\n    require(_state == State.Active);\n\n    _state = State.Refunding;\n\n    emit RefundsEnabled();\n\n  }\n\n\n",
                    "message": "RefundEscrow.enableRefunds (RefundableCrowdsaleImpl.sol#1124-1130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": 1138,
                    "vulnerability_code": "  function beneficiaryWithdraw() public {\n\n    require(_state == State.Closed);\n\n    _beneficiary.transfer(address(this).balance);\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiaryWithdraw (RefundableCrowdsaleImpl.sol#1133-1138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1192,
                    "vulnerability_to_line": 1196,
                    "vulnerability_code": "  function goal() public view returns(uint256) {\n\n    return _goal;\n\n  }\n\n\n",
                    "message": "RefundableCrowdsale.goal (RefundableCrowdsaleImpl.sol#1192-1196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1200,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "  function claimRefund(address beneficiary) public {\n\n    require(finalized());\n\n    require(!goalReached());\n\n\n\n    _escrow.withdraw(beneficiary);\n\n  }\n\n\n",
                    "message": "RefundableCrowdsale.claimRefund (RefundableCrowdsaleImpl.sol#1200-1207) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (RefundableCrowdsaleImpl.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (RefundableCrowdsaleImpl.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (RefundableCrowdsaleImpl.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (RefundableCrowdsaleImpl.sol#307-315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (RefundableCrowdsaleImpl.sol#398-401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (RefundableCrowdsaleImpl.sol#403-406) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": 713,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (RefundableCrowdsaleImpl.sol#703-713) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": 728,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (RefundableCrowdsaleImpl.sol#719-728) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": 742,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (RefundableCrowdsaleImpl.sol#734-742) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 748,
                    "vulnerability_to_line": 756,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (RefundableCrowdsaleImpl.sol#748-756) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 762,
                    "vulnerability_to_line": 770,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (RefundableCrowdsaleImpl.sol#762-770) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": 781,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (RefundableCrowdsaleImpl.sol#776-781) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 785,
                    "vulnerability_to_line": 788,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (RefundableCrowdsaleImpl.sol#785-788) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 873,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (RefundableCrowdsaleImpl.sol#863-873) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 923,
                    "vulnerability_to_line": 925,
                    "vulnerability_code": "  function _finalization() internal {\n\n  }\n",
                    "message": "Function 'FinalizableCrowdsale._finalization' (RefundableCrowdsaleImpl.sol#923-925) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1232,
                    "vulnerability_to_line": 1236,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _escrow.deposit.value(msg.value)(msg.sender);\n\n  }\n\n\n",
                    "message": "Function 'RefundableCrowdsale._forwardFunds' (RefundableCrowdsaleImpl.sol#1232-1236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1218,
                    "vulnerability_to_line": 1229,
                    "vulnerability_code": "  function _finalization() internal {\n\n    if (goalReached()) {\n\n      _escrow.close();\n\n      _escrow.beneficiaryWithdraw();\n\n    } else {\n\n      _escrow.enableRefunds();\n\n    }\n\n\n\n    super._finalization();\n\n  }\n\n\n",
                    "message": "Function 'RefundableCrowdsale._finalization' (RefundableCrowdsaleImpl.sol#1218-1229) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 929,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 978,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1033,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1056,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 572,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 581,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _finalized;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 936,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 999,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _deposits;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  State private _state;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1076,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _beneficiary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _goal;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  RefundEscrow private _escrow;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 887,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 994,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/EventEmitter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "  function emitArgumentless() public {\n\n    emit Argumentless();\n",
                    "message": "EventEmitter.emitArgumentless (EventEmitter.sol#20-22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "  function emitShortUint(uint8 value) public {\n\n    emit ShortUint(value);\n",
                    "message": "EventEmitter.emitShortUint (EventEmitter.sol#24-26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "  function emitShortInt(int8 value) public {\n\n    emit ShortInt(value);\n",
                    "message": "EventEmitter.emitShortInt (EventEmitter.sol#28-30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function emitLongUint(uint256 value) public {\n\n    emit LongUint(value);\n",
                    "message": "EventEmitter.emitLongUint (EventEmitter.sol#32-34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "  function emitLongInt(int256 value) public {\n\n    emit LongInt(value);\n",
                    "message": "EventEmitter.emitLongInt (EventEmitter.sol#36-38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function emitAddress(address value) public {\n\n    emit Address(value);\n",
                    "message": "EventEmitter.emitAddress (EventEmitter.sol#40-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "  function emitBoolean(bool value) public {\n\n    emit Boolean(value);\n",
                    "message": "EventEmitter.emitBoolean (EventEmitter.sol#44-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "  function emitString(string value) public {\n\n    emit String(value);\n",
                    "message": "EventEmitter.emitString (EventEmitter.sol#48-50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function emitLongUintBooleanString(\n\n    uint256 uintValue,\n\n    bool booleanValue,\n\n    string stringValue)\n\n  public {\n\n    emit LongUintBooleanString(uintValue, booleanValue, stringValue);\n",
                    "message": "EventEmitter.emitLongUintBooleanString (EventEmitter.sol#52-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 63,
                    "vulnerability_code": "  function emitLongUintAndBoolean(uint256 uintValue, bool boolValue) public {\n\n    emit LongUint(uintValue);\n\n    emit Boolean(boolValue);\n",
                    "message": "EventEmitter.emitLongUintAndBoolean (EventEmitter.sol#60-63) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitString(string value) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string stringValue)\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC20BurnableMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address initialAccount, uint256 initialBalance) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _mint(initialAccount, initialBalance);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_20"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20BurnableMock.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20BurnableMock.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20BurnableMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20BurnableMock.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20BurnableMock.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20BurnableMock.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (ERC20BurnableMock.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20BurnableMock.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20BurnableMock.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (ERC20BurnableMock.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (ERC20BurnableMock.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20BurnableMock.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20BurnableMock.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20BurnableMock.sol#241-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": 334,
                    "vulnerability_code": "  function burn(uint256 value) public {\n\n    _burn(msg.sender, value);\n",
                    "message": "ERC20Burnable.burn (ERC20BurnableMock.sol#332-334) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "  function burnFrom(address from, uint256 value) public {\n\n    _burnFrom(from, value);\n",
                    "message": "ERC20Burnable.burnFrom (ERC20BurnableMock.sol#341-343) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20BurnableMock.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20BurnableMock.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20BurnableMock.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20BurnableMock.sol#307-315) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC165CheckerMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory encodedParams = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _InterfaceId_ERC165,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      interfaceId\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _callERC165SupportsInterface(\n\n    address account,\n\n    bytes4 interfaceId\n\n  )\n\n    private\n\n    view\n\n    returns (bool success, bool result)\n\n  {\n\n    bytes memory encodedParams = abi.encodeWithSelector(\n\n      _InterfaceId_ERC165,\n\n      interfaceId\n\n    );\n\n\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      let encodedParams_data := add(0x20, encodedParams)\n\n      let encodedParams_size := mload(encodedParams)\n\n\n\n      let output := mload(0x40)  // Find empty storage location using \"free memory pointer\"\n\n      mstore(output, 0x0)\n\n\n\n      success := staticcall(\n\n        30000,                 // 30k gas\n\n        account,              // To addr\n\n        encodedParams_data,\n\n        encodedParams_size,\n\n        output,\n\n        0x20                   // Outputs are 32 bytes long\n\n      )\n\n\n\n      result := mload(output)  // Load the result\n\n    }\n",
                    "message": "ERC165Checker._callERC165SupportsInterface (ERC165CheckerMock.sol#115-147) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _callERC165SupportsInterface(\n\n    address account,\n\n    bytes4 interfaceId\n\n  )\n\n    private\n\n    view\n\n    returns (bool success, bool result)\n\n  {\n\n    bytes memory encodedParams = abi.encodeWithSelector(\n\n      _InterfaceId_ERC165,\n\n      interfaceId\n\n    );\n\n\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      let encodedParams_data := add(0x20, encodedParams)\n\n      let encodedParams_size := mload(encodedParams)\n\n\n\n      let output := mload(0x40)  // Find empty storage location using \"free memory pointer\"\n\n      mstore(output, 0x0)\n\n\n\n      success := staticcall(\n\n        30000,                 // 30k gas\n\n        account,              // To addr\n\n        encodedParams_data,\n\n        encodedParams_size,\n\n        output,\n\n        0x20                   // Outputs are 32 bytes long\n\n      )\n\n\n\n      result := mload(output)  // Load the result\n\n    }\n",
                    "message": "ERC165Checker._callERC165SupportsInterface uses assembly (ERC165CheckerMock.sol#115-147)\n\t- ERC165CheckerMock.sol#129-147\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "  function supportsERC165(address account)\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return account._supportsERC165();\n",
                    "message": "ERC165CheckerMock.supportsERC165 (ERC165CheckerMock.sol#157-163) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "  function supportsInterface(address account, bytes4 interfaceId)\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return account._supportsInterface(interfaceId);\n",
                    "message": "ERC165CheckerMock.supportsInterface (ERC165CheckerMock.sol#165-171) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "  function supportsAllInterfaces(address account, bytes4[] interfaceIds)\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return account._supportsAllInterfaces(interfaceIds);\n",
                    "message": "ERC165CheckerMock.supportsAllInterfaces (ERC165CheckerMock.sol#173-179) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function _supportsERC165(address account)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    // Any contract that implements ERC165 must explicitly indicate support of\n\n    // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n\n    return _supportsERC165Interface(account, _InterfaceId_ERC165) &&\n\n      !_supportsERC165Interface(account, _InterfaceId_Invalid);\n",
                    "message": "Function 'ERC165Checker._supportsERC165' (ERC165CheckerMock.sol#25-34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "  function _supportsInterface(address account, bytes4 interfaceId)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    // query support of both ERC165 as per the spec and support of _interfaceId\n\n    return _supportsERC165(account) &&\n\n      _supportsERC165Interface(account, interfaceId);\n",
                    "message": "Function 'ERC165Checker._supportsInterface' (ERC165CheckerMock.sol#44-52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function _supportsAllInterfaces(address account, bytes4[] interfaceIds)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    // query support of ERC165 itself\n\n    if (!_supportsERC165(account)) {\n\n      return false;\n\n    }\n\n\n\n    // query support of each interface in _interfaceIds\n\n    for (uint256 i = 0; i < interfaceIds.length; i++) {\n\n      if (!_supportsERC165Interface(account, interfaceIds[i])) {\n\n        return false;\n\n      }\n\n    }\n\n\n\n    // all interfaces supported\n\n    return true;\n",
                    "message": "Function 'ERC165Checker._supportsAllInterfaces' (ERC165CheckerMock.sol#62-81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "  function _supportsERC165Interface(address account, bytes4 interfaceId)\n\n    private\n\n    view\n\n    returns (bool)\n\n  {\n\n    // success determines whether the staticcall succeeded and result determines\n\n    // whether the contract at account indicates support of _interfaceId\n\n    (bool success, bool result) = _callERC165SupportsInterface(\n\n      account, interfaceId);\n\n\n\n    return (success && result);\n",
                    "message": "Function 'ERC165Checker._supportsERC165Interface' (ERC165CheckerMock.sol#94-105) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _callERC165SupportsInterface(\n\n    address account,\n\n    bytes4 interfaceId\n\n  )\n\n    private\n\n    view\n\n    returns (bool success, bool result)\n\n  {\n\n    bytes memory encodedParams = abi.encodeWithSelector(\n\n      _InterfaceId_ERC165,\n\n      interfaceId\n\n    );\n\n\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      let encodedParams_data := add(0x20, encodedParams)\n\n      let encodedParams_size := mload(encodedParams)\n\n\n\n      let output := mload(0x40)  // Find empty storage location using \"free memory pointer\"\n\n      mstore(output, 0x0)\n\n\n\n      success := staticcall(\n\n        30000,                 // 30k gas\n\n        account,              // To addr\n\n        encodedParams_data,\n\n        encodedParams_size,\n\n        output,\n\n        0x20                   // Outputs are 32 bytes long\n\n      )\n\n\n\n      result := mload(output)  // Load the result\n\n    }\n",
                    "message": "Function 'ERC165Checker._callERC165SupportsInterface' (ERC165CheckerMock.sol#115-147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_Invalid = 0xffffffff;\n",
                    "message": "Constant 'ERC165Checker._InterfaceId_Invalid' (ERC165CheckerMock.sol#12) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165Checker._InterfaceId_ERC165' (ERC165CheckerMock.sol#14) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_Invalid = 0xffffffff;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _callERC165SupportsInterface(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_Invalid = 0xffffffff;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _callERC165SupportsInterface(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (bool success, bool result)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    (bool success, bool result) = _callERC165SupportsInterface(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _supportsAllInterfaces(address account, bytes4[] interfaceIds)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function supportsAllInterfaces(address account, bytes4[] interfaceIds)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/CapperRoleMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addCapper(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function addCapper(address account) public onlyCapper {\n\n    _addCapper(account);\n",
                    "message": "CapperRole.addCapper (CapperRoleMock.sol#74-76) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": 80,
                    "vulnerability_code": "  function renounceCapper() public {\n\n    _removeCapper(msg.sender);\n",
                    "message": "CapperRole.renounceCapper (CapperRoleMock.sol#78-80) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": 100,
                    "vulnerability_code": "  function removeCapper(address account) public {\n\n    _removeCapper(account);\n",
                    "message": "CapperRoleMock.removeCapper (CapperRoleMock.sol#98-100) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "  function onlyCapperMock() public view onlyCapper {\n",
                    "message": "CapperRoleMock.onlyCapperMock (CapperRoleMock.sol#102-103) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "  function _addCapper(address account) internal {\n\n    cappers.add(account);\n\n    emit CapperAdded(account);\n",
                    "message": "Function 'CapperRole._addCapper' (CapperRoleMock.sol#82-85) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function _removeCapper(address account) internal {\n\n    cappers.remove(account);\n\n    emit CapperRemoved(account);\n",
                    "message": "Function 'CapperRole._removeCapper' (CapperRoleMock.sol#87-90) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "  function _removeCapper(address account) internal {\n\n    super._removeCapper(account);\n",
                    "message": "Function 'CapperRoleMock._removeCapper' (CapperRoleMock.sol#106-108) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private cappers;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC20WithMetadataMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string tokenURI)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenURI = tokenURI;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string tokenURI) public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC20WithMetadata(tokenURI)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_20"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string tokenURI)\n",
                    "message": "ERC20WithMetadata.constructor.tokenURI (local variable @ ERC20WithMetadataMock.sol#335) shadows:\n\t- ERC20WithMetadata.tokenURI (function @ ERC20WithMetadataMock.sol#341-343)\n\t- ERC20TokenMetadata.tokenURI (function @ ERC20WithMetadataMock.sol#329)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string tokenURI) public\n",
                    "message": "ERC20WithMetadataMock.constructor.tokenURI (local variable @ ERC20WithMetadataMock.sol#352) shadows:\n\t- ERC20WithMetadata.tokenURI (function @ ERC20WithMetadataMock.sol#341-343)\n\t- ERC20TokenMetadata.tokenURI (function @ ERC20WithMetadataMock.sol#329)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20WithMetadataMock.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20WithMetadataMock.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20WithMetadataMock.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20WithMetadataMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20WithMetadataMock.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20WithMetadataMock.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (ERC20WithMetadataMock.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20WithMetadataMock.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (ERC20WithMetadataMock.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20WithMetadataMock.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (ERC20WithMetadataMock.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20WithMetadataMock.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20WithMetadataMock.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20WithMetadataMock.sol#241-254) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20WithMetadataMock.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20WithMetadataMock.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20WithMetadataMock.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20WithMetadataMock.sol#307-315) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _tokenURI;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string tokenURI)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string tokenURI) public\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/PausableMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addPauser(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _paused = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    drasticMeasureTaken = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    count = 0;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function addPauser(address account) public onlyPauser {\n\n    _addPauser(account);\n",
                    "message": "PauserRole.addPauser (PausableMock.sol#73-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function renouncePauser() public {\n\n    _removePauser(msg.sender);\n",
                    "message": "PauserRole.renouncePauser (PausableMock.sol#77-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function paused() public view returns(bool) {\n\n    return _paused;\n",
                    "message": "Pausable.paused (PausableMock.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function pause() public onlyPauser whenNotPaused {\n\n    _paused = true;\n\n    emit Paused(msg.sender);\n",
                    "message": "Pausable.pause (PausableMock.sol#136-139) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function unpause() public onlyPauser whenPaused {\n\n    _paused = false;\n\n    emit Unpaused(msg.sender);\n",
                    "message": "Pausable.unpause (PausableMock.sol#144-147) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 157,
                    "vulnerability_code": "  function removePauser(address account) public {\n\n    _removePauser(account);\n",
                    "message": "PauserRoleMock.removePauser (PausableMock.sol#155-157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function onlyPauserMock() public view onlyPauser {\n",
                    "message": "PauserRoleMock.onlyPauserMock (PausableMock.sol#159-160) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function _addPauser(address account) internal {\n\n    pausers.add(account);\n\n    emit PauserAdded(account);\n",
                    "message": "Function 'PauserRole._addPauser' (PausableMock.sol#81-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    pausers.remove(account);\n\n    emit PauserRemoved(account);\n",
                    "message": "Function 'PauserRole._removePauser' (PausableMock.sol#86-89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    super._removePauser(account);\n",
                    "message": "Function 'PauserRoleMock._removePauser' (PausableMock.sol#163-165) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private pausers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _paused;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/SafeERC20Helper.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _failing = IERC20(new ERC20FailingMock());\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _succeeding = IERC20(new ERC20SucceedingMock());\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_40"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _allowance;\n",
                    "message": "ERC20FailingMock._allowance should be constant (SafeERC20Helper.sol#185)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n\n    return false;\n",
                    "message": "ERC20FailingMock.transfer (SafeERC20Helper.sol#187-189) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n\n    return false;\n",
                    "message": "ERC20FailingMock.transferFrom (SafeERC20Helper.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": 197,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n\n    return false;\n",
                    "message": "ERC20FailingMock.approve (SafeERC20Helper.sol#195-197) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": 201,
                    "vulnerability_code": "  function allowance(address, address) public view returns (uint256) {\n\n    return 0;\n",
                    "message": "ERC20FailingMock.allowance (SafeERC20Helper.sol#199-201) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n\n    return true;\n",
                    "message": "ERC20SucceedingMock.transfer (SafeERC20Helper.sol#207-209) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n\n    return true;\n",
                    "message": "ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#211-213) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": 217,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n\n    return true;\n",
                    "message": "ERC20SucceedingMock.approve (SafeERC20Helper.sol#215-217) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 221,
                    "vulnerability_code": "  function setAllowance(uint256 allowance_) public {\n\n    _allowances[msg.sender] = allowance_;\n",
                    "message": "ERC20SucceedingMock.setAllowance (SafeERC20Helper.sol#219-221) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": 225,
                    "vulnerability_code": "  function allowance(address owner, address) public view returns (uint256) {\n\n    return _allowances[owner];\n",
                    "message": "ERC20SucceedingMock.allowance (SafeERC20Helper.sol#223-225) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 243,
                    "vulnerability_code": "  function doFailingTransfer() public {\n\n    _failing.safeTransfer(address(0), 0);\n",
                    "message": "SafeERC20Helper.doFailingTransfer (SafeERC20Helper.sol#241-243) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": 247,
                    "vulnerability_code": "  function doFailingTransferFrom() public {\n\n    _failing.safeTransferFrom(address(0), address(0), 0);\n",
                    "message": "SafeERC20Helper.doFailingTransferFrom (SafeERC20Helper.sol#245-247) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "  function doFailingApprove() public {\n\n    _failing.safeApprove(address(0), 0);\n",
                    "message": "SafeERC20Helper.doFailingApprove (SafeERC20Helper.sol#249-251) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "  function doFailingIncreaseAllowance() public {\n\n    _failing.safeIncreaseAllowance(address(0), 0);\n",
                    "message": "SafeERC20Helper.doFailingIncreaseAllowance (SafeERC20Helper.sol#253-255) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 259,
                    "vulnerability_code": "  function doFailingDecreaseAllowance() public {\n\n    _failing.safeDecreaseAllowance(address(0), 0);\n",
                    "message": "SafeERC20Helper.doFailingDecreaseAllowance (SafeERC20Helper.sol#257-259) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": 265,
                    "vulnerability_code": "  function doSucceedingTransfer() public {\n\n    _succeeding.safeTransfer(address(0), 0);\n",
                    "message": "SafeERC20Helper.doSucceedingTransfer (SafeERC20Helper.sol#263-265) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function doSucceedingTransferFrom() public {\n\n    _succeeding.safeTransferFrom(address(0), address(0), 0);\n",
                    "message": "SafeERC20Helper.doSucceedingTransferFrom (SafeERC20Helper.sol#267-269) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 273,
                    "vulnerability_code": "  function doSucceedingApprove(uint256 amount) public {\n\n    _succeeding.safeApprove(address(0), amount);\n",
                    "message": "SafeERC20Helper.doSucceedingApprove (SafeERC20Helper.sol#271-273) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "  function doSucceedingIncreaseAllowance(uint256 amount) public {\n\n    _succeeding.safeIncreaseAllowance(address(0), amount);\n",
                    "message": "SafeERC20Helper.doSucceedingIncreaseAllowance (SafeERC20Helper.sol#275-277) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function doSucceedingDecreaseAllowance(uint256 amount) public {\n\n    _succeeding.safeDecreaseAllowance(address(0), amount);\n",
                    "message": "SafeERC20Helper.doSucceedingDecreaseAllowance (SafeERC20Helper.sol#279-281) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "  function setAllowance(uint256 allowance_) public {\n\n    ERC20SucceedingMock(_succeeding).setAllowance(allowance_);\n",
                    "message": "SafeERC20Helper.setAllowance (SafeERC20Helper.sol#283-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": 289,
                    "vulnerability_code": "  function allowance() public view returns (uint256) {\n\n    return _succeeding.allowance(address(0), address(0));\n",
                    "message": "SafeERC20Helper.allowance (SafeERC20Helper.sol#287-289) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20FailingMock.transfer (SafeERC20Helper.sol#187) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20FailingMock.transfer (SafeERC20Helper.sol#187) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20FailingMock.approve (SafeERC20Helper.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20FailingMock.approve (SafeERC20Helper.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) public view returns (uint256) {\n",
                    "message": "Parameter '' of ERC20FailingMock.allowance (SafeERC20Helper.sol#199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) public view returns (uint256) {\n",
                    "message": "Parameter '_scope_0' of ERC20FailingMock.allowance (SafeERC20Helper.sol#199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20SucceedingMock.transfer (SafeERC20Helper.sol#207) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20SucceedingMock.transfer (SafeERC20Helper.sol#207) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of ERC20SucceedingMock.approve (SafeERC20Helper.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of ERC20SucceedingMock.approve (SafeERC20Helper.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address) public view returns (uint256) {\n",
                    "message": "Parameter '' of ERC20SucceedingMock.allowance (SafeERC20Helper.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _allowance;\n",
                    "message": "ERC20FailingMock._allowance (SafeERC20Helper.sol#185) is never used in ERC20FailingMock\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _failing.safeTransfer(address(0), 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _failing.safeTransferFrom(address(0), address(0), 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _failing.safeApprove(address(0), 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _failing.safeIncreaseAllowance(address(0), 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _failing.safeDecreaseAllowance(address(0), 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _succeeding.safeTransfer(address(0), 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _succeeding.safeTransferFrom(address(0), address(0), 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _succeeding.safeApprove(address(0), amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _succeeding.safeIncreaseAllowance(address(0), amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _succeeding.safeDecreaseAllowance(address(0), amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return _succeeding.allowance(address(0), address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _allowance;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _failing;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _succeeding;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/FinalizableCrowdsaleImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _finalized = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 602,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Crowdsale(rate, wallet, token)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    TimedCrowdsale(openingTime, closingTime)\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_30"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ FinalizableCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.rate (function @ FinalizableCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ FinalizableCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.wallet (function @ FinalizableCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ FinalizableCrowdsaleImpl.sol#276) shadows:\n\t- Crowdsale.token (function @ FinalizableCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ FinalizableCrowdsaleImpl.sol#486) shadows:\n\t- TimedCrowdsale.openingTime (function @ FinalizableCrowdsaleImpl.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ FinalizableCrowdsaleImpl.sol#486) shadows:\n\t- TimedCrowdsale.closingTime (function @ FinalizableCrowdsaleImpl.sol#505-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "FinalizableCrowdsaleImpl.constructor.openingTime (local variable @ FinalizableCrowdsaleImpl.sol#603) shadows:\n\t- TimedCrowdsale.openingTime (function @ FinalizableCrowdsaleImpl.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "FinalizableCrowdsaleImpl.constructor.closingTime (local variable @ FinalizableCrowdsaleImpl.sol#604) shadows:\n\t- TimedCrowdsale.closingTime (function @ FinalizableCrowdsaleImpl.sol#505-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "FinalizableCrowdsaleImpl.constructor.rate (local variable @ FinalizableCrowdsaleImpl.sol#605) shadows:\n\t- Crowdsale.rate (function @ FinalizableCrowdsaleImpl.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "FinalizableCrowdsaleImpl.constructor.wallet (local variable @ FinalizableCrowdsaleImpl.sol#606) shadows:\n\t- Crowdsale.wallet (function @ FinalizableCrowdsaleImpl.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": 608,
                    "vulnerability_code": "    IERC20 token\n",
                    "message": "FinalizableCrowdsaleImpl.constructor.token (local variable @ FinalizableCrowdsaleImpl.sol#607-608) shadows:\n\t- Crowdsale.token (function @ FinalizableCrowdsaleImpl.sol#303-306)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (FinalizableCrowdsaleImpl.sol#486-494) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (FinalizableCrowdsaleImpl.sol#488)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (FinalizableCrowdsaleImpl.sol#512-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (FinalizableCrowdsaleImpl.sol#514)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (FinalizableCrowdsaleImpl.sol#521-525) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (FinalizableCrowdsaleImpl.sol#523)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (FinalizableCrowdsaleImpl.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (FinalizableCrowdsaleImpl.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (FinalizableCrowdsaleImpl.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (FinalizableCrowdsaleImpl.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "  function openingTime() public view returns(uint256) {\n\n    return _openingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.openingTime (FinalizableCrowdsaleImpl.sol#498-501) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": 508,
                    "vulnerability_code": "  function closingTime() public view returns(uint256) {\n\n    return _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.closingTime (FinalizableCrowdsaleImpl.sol#505-508) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": 571,
                    "vulnerability_code": "  function finalized() public view returns (bool) {\n\n    return _finalized;\n\n  }\n",
                    "message": "FinalizableCrowdsale.finalized (FinalizableCrowdsaleImpl.sol#568-571) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": 585,
                    "vulnerability_code": "  function finalize() public {\n\n    require(!_finalized);\n\n    require(hasClosed());\n\n\n\n    _finalized = true;\n\n\n\n    _finalization();\n\n    emit CrowdsaleFinalized();\n\n  }\n",
                    "message": "FinalizableCrowdsale.finalize (FinalizableCrowdsaleImpl.sol#576-585) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (FinalizableCrowdsaleImpl.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (FinalizableCrowdsaleImpl.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (FinalizableCrowdsaleImpl.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (FinalizableCrowdsaleImpl.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (FinalizableCrowdsaleImpl.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (FinalizableCrowdsaleImpl.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (FinalizableCrowdsaleImpl.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (FinalizableCrowdsaleImpl.sol#531-541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 593,
                    "vulnerability_code": "  function _finalization() internal {\n\n  }\n",
                    "message": "Function 'FinalizableCrowdsale._finalization' (FinalizableCrowdsaleImpl.sol#591-593) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _finalized;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC721ReceiverMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(bytes4 retval, bool reverts) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _retval = retval;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _reverts = reverts;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721ReceiverMock.sol#25-32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n\n    returns(bytes4)\n\n  {\n\n    require(!_reverts);\n\n    emit Received(\n\n      operator,\n\n      from,\n\n      tokenId,\n\n      data,\n\n      gasleft() // msg.gas was deprecated in solidityv0.4.21\n\n    );\n\n    return _retval;\n",
                    "message": "ERC721ReceiverMock.onERC721Received (ERC721ReceiverMock.sol#56-74) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private _retval;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _reverts;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/MathMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function max(uint256 a, uint256 b) public pure returns (uint256) {\n\n    return Math.max(a, b);\n",
                    "message": "MathMock.max (MathMock.sol#40-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "  function min(uint256 a, uint256 b) public pure returns (uint256) {\n\n    return Math.min(a, b);\n",
                    "message": "MathMock.min (MathMock.sol#44-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "  function average(uint256 a, uint256 b) public pure returns (uint256) {\n\n    return Math.average(a, b);\n",
                    "message": "MathMock.average (MathMock.sol#48-50) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC721MintableBurnableImpl.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 642,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interface to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721Enumerable);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 808,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 809,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(InterfaceId_ERC721Metadata);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 880,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 943,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 945,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1062,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC721Mintable()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC721Full(\"Test\", \"TEST\")\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1065,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1066,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1067,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _ownedTokens[from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _allTokens.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_48"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721MintableBurnableImpl.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721MintableBurnableImpl.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721MintableBurnableImpl.sol#52)\n\t-transferFrom (ERC721MintableBurnableImpl.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721MintableBurnableImpl.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721MintableBurnableImpl.sol#343-350)\n\t-transferFrom (ERC721MintableBurnableImpl.sol#400-415)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "ERC721Metadata.constructor.name (local variable @ ERC721MintableBurnableImpl.sol#804) shadows:\n\t- ERC721Metadata.name (function @ ERC721MintableBurnableImpl.sol#816-818)\n\t- IERC721Metadata.name (function @ ERC721MintableBurnableImpl.sol#772)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "ERC721Metadata.constructor.symbol (local variable @ ERC721MintableBurnableImpl.sol#804) shadows:\n\t- ERC721Metadata.symbol (function @ ERC721MintableBurnableImpl.sol#824-826)\n\t- IERC721Metadata.symbol (function @ ERC721MintableBurnableImpl.sol#773)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": "ERC721Full.constructor.name (local variable @ ERC721MintableBurnableImpl.sol#878) shadows:\n\t- ERC721Metadata.name (function @ ERC721MintableBurnableImpl.sol#816-818)\n\t- IERC721Metadata.name (function @ ERC721MintableBurnableImpl.sol#772)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": "ERC721Full.constructor.symbol (local variable @ ERC721MintableBurnableImpl.sol#878) shadows:\n\t- ERC721Metadata.symbol (function @ ERC721MintableBurnableImpl.sol#824-826)\n\t- IERC721Metadata.symbol (function @ ERC721MintableBurnableImpl.sol#773)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string tokenURI\n",
                    "message": "ERC721MetadataMintable.mintWithTokenURI.tokenURI (local variable @ ERC721MintableBurnableImpl.sol#1024) shadows:\n\t- ERC721Metadata.tokenURI (function @ ERC721MintableBurnableImpl.sol#833-836)\n\t- IERC721Metadata.tokenURI (function @ ERC721MintableBurnableImpl.sol#774)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721MintableBurnableImpl.sol#191-202)\n\t- ERC721MintableBurnableImpl.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721MintableBurnableImpl.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721MintableBurnableImpl.sol#343-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721MintableBurnableImpl.sol#369-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721MintableBurnableImpl.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721MintableBurnableImpl.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721MintableBurnableImpl.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721MintableBurnableImpl.sol#97-104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 663,
                    "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    require(index < balanceOf(owner));\n\n    return _ownedTokens[owner][index];\n",
                    "message": "ERC721Enumerable.tokenOfOwnerByIndex (ERC721MintableBurnableImpl.sol#653-663) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 601,
                    "vulnerability_to_line": 607,
                    "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (ERC721MintableBurnableImpl.sol#601-607) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (ERC721MintableBurnableImpl.sol#609) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": 682,
                    "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256) {\n\n    require(index < totalSupply());\n\n    return _allTokens[index];\n",
                    "message": "ERC721Enumerable.tokenByIndex (ERC721MintableBurnableImpl.sol#679-682) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 956,
                    "vulnerability_to_line": 958,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (ERC721MintableBurnableImpl.sol#956-958) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": 962,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (ERC721MintableBurnableImpl.sol#960-962) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 991,
                    "vulnerability_to_line": 1001,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, tokenId);\n\n    return true;\n",
                    "message": "ERC721Mintable.mint (ERC721MintableBurnableImpl.sol#991-1001) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1021,
                    "vulnerability_to_line": 1033,
                    "vulnerability_code": "  function mintWithTokenURI(\n\n    address to,\n\n    uint256 tokenId,\n\n    string tokenURI\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, tokenId);\n\n    _setTokenURI(tokenId, tokenURI);\n\n    return true;\n",
                    "message": "ERC721MetadataMintable.mintWithTokenURI (ERC721MintableBurnableImpl.sol#1021-1033) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1041,
                    "vulnerability_to_line": 1046,
                    "vulnerability_code": "  function burn(uint256 tokenId)\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    _burn(ownerOf(tokenId), tokenId);\n",
                    "message": "ERC721Burnable.burn (ERC721MintableBurnableImpl.sol#1041-1046) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721MintableBurnableImpl.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721MintableBurnableImpl.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721MintableBurnableImpl.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721MintableBurnableImpl.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721MintableBurnableImpl.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721MintableBurnableImpl.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721MintableBurnableImpl.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721MintableBurnableImpl.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721MintableBurnableImpl.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721MintableBurnableImpl.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721MintableBurnableImpl.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721MintableBurnableImpl.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721MintableBurnableImpl.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": 738,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    super._mint(to, tokenId);\n\n\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n\n    _allTokens.push(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._mint' (ERC721MintableBurnableImpl.sol#733-738) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 760,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    super._burn(owner, tokenId);\n\n\n\n    // Reorg all tokens array\n\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n\n\n    _allTokens[tokenIndex] = lastToken;\n\n    _allTokens[lastTokenIndex] = 0;\n\n\n\n    _allTokens.length--;\n\n    _allTokensIndex[tokenId] = 0;\n\n    _allTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._burn' (ERC721MintableBurnableImpl.sol#746-760) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": 696,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    super._addTokenTo(to, tokenId);\n\n    uint256 length = _ownedTokens[to].length;\n\n    _ownedTokens[to].push(tokenId);\n\n    _ownedTokensIndex[tokenId] = length;\n",
                    "message": "Function 'ERC721Enumerable._addTokenTo' (ERC721MintableBurnableImpl.sol#691-696) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": 725,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    super._removeTokenFrom(from, tokenId);\n\n\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n\n    // then delete the last slot.\n\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n\n    // This also deletes the contents at the last position of the array\n\n    _ownedTokens[from].length--;\n\n\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\n\n    _ownedTokensIndex[tokenId] = 0;\n\n    _ownedTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._removeTokenFrom' (ERC721MintableBurnableImpl.sol#706-725) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": "Constant 'ERC721Enumerable._InterfaceId_ERC721Enumerable' (ERC721MintableBurnableImpl.sol#631) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": 862,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    super._burn(owner, tokenId);\n\n\n\n    // Clear metadata (if any)\n\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n\n      delete _tokenURIs[tokenId];\n\n    }\n",
                    "message": "Function 'ERC721Metadata._burn' (ERC721MintableBurnableImpl.sol#855-862) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": 847,
                    "vulnerability_code": "  function _setTokenURI(uint256 tokenId, string uri) internal {\n\n    require(_exists(tokenId));\n\n    _tokenURIs[tokenId] = uri;\n",
                    "message": "Function 'ERC721Metadata._setTokenURI' (ERC721MintableBurnableImpl.sol#844-847) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": "Constant 'ERC721Metadata.InterfaceId_ERC721Metadata' (ERC721MintableBurnableImpl.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": 967,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (ERC721MintableBurnableImpl.sol#964-967) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": 972,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (ERC721MintableBurnableImpl.sol#969-972) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _ownedTokens[from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _allTokens.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 765,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 779,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 886,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 933,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 977,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1006,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256[]) private _ownedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => uint256) private _ownedTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => uint256) private _allTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 785,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => string) private _tokenURIs;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 941,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _setTokenURI(uint256 tokenId, string uri) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string tokenURI\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC165/ERC165NotSupported.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/mocks/ERC165/ERC165InterfacesSupported.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (bytes4[] interfaceIds)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _registerInterface(interfaceIds[i]);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": 77,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'SupportsInterfaceWithLookupMock._registerInterface' (ERC165InterfacesSupported.sol#72-77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'SupportsInterfaceWithLookupMock.InterfaceId_ERC165' (ERC165InterfacesSupported.sol#37) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (bytes4[] interfaceIds)\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC20/IERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC20/TokenTimelock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address beneficiary,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 releaseTime\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(releaseTime > block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token,\n",
                    "message": "TokenTimelock.constructor.token (local variable @ TokenTimelock.sol#201) shadows:\n\t- TokenTimelock.token (function @ TokenTimelock.sol#217-219)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address beneficiary,\n",
                    "message": "TokenTimelock.constructor.beneficiary (local variable @ TokenTimelock.sol#202) shadows:\n\t- TokenTimelock.beneficiary (function @ TokenTimelock.sol#224-226)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 releaseTime\n",
                    "message": "TokenTimelock.constructor.releaseTime (local variable @ TokenTimelock.sol#203) shadows:\n\t- TokenTimelock.releaseTime (function @ TokenTimelock.sol#231-233)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "  constructor(\n\n    IERC20 token,\n\n    address beneficiary,\n\n    uint256 releaseTime\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(releaseTime > block.timestamp);\n\n    _token = token;\n\n    _beneficiary = beneficiary;\n\n    _releaseTime = releaseTime;\n",
                    "message": "TokenTimelock.constructor (TokenTimelock.sol#200-212) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(releaseTime > block.timestamp) (TokenTimelock.sol#208)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": 246,
                    "vulnerability_code": "  function release() public {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(block.timestamp >= _releaseTime);\n\n\n\n    uint256 amount = _token.balanceOf(address(this));\n\n    require(amount > 0);\n\n\n\n    _token.safeTransfer(_beneficiary, amount);\n",
                    "message": "TokenTimelock.release (TokenTimelock.sol#238-246) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(block.timestamp >= _releaseTime) (TokenTimelock.sol#240)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 219,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n",
                    "message": "TokenTimelock.token (TokenTimelock.sol#217-219) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 226,
                    "vulnerability_code": "  function beneficiary() public view returns(address) {\n\n    return _beneficiary;\n",
                    "message": "TokenTimelock.beneficiary (TokenTimelock.sol#224-226) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": 233,
                    "vulnerability_code": "  function releaseTime() public view returns(uint256) {\n\n    return _releaseTime;\n",
                    "message": "TokenTimelock.releaseTime (TokenTimelock.sol#231-233) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": 246,
                    "vulnerability_code": "  function release() public {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(block.timestamp >= _releaseTime);\n\n\n\n    uint256 amount = _token.balanceOf(address(this));\n\n    require(amount > 0);\n\n\n\n    _token.safeTransfer(_beneficiary, amount);\n",
                    "message": "TokenTimelock.release (TokenTimelock.sol#238-246) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _beneficiary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _releaseTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC20/ERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (ERC20.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (ERC20.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (ERC20.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20.sol#241-254) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20.sol#307-315) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC20/ERC20Burnable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_20"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20Burnable.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20Burnable.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20Burnable.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20Burnable.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20Burnable.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20Burnable.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (ERC20Burnable.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20Burnable.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (ERC20Burnable.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20Burnable.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20Burnable.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (ERC20Burnable.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20Burnable.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20Burnable.sol#241-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": 334,
                    "vulnerability_code": "  function burn(uint256 value) public {\n\n    _burn(msg.sender, value);\n",
                    "message": "ERC20Burnable.burn (ERC20Burnable.sol#332-334) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "  function burnFrom(address from, uint256 value) public {\n\n    _burnFrom(from, value);\n",
                    "message": "ERC20Burnable.burnFrom (ERC20Burnable.sol#341-343) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20Burnable.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20Burnable.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20Burnable.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20Burnable.sol#307-315) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC20/SafeERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC20/ERC20Pausable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addPauser(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _paused = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_17"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20Pausable.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20Pausable.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20Pausable.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20Pausable.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20Pausable.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20Pausable.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 392,
                    "vulnerability_code": "  function addPauser(address account) public onlyPauser {\n\n    _addPauser(account);\n",
                    "message": "PauserRole.addPauser (ERC20Pausable.sol#390-392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function renouncePauser() public {\n\n    _removePauser(msg.sender);\n",
                    "message": "PauserRole.renouncePauser (ERC20Pausable.sol#394-396) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 432,
                    "vulnerability_code": "  function paused() public view returns(bool) {\n\n    return _paused;\n",
                    "message": "Pausable.paused (ERC20Pausable.sol#430-432) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function pause() public onlyPauser whenNotPaused {\n\n    _paused = true;\n\n    emit Paused(msg.sender);\n",
                    "message": "Pausable.pause (ERC20Pausable.sol#453-456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 464,
                    "vulnerability_code": "  function unpause() public onlyPauser whenPaused {\n\n    _paused = false;\n\n    emit Unpaused(msg.sender);\n",
                    "message": "Pausable.unpause (ERC20Pausable.sol#461-464) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20Pausable.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20Pausable.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20Pausable.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20Pausable.sol#307-315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "  function _addPauser(address account) internal {\n\n    pausers.add(account);\n\n    emit PauserAdded(account);\n",
                    "message": "Function 'PauserRole._addPauser' (ERC20Pausable.sol#398-401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    pausers.remove(account);\n\n    emit PauserRemoved(account);\n",
                    "message": "Function 'PauserRole._removePauser' (ERC20Pausable.sol#403-406) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private pausers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _paused;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC20/ERC20Capped.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 cap)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(cap > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _cap = cap;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_24"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 cap)\n",
                    "message": "ERC20Capped.constructor.cap (local variable @ ERC20Capped.sol#450) shadows:\n\t- ERC20Capped.cap (function @ ERC20Capped.sol#460-462)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20Capped.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20Capped.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20Capped.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20Capped.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (ERC20Capped.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20Capped.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (ERC20Capped.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20Capped.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20Capped.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (ERC20Capped.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20Capped.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20Capped.sol#241-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 392,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (ERC20Capped.sol#390-392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (ERC20Capped.sol#394-396) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": 435,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, value);\n\n    return true;\n",
                    "message": "ERC20Mintable.mint (ERC20Capped.sol#425-435) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": 462,
                    "vulnerability_code": "  function cap() public view returns(uint256) {\n\n    return _cap;\n",
                    "message": "ERC20Capped.cap (ERC20Capped.sol#460-462) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20Capped.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20Capped.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20Capped.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20Capped.sol#307-315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (ERC20Capped.sol#398-401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (ERC20Capped.sol#403-406) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(totalSupply().add(value) <= _cap);\n\n    super._mint(account, value);\n",
                    "message": "Function 'ERC20Capped._mint' (ERC20Capped.sol#464-467) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _cap;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC20/ERC20Mintable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_23"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20Mintable.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20Mintable.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20Mintable.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20Mintable.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20Mintable.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20Mintable.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (ERC20Mintable.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20Mintable.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (ERC20Mintable.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20Mintable.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (ERC20Mintable.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20Mintable.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20Mintable.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20Mintable.sol#241-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 392,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (ERC20Mintable.sol#390-392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (ERC20Mintable.sol#394-396) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": 435,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, value);\n\n    return true;\n",
                    "message": "ERC20Mintable.mint (ERC20Mintable.sol#425-435) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20Mintable.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20Mintable.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20Mintable.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20Mintable.sol#307-315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (ERC20Mintable.sol#398-401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (ERC20Mintable.sol#403-406) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC20/ERC20Detailed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ ERC20Detailed.sol#53) shadows:\n\t- ERC20Detailed.name (function @ ERC20Detailed.sol#62-64)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ ERC20Detailed.sol#53) shadows:\n\t- ERC20Detailed.symbol (function @ ERC20Detailed.sol#69-71)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ ERC20Detailed.sol#53) shadows:\n\t- ERC20Detailed.decimals (function @ ERC20Detailed.sol#76-78)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "  function name() public view returns(string) {\n\n    return _name;\n",
                    "message": "ERC20Detailed.name (ERC20Detailed.sol#62-64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "  function symbol() public view returns(string) {\n\n    return _symbol;\n",
                    "message": "ERC20Detailed.symbol (ERC20Detailed.sol#69-71) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "  function decimals() public view returns(uint8) {\n\n    return _decimals;\n",
                    "message": "ERC20Detailed.decimals (ERC20Detailed.sol#76-78) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns(string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns(string) {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/IERC721Enumerable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (IERC721Enumerable.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (IERC721Enumerable.sol#52)\n\t-transferFrom (IERC721Enumerable.sol#60)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (IERC721Enumerable.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ownerOf(uint256 tokenId) public view returns (address owner);\n",
                    "message": "IERC721.ownerOf (IERC721Enumerable.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (IERC721Enumerable.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "  function getApproved(uint256 tokenId)\n",
                    "message": "IERC721.getApproved (IERC721Enumerable.sol#53-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (IERC721Enumerable.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function isApprovedForAll(address owner, address operator)\n",
                    "message": "IERC721.isApprovedForAll (IERC721Enumerable.sol#57-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.transferFrom (IERC721Enumerable.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (IERC721Enumerable.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 70,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n",
                    "message": "IERC721.safeTransferFrom (IERC721Enumerable.sol#64-70) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "IERC721Enumerable.totalSupply (IERC721Enumerable.sol#82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (IERC721Enumerable.sol#83-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (IERC721Enumerable.sol#91) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/IERC721Metadata.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (IERC721Metadata.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (IERC721Metadata.sol#52)\n\t-transferFrom (IERC721Metadata.sol#60)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (IERC721Metadata.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ownerOf(uint256 tokenId) public view returns (address owner);\n",
                    "message": "IERC721.ownerOf (IERC721Metadata.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (IERC721Metadata.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "  function getApproved(uint256 tokenId)\n",
                    "message": "IERC721.getApproved (IERC721Metadata.sol#53-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (IERC721Metadata.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function isApprovedForAll(address owner, address operator)\n",
                    "message": "IERC721.isApprovedForAll (IERC721Metadata.sol#57-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.transferFrom (IERC721Metadata.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (IERC721Metadata.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 70,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n",
                    "message": "IERC721.safeTransferFrom (IERC721Metadata.sol#64-70) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/ERC721Full.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 642,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interface to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721Enumerable);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 808,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 809,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(InterfaceId_ERC721Metadata);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 880,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _ownedTokens[from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _allTokens.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_40"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721Full.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721Full.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Full.sol#52)\n\t-transferFrom (ERC721Full.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721Full.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Full.sol#343-350)\n\t-transferFrom (ERC721Full.sol#400-415)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "ERC721Metadata.constructor.name (local variable @ ERC721Full.sol#804) shadows:\n\t- ERC721Metadata.name (function @ ERC721Full.sol#816-818)\n\t- IERC721Metadata.name (function @ ERC721Full.sol#772)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "ERC721Metadata.constructor.symbol (local variable @ ERC721Full.sol#804) shadows:\n\t- ERC721Metadata.symbol (function @ ERC721Full.sol#824-826)\n\t- IERC721Metadata.symbol (function @ ERC721Full.sol#773)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": "ERC721Full.constructor.name (local variable @ ERC721Full.sol#878) shadows:\n\t- ERC721Metadata.name (function @ ERC721Full.sol#816-818)\n\t- IERC721Metadata.name (function @ ERC721Full.sol#772)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": "ERC721Full.constructor.symbol (local variable @ ERC721Full.sol#878) shadows:\n\t- ERC721Metadata.symbol (function @ ERC721Full.sol#824-826)\n\t- IERC721Metadata.symbol (function @ ERC721Full.sol#773)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721Full.sol#191-202)\n\t- ERC721Full.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721Full.sol#343-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721Full.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721Full.sol#369-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721Full.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721Full.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721Full.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721Full.sol#97-104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 601,
                    "vulnerability_to_line": 607,
                    "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (ERC721Full.sol#601-607) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 663,
                    "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    require(index < balanceOf(owner));\n\n    return _ownedTokens[owner][index];\n",
                    "message": "ERC721Enumerable.tokenOfOwnerByIndex (ERC721Full.sol#653-663) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (ERC721Full.sol#609) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": 682,
                    "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256) {\n\n    require(index < totalSupply());\n\n    return _allTokens[index];\n",
                    "message": "ERC721Enumerable.tokenByIndex (ERC721Full.sol#679-682) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721Full.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721Full.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721Full.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721Full.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721Full.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721Full.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721Full.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721Full.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721Full.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721Full.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721Full.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721Full.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721Full.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": 738,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    super._mint(to, tokenId);\n\n\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n\n    _allTokens.push(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._mint' (ERC721Full.sol#733-738) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 760,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    super._burn(owner, tokenId);\n\n\n\n    // Reorg all tokens array\n\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n\n\n    _allTokens[tokenIndex] = lastToken;\n\n    _allTokens[lastTokenIndex] = 0;\n\n\n\n    _allTokens.length--;\n\n    _allTokensIndex[tokenId] = 0;\n\n    _allTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._burn' (ERC721Full.sol#746-760) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": 696,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    super._addTokenTo(to, tokenId);\n\n    uint256 length = _ownedTokens[to].length;\n\n    _ownedTokens[to].push(tokenId);\n\n    _ownedTokensIndex[tokenId] = length;\n",
                    "message": "Function 'ERC721Enumerable._addTokenTo' (ERC721Full.sol#691-696) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": 725,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    super._removeTokenFrom(from, tokenId);\n\n\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n\n    // then delete the last slot.\n\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n\n    // This also deletes the contents at the last position of the array\n\n    _ownedTokens[from].length--;\n\n\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\n\n    _ownedTokensIndex[tokenId] = 0;\n\n    _ownedTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._removeTokenFrom' (ERC721Full.sol#706-725) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": "Constant 'ERC721Enumerable._InterfaceId_ERC721Enumerable' (ERC721Full.sol#631) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": 862,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    super._burn(owner, tokenId);\n\n\n\n    // Clear metadata (if any)\n\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n\n      delete _tokenURIs[tokenId];\n\n    }\n",
                    "message": "Function 'ERC721Metadata._burn' (ERC721Full.sol#855-862) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": 847,
                    "vulnerability_code": "  function _setTokenURI(uint256 tokenId, string uri) internal {\n\n    require(_exists(tokenId));\n\n    _tokenURIs[tokenId] = uri;\n",
                    "message": "Function 'ERC721Metadata._setTokenURI' (ERC721Full.sol#844-847) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": "Constant 'ERC721Metadata.InterfaceId_ERC721Metadata' (ERC721Full.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _ownedTokens[from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _allTokens.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 765,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 779,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256[]) private _ownedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => uint256) private _ownedTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => uint256) private _allTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 785,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 788,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => string) private _tokenURIs;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _setTokenURI(uint256 tokenId, string uri) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/ERC721Mintable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 650,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_31"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721Mintable.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721Mintable.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Mintable.sol#52)\n\t-transferFrom (ERC721Mintable.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721Mintable.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Mintable.sol#343-350)\n\t-transferFrom (ERC721Mintable.sol#400-415)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721Mintable.sol#191-202)\n\t- ERC721Mintable.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n",
                    "message": "ERC721.balanceOf (ERC721Mintable.sol#319-322) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (ERC721Mintable.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721Mintable.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721Mintable.sol#343-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721Mintable.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721Mintable.sol#369-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721Mintable.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721Mintable.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721Mintable.sol#97-104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 663,
                    "vulnerability_to_line": 665,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (ERC721Mintable.sol#663-665) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 667,
                    "vulnerability_to_line": 669,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (ERC721Mintable.sol#667-669) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 698,
                    "vulnerability_to_line": 708,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, tokenId);\n\n    return true;\n",
                    "message": "ERC721Mintable.mint (ERC721Mintable.sol#698-708) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721Mintable.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721Mintable.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721Mintable.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721Mintable.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721Mintable.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721Mintable.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721Mintable.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721Mintable.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721Mintable.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721Mintable.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721Mintable.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721Mintable.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721Mintable.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": 674,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (ERC721Mintable.sol#671-674) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": 679,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (ERC721Mintable.sol#676-679) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/IERC721Receiver.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (IERC721Receiver.sol#25-32) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/ERC721Metadata.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 636,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 637,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(InterfaceId_ERC721Metadata);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 638,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_31"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721Metadata.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721Metadata.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Metadata.sol#52)\n\t-transferFrom (ERC721Metadata.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721Metadata.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Metadata.sol#343-350)\n\t-transferFrom (ERC721Metadata.sol#400-415)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "ERC721Metadata.constructor.name (local variable @ ERC721Metadata.sol#632) shadows:\n\t- ERC721Metadata.name (function @ ERC721Metadata.sol#644-646)\n\t- IERC721Metadata.name (function @ ERC721Metadata.sol#600)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "ERC721Metadata.constructor.symbol (local variable @ ERC721Metadata.sol#632) shadows:\n\t- ERC721Metadata.symbol (function @ ERC721Metadata.sol#652-654)\n\t- IERC721Metadata.symbol (function @ ERC721Metadata.sol#601)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721Metadata.sol#191-202)\n\t- ERC721Metadata.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (ERC721Metadata.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n",
                    "message": "ERC721.balanceOf (ERC721Metadata.sol#319-322) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721Metadata.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721Metadata.sol#343-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721Metadata.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721Metadata.sol#369-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721Metadata.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721Metadata.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721Metadata.sol#97-104) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721Metadata.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721Metadata.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721Metadata.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721Metadata.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721Metadata.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721Metadata.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721Metadata.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721Metadata.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721Metadata.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721Metadata.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721Metadata.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721Metadata.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721Metadata.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": 690,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    super._burn(owner, tokenId);\n\n\n\n    // Clear metadata (if any)\n\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n\n      delete _tokenURIs[tokenId];\n\n    }\n",
                    "message": "Function 'ERC721Metadata._burn' (ERC721Metadata.sol#683-690) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": 675,
                    "vulnerability_code": "  function _setTokenURI(uint256 tokenId, string uri) internal {\n\n    require(_exists(tokenId));\n\n    _tokenURIs[tokenId] = uri;\n",
                    "message": "Function 'ERC721Metadata._setTokenURI' (ERC721Metadata.sol#672-675) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": "Constant 'ERC721Metadata.InterfaceId_ERC721Metadata' (ERC721Metadata.sol#621) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 619,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => string) private _tokenURIs;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _setTokenURI(uint256 tokenId, string uri) internal {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/ERC721Pausable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 650,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addPauser(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 696,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 697,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _paused = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_30"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721Pausable.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721Pausable.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Pausable.sol#52)\n\t-transferFrom (ERC721Pausable.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721Pausable.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Pausable.sol#343-350)\n\t-transferFrom (ERC721Pausable.sol#400-415)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 749,
                    "vulnerability_to_line": 780,
                    "vulnerability_code": "contract ERC721Pausable is ERC721, Pausable {\n\n  function approve(\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    whenNotPaused\n\n  {\n\n    super.approve(to, tokenId);\n\n  }\n\n\n\n  function setApprovalForAll(\n\n    address to,\n\n    bool approved\n\n  )\n\n    public\n\n    whenNotPaused\n\n  {\n\n    super.setApprovalForAll(to, approved);\n\n  }\n\n\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    whenNotPaused\n\n  {\n\n    super.transferFrom(from, to, tokenId);\n\n  }\n",
                    "message": "ERC721Pausable (ERC721Pausable.sol#749-780) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Pausable.sol#750-758)\n\t-transferFrom (ERC721Pausable.sol#770-779)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721Pausable.sol#191-202)\n\t- ERC721Pausable.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n",
                    "message": "ERC721.balanceOf (ERC721Pausable.sol#319-322) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (ERC721Pausable.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721Pausable.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721Pausable.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721Pausable.sol#97-104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 663,
                    "vulnerability_to_line": 665,
                    "vulnerability_code": "  function addPauser(address account) public onlyPauser {\n\n    _addPauser(account);\n",
                    "message": "PauserRole.addPauser (ERC721Pausable.sol#663-665) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 667,
                    "vulnerability_to_line": 669,
                    "vulnerability_code": "  function renouncePauser() public {\n\n    _removePauser(msg.sender);\n",
                    "message": "PauserRole.renouncePauser (ERC721Pausable.sol#667-669) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": 705,
                    "vulnerability_code": "  function paused() public view returns(bool) {\n\n    return _paused;\n",
                    "message": "Pausable.paused (ERC721Pausable.sol#703-705) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": 729,
                    "vulnerability_code": "  function pause() public onlyPauser whenNotPaused {\n\n    _paused = true;\n\n    emit Paused(msg.sender);\n",
                    "message": "Pausable.pause (ERC721Pausable.sol#726-729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": 737,
                    "vulnerability_code": "  function unpause() public onlyPauser whenPaused {\n\n    _paused = false;\n\n    emit Unpaused(msg.sender);\n",
                    "message": "Pausable.unpause (ERC721Pausable.sol#734-737) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721Pausable.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721Pausable.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721Pausable.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721Pausable.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721Pausable.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721Pausable.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721Pausable.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721Pausable.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721Pausable.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721Pausable.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721Pausable.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721Pausable.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721Pausable.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": 674,
                    "vulnerability_code": "  function _addPauser(address account) internal {\n\n    pausers.add(account);\n\n    emit PauserAdded(account);\n",
                    "message": "Function 'PauserRole._addPauser' (ERC721Pausable.sol#671-674) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": 679,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    pausers.remove(account);\n\n    emit PauserRemoved(account);\n",
                    "message": "Function 'PauserRole._removePauser' (ERC721Pausable.sol#676-679) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private pausers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _paused;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/ERC721.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_26"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721.sol#52)\n\t-transferFrom (ERC721.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721.sol#343-350)\n\t-transferFrom (ERC721.sol#400-415)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721.sol#191-202)\n\t- ERC721.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n",
                    "message": "ERC721.balanceOf (ERC721.sol#319-322) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (ERC721.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721.sol#343-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721.sol#369-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721.sol#97-104) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/IERC721.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (IERC721.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (IERC721.sol#52)\n\t-transferFrom (IERC721.sol#60)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (IERC721.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ownerOf(uint256 tokenId) public view returns (address owner);\n",
                    "message": "IERC721.ownerOf (IERC721.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (IERC721.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "  function getApproved(uint256 tokenId)\n",
                    "message": "IERC721.getApproved (IERC721.sol#53-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (IERC721.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function isApprovedForAll(address owner, address operator)\n",
                    "message": "IERC721.isApprovedForAll (IERC721.sol#57-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.transferFrom (IERC721.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (IERC721.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 70,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n",
                    "message": "IERC721.safeTransferFrom (IERC721.sol#64-70) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/ERC721MetadataMintable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 636,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 637,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(InterfaceId_ERC721Metadata);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 638,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 752,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_37"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721MetadataMintable.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721MetadataMintable.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721MetadataMintable.sol#52)\n\t-transferFrom (ERC721MetadataMintable.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721MetadataMintable.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721MetadataMintable.sol#343-350)\n\t-transferFrom (ERC721MetadataMintable.sol#400-415)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "ERC721Metadata.constructor.name (local variable @ ERC721MetadataMintable.sol#632) shadows:\n\t- ERC721Metadata.name (function @ ERC721MetadataMintable.sol#644-646)\n\t- IERC721Metadata.name (function @ ERC721MetadataMintable.sol#600)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": "ERC721Metadata.constructor.symbol (local variable @ ERC721MetadataMintable.sol#632) shadows:\n\t- ERC721Metadata.symbol (function @ ERC721MetadataMintable.sol#652-654)\n\t- IERC721Metadata.symbol (function @ ERC721MetadataMintable.sol#601)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string tokenURI\n",
                    "message": "ERC721MetadataMintable.mintWithTokenURI.tokenURI (local variable @ ERC721MetadataMintable.sol#804) shadows:\n\t- ERC721Metadata.tokenURI (function @ ERC721MetadataMintable.sol#661-664)\n\t- IERC721Metadata.tokenURI (function @ ERC721MetadataMintable.sol#602)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721MetadataMintable.sol#191-202)\n\t- ERC721MetadataMintable.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (ERC721MetadataMintable.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n",
                    "message": "ERC721.balanceOf (ERC721MetadataMintable.sol#319-322) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721MetadataMintable.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721MetadataMintable.sol#343-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721MetadataMintable.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721MetadataMintable.sol#369-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721MetadataMintable.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721MetadataMintable.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721MetadataMintable.sol#97-104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 765,
                    "vulnerability_to_line": 767,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (ERC721MetadataMintable.sol#765-767) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 769,
                    "vulnerability_to_line": 771,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (ERC721MetadataMintable.sol#769-771) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": 813,
                    "vulnerability_code": "  function mintWithTokenURI(\n\n    address to,\n\n    uint256 tokenId,\n\n    string tokenURI\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, tokenId);\n\n    _setTokenURI(tokenId, tokenURI);\n\n    return true;\n",
                    "message": "ERC721MetadataMintable.mintWithTokenURI (ERC721MetadataMintable.sol#801-813) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721MetadataMintable.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721MetadataMintable.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721MetadataMintable.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721MetadataMintable.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721MetadataMintable.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721MetadataMintable.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721MetadataMintable.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721MetadataMintable.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721MetadataMintable.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721MetadataMintable.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721MetadataMintable.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721MetadataMintable.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721MetadataMintable.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": 690,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    super._burn(owner, tokenId);\n\n\n\n    // Clear metadata (if any)\n\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n\n      delete _tokenURIs[tokenId];\n\n    }\n",
                    "message": "Function 'ERC721Metadata._burn' (ERC721MetadataMintable.sol#683-690) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": 675,
                    "vulnerability_code": "  function _setTokenURI(uint256 tokenId, string uri) internal {\n\n    require(_exists(tokenId));\n\n    _tokenURIs[tokenId] = uri;\n",
                    "message": "Function 'ERC721Metadata._setTokenURI' (ERC721MetadataMintable.sol#672-675) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": "Constant 'ERC721Metadata.InterfaceId_ERC721Metadata' (ERC721MetadataMintable.sol#621) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 773,
                    "vulnerability_to_line": 776,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (ERC721MetadataMintable.sol#773-776) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 778,
                    "vulnerability_to_line": 781,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (ERC721MetadataMintable.sol#778-781) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 786,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 619,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => string) private _tokenURIs;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 750,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _setTokenURI(uint256 tokenId, string uri) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string tokenURI\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/ERC721Holder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721Holder.sol#25-32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "  function onERC721Received(\n\n    address,\n\n    address,\n\n    uint256,\n\n    bytes\n\n  )\n\n    public\n\n    returns(bytes4)\n\n  {\n\n    return this.onERC721Received.selector;\n",
                    "message": "ERC721Holder.onERC721Received (ERC721Holder.sol#40-50) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address,\n",
                    "message": "Parameter '' of ERC721Holder.onERC721Received (ERC721Holder.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address,\n",
                    "message": "Parameter '_scope_0' of ERC721Holder.onERC721Received (ERC721Holder.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256,\n",
                    "message": "Parameter '_scope_1' of ERC721Holder.onERC721Received (ERC721Holder.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes\n",
                    "message": "Parameter '_scope_2' of ERC721Holder.onERC721Received (ERC721Holder.sol#44) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/ERC721Enumerable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 642,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interface to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721Enumerable);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _ownedTokens[from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _allTokens.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_33"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": 223,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721Enumerable.sol#212-223) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721Enumerable.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Enumerable.sol#52)\n\t-transferFrom (ERC721Enumerable.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": 610,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721Enumerable.sol#293-610) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Enumerable.sol#364-371)\n\t-transferFrom (ERC721Enumerable.sol#421-436)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": 223,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721Enumerable.sol#212-223)\n\t- ERC721Enumerable.sol#221-222\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721Enumerable.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": 371,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721Enumerable.sol#364-371) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721Enumerable.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 394,
                    "vulnerability_code": "  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721Enumerable.sol#390-394) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721Enumerable.sol#450-459) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721Enumerable.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": 663,
                    "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    require(index < balanceOf(owner));\n\n    return _ownedTokens[owner][index];\n",
                    "message": "ERC721Enumerable.tokenOfOwnerByIndex (ERC721Enumerable.sol#653-663) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (ERC721Enumerable.sol#83-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (ERC721Enumerable.sol#91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": 682,
                    "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256) {\n\n    require(index < totalSupply());\n\n    return _allTokens[index];\n",
                    "message": "ERC721Enumerable.tokenByIndex (ERC721Enumerable.sol#679-682) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": 125,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721Enumerable.sol#118-125) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": 278,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721Enumerable.sol#273-278) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721Enumerable.sol#238) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721Enumerable.sol#477) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721Enumerable.sol#491-494) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": 520,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721Enumerable.sol#503-520) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": 532,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721Enumerable.sol#528-532) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": 543,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721Enumerable.sol#539-543) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": 556,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721Enumerable.sol#552-556) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": 570,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721Enumerable.sol#566-570) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 581,
                    "vulnerability_to_line": 596,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721Enumerable.sol#581-596) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721Enumerable.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": 609,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721Enumerable.sol#604-609) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721Enumerable.sol#314) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": 738,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    super._mint(to, tokenId);\n\n\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n\n    _allTokens.push(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._mint' (ERC721Enumerable.sol#733-738) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 760,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    super._burn(owner, tokenId);\n\n\n\n    // Reorg all tokens array\n\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n\n\n    _allTokens[tokenIndex] = lastToken;\n\n    _allTokens[lastTokenIndex] = 0;\n\n\n\n    _allTokens.length--;\n\n    _allTokensIndex[tokenId] = 0;\n\n    _allTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._burn' (ERC721Enumerable.sol#746-760) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": 696,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    super._addTokenTo(to, tokenId);\n\n    uint256 length = _ownedTokens[to].length;\n\n    _ownedTokens[to].push(tokenId);\n\n    _ownedTokensIndex[tokenId] = length;\n",
                    "message": "Function 'ERC721Enumerable._addTokenTo' (ERC721Enumerable.sol#691-696) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": 725,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    super._removeTokenFrom(from, tokenId);\n\n\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n\n    // then delete the last slot.\n\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n\n    // This also deletes the contents at the last position of the array\n\n    _ownedTokens[from].length--;\n\n\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\n\n    _ownedTokensIndex[tokenId] = 0;\n\n    _ownedTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._removeTokenFrom' (ERC721Enumerable.sol#706-725) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": "Constant 'ERC721Enumerable._InterfaceId_ERC721Enumerable' (ERC721Enumerable.sol#631) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 717,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _ownedTokens[from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _allTokens.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256[]) private _ownedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => uint256) private _ownedTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => uint256) private _allTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/IERC721Full.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (IERC721Full.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (IERC721Full.sol#52)\n\t-transferFrom (IERC721Full.sol#60)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (IERC721Full.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function ownerOf(uint256 tokenId) public view returns (address owner);\n",
                    "message": "IERC721.ownerOf (IERC721Full.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (IERC721Full.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "  function getApproved(uint256 tokenId)\n",
                    "message": "IERC721.getApproved (IERC721Full.sol#53-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (IERC721Full.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function isApprovedForAll(address owner, address operator)\n",
                    "message": "IERC721.isApprovedForAll (IERC721Full.sol#57-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.transferFrom (IERC721Full.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (IERC721Full.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 70,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n",
                    "message": "IERC721.safeTransferFrom (IERC721Full.sol#64-70) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "IERC721Enumerable.totalSupply (IERC721Full.sol#82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (IERC721Full.sol#83-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (IERC721Full.sol#91) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/token/ERC721/ERC721Burnable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_27"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (ERC721Burnable.sol#191-202) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
                    "message": "IERC721 (ERC721Burnable.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Burnable.sol#52)\n\t-transferFrom (ERC721Burnable.sol#60)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n\n\n  using SafeMath for uint256;\n\n  using Address for address;\n\n\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private _tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private _tokenApprovals;\n\n\n\n  // Mapping from owner to number of owned token\n\n  mapping (address => uint256) private _ownedTokensCount;\n\n\n\n  // Mapping from owner to operator approvals\n\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n  /*\n\n   * 0x80ac58cd ===\n\n   *   bytes4(keccak256('balanceOf(address)')) ^\n\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n   */\n\n\n\n  constructor()\n\n    public\n\n  {\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n\n    _registerInterface(_InterfaceId_ERC721);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the balance of the specified address\n\n   * @param owner address to query the balance of\n\n   * @return uint256 representing the amount owned by the passed address\n\n   */\n\n  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the owner of the specified token ID\n\n   * @param tokenId uint256 ID of the token to query the owner of\n\n   * @return owner address currently marked as the owner of the given token ID\n\n   */\n\n  function ownerOf(uint256 tokenId) public view returns (address) {\n\n    address owner = _tokenOwner[tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Approves another address to transfer the given token ID\n\n   * The zero address indicates there is no approved address.\n\n   * There can only be one approved address per token at a given time.\n\n   * Can only be called by the token owner or an approved operator.\n\n   * @param to address to be approved for the given token ID\n\n   * @param tokenId uint256 ID of the token to be approved\n\n   */\n\n  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address for a token ID, or zero if no address set\n\n   * Reverts if the token ID does not exist.\n\n   * @param tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved for the given token ID\n\n   */\n\n  function getApproved(uint256 tokenId) public view returns (address) {\n\n    require(_exists(tokenId));\n\n    return _tokenApprovals[tokenId];\n\n  }\n\n\n\n  /**\n\n   * @dev Sets or unsets the approval of a given operator\n\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n\n   * @param to operator address to set the approval\n\n   * @param approved representing the status of the approval to be set\n\n   */\n\n  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether an operator is approved by a given owner\n\n   * @param owner owner address which you want to query the approval of\n\n   * @param operator operator address which you want to query the approval of\n\n   * @return bool whether the given operator is approved by the given owner\n\n   */\n\n  function isApprovedForAll(\n\n    address owner,\n\n    address operator\n\n  )\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _operatorApprovals[owner][operator];\n\n  }\n\n\n\n  /**\n\n   * @dev Transfers the ownership of a given token ID to another address\n\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    require(to != address(0));\n\n\n\n    _clearApproval(from, tokenId);\n\n    _removeTokenFrom(from, tokenId);\n\n    _addTokenTo(to, tokenId);\n\n\n\n    emit Transfer(from, to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   *\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n\n  }\n\n\n\n  /**\n\n   * @dev Safely transfers the ownership of a given token ID to another address\n\n   * If the target address is a contract, it must implement `onERC721Received`,\n\n   * which is called upon a safe transfer, and return the magic value\n\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n   * the transfer is reverted.\n\n   * Requires the msg sender to be the owner, approved, or operator\n\n   * @param from current owner of the token\n\n   * @param to address to receive the ownership of the given token ID\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes data to send along with a safe transfer check\n\n   */\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    public\n\n  {\n\n    transferFrom(from, to, tokenId);\n\n    // solium-disable-next-line arg-overflow\n\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the specified token exists\n\n   * @param tokenId uint256 ID of the token to query the existence of\n\n   * @return whether the token exists\n\n   */\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Returns whether the given spender can transfer a given token ID\n\n   * @param spender address of the spender to query\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @return bool whether the msg.sender is approved for the given token ID,\n\n   *  is an operator of the owner, or is the owner of the token\n\n   */\n\n  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to mint a new token\n\n   * Reverts if the given token ID already exists\n\n   * @param to The address that will own the minted token\n\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n   */\n\n  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to burn a specific token\n\n   * Reverts if the token does not exist\n\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n   */\n\n  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to add a token ID to the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n   * @param to address representing the new owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n   */\n\n  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to remove a token ID from the list of a given address\n\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n   * and doesn't clear approvals.\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n   */\n\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n\n  }\n\n\n\n  /**\n\n   * @dev Internal function to invoke `onERC721Received` on a target address\n\n   * The call is not executed if the target address is not a contract\n\n   * @param from address representing the previous owner of the given token ID\n\n   * @param to target address that will receive the tokens\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   * @param _data bytes optional data to send along with the call\n\n   * @return whether the call correctly returned the expected magic value\n\n   */\n\n  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n\n  }\n\n\n\n  /**\n\n   * @dev Private function to clear current approval of a given token ID\n\n   * Reverts if the given address is not indeed the owner of the token\n\n   * @param owner owner of the token\n\n   * @param tokenId uint256 ID of the token to be transferred\n\n   */\n\n  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n\n  }\n",
                    "message": "ERC721 (ERC721Burnable.sol#272-589) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Burnable.sol#343-350)\n\t-transferFrom (ERC721Burnable.sol#400-415)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721Burnable.sol#191-202)\n\t- ERC721Burnable.sol#200-201\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (ERC721Burnable.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    require(owner != address(0));\n\n    return _ownedTokensCount[owner];\n",
                    "message": "ERC721.balanceOf (ERC721Burnable.sol#319-322) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721Burnable.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function approve(address to, uint256 tokenId) public {\n\n    address owner = ownerOf(tokenId);\n\n    require(to != owner);\n\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n    _tokenApprovals[tokenId] = to;\n\n    emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721Burnable.sol#343-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721Burnable.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function setApprovalForAll(address to, bool approved) public {\n\n    require(to != msg.sender);\n\n    _operatorApprovals[msg.sender][to] = approved;\n\n    emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721Burnable.sol#369-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
                    "message": "IERC721.safeTransferFrom (ERC721Burnable.sol#61-62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId\n\n  )\n\n    public\n\n  {\n\n    // solium-disable-next-line arg-overflow\n\n    safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721Burnable.sol#429-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function onERC721Received(\n\n    address operator,\n\n    address from,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721Burnable.sol#97-104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": 601,
                    "vulnerability_code": "  function burn(uint256 tokenId)\n\n    public\n\n  {\n\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n\n    _burn(ownerOf(tokenId), tokenId);\n",
                    "message": "ERC721Burnable.burn (ERC721Burnable.sol#596-601) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721Burnable.sol#252-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721Burnable.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721Burnable.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "  function _exists(uint256 tokenId) internal view returns (bool) {\n\n    address owner = _tokenOwner[tokenId];\n\n    return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721Burnable.sol#470-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "  function _isApprovedOrOwner(\n\n    address spender,\n\n    uint256 tokenId\n\n  )\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address owner = ownerOf(tokenId);\n\n    // Disable solium check because of\n\n    // https://github.com/duaraghav8/Solium/issues/175\n\n    // solium-disable-next-line operator-whitespace\n\n    return (\n\n      spender == owner ||\n\n      getApproved(tokenId) == spender ||\n\n      isApprovedForAll(owner, spender)\n\n    );\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721Burnable.sol#482-499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _mint(address to, uint256 tokenId) internal {\n\n    require(to != address(0));\n\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721Burnable.sol#507-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "  function _burn(address owner, uint256 tokenId) internal {\n\n    _clearApproval(owner, tokenId);\n\n    _removeTokenFrom(owner, tokenId);\n\n    emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721Burnable.sol#518-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function _addTokenTo(address to, uint256 tokenId) internal {\n\n    require(_tokenOwner[tokenId] == address(0));\n\n    _tokenOwner[tokenId] = to;\n\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721Burnable.sol#531-535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n    require(ownerOf(tokenId) == from);\n\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n    _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721Burnable.sol#545-549) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function _checkOnERC721Received(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes _data\n\n  )\n\n    internal\n\n    returns (bool)\n\n  {\n\n    if (!to.isContract()) {\n\n      return true;\n\n    }\n\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n\n      msg.sender, from, tokenId, _data);\n\n    return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721Burnable.sol#560-575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721Burnable.sol#564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function _clearApproval(address owner, uint256 tokenId) private {\n\n    require(ownerOf(tokenId) == owner);\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n\n      _tokenApprovals[tokenId] = address(0);\n\n    }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721Burnable.sol#583-588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721Burnable.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes _data\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/access/Roles.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/access/roles/CapperRole.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addCapper(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function addCapper(address account) public onlyCapper {\n\n    _addCapper(account);\n",
                    "message": "CapperRole.addCapper (CapperRole.sol#74-76) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": 80,
                    "vulnerability_code": "  function renounceCapper() public {\n\n    _removeCapper(msg.sender);\n",
                    "message": "CapperRole.renounceCapper (CapperRole.sol#78-80) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "  function _addCapper(address account) internal {\n\n    cappers.add(account);\n\n    emit CapperAdded(account);\n",
                    "message": "Function 'CapperRole._addCapper' (CapperRole.sol#82-85) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "  function _removeCapper(address account) internal {\n\n    cappers.remove(account);\n\n    emit CapperRemoved(account);\n",
                    "message": "Function 'CapperRole._removeCapper' (CapperRole.sol#87-90) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private cappers;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/access/roles/MinterRole.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (MinterRole.sol#73-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (MinterRole.sol#77-79) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (MinterRole.sol#81-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (MinterRole.sol#86-89) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/access/roles/PauserRole.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addPauser(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function addPauser(address account) public onlyPauser {\n\n    _addPauser(account);\n",
                    "message": "PauserRole.addPauser (PauserRole.sol#73-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function renouncePauser() public {\n\n    _removePauser(msg.sender);\n",
                    "message": "PauserRole.renouncePauser (PauserRole.sol#77-79) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function _addPauser(address account) internal {\n\n    pausers.add(account);\n\n    emit PauserAdded(account);\n",
                    "message": "Function 'PauserRole._addPauser' (PauserRole.sol#81-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    pausers.remove(account);\n\n    emit PauserRemoved(account);\n",
                    "message": "Function 'PauserRole._removePauser' (PauserRole.sol#86-89) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private pausers;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/access/roles/SignerRole.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addSigner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function addSigner(address account) public onlySigner {\n\n    _addSigner(account);\n",
                    "message": "SignerRole.addSigner (SignerRole.sol#73-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function renounceSigner() public {\n\n    _removeSigner(msg.sender);\n",
                    "message": "SignerRole.renounceSigner (SignerRole.sol#77-79) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function _addSigner(address account) internal {\n\n    signers.add(account);\n\n    emit SignerAdded(account);\n",
                    "message": "Function 'SignerRole._addSigner' (SignerRole.sol#81-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function _removeSigner(address account) internal {\n\n    signers.remove(account);\n\n    emit SignerRemoved(account);\n",
                    "message": "Function 'SignerRole._removeSigner' (SignerRole.sol#86-89) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private signers;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/cryptography/ECDSA.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (v != 27 && v != 28) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      // solium-disable-next-line arg-overflow\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return ecrecover(hash, v, r, s);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 55,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n\n    internal\n\n    pure\n\n    returns (address)\n\n  {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Check the signature length\n\n    if (signature.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    // ecrecover takes the signature parameters, and the only way to get them\n\n    // currently is to use assembly.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      r := mload(add(signature, 0x20))\n\n      s := mload(add(signature, 0x40))\n\n      v := byte(0, mload(add(signature, 0x60)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      // solium-disable-next-line arg-overflow\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECDSA.recover (ECDSA.sol#19-55) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 55,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n\n    internal\n\n    pure\n\n    returns (address)\n\n  {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Check the signature length\n\n    if (signature.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    // ecrecover takes the signature parameters, and the only way to get them\n\n    // currently is to use assembly.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      r := mload(add(signature, 0x20))\n\n      s := mload(add(signature, 0x40))\n\n      v := byte(0, mload(add(signature, 0x60)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      // solium-disable-next-line arg-overflow\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECDSA.recover uses assembly (ECDSA.sol#19-55)\n\t- ECDSA.sol#37-44\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/cryptography/MerkleProof.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proof.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proof.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proof.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proof.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proof.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32[] proof,\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/payment/PaymentSplitter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < payees.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < payees.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < payees.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function release(address account) public {\n\n    require(_shares[account] > 0);\n\n\n\n    uint256 totalReceived = address(this).balance.add(_totalReleased);\n\n    uint256 payment = totalReceived.mul(\n\n      _shares[account]).div(\n\n        _totalShares).sub(\n\n          _released[account]\n\n    );\n\n\n\n    require(payment != 0);\n\n\n\n    _released[account] = _released[account].add(payment);\n\n    _totalReleased = _totalReleased.add(payment);\n\n\n\n    account.transfer(payment);\n\n    emit PaymentReleased(account, payment);\n",
                    "message": "PaymentSplitter.release (PaymentSplitter.sol#150-167) sends eth to arbitrary user\n\tDangerous calls:\n\t- account.transfer(payment) (PaymentSplitter.sol#165)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address[] payees, uint256[] shares) public payable {\n",
                    "message": "PaymentSplitter.constructor.shares (local variable @ PaymentSplitter.sol#95) shadows:\n\t- PaymentSplitter.shares (function @ PaymentSplitter.sol#128-130)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "  function totalShares() public view returns(uint256) {\n\n    return _totalShares;\n",
                    "message": "PaymentSplitter.totalShares (PaymentSplitter.sol#114-116) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": 123,
                    "vulnerability_code": "  function totalReleased() public view returns(uint256) {\n\n    return _totalReleased;\n",
                    "message": "PaymentSplitter.totalReleased (PaymentSplitter.sol#121-123) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 130,
                    "vulnerability_code": "  function shares(address account) public view returns(uint256) {\n\n    return _shares[account];\n",
                    "message": "PaymentSplitter.shares (PaymentSplitter.sol#128-130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 137,
                    "vulnerability_code": "  function released(address account) public view returns(uint256) {\n\n    return _released[account];\n",
                    "message": "PaymentSplitter.released (PaymentSplitter.sol#135-137) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "  function payee(uint256 index) public view returns(address) {\n\n    return _payees[index];\n",
                    "message": "PaymentSplitter.payee (PaymentSplitter.sol#142-144) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function release(address account) public {\n\n    require(_shares[account] > 0);\n\n\n\n    uint256 totalReceived = address(this).balance.add(_totalReleased);\n\n    uint256 payment = totalReceived.mul(\n\n      _shares[account]).div(\n\n        _totalShares).sub(\n\n          _released[account]\n\n    );\n\n\n\n    require(payment != 0);\n\n\n\n    _released[account] = _released[account].add(payment);\n\n    _totalReleased = _totalReleased.add(payment);\n\n\n\n    account.transfer(payment);\n\n    emit PaymentReleased(account, payment);\n",
                    "message": "PaymentSplitter.release (PaymentSplitter.sol#150-167) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function _addPayee(address account, uint256 shares_) private {\n\n    require(account != address(0));\n\n    require(shares_ > 0);\n\n    require(_shares[account] == 0);\n\n\n\n    _payees.push(account);\n\n    _shares[account] = shares_;\n\n    _totalShares = _totalShares.add(shares_);\n\n    emit PayeeAdded(account, shares_);\n",
                    "message": "Function 'PaymentSplitter._addPayee' (PaymentSplitter.sol#174-183) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < payees.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < payees.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalShares;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalReleased;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _shares;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _released;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address[] private _payees;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address[] payees, uint256[] shares) public payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address[] payees, uint256[] shares) public payable {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/payment/PullPayment.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _escrow = new Escrow();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n",
                    "message": "Secondary.primary (PullPayment.sol#103-105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n",
                    "message": "Secondary.transferPrimary (PullPayment.sol#111-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 145,
                    "vulnerability_code": "  function depositsOf(address payee) public view returns (uint256) {\n\n    return _deposits[payee];\n",
                    "message": "Escrow.depositsOf (PullPayment.sol#143-145) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function deposit(address payee) public onlyPrimary payable {\n\n    uint256 amount = msg.value;\n\n    _deposits[payee] = _deposits[payee].add(amount);\n\n\n\n    emit Deposited(payee, amount);\n",
                    "message": "Escrow.deposit (PullPayment.sol#151-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "  function withdraw(address payee) public onlyPrimary {\n\n    uint256 payment = _deposits[payee];\n\n\n\n    _deposits[payee] = 0;\n\n\n\n    payee.transfer(payment);\n\n\n\n    emit Withdrawn(payee, payment);\n",
                    "message": "Escrow.withdraw (PullPayment.sol#162-170) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 195,
                    "vulnerability_code": "  function withdrawPayments(address payee) public {\n\n    _escrow.withdraw(payee);\n",
                    "message": "PullPayment.withdrawPayments (PullPayment.sol#193-195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 203,
                    "vulnerability_code": "  function payments(address dest) public view returns (uint256) {\n\n    return _escrow.depositsOf(dest);\n",
                    "message": "PullPayment.payments (PullPayment.sol#201-203) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "  function _asyncTransfer(address dest, uint256 amount) internal {\n\n    _escrow.deposit.value(amount)(dest);\n",
                    "message": "Function 'PullPayment._asyncTransfer' (PullPayment.sol#210-212) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _deposits;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Escrow private _escrow;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/payment/escrow/Escrow.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n",
                    "message": "Secondary.primary (Escrow.sol#103-105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n",
                    "message": "Secondary.transferPrimary (Escrow.sol#111-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 145,
                    "vulnerability_code": "  function depositsOf(address payee) public view returns (uint256) {\n\n    return _deposits[payee];\n",
                    "message": "Escrow.depositsOf (Escrow.sol#143-145) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function deposit(address payee) public onlyPrimary payable {\n\n    uint256 amount = msg.value;\n\n    _deposits[payee] = _deposits[payee].add(amount);\n\n\n\n    emit Deposited(payee, amount);\n",
                    "message": "Escrow.deposit (Escrow.sol#151-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "  function withdraw(address payee) public onlyPrimary {\n\n    uint256 payment = _deposits[payee];\n\n\n\n    _deposits[payee] = 0;\n\n\n\n    payee.transfer(payment);\n\n\n\n    emit Withdrawn(payee, payment);\n",
                    "message": "Escrow.withdraw (Escrow.sol#162-170) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _deposits;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/payment/escrow/RefundEscrow.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address beneficiary) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(beneficiary != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _beneficiary = beneficiary;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _state = State.Active;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": 280,
                    "vulnerability_code": "  function beneficiaryWithdraw() public {\n\n    require(_state == State.Closed);\n\n    _beneficiary.transfer(address(this).balance);\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiaryWithdraw (RefundEscrow.sol#275-280) sends eth to arbitrary user\n\tDangerous calls:\n\t- _beneficiary.transfer(address(this).balance) (RefundEscrow.sol#277-278)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address beneficiary) public {\n",
                    "message": "RefundEscrow.constructor.beneficiary (local variable @ RefundEscrow.sol#224) shadows:\n\t- RefundEscrow.beneficiary (function @ RefundEscrow.sol#240-244)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n",
                    "message": "Secondary.primary (RefundEscrow.sol#103-105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n",
                    "message": "Secondary.transferPrimary (RefundEscrow.sol#111-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 145,
                    "vulnerability_code": "  function depositsOf(address payee) public view returns (uint256) {\n\n    return _deposits[payee];\n",
                    "message": "Escrow.depositsOf (RefundEscrow.sol#143-145) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": 237,
                    "vulnerability_code": "  function state() public view returns (State) {\n\n    return _state;\n\n  }\n\n\n",
                    "message": "RefundEscrow.state (RefundEscrow.sol#233-237) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": 244,
                    "vulnerability_code": "  function beneficiary() public view returns (address) {\n\n    return _beneficiary;\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiary (RefundEscrow.sol#240-244) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 263,
                    "vulnerability_code": "  function close() public onlyPrimary {\n\n    require(_state == State.Active);\n\n    _state = State.Closed;\n\n    emit RefundsClosed();\n\n  }\n\n\n",
                    "message": "RefundEscrow.close (RefundEscrow.sol#257-263) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": 272,
                    "vulnerability_code": "  function enableRefunds() public onlyPrimary {\n\n    require(_state == State.Active);\n\n    _state = State.Refunding;\n\n    emit RefundsEnabled();\n\n  }\n\n\n",
                    "message": "RefundEscrow.enableRefunds (RefundEscrow.sol#266-272) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": 280,
                    "vulnerability_code": "  function beneficiaryWithdraw() public {\n\n    require(_state == State.Closed);\n\n    _beneficiary.transfer(address(this).balance);\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiaryWithdraw (RefundEscrow.sol#275-280) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _deposits;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  State private _state;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _beneficiary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/payment/escrow/ConditionalEscrow.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n",
                    "message": "Secondary.primary (ConditionalEscrow.sol#103-105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n",
                    "message": "Secondary.transferPrimary (ConditionalEscrow.sol#111-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 145,
                    "vulnerability_code": "  function depositsOf(address payee) public view returns (uint256) {\n\n    return _deposits[payee];\n",
                    "message": "Escrow.depositsOf (ConditionalEscrow.sol#143-145) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "  function deposit(address payee) public onlyPrimary payable {\n\n    uint256 amount = msg.value;\n\n    _deposits[payee] = _deposits[payee].add(amount);\n\n\n\n    emit Deposited(payee, amount);\n",
                    "message": "Escrow.deposit (ConditionalEscrow.sol#151-156) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _deposits;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/drafts/TokenVesting.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenVesting is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit OwnershipTransferred(address(0), _owner);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address beneficiary,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 start,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 cliffDuration,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 duration,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool revocable\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(beneficiary != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_22"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": 384,
                    "vulnerability_code": "  function release(IERC20 token) public {\n\n    uint256 unreleased = _releasableAmount(token);\n\n\n\n    require(unreleased > 0);\n\n\n\n    _released[token] = _released[token].add(unreleased);\n\n\n\n    token.safeTransfer(_beneficiary, unreleased);\n\n\n\n    emit TokensReleased(token, unreleased);\n",
                    "message": "Reentrancy in TokenVesting.release (TokenVesting.sol#374-384):\n\tExternal calls:\n\t- unreleased = _releasableAmount(token) (TokenVesting.sol#375)\n\tState variables written after the call(s):\n\t- _released (TokenVesting.sol#379)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "  function revoke(IERC20 token) public onlyOwner {\n\n    require(_revocable);\n\n    require(!_revoked[token]);\n\n\n\n    uint256 balance = token.balanceOf(address(this));\n\n\n\n    uint256 unreleased = _releasableAmount(token);\n\n    uint256 refund = balance.sub(unreleased);\n\n\n\n    _revoked[token] = true;\n\n\n\n    token.safeTransfer(owner(), refund);\n\n\n\n    emit TokenVestingRevoked(token);\n",
                    "message": "Reentrancy in TokenVesting.revoke (TokenVesting.sol#391-405):\n\tExternal calls:\n\t- balance = token.balanceOf(address(this)) (TokenVesting.sol#395)\n\t- unreleased = _releasableAmount(token) (TokenVesting.sol#397)\n\tState variables written after the call(s):\n\t- _revoked (TokenVesting.sol#400)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address beneficiary,\n",
                    "message": "TokenVesting.constructor.beneficiary (local variable @ TokenVesting.sol#301) shadows:\n\t- TokenVesting.beneficiary (function @ TokenVesting.sol#324-326)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 start,\n",
                    "message": "TokenVesting.constructor.start (local variable @ TokenVesting.sol#302) shadows:\n\t- TokenVesting.start (function @ TokenVesting.sol#338-340)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 duration,\n",
                    "message": "TokenVesting.constructor.duration (local variable @ TokenVesting.sol#304) shadows:\n\t- TokenVesting.duration (function @ TokenVesting.sol#345-347)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool revocable\n",
                    "message": "TokenVesting.constructor.revocable (local variable @ TokenVesting.sol#305) shadows:\n\t- TokenVesting.revocable (function @ TokenVesting.sol#352-354)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  constructor(\n\n    address beneficiary,\n\n    uint256 start,\n\n    uint256 cliffDuration,\n\n    uint256 duration,\n\n    bool revocable\n\n  )\n\n    public\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(cliffDuration <= duration);\n\n    require(duration > 0);\n\n    require(start.add(duration) > block.timestamp);\n\n\n\n    _beneficiary = beneficiary;\n\n    _revocable = revocable;\n\n    _duration = duration;\n\n    _cliff = start.add(cliffDuration);\n\n    _start = start;\n",
                    "message": "TokenVesting.constructor (TokenVesting.sol#300-319) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(start.add(duration) > block.timestamp) (TokenVesting.sol#312)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 430,
                    "vulnerability_code": "  function _vestedAmount(IERC20 token) private view returns (uint256) {\n\n    uint256 currentBalance = token.balanceOf(this);\n\n    uint256 totalBalance = currentBalance.add(_released[token]);\n\n\n\n    if (block.timestamp < _cliff) {\n\n      return 0;\n\n    } else if (block.timestamp >= _start.add(_duration) || _revoked[token]) {\n\n      return totalBalance;\n\n    } else {\n\n      return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n\n    }\n",
                    "message": "TokenVesting._vestedAmount (TokenVesting.sol#419-430) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < _cliff (TokenVesting.sol#423-429)\n\t- block.timestamp >= _start.add(_duration) || _revoked[token] (TokenVesting.sol#425-429)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": 236,
                    "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipTransferred(_owner, address(0));\n\n    _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (TokenVesting.sol#233-236) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": 244,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (TokenVesting.sol#242-244) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 326,
                    "vulnerability_code": "  function beneficiary() public view returns(address) {\n\n    return _beneficiary;\n",
                    "message": "TokenVesting.beneficiary (TokenVesting.sol#324-326) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": 333,
                    "vulnerability_code": "  function cliff() public view returns(uint256) {\n\n    return _cliff;\n",
                    "message": "TokenVesting.cliff (TokenVesting.sol#331-333) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": 340,
                    "vulnerability_code": "  function start() public view returns(uint256) {\n\n    return _start;\n",
                    "message": "TokenVesting.start (TokenVesting.sol#338-340) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "  function duration() public view returns(uint256) {\n\n    return _duration;\n",
                    "message": "TokenVesting.duration (TokenVesting.sol#345-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": 354,
                    "vulnerability_code": "  function revocable() public view returns(bool) {\n\n    return _revocable;\n",
                    "message": "TokenVesting.revocable (TokenVesting.sol#352-354) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": 361,
                    "vulnerability_code": "  function released(address token) public view returns(uint256) {\n\n    return _released[token];\n",
                    "message": "TokenVesting.released (TokenVesting.sol#359-361) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": 368,
                    "vulnerability_code": "  function revoked(address token) public view returns(bool) {\n\n    return _revoked[token];\n",
                    "message": "TokenVesting.revoked (TokenVesting.sol#366-368) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": 384,
                    "vulnerability_code": "  function release(IERC20 token) public {\n\n    uint256 unreleased = _releasableAmount(token);\n\n\n\n    require(unreleased > 0);\n\n\n\n    _released[token] = _released[token].add(unreleased);\n\n\n\n    token.safeTransfer(_beneficiary, unreleased);\n\n\n\n    emit TokensReleased(token, unreleased);\n",
                    "message": "TokenVesting.release (TokenVesting.sol#374-384) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "  function revoke(IERC20 token) public onlyOwner {\n\n    require(_revocable);\n\n    require(!_revoked[token]);\n\n\n\n    uint256 balance = token.balanceOf(address(this));\n\n\n\n    uint256 unreleased = _releasableAmount(token);\n\n    uint256 refund = balance.sub(unreleased);\n\n\n\n    _revoked[token] = true;\n\n\n\n    token.safeTransfer(owner(), refund);\n\n\n\n    emit TokenVestingRevoked(token);\n",
                    "message": "TokenVesting.revoke (TokenVesting.sol#391-405) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function _transferOwnership(address newOwner) internal {\n\n    require(newOwner != address(0));\n\n    emit OwnershipTransferred(_owner, newOwner);\n\n    _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (TokenVesting.sol#250-254) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function _releasableAmount(IERC20 token) private view returns (uint256) {\n\n    return _vestedAmount(token).sub(_released[token]);\n",
                    "message": "Function 'TokenVesting._releasableAmount' (TokenVesting.sol#411-413) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 430,
                    "vulnerability_code": "  function _vestedAmount(IERC20 token) private view returns (uint256) {\n\n    uint256 currentBalance = token.balanceOf(this);\n\n    uint256 totalBalance = currentBalance.add(_released[token]);\n\n\n\n    if (block.timestamp < _cliff) {\n\n      return 0;\n\n    } else if (block.timestamp >= _start.add(_duration) || _revoked[token]) {\n\n      return totalBalance;\n\n    } else {\n\n      return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n\n    }\n",
                    "message": "Function 'TokenVesting._vestedAmount' (TokenVesting.sol#419-430) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _beneficiary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _cliff;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _start;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _duration;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _revocable;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _released;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => bool) private _revoked;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/drafts/Counter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/drafts/ERC20Migrator.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(IERC20 legacyToken) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(legacyToken != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _legacyToken = legacyToken;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_31"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": 620,
                    "vulnerability_code": "  function beginMigration(ERC20Mintable newToken) public {\n\n    require(_newToken == address(0));\n\n    require(newToken != address(0));\n\n    require(newToken.isMinter(this));\n\n\n\n    _newToken = newToken;\n",
                    "message": "Reentrancy in ERC20Migrator.beginMigration (ERC20Migrator.sol#614-620):\n\tExternal calls:\n\t- require(bool)(newToken.isMinter(this)) (ERC20Migrator.sol#617)\n\tState variables written after the call(s):\n\t- _newToken (ERC20Migrator.sol#619)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 628,
                    "vulnerability_to_line": 631,
                    "vulnerability_code": "  function migrate(address account, uint256 amount) public {\n\n    _legacyToken.safeTransferFrom(account, this, amount);\n\n    _newToken.mint(account, amount);\n",
                    "message": "ERC20Migrator.migrate (ERC20Migrator.sol#628-631) does not use the value returned by external calls:\n\t-_newToken.mint(account,amount) (ERC20Migrator.sol#630)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(IERC20 legacyToken) public {\n",
                    "message": "ERC20Migrator.constructor.legacyToken (local variable @ ERC20Migrator.sol#590) shadows:\n\t- ERC20Migrator.legacyToken (function @ ERC20Migrator.sol#598-600)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function beginMigration(ERC20Mintable newToken) public {\n",
                    "message": "ERC20Migrator.beginMigration.newToken (local variable @ ERC20Migrator.sol#614) shadows:\n\t- ERC20Migrator.newToken (function @ ERC20Migrator.sol#605-607)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20Migrator.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20Migrator.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20Migrator.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20Migrator.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20Migrator.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20Migrator.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (ERC20Migrator.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20Migrator.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20Migrator.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (ERC20Migrator.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (ERC20Migrator.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20Migrator.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20Migrator.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20Migrator.sol#241-254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 392,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
                    "message": "MinterRole.addMinter (ERC20Migrator.sol#390-392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (ERC20Migrator.sol#394-396) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": 435,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, value);\n\n    return true;\n",
                    "message": "ERC20Mintable.mint (ERC20Migrator.sol#425-435) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 598,
                    "vulnerability_to_line": 600,
                    "vulnerability_code": "  function legacyToken() public view returns (IERC20) {\n\n    return _legacyToken;\n",
                    "message": "ERC20Migrator.legacyToken (ERC20Migrator.sol#598-600) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": 607,
                    "vulnerability_code": "  function newToken() public view returns (IERC20) {\n\n    return _newToken;\n",
                    "message": "ERC20Migrator.newToken (ERC20Migrator.sol#605-607) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": 620,
                    "vulnerability_code": "  function beginMigration(ERC20Mintable newToken) public {\n\n    require(_newToken == address(0));\n\n    require(newToken != address(0));\n\n    require(newToken.isMinter(this));\n\n\n\n    _newToken = newToken;\n",
                    "message": "ERC20Migrator.beginMigration (ERC20Migrator.sol#614-620) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 638,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "  function migrateAll(address account) public {\n\n    uint256 balance = _legacyToken.balanceOf(account);\n\n    uint256 allowance = _legacyToken.allowance(account, this);\n\n    uint256 amount = Math.min(balance, allowance);\n\n    migrate(account, amount);\n",
                    "message": "ERC20Migrator.migrateAll (ERC20Migrator.sol#638-643) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20Migrator.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20Migrator.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20Migrator.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20Migrator.sol#307-315) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (ERC20Migrator.sol#398-401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (ERC20Migrator.sol#403-406) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _legacyToken;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ERC20Mintable private _newToken;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/drafts/SignatureBouncer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addSigner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (v != 27 && v != 28) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      // solium-disable-next-line arg-overflow\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return ecrecover(hash, v, r, s);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n\n    internal\n\n    pure\n\n    returns (address)\n\n  {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Check the signature length\n\n    if (signature.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    // ecrecover takes the signature parameters, and the only way to get them\n\n    // currently is to use assembly.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      r := mload(add(signature, 0x20))\n\n      s := mload(add(signature, 0x40))\n\n      v := byte(0, mload(add(signature, 0x60)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      // solium-disable-next-line arg-overflow\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECDSA.recover (SignatureBouncer.sol#110-146) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n\n    internal\n\n    pure\n\n    returns (address)\n\n  {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Check the signature length\n\n    if (signature.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    // ecrecover takes the signature parameters, and the only way to get them\n\n    // currently is to use assembly.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      r := mload(add(signature, 0x20))\n\n      s := mload(add(signature, 0x40))\n\n      v := byte(0, mload(add(signature, 0x60)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      // solium-disable-next-line arg-overflow\n\n      return ecrecover(hash, v, r, s);\n\n    }\n",
                    "message": "ECDSA.recover uses assembly (SignatureBouncer.sol#110-146)\n\t- SignatureBouncer.sol#128-135\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function addSigner(address account) public onlySigner {\n\n    _addSigner(account);\n",
                    "message": "SignerRole.addSigner (SignatureBouncer.sol#73-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function renounceSigner() public {\n\n    _removeSigner(msg.sender);\n",
                    "message": "SignerRole.renounceSigner (SignatureBouncer.sol#77-79) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function _addSigner(address account) internal {\n\n    signers.add(account);\n\n    emit SignerAdded(account);\n",
                    "message": "Function 'SignerRole._addSigner' (SignatureBouncer.sol#81-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function _removeSigner(address account) internal {\n\n    signers.remove(account);\n\n    emit SignerRemoved(account);\n",
                    "message": "Function 'SignerRole._removeSigner' (SignatureBouncer.sol#86-89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 253,
                    "vulnerability_code": "  function _isValidSignature(address account, bytes signature)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    return _isValidDataHash(\n\n      keccak256(abi.encodePacked(address(this), account)),\n\n      signature\n\n    );\n",
                    "message": "Function 'SignatureBouncer._isValidSignature' (SignatureBouncer.sol#244-253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 272,
                    "vulnerability_code": "  function _isValidSignatureAndMethod(address account, bytes signature)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    bytes memory data = new bytes(_METHOD_ID_SIZE);\n\n    for (uint i = 0; i < data.length; i++) {\n\n      data[i] = msg.data[i];\n\n    }\n\n    return _isValidDataHash(\n\n      keccak256(abi.encodePacked(address(this), account, data)),\n\n      signature\n\n    );\n",
                    "message": "Function 'SignatureBouncer._isValidSignatureAndMethod' (SignatureBouncer.sol#259-272) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "  function _isValidSignatureAndData(address account, bytes signature)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    require(msg.data.length > _SIGNATURE_SIZE);\n\n    bytes memory data = new bytes(msg.data.length - _SIGNATURE_SIZE);\n\n    for (uint i = 0; i < data.length; i++) {\n\n      data[i] = msg.data[i];\n\n    }\n\n    return _isValidDataHash(\n\n      keccak256(abi.encodePacked(address(this), account, data)),\n\n      signature\n\n    );\n",
                    "message": "Function 'SignatureBouncer._isValidSignatureAndData' (SignatureBouncer.sol#279-293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "  function _isValidDataHash(bytes32 hash, bytes signature)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    address signer = hash\n\n      .toEthSignedMessageHash()\n\n      .recover(signature);\n\n\n\n    return signer != address(0) && isSigner(signer);\n",
                    "message": "Function 'SignatureBouncer._isValidDataHash' (SignatureBouncer.sol#300-310) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private signers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private constant _METHOD_ID_SIZE = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private constant _SIGNATURE_SIZE = 96;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function recover(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _isValidSignature(address account, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _isValidSignatureAndMethod(address account, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _isValidSignatureAndData(address account, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _isValidDataHash(bytes32 hash, bytes signature)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/drafts/ERC1046/TokenMetadata.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string tokenURI)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenURI = tokenURI;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string tokenURI)\n",
                    "message": "ERC20WithMetadata.constructor.tokenURI (local variable @ TokenMetadata.sol#55) shadows:\n\t- ERC20WithMetadata.tokenURI (function @ TokenMetadata.sol#61-63)\n\t- ERC20TokenMetadata.tokenURI (function @ TokenMetadata.sol#49)\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _tokenURI;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string tokenURI)\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/lifecycle/Pausable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addPauser(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _paused = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "  function addPauser(address account) public onlyPauser {\n\n    _addPauser(account);\n",
                    "message": "PauserRole.addPauser (Pausable.sol#73-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function renouncePauser() public {\n\n    _removePauser(msg.sender);\n",
                    "message": "PauserRole.renouncePauser (Pausable.sol#77-79) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function paused() public view returns(bool) {\n\n    return _paused;\n",
                    "message": "Pausable.paused (Pausable.sol#113-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function pause() public onlyPauser whenNotPaused {\n\n    _paused = true;\n\n    emit Paused(msg.sender);\n",
                    "message": "Pausable.pause (Pausable.sol#136-139) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function unpause() public onlyPauser whenPaused {\n\n    _paused = false;\n\n    emit Unpaused(msg.sender);\n",
                    "message": "Pausable.unpause (Pausable.sol#144-147) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "  function _addPauser(address account) internal {\n\n    pausers.add(account);\n\n    emit PauserAdded(account);\n",
                    "message": "Function 'PauserRole._addPauser' (Pausable.sol#81-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function _removePauser(address account) internal {\n\n    pausers.remove(account);\n\n    emit PauserRemoved(account);\n",
                    "message": "Function 'PauserRole._removePauser' (Pausable.sol#86-89) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private pausers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _paused;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/crowdsale/Crowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ Crowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ Crowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ Crowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ Crowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ Crowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ Crowdsale.sol#303-306)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (Crowdsale.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (Crowdsale.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (Crowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (Crowdsale.sol#324-327) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (Crowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (Crowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (Crowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (Crowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (Crowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (Crowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (Crowdsale.sol#453-456) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/crowdsale/emission/MintedCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_37"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ MintedCrowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ MintedCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ MintedCrowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ MintedCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ MintedCrowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ MintedCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (MintedCrowdsale.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (MintedCrowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (MintedCrowdsale.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 485,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n\n  }\n",
                    "message": "ERC20.totalSupply (MintedCrowdsale.sol#482-485) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (MintedCrowdsale.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n\n  }\n",
                    "message": "ERC20.balanceOf (MintedCrowdsale.sol#491-494) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (MintedCrowdsale.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (MintedCrowdsale.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n\n  }\n",
                    "message": "ERC20.allowance (MintedCrowdsale.sol#501-511) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (MintedCrowdsale.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": 521,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n\n  }\n",
                    "message": "ERC20.transfer (MintedCrowdsale.sol#517-521) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 538,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n\n  }\n",
                    "message": "ERC20.approve (MintedCrowdsale.sol#531-538) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (MintedCrowdsale.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (MintedCrowdsale.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 559,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n\n  }\n",
                    "message": "ERC20.transferFrom (MintedCrowdsale.sol#545-559) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n\n  }\n",
                    "message": "ERC20.increaseAllowance (MintedCrowdsale.sol#569-583) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": 607,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n\n  }\n",
                    "message": "ERC20.decreaseAllowance (MintedCrowdsale.sol#593-607) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": 745,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n\n  }\n",
                    "message": "MinterRole.addMinter (MintedCrowdsale.sol#742-745) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 749,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n\n  }\n",
                    "message": "MinterRole.renounceMinter (MintedCrowdsale.sol#746-749) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": 788,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, value);\n\n    return true;\n\n  }\n",
                    "message": "ERC20Mintable.mint (MintedCrowdsale.sol#777-788) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (MintedCrowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (MintedCrowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (MintedCrowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (MintedCrowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (MintedCrowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (MintedCrowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (MintedCrowdsale.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": 622,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n\n  }\n",
                    "message": "Function 'ERC20._transfer' (MintedCrowdsale.sol#614-622) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 630,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n\n  }\n",
                    "message": "Function 'ERC20._mint' (MintedCrowdsale.sol#630-636) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": 651,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n\n  }\n",
                    "message": "Function 'ERC20._burn' (MintedCrowdsale.sol#643-651) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": 668,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n\n  }\n",
                    "message": "Function 'ERC20._burnFrom' (MintedCrowdsale.sol#659-668) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 750,
                    "vulnerability_to_line": 754,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n\n  }\n",
                    "message": "Function 'MinterRole._addMinter' (MintedCrowdsale.sol#750-754) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": 759,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n\n  }\n",
                    "message": "Function 'MinterRole._removeMinter' (MintedCrowdsale.sol#755-759) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 808,
                    "vulnerability_to_line": 818,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    // Potentially dangerous assumption about the type of the token.\n\n    require(\n\n      ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));\n\n  }\n",
                    "message": "Function 'MintedCrowdsale._deliverTokens' (MintedCrowdsale.sol#808-818) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 763,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/crowdsale/emission/AllowanceCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address tokenWallet) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(tokenWallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _tokenWallet = tokenWallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_17"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ AllowanceCrowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ AllowanceCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ AllowanceCrowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ AllowanceCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ AllowanceCrowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ AllowanceCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address tokenWallet) internal {\n",
                    "message": "AllowanceCrowdsale.constructor.tokenWallet (local variable @ AllowanceCrowdsale.sol#514) shadows:\n\t- AllowanceCrowdsale.tokenWallet (function @ AllowanceCrowdsale.sol#522-525)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (AllowanceCrowdsale.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (AllowanceCrowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (AllowanceCrowdsale.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function tokenWallet() public view returns(address) {\n\n    return _tokenWallet;\n\n  }\n",
                    "message": "AllowanceCrowdsale.tokenWallet (AllowanceCrowdsale.sol#522-525) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": 536,
                    "vulnerability_code": "  function remainingTokens() public view returns (uint256) {\n\n    return Math.min(\n\n      token().balanceOf(_tokenWallet),\n\n      token().allowance(_tokenWallet, this)\n\n    );\n\n  }\n",
                    "message": "AllowanceCrowdsale.remainingTokens (AllowanceCrowdsale.sol#530-536) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (AllowanceCrowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (AllowanceCrowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (AllowanceCrowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (AllowanceCrowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (AllowanceCrowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (AllowanceCrowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (AllowanceCrowdsale.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": 550,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'AllowanceCrowdsale._deliverTokens' (AllowanceCrowdsale.sol#542-550) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _tokenWallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/crowdsale/distribution/RefundableCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _finalized = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 750,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address beneficiary) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 751,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(beneficiary != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 752,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _beneficiary = beneficiary;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _state = State.Active;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 goal) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(goal > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _escrow = new RefundEscrow(wallet());\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _goal = goal;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_37"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": 806,
                    "vulnerability_code": "  function beneficiaryWithdraw() public {\n\n    require(_state == State.Closed);\n\n    _beneficiary.transfer(address(this).balance);\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiaryWithdraw (RefundableCrowdsale.sol#801-806) sends eth to arbitrary user\n\tDangerous calls:\n\t- _beneficiary.transfer(address(this).balance) (RefundableCrowdsale.sol#803-804)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ RefundableCrowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ RefundableCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ RefundableCrowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ RefundableCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ RefundableCrowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ RefundableCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ RefundableCrowdsale.sol#486) shadows:\n\t- TimedCrowdsale.openingTime (function @ RefundableCrowdsale.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ RefundableCrowdsale.sol#486) shadows:\n\t- TimedCrowdsale.closingTime (function @ RefundableCrowdsale.sol#505-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 750,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address beneficiary) public {\n",
                    "message": "RefundEscrow.constructor.beneficiary (local variable @ RefundableCrowdsale.sol#750) shadows:\n\t- RefundEscrow.beneficiary (function @ RefundableCrowdsale.sol#766-770)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 goal) internal {\n",
                    "message": "RefundableCrowdsale.constructor.goal (local variable @ RefundableCrowdsale.sol#851) shadows:\n\t- RefundableCrowdsale.goal (function @ RefundableCrowdsale.sol#860-864)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (RefundableCrowdsale.sol#486-494) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (RefundableCrowdsale.sol#488)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (RefundableCrowdsale.sol#512-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (RefundableCrowdsale.sol#514)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (RefundableCrowdsale.sol#521-525) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (RefundableCrowdsale.sol#523)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (RefundableCrowdsale.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (RefundableCrowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "  function openingTime() public view returns(uint256) {\n\n    return _openingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.openingTime (RefundableCrowdsale.sol#498-501) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": 508,
                    "vulnerability_code": "  function closingTime() public view returns(uint256) {\n\n    return _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.closingTime (RefundableCrowdsale.sol#505-508) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": 585,
                    "vulnerability_code": "  function finalize() public {\n\n    require(!_finalized);\n\n    require(hasClosed());\n\n\n\n    _finalized = true;\n\n\n\n    _finalization();\n\n    emit CrowdsaleFinalized();\n\n  }\n",
                    "message": "FinalizableCrowdsale.finalize (RefundableCrowdsale.sol#576-585) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": 632,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n\n  }\n",
                    "message": "Secondary.primary (RefundableCrowdsale.sol#629-632) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 637,
                    "vulnerability_to_line": 642,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n\n  }\n",
                    "message": "Secondary.transferPrimary (RefundableCrowdsale.sol#637-642) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": 672,
                    "vulnerability_code": "  function depositsOf(address payee) public view returns (uint256) {\n\n    return _deposits[payee];\n\n  }\n",
                    "message": "Escrow.depositsOf (RefundableCrowdsale.sol#669-672) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 759,
                    "vulnerability_to_line": 763,
                    "vulnerability_code": "  function state() public view returns (State) {\n\n    return _state;\n\n  }\n\n\n",
                    "message": "RefundEscrow.state (RefundableCrowdsale.sol#759-763) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 766,
                    "vulnerability_to_line": 770,
                    "vulnerability_code": "  function beneficiary() public view returns (address) {\n\n    return _beneficiary;\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiary (RefundableCrowdsale.sol#766-770) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 783,
                    "vulnerability_to_line": 789,
                    "vulnerability_code": "  function close() public onlyPrimary {\n\n    require(_state == State.Active);\n\n    _state = State.Closed;\n\n    emit RefundsClosed();\n\n  }\n\n\n",
                    "message": "RefundEscrow.close (RefundableCrowdsale.sol#783-789) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": 798,
                    "vulnerability_code": "  function enableRefunds() public onlyPrimary {\n\n    require(_state == State.Active);\n\n    _state = State.Refunding;\n\n    emit RefundsEnabled();\n\n  }\n\n\n",
                    "message": "RefundEscrow.enableRefunds (RefundableCrowdsale.sol#792-798) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": 806,
                    "vulnerability_code": "  function beneficiaryWithdraw() public {\n\n    require(_state == State.Closed);\n\n    _beneficiary.transfer(address(this).balance);\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiaryWithdraw (RefundableCrowdsale.sol#801-806) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": 864,
                    "vulnerability_code": "  function goal() public view returns(uint256) {\n\n    return _goal;\n\n  }\n\n\n",
                    "message": "RefundableCrowdsale.goal (RefundableCrowdsale.sol#860-864) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": 875,
                    "vulnerability_code": "  function claimRefund(address beneficiary) public {\n\n    require(finalized());\n\n    require(!goalReached());\n\n\n\n    _escrow.withdraw(beneficiary);\n\n  }\n\n\n",
                    "message": "RefundableCrowdsale.claimRefund (RefundableCrowdsale.sol#868-875) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (RefundableCrowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (RefundableCrowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (RefundableCrowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (RefundableCrowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (RefundableCrowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (RefundableCrowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (RefundableCrowdsale.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (RefundableCrowdsale.sol#531-541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 593,
                    "vulnerability_code": "  function _finalization() internal {\n\n  }\n",
                    "message": "Function 'FinalizableCrowdsale._finalization' (RefundableCrowdsale.sol#591-593) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 900,
                    "vulnerability_to_line": 904,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _escrow.deposit.value(msg.value)(msg.sender);\n\n  }\n\n\n",
                    "message": "Function 'RefundableCrowdsale._forwardFunds' (RefundableCrowdsale.sol#900-904) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 886,
                    "vulnerability_to_line": 897,
                    "vulnerability_code": "  function _finalization() internal {\n\n    if (goalReached()) {\n\n      _escrow.close();\n\n      _escrow.beneficiaryWithdraw();\n\n    } else {\n\n      _escrow.enableRefunds();\n\n    }\n\n\n\n    super._finalization();\n\n  }\n\n\n",
                    "message": "Function 'RefundableCrowdsale._finalization' (RefundableCrowdsale.sol#886-897) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 646,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 701,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 724,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _finalized;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _deposits;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  State private _state;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _beneficiary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 842,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _goal;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  RefundEscrow private _escrow;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_25"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ PostDeliveryCrowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ PostDeliveryCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ PostDeliveryCrowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ PostDeliveryCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ PostDeliveryCrowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ PostDeliveryCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ PostDeliveryCrowdsale.sol#486) shadows:\n\t- TimedCrowdsale.openingTime (function @ PostDeliveryCrowdsale.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ PostDeliveryCrowdsale.sol#486) shadows:\n\t- TimedCrowdsale.closingTime (function @ PostDeliveryCrowdsale.sol#505-508)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (PostDeliveryCrowdsale.sol#486-494) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (PostDeliveryCrowdsale.sol#488)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (PostDeliveryCrowdsale.sol#512-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (PostDeliveryCrowdsale.sol#514)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (PostDeliveryCrowdsale.sol#521-525) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (PostDeliveryCrowdsale.sol#523)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (PostDeliveryCrowdsale.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (PostDeliveryCrowdsale.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (PostDeliveryCrowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (PostDeliveryCrowdsale.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "  function openingTime() public view returns(uint256) {\n\n    return _openingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.openingTime (PostDeliveryCrowdsale.sol#498-501) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": 508,
                    "vulnerability_code": "  function closingTime() public view returns(uint256) {\n\n    return _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.closingTime (PostDeliveryCrowdsale.sol#505-508) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 571,
                    "vulnerability_code": "  function withdrawTokens(address beneficiary) public {\n\n    require(hasClosed());\n\n    uint256 amount = _balances[beneficiary];\n\n    require(amount > 0);\n\n    _balances[beneficiary] = 0;\n\n    _deliverTokens(beneficiary, amount);\n\n  }\n",
                    "message": "PostDeliveryCrowdsale.withdrawTokens (PostDeliveryCrowdsale.sol#564-571) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": 578,
                    "vulnerability_code": "  function balanceOf(address account) public view returns(uint256) {\n\n    return _balances[account];\n\n  }\n",
                    "message": "PostDeliveryCrowdsale.balanceOf (PostDeliveryCrowdsale.sol#575-578) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (PostDeliveryCrowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (PostDeliveryCrowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (PostDeliveryCrowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (PostDeliveryCrowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (PostDeliveryCrowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (PostDeliveryCrowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (PostDeliveryCrowdsale.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (PostDeliveryCrowdsale.sol#531-541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": 592,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\n\n  }\n",
                    "message": "Function 'PostDeliveryCrowdsale._processPurchase' (PostDeliveryCrowdsale.sol#584-592) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/crowdsale/distribution/FinalizableCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _finalized = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_25"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ FinalizableCrowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ FinalizableCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ FinalizableCrowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ FinalizableCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ FinalizableCrowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ FinalizableCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ FinalizableCrowdsale.sol#486) shadows:\n\t- TimedCrowdsale.openingTime (function @ FinalizableCrowdsale.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ FinalizableCrowdsale.sol#486) shadows:\n\t- TimedCrowdsale.closingTime (function @ FinalizableCrowdsale.sol#505-508)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (FinalizableCrowdsale.sol#486-494) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (FinalizableCrowdsale.sol#488)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (FinalizableCrowdsale.sol#512-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (FinalizableCrowdsale.sol#514)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (FinalizableCrowdsale.sol#521-525) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (FinalizableCrowdsale.sol#523)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (FinalizableCrowdsale.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (FinalizableCrowdsale.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (FinalizableCrowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (FinalizableCrowdsale.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "  function openingTime() public view returns(uint256) {\n\n    return _openingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.openingTime (FinalizableCrowdsale.sol#498-501) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": 508,
                    "vulnerability_code": "  function closingTime() public view returns(uint256) {\n\n    return _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.closingTime (FinalizableCrowdsale.sol#505-508) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": 571,
                    "vulnerability_code": "  function finalized() public view returns (bool) {\n\n    return _finalized;\n\n  }\n",
                    "message": "FinalizableCrowdsale.finalized (FinalizableCrowdsale.sol#568-571) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": 585,
                    "vulnerability_code": "  function finalize() public {\n\n    require(!_finalized);\n\n    require(hasClosed());\n\n\n\n    _finalized = true;\n\n\n\n    _finalization();\n\n    emit CrowdsaleFinalized();\n\n  }\n",
                    "message": "FinalizableCrowdsale.finalize (FinalizableCrowdsale.sol#576-585) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (FinalizableCrowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (FinalizableCrowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (FinalizableCrowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (FinalizableCrowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (FinalizableCrowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (FinalizableCrowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (FinalizableCrowdsale.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (FinalizableCrowdsale.sol#531-541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 593,
                    "vulnerability_code": "  function _finalization() internal {\n\n  }\n",
                    "message": "Function 'FinalizableCrowdsale._finalization' (FinalizableCrowdsale.sol#591-593) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _finalized;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 initialRate, uint256 finalRate) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(finalRate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(initialRate > finalRate);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _initialRate = initialRate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _finalRate = finalRate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_27"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ IncreasingPriceCrowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ IncreasingPriceCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ IncreasingPriceCrowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ IncreasingPriceCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ IncreasingPriceCrowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ IncreasingPriceCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ IncreasingPriceCrowdsale.sol#486) shadows:\n\t- TimedCrowdsale.openingTime (function @ IncreasingPriceCrowdsale.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ IncreasingPriceCrowdsale.sol#486) shadows:\n\t- TimedCrowdsale.closingTime (function @ IncreasingPriceCrowdsale.sol#505-508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 initialRate, uint256 finalRate) internal {\n",
                    "message": "IncreasingPriceCrowdsale.constructor.initialRate (local variable @ IncreasingPriceCrowdsale.sol#566) shadows:\n\t- IncreasingPriceCrowdsale.initialRate (function @ IncreasingPriceCrowdsale.sol#584-587)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 initialRate, uint256 finalRate) internal {\n",
                    "message": "IncreasingPriceCrowdsale.constructor.finalRate (local variable @ IncreasingPriceCrowdsale.sol#566) shadows:\n\t- IncreasingPriceCrowdsale.finalRate (function @ IncreasingPriceCrowdsale.sol#591-594)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (IncreasingPriceCrowdsale.sol#486-494) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (IncreasingPriceCrowdsale.sol#488)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (IncreasingPriceCrowdsale.sol#512-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (IncreasingPriceCrowdsale.sol#514)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (IncreasingPriceCrowdsale.sol#521-525) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (IncreasingPriceCrowdsale.sol#523)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (IncreasingPriceCrowdsale.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (IncreasingPriceCrowdsale.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 580,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    revert();\n\n  }\n",
                    "message": "IncreasingPriceCrowdsale.rate (IncreasingPriceCrowdsale.sol#577-580) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (IncreasingPriceCrowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (IncreasingPriceCrowdsale.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (IncreasingPriceCrowdsale.sol#521-525) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "  function initialRate() public view returns(uint256) {\n\n    return _initialRate;\n\n  }\n",
                    "message": "IncreasingPriceCrowdsale.initialRate (IncreasingPriceCrowdsale.sol#584-587) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 594,
                    "vulnerability_code": "  function finalRate() public view returns (uint256) {\n\n    return _finalRate;\n\n  }\n",
                    "message": "IncreasingPriceCrowdsale.finalRate (IncreasingPriceCrowdsale.sol#591-594) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (IncreasingPriceCrowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (IncreasingPriceCrowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (IncreasingPriceCrowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (IncreasingPriceCrowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (IncreasingPriceCrowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (IncreasingPriceCrowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (IncreasingPriceCrowdsale.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (IncreasingPriceCrowdsale.sol#531-541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 623,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    uint256 currentRate = getCurrentRate();\n\n    return currentRate.mul(weiAmount);\n\n  }\n",
                    "message": "Function 'IncreasingPriceCrowdsale._getTokenAmount' (IncreasingPriceCrowdsale.sol#617-623) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _initialRate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _finalRate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/crowdsale/validation/IndividuallyCappedCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 519,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addCapper(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_22"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ IndividuallyCappedCrowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ IndividuallyCappedCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ IndividuallyCappedCrowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ IndividuallyCappedCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ IndividuallyCappedCrowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ IndividuallyCappedCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (IndividuallyCappedCrowdsale.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (IndividuallyCappedCrowdsale.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (IndividuallyCappedCrowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (IndividuallyCappedCrowdsale.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 534,
                    "vulnerability_code": "  function addCapper(address account) public onlyCapper {\n\n    _addCapper(account);\n\n  }\n",
                    "message": "CapperRole.addCapper (IndividuallyCappedCrowdsale.sol#531-534) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": 538,
                    "vulnerability_code": "  function renounceCapper() public {\n\n    _removeCapper(msg.sender);\n\n  }\n",
                    "message": "CapperRole.renounceCapper (IndividuallyCappedCrowdsale.sol#535-538) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": 585,
                    "vulnerability_code": "  function getCap(address beneficiary) public view returns (uint256) {\n\n    return _caps[beneficiary];\n\n  }\n",
                    "message": "IndividuallyCappedCrowdsale.getCap (IndividuallyCappedCrowdsale.sol#582-585) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 596,
                    "vulnerability_code": "  function getContribution(address beneficiary)\n\n    public view returns (uint256)\n\n  {\n\n    return _contributions[beneficiary];\n\n  }\n",
                    "message": "IndividuallyCappedCrowdsale.getContribution (IndividuallyCappedCrowdsale.sol#591-596) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (IndividuallyCappedCrowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (IndividuallyCappedCrowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (IndividuallyCappedCrowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (IndividuallyCappedCrowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (IndividuallyCappedCrowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (IndividuallyCappedCrowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (IndividuallyCappedCrowdsale.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": 543,
                    "vulnerability_code": "  function _addCapper(address account) internal {\n\n    cappers.add(account);\n\n    emit CapperAdded(account);\n\n  }\n",
                    "message": "Function 'CapperRole._addCapper' (IndividuallyCappedCrowdsale.sol#539-543) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": 548,
                    "vulnerability_code": "  function _removeCapper(address account) internal {\n\n    cappers.remove(account);\n\n    emit CapperRemoved(account);\n\n  }\n",
                    "message": "Function 'CapperRole._removeCapper' (IndividuallyCappedCrowdsale.sol#544-548) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 602,
                    "vulnerability_to_line": 613,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n    require(\n\n      _contributions[beneficiary].add(weiAmount) <= _caps[beneficiary]);\n\n  }\n",
                    "message": "Function 'IndividuallyCappedCrowdsale._preValidatePurchase' (IndividuallyCappedCrowdsale.sol#602-613) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 619,
                    "vulnerability_to_line": 629,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    super._updatePurchasingState(beneficiary, weiAmount);\n\n    _contributions[beneficiary] = _contributions[beneficiary].add(\n\n      weiAmount);\n\n  }\n",
                    "message": "Function 'IndividuallyCappedCrowdsale._updatePurchasingState' (IndividuallyCappedCrowdsale.sol#619-629) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private cappers;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _contributions;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _caps;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/crowdsale/validation/TimedCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_23"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ TimedCrowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ TimedCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ TimedCrowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ TimedCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ TimedCrowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ TimedCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ TimedCrowdsale.sol#486) shadows:\n\t- TimedCrowdsale.openingTime (function @ TimedCrowdsale.sol#498-501)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ TimedCrowdsale.sol#486) shadows:\n\t- TimedCrowdsale.closingTime (function @ TimedCrowdsale.sol#505-508)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (TimedCrowdsale.sol#486-494) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (TimedCrowdsale.sol#488)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (TimedCrowdsale.sol#512-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (TimedCrowdsale.sol#514)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (TimedCrowdsale.sol#521-525) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (TimedCrowdsale.sol#523)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (TimedCrowdsale.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (TimedCrowdsale.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (TimedCrowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "  function weiRaised() public view returns (uint256) {\n\n    return _weiRaised;\n\n  }\n",
                    "message": "Crowdsale.weiRaised (TimedCrowdsale.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "  function openingTime() public view returns(uint256) {\n\n    return _openingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.openingTime (TimedCrowdsale.sol#498-501) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": 508,
                    "vulnerability_code": "  function closingTime() public view returns(uint256) {\n\n    return _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.closingTime (TimedCrowdsale.sol#505-508) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (TimedCrowdsale.sol#521-525) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (TimedCrowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (TimedCrowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (TimedCrowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (TimedCrowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (TimedCrowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (TimedCrowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (TimedCrowdsale.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (TimedCrowdsale.sol#531-541) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/crowdsale/validation/CappedCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 cap) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(cap > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _cap = cap;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_17"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ CappedCrowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ CappedCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ CappedCrowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ CappedCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ CappedCrowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ CappedCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 cap) internal {\n",
                    "message": "CappedCrowdsale.constructor.cap (local variable @ CappedCrowdsale.sol#476) shadows:\n\t- CappedCrowdsale.cap (function @ CappedCrowdsale.sol#484-487)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
                    "message": "Crowdsale.token (CappedCrowdsale.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function wallet() public view returns(address) {\n\n    return _wallet;\n\n  }\n",
                    "message": "Crowdsale.wallet (CappedCrowdsale.sol#310-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (CappedCrowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": 487,
                    "vulnerability_code": "  function cap() public view returns(uint256) {\n\n    return _cap;\n\n  }\n",
                    "message": "CappedCrowdsale.cap (CappedCrowdsale.sol#484-487) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 495,
                    "vulnerability_code": "  function capReached() public view returns (bool) {\n\n    return weiRaised() >= _cap;\n\n  }\n",
                    "message": "CappedCrowdsale.capReached (CappedCrowdsale.sol#492-495) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (CappedCrowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (CappedCrowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (CappedCrowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (CappedCrowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (CappedCrowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (CappedCrowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (CappedCrowdsale.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n    require(weiRaised().add(weiAmount) <= _cap);\n\n  }\n",
                    "message": "Function 'CappedCrowdsale._preValidatePurchase' (CappedCrowdsale.sol#501-511) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _cap;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/utils/ReentrancyGuard.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/utils/Arrays.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (low > 0 && array[low - 1] == element) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return low - 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      return low;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": "Different versions of Solidity is used in Arrays.sol:\n\t- Version used: ['^0.4.23', '^0.4.24']\n\t- Arrays.sol#3 declares pragma solidity^0.4.24\n\t- Arrays.sol#37 declares pragma solidity^0.4.23\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in Arrays.sol:\n\t- pragma solidity^0.4.23 (Arrays.sol#37): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (low < high) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/utils/Address.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract (Address.sol#17-28) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(account) }\n\n    return size > 0;\n",
                    "message": "Address.isContract uses assembly (Address.sol#17-28)\n\t- Address.sol#26-27\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/introspection/ERC165Checker.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory encodedParams = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _InterfaceId_ERC165,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      interfaceId\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _callERC165SupportsInterface(\n\n    address account,\n\n    bytes4 interfaceId\n\n  )\n\n    private\n\n    view\n\n    returns (bool success, bool result)\n\n  {\n\n    bytes memory encodedParams = abi.encodeWithSelector(\n\n      _InterfaceId_ERC165,\n\n      interfaceId\n\n    );\n\n\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      let encodedParams_data := add(0x20, encodedParams)\n\n      let encodedParams_size := mload(encodedParams)\n\n\n\n      let output := mload(0x40)  // Find empty storage location using \"free memory pointer\"\n\n      mstore(output, 0x0)\n\n\n\n      success := staticcall(\n\n        30000,                 // 30k gas\n\n        account,              // To addr\n\n        encodedParams_data,\n\n        encodedParams_size,\n\n        output,\n\n        0x20                   // Outputs are 32 bytes long\n\n      )\n\n\n\n      result := mload(output)  // Load the result\n\n    }\n",
                    "message": "ERC165Checker._callERC165SupportsInterface (ERC165Checker.sol#115-147) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _callERC165SupportsInterface(\n\n    address account,\n\n    bytes4 interfaceId\n\n  )\n\n    private\n\n    view\n\n    returns (bool success, bool result)\n\n  {\n\n    bytes memory encodedParams = abi.encodeWithSelector(\n\n      _InterfaceId_ERC165,\n\n      interfaceId\n\n    );\n\n\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      let encodedParams_data := add(0x20, encodedParams)\n\n      let encodedParams_size := mload(encodedParams)\n\n\n\n      let output := mload(0x40)  // Find empty storage location using \"free memory pointer\"\n\n      mstore(output, 0x0)\n\n\n\n      success := staticcall(\n\n        30000,                 // 30k gas\n\n        account,              // To addr\n\n        encodedParams_data,\n\n        encodedParams_size,\n\n        output,\n\n        0x20                   // Outputs are 32 bytes long\n\n      )\n\n\n\n      result := mload(output)  // Load the result\n\n    }\n",
                    "message": "ERC165Checker._callERC165SupportsInterface uses assembly (ERC165Checker.sol#115-147)\n\t- ERC165Checker.sol#129-147\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function _supportsERC165(address account)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    // Any contract that implements ERC165 must explicitly indicate support of\n\n    // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n\n    return _supportsERC165Interface(account, _InterfaceId_ERC165) &&\n\n      !_supportsERC165Interface(account, _InterfaceId_Invalid);\n",
                    "message": "Function 'ERC165Checker._supportsERC165' (ERC165Checker.sol#25-34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "  function _supportsInterface(address account, bytes4 interfaceId)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    // query support of both ERC165 as per the spec and support of _interfaceId\n\n    return _supportsERC165(account) &&\n\n      _supportsERC165Interface(account, interfaceId);\n",
                    "message": "Function 'ERC165Checker._supportsInterface' (ERC165Checker.sol#44-52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "  function _supportsAllInterfaces(address account, bytes4[] interfaceIds)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    // query support of ERC165 itself\n\n    if (!_supportsERC165(account)) {\n\n      return false;\n\n    }\n\n\n\n    // query support of each interface in _interfaceIds\n\n    for (uint256 i = 0; i < interfaceIds.length; i++) {\n\n      if (!_supportsERC165Interface(account, interfaceIds[i])) {\n\n        return false;\n\n      }\n\n    }\n\n\n\n    // all interfaces supported\n\n    return true;\n",
                    "message": "Function 'ERC165Checker._supportsAllInterfaces' (ERC165Checker.sol#62-81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "  function _supportsERC165Interface(address account, bytes4 interfaceId)\n\n    private\n\n    view\n\n    returns (bool)\n\n  {\n\n    // success determines whether the staticcall succeeded and result determines\n\n    // whether the contract at account indicates support of _interfaceId\n\n    (bool success, bool result) = _callERC165SupportsInterface(\n\n      account, interfaceId);\n\n\n\n    return (success && result);\n",
                    "message": "Function 'ERC165Checker._supportsERC165Interface' (ERC165Checker.sol#94-105) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function _callERC165SupportsInterface(\n\n    address account,\n\n    bytes4 interfaceId\n\n  )\n\n    private\n\n    view\n\n    returns (bool success, bool result)\n\n  {\n\n    bytes memory encodedParams = abi.encodeWithSelector(\n\n      _InterfaceId_ERC165,\n\n      interfaceId\n\n    );\n\n\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      let encodedParams_data := add(0x20, encodedParams)\n\n      let encodedParams_size := mload(encodedParams)\n\n\n\n      let output := mload(0x40)  // Find empty storage location using \"free memory pointer\"\n\n      mstore(output, 0x0)\n\n\n\n      success := staticcall(\n\n        30000,                 // 30k gas\n\n        account,              // To addr\n\n        encodedParams_data,\n\n        encodedParams_size,\n\n        output,\n\n        0x20                   // Outputs are 32 bytes long\n\n      )\n\n\n\n      result := mload(output)  // Load the result\n\n    }\n",
                    "message": "Function 'ERC165Checker._callERC165SupportsInterface' (ERC165Checker.sol#115-147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_Invalid = 0xffffffff;\n",
                    "message": "Constant 'ERC165Checker._InterfaceId_Invalid' (ERC165Checker.sol#12) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165Checker._InterfaceId_ERC165' (ERC165Checker.sol#14) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_Invalid = 0xffffffff;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _callERC165SupportsInterface(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_Invalid = 0xffffffff;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _callERC165SupportsInterface(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (bool success, bool result)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    (bool success, bool result) = _callERC165SupportsInterface(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _supportsAllInterfaces(address account, bytes4[] interfaceIds)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/introspection/ERC165.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    internal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "  function _registerInterface(bytes4 interfaceId)\n\n    internal\n\n  {\n\n    require(interfaceId != 0xffffffff);\n\n    _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC165.sol#69-74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC165.sol#34) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/introspection/IERC165.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/math/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/math/Math.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/ownership/Ownable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit OwnershipTransferred(address(0), _owner);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "  function owner() public view returns(address) {\n\n    return _owner;\n",
                    "message": "Ownable.owner (Ownable.sol#30-32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipTransferred(_owner, address(0));\n\n    _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (Ownable.sol#55-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 66,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (Ownable.sol#64-66) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function _transferOwnership(address newOwner) internal {\n\n    require(newOwner != address(0));\n\n    emit OwnershipTransferred(_owner, newOwner);\n\n    _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (Ownable.sol#72-76) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _owner;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/ownership/Secondary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n",
                    "message": "Secondary.primary (Secondary.sol#35-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n",
                    "message": "Secondary.transferPrimary (Secondary.sol#43-47) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/examples/SampleCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(rate > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(wallet != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(token != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _rate = rate;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _wallet = wallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _token = token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 cap) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(cap > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _cap = cap;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(closingTime > openingTime);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _openingTime = openingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _closingTime = closingTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _finalized = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 619,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _primary = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address beneficiary) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(beneficiary != address(0));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 808,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _beneficiary = beneficiary;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 809,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _state = State.Active;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 907,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 goal) internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(goal > 0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _escrow = new RefundEscrow(wallet());\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 910,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _goal = goal;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public ERC20Detailed(\"Sample Crowdsale Token\", \"SCT\", 18) {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 cap,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC20Mintable token,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 goal\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_77"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": 862,
                    "vulnerability_code": "  function beneficiaryWithdraw() public {\n\n    require(_state == State.Closed);\n\n    _beneficiary.transfer(address(this).balance);\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiaryWithdraw (SampleCrowdsale.sol#857-862) sends eth to arbitrary user\n\tDangerous calls:\n\t- _beneficiary.transfer(address(this).balance) (SampleCrowdsale.sol#859-860)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.rate (local variable @ SampleCrowdsale.sol#276) shadows:\n\t- Crowdsale.rate (function @ SampleCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.wallet (local variable @ SampleCrowdsale.sol#276) shadows:\n\t- Crowdsale.wallet (function @ SampleCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
                    "message": "Crowdsale.constructor.token (local variable @ SampleCrowdsale.sol#276) shadows:\n\t- Crowdsale.token (function @ SampleCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 cap) internal {\n",
                    "message": "CappedCrowdsale.constructor.cap (local variable @ SampleCrowdsale.sol#476) shadows:\n\t- CappedCrowdsale.cap (function @ SampleCrowdsale.sol#484-487)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.openingTime (local variable @ SampleCrowdsale.sol#542) shadows:\n\t- TimedCrowdsale.openingTime (function @ SampleCrowdsale.sol#554-557)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
                    "message": "TimedCrowdsale.constructor.closingTime (local variable @ SampleCrowdsale.sol#542) shadows:\n\t- TimedCrowdsale.closingTime (function @ SampleCrowdsale.sol#561-564)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address beneficiary) public {\n",
                    "message": "RefundEscrow.constructor.beneficiary (local variable @ SampleCrowdsale.sol#806) shadows:\n\t- RefundEscrow.beneficiary (function @ SampleCrowdsale.sol#822-826)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 907,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(uint256 goal) internal {\n",
                    "message": "RefundableCrowdsale.constructor.goal (local variable @ SampleCrowdsale.sol#907) shadows:\n\t- RefundableCrowdsale.goal (function @ SampleCrowdsale.sol#916-920)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ SampleCrowdsale.sol#1339) shadows:\n\t- ERC20Detailed.name (function @ SampleCrowdsale.sol#1348-1352)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ SampleCrowdsale.sol#1339) shadows:\n\t- ERC20Detailed.symbol (function @ SampleCrowdsale.sol#1355-1359)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ SampleCrowdsale.sol#1339) shadows:\n\t- ERC20Detailed.decimals (function @ SampleCrowdsale.sol#1362-1366)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1405,
                    "vulnerability_to_line": 1406,
                    "vulnerability_code": "    uint256 openingTime,\n",
                    "message": "SampleCrowdsale.constructor.openingTime (local variable @ SampleCrowdsale.sol#1405-1406) shadows:\n\t- TimedCrowdsale.openingTime (function @ SampleCrowdsale.sol#554-557)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1406,
                    "vulnerability_to_line": 1407,
                    "vulnerability_code": "    uint256 closingTime,\n",
                    "message": "SampleCrowdsale.constructor.closingTime (local variable @ SampleCrowdsale.sol#1406-1407) shadows:\n\t- TimedCrowdsale.closingTime (function @ SampleCrowdsale.sol#561-564)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1407,
                    "vulnerability_to_line": 1408,
                    "vulnerability_code": "    uint256 rate,\n",
                    "message": "SampleCrowdsale.constructor.rate (local variable @ SampleCrowdsale.sol#1407-1408) shadows:\n\t- Crowdsale.rate (function @ SampleCrowdsale.sol#317-320)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1408,
                    "vulnerability_to_line": 1409,
                    "vulnerability_code": "    address wallet,\n",
                    "message": "SampleCrowdsale.constructor.wallet (local variable @ SampleCrowdsale.sol#1408-1409) shadows:\n\t- Crowdsale.wallet (function @ SampleCrowdsale.sol#310-313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1409,
                    "vulnerability_to_line": 1410,
                    "vulnerability_code": "    uint256 cap,\n",
                    "message": "SampleCrowdsale.constructor.cap (local variable @ SampleCrowdsale.sol#1409-1410) shadows:\n\t- CappedCrowdsale.cap (function @ SampleCrowdsale.sol#484-487)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1410,
                    "vulnerability_to_line": 1411,
                    "vulnerability_code": "    ERC20Mintable token,\n",
                    "message": "SampleCrowdsale.constructor.token (local variable @ SampleCrowdsale.sol#1410-1411) shadows:\n\t- Crowdsale.token (function @ SampleCrowdsale.sol#303-306)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 1411,
                    "vulnerability_to_line": 1412,
                    "vulnerability_code": "    uint256 goal\n",
                    "message": "SampleCrowdsale.constructor.goal (local variable @ SampleCrowdsale.sol#1411-1412) shadows:\n\t- RefundableCrowdsale.goal (function @ SampleCrowdsale.sol#916-920)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": 550,
                    "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.constructor (SampleCrowdsale.sol#542-550) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (SampleCrowdsale.sol#544)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": 572,
                    "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.isOpen (SampleCrowdsale.sol#568-572) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (SampleCrowdsale.sol#570)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.hasClosed (SampleCrowdsale.sol#577-581) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (SampleCrowdsale.sol#579)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
                    "message": "Crowdsale.rate (SampleCrowdsale.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": 487,
                    "vulnerability_code": "  function cap() public view returns(uint256) {\n\n    return _cap;\n\n  }\n",
                    "message": "CappedCrowdsale.cap (SampleCrowdsale.sol#484-487) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 495,
                    "vulnerability_code": "  function capReached() public view returns (bool) {\n\n    return weiRaised() >= _cap;\n\n  }\n",
                    "message": "CappedCrowdsale.capReached (SampleCrowdsale.sol#492-495) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": 557,
                    "vulnerability_code": "  function openingTime() public view returns(uint256) {\n\n    return _openingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.openingTime (SampleCrowdsale.sol#554-557) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": 564,
                    "vulnerability_code": "  function closingTime() public view returns(uint256) {\n\n    return _closingTime;\n\n  }\n",
                    "message": "TimedCrowdsale.closingTime (SampleCrowdsale.sol#561-564) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": 641,
                    "vulnerability_code": "  function finalize() public {\n\n    require(!_finalized);\n\n    require(hasClosed());\n\n\n\n    _finalized = true;\n\n\n\n    _finalization();\n\n    emit CrowdsaleFinalized();\n\n  }\n",
                    "message": "FinalizableCrowdsale.finalize (SampleCrowdsale.sol#632-641) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": 688,
                    "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n\n  }\n",
                    "message": "Secondary.primary (SampleCrowdsale.sol#685-688) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": 698,
                    "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n\n  }\n",
                    "message": "Secondary.transferPrimary (SampleCrowdsale.sol#693-698) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 725,
                    "vulnerability_to_line": 728,
                    "vulnerability_code": "  function depositsOf(address payee) public view returns (uint256) {\n\n    return _deposits[payee];\n\n  }\n",
                    "message": "Escrow.depositsOf (SampleCrowdsale.sol#725-728) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": 819,
                    "vulnerability_code": "  function state() public view returns (State) {\n\n    return _state;\n\n  }\n\n\n",
                    "message": "RefundEscrow.state (SampleCrowdsale.sol#815-819) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": 826,
                    "vulnerability_code": "  function beneficiary() public view returns (address) {\n\n    return _beneficiary;\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiary (SampleCrowdsale.sol#822-826) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": 845,
                    "vulnerability_code": "  function close() public onlyPrimary {\n\n    require(_state == State.Active);\n\n    _state = State.Closed;\n\n    emit RefundsClosed();\n\n  }\n\n\n",
                    "message": "RefundEscrow.close (SampleCrowdsale.sol#839-845) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": 854,
                    "vulnerability_code": "  function enableRefunds() public onlyPrimary {\n\n    require(_state == State.Active);\n\n    _state = State.Refunding;\n\n    emit RefundsEnabled();\n\n  }\n\n\n",
                    "message": "RefundEscrow.enableRefunds (SampleCrowdsale.sol#848-854) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": 862,
                    "vulnerability_code": "  function beneficiaryWithdraw() public {\n\n    require(_state == State.Closed);\n\n    _beneficiary.transfer(address(this).balance);\n\n  }\n\n\n",
                    "message": "RefundEscrow.beneficiaryWithdraw (SampleCrowdsale.sol#857-862) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": 920,
                    "vulnerability_code": "  function goal() public view returns(uint256) {\n\n    return _goal;\n\n  }\n\n\n",
                    "message": "RefundableCrowdsale.goal (SampleCrowdsale.sol#916-920) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 924,
                    "vulnerability_to_line": 931,
                    "vulnerability_code": "  function claimRefund(address beneficiary) public {\n\n    require(finalized());\n\n    require(!goalReached());\n\n\n\n    _escrow.withdraw(beneficiary);\n\n  }\n\n\n",
                    "message": "RefundableCrowdsale.claimRefund (SampleCrowdsale.sol#924-931) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (SampleCrowdsale.sol#78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 986,
                    "vulnerability_to_line": 990,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n\n  }\n\n\n",
                    "message": "ERC20.totalSupply (SampleCrowdsale.sol#986-990) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (SampleCrowdsale.sol#80) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 995,
                    "vulnerability_to_line": 999,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n\n  }\n\n\n",
                    "message": "ERC20.balanceOf (SampleCrowdsale.sol#995-999) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (SampleCrowdsale.sol#82-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1005,
                    "vulnerability_to_line": 1016,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n\n  }\n\n\n",
                    "message": "ERC20.allowance (SampleCrowdsale.sol#1005-1016) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (SampleCrowdsale.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1021,
                    "vulnerability_to_line": 1026,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n\n  }\n\n\n",
                    "message": "ERC20.transfer (SampleCrowdsale.sol#1021-1026) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1035,
                    "vulnerability_to_line": 1043,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n\n  }\n\n\n",
                    "message": "ERC20.approve (SampleCrowdsale.sol#1035-1043) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (SampleCrowdsale.sol#87-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (SampleCrowdsale.sol#90-91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1049,
                    "vulnerability_to_line": 1064,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n\n  }\n\n\n",
                    "message": "ERC20.transferFrom (SampleCrowdsale.sol#1049-1064) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": 1088,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n\n  }\n\n\n",
                    "message": "ERC20.increaseAllowance (SampleCrowdsale.sol#1073-1088) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1097,
                    "vulnerability_to_line": 1112,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n\n  }\n\n\n",
                    "message": "ERC20.decreaseAllowance (SampleCrowdsale.sol#1097-1112) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1246,
                    "vulnerability_to_line": 1250,
                    "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n\n  }\n\n\n",
                    "message": "MinterRole.addMinter (SampleCrowdsale.sol#1246-1250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": 1254,
                    "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n\n  }\n\n\n",
                    "message": "MinterRole.renounceMinter (SampleCrowdsale.sol#1250-1254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": 1293,
                    "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, value);\n\n    return true;\n\n  }\n\n}\n",
                    "message": "ERC20Mintable.mint (SampleCrowdsale.sol#1281-1293) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": 1352,
                    "vulnerability_code": "  function name() public view returns(string) {\n\n    return _name;\n\n  }\n\n\n",
                    "message": "ERC20Detailed.name (SampleCrowdsale.sol#1348-1352) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1355,
                    "vulnerability_to_line": 1359,
                    "vulnerability_code": "  function symbol() public view returns(string) {\n\n    return _symbol;\n\n  }\n\n\n",
                    "message": "ERC20Detailed.symbol (SampleCrowdsale.sol#1355-1359) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1362,
                    "vulnerability_to_line": 1366,
                    "vulnerability_code": "  function decimals() public view returns(uint8) {\n\n    return _decimals;\n\n  }\n\n}\n",
                    "message": "ERC20Detailed.decimals (SampleCrowdsale.sol#1362-1366) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
                    "message": "Function 'Crowdsale._preValidatePurchase' (SampleCrowdsale.sol#371-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._postValidatePurchase' (SampleCrowdsale.sol#387-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._deliverTokens' (SampleCrowdsale.sol#402-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
                    "message": "Function 'Crowdsale._processPurchase' (SampleCrowdsale.sol#416-424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
                    "message": "Function 'Crowdsale._updatePurchasingState' (SampleCrowdsale.sol#430-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
                    "message": "Function 'Crowdsale._getTokenAmount' (SampleCrowdsale.sol#444-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
                    "message": "Function 'Crowdsale._forwardFunds' (SampleCrowdsale.sol#453-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n    require(weiRaised().add(weiAmount) <= _cap);\n\n  }\n",
                    "message": "Function 'CappedCrowdsale._preValidatePurchase' (SampleCrowdsale.sol#501-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": 597,
                    "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
                    "message": "Function 'TimedCrowdsale._preValidatePurchase' (SampleCrowdsale.sol#587-597) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": 649,
                    "vulnerability_code": "  function _finalization() internal {\n\n  }\n",
                    "message": "Function 'FinalizableCrowdsale._finalization' (SampleCrowdsale.sol#647-649) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 956,
                    "vulnerability_to_line": 960,
                    "vulnerability_code": "  function _forwardFunds() internal {\n\n    _escrow.deposit.value(msg.value)(msg.sender);\n\n  }\n\n\n",
                    "message": "Function 'RefundableCrowdsale._forwardFunds' (SampleCrowdsale.sol#956-960) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 942,
                    "vulnerability_to_line": 953,
                    "vulnerability_code": "  function _finalization() internal {\n\n    if (goalReached()) {\n\n      _escrow.close();\n\n      _escrow.beneficiaryWithdraw();\n\n    } else {\n\n      _escrow.enableRefunds();\n\n    }\n\n\n\n    super._finalization();\n\n  }\n\n\n",
                    "message": "Function 'RefundableCrowdsale._finalization' (SampleCrowdsale.sol#942-953) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1118,
                    "vulnerability_to_line": 1127,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n\n  }\n\n\n",
                    "message": "Function 'ERC20._transfer' (SampleCrowdsale.sol#1118-1127) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1141,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n\n  }\n\n\n",
                    "message": "Function 'ERC20._mint' (SampleCrowdsale.sol#1134-1141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1147,
                    "vulnerability_to_line": 1156,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n\n  }\n\n\n",
                    "message": "Function 'ERC20._burn' (SampleCrowdsale.sol#1147-1156) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1163,
                    "vulnerability_to_line": 1173,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n\n  }\n\n}\n",
                    "message": "Function 'ERC20._burnFrom' (SampleCrowdsale.sol#1163-1173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1254,
                    "vulnerability_to_line": 1259,
                    "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n\n  }\n\n\n",
                    "message": "Function 'MinterRole._addMinter' (SampleCrowdsale.sol#1254-1259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1259,
                    "vulnerability_to_line": 1264,
                    "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n\n  }\n\n}\n",
                    "message": "Function 'MinterRole._removeMinter' (SampleCrowdsale.sol#1259-1264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1312,
                    "vulnerability_to_line": 1323,
                    "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    // Potentially dangerous assumption about the type of the token.\n\n    require(\n\n      ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));\n\n  }\n\n}\n",
                    "message": "Function 'MintedCrowdsale._deliverTokens' (SampleCrowdsale.sol#1312-1323) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 1035,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 602,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 872,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  IERC20 private _token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _wallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _rate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _weiRaised;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _cap;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _openingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _closingTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private _finalized;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _primary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _deposits;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  State private _state;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _beneficiary;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 898,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _goal;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 901,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  RefundEscrow private _escrow;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 977,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 979,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 981,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Roles.Role private minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(string name, string symbol, uint8 decimals) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name() public view returns(string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol() public view returns(string) {\n",
                    "message": null
                }
            ]
        }
    },
    "openzeppelin-contracts-2.0.1/contracts/examples/SimpleToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _mint(msg.sender, INITIAL_SUPPLY);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "ERC20.totalSupply (SimpleToken.sol#130-132) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (SimpleToken.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (SimpleToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "ERC20.balanceOf (SimpleToken.sol#139-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (SimpleToken.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (SimpleToken.sol#149-158) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "ERC20.transfer (SimpleToken.sol#165-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (SimpleToken.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "ERC20.approve (SimpleToken.sol#179-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (SimpleToken.sol#19-20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (SimpleToken.sol#22-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
                    "message": "ERC20.transferFrom (SimpleToken.sol#193-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.increaseAllowance (SimpleToken.sol#217-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "ERC20.decreaseAllowance (SimpleToken.sol#241-254) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (SimpleToken.sol#262-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (SimpleToken.sol#278-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (SimpleToken.sol#291-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (SimpleToken.sol#307-315) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    }
}