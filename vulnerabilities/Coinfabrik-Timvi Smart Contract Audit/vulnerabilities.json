{
    "Timvi-master/contracts/TimviSettings.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settingsManager = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feeManager = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        minDeposit = 50 finney;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sysFee = 3000; // 3%\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        userFee = 3000; // 3%\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        globalSafetyBag = 34783; // 34,783%\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        totalFee = 6000; //6%\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        gasPriceLimit = 0.02 szabo; // 20 GWei\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit MinDepositUpdated(minDeposit);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit SysFeeUpdated(sysFee);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value > 0 && _value < 10 ether, \"Value out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= totalFee / 2, \"Value out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_totalFee > 1000 && _totalFee <= 6000, \"Value out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_sysFee <= _totalFee / 2, \"Value out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_addr != address(0), \"Zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0.005 szabo, \"Gas price limit must be greater than 5 GWei\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_bag <= 100000, \"Value out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_addr != address(0), \"Zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value > 0 && _value < 10 ether, \"Value out of range\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_totalFee > 1000 && _totalFee <= 6000, \"Value out of range\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0.005 szabo, \"Gas price limit must be greater than 5 GWei\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 92,
                    "vulnerability_code": "    function setContractManager(address account) public onlySettingsManager {\n\n        _setContract(account);\n",
                    "message": "ManagerRole.setContractManager (TimviSettings.sol#90-92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "    function changeFeeManager(address account) public onlyFeeManager {\n\n        require(account != address(0));\n\n        feeManager = account;\n",
                    "message": "ManagerRole.changeFeeManager (TimviSettings.sol#94-97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "    function renounceSettingsManager() public onlySettingsManager {\n\n        settingsManager = address(0);\n",
                    "message": "ManagerRole.renounceSettingsManager (TimviSettings.sol#99-101) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "    function globalTargetCollateralization() public view returns(uint256) {\n\n        return ratio() + globalSafetyBag;\n",
                    "message": "TimviSettings.globalTargetCollateralization (TimviSettings.sol#211-213) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "    function _setContract(address account) internal {\n\n        tBoxManager = account;\n\n        emit ContractManagerAdded(account);\n",
                    "message": "Function 'ManagerRole._setContract' (TimviSettings.sol#104-107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinDepo(uint256 _value) external onlyFeeManager {\n",
                    "message": "Parameter '_value' of TimviSettings.setMinDepo (TimviSettings.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSysCom(uint256 _value) external onlyFeeManager {\n",
                    "message": "Parameter '_value' of TimviSettings.setSysCom (TimviSettings.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeTotal(uint256 _totalFee, uint256 _sysFee) external onlyFeeManager {\n",
                    "message": "Parameter '_totalFee' of TimviSettings.setFeeTotal (TimviSettings.sol#166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeTotal(uint256 _totalFee, uint256 _sysFee) external onlyFeeManager {\n",
                    "message": "Parameter '_sysFee' of TimviSettings.setFeeTotal (TimviSettings.sol#166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOracleAddress(address _addr) external onlyFeeManager {\n",
                    "message": "Parameter '_addr' of TimviSettings.setOracleAddress (TimviSettings.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGasPriceLimit(uint256 _limit) external onlyFeeManager {\n",
                    "message": "Parameter '_limit' of TimviSettings.setGasPriceLimit (TimviSettings.sol#182) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSafetyBag(uint256 _bag) external onlyFeeManager {\n",
                    "message": "Parameter '_bag' of TimviSettings.setSafetyBag (TimviSettings.sol#188) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTmvAddress(address _addr) external onlySettingsManager {\n",
                    "message": "Parameter '_addr' of TimviSettings.setTmvAddress (TimviSettings.sol#194) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settingsManager = address(0);\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/TBoxManager.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interface to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC721Enumerable);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 707,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 708,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(InterfaceId_ERC721Metadata);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) ERC721Metadata(name, symbol) public {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) TBoxToken(\"TBoxToken\", \"TBX\") public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 917,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settings = ISettings(_settings);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 918,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 892,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 898,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(settings.isFeeManager(msg.sender), \"You have no access\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 904,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_exists(_id), \"Box does not exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 910,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isApprovedOrOwner(msg.sender, _id), \"Box isn't your\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 929,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 936,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_fees > 0, \"There is no available fees\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.value >= settings.minDeposit(), \"Deposit is very small\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_tokensToWithdraw <= _tokenLimit, \"Token amount is more than available\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1042,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tmv <= _maxCapAmount && _tmv >= 10 ** 17, \"Tokens amount out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1086,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"Withdrawing zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1088,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount <= withdrawableEth(_id), \"You can't withdraw so much\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"Withdrawing zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount <= boxWithdrawableTmv(_id), \"You can't withdraw so much\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.value > 0, \"Don't add 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"Don't add 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount <= boxes[_id].tmvReleased, \"Too much tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(collateralPercent(_id) >= settings.minStability(), \"This Box isn't collapsable\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(boxes[_id].collateral.mul(rate()) < precision.mul(3).mul(10 ** 18), \"It's only possible to collapse dust\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(IToken(settings.tmvAddress()).balanceOf(_from) >= _amount, \"You don't have enough tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_colP >= settings.minStability() && _colP < settings.maxStability(), \"It's only possible to capitalize toxic Boxes\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1042,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tmv <= _maxCapAmount && _tmv >= 10 ** 17, \"Tokens amount out of range\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_colP >= settings.minStability() && _colP < settings.maxStability(), \"It's only possible to capitalize toxic Boxes\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _ownedTokens[from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 656,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _allTokens.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 892,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_tokensToWithdraw <= _tokenLimit, \"Token amount is more than available\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(boxes[_id].collateral.mul(rate()) < precision.mul(3).mul(10 ** 18), \"It's only possible to collapse dust\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_colP >= settings.minStability() && _colP < settings.maxStability(), \"It's only possible to capitalize toxic Boxes\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_95"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract (TBoxManager.sol#157-168) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721 (TBoxManager.sol#27-45) has incorrect ERC20 function interface(s):\n\t-approve (TBoxManager.sol#35)\n\t-transferFrom (TBoxManager.sol#41)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 497,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n    using SafeMath for uint256;\n\n    using Address for address;\n\n\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n    // Mapping from token ID to owner\n\n    mapping (uint256 => address) internal _tokenOwner;\n\n\n\n    // Mapping from token ID to approved address\n\n    mapping (uint256 => address) private _tokenApprovals;\n\n\n\n    // Mapping from owner to number of owned token\n\n    mapping (address => uint256) private _ownedTokensCount;\n\n\n\n    // Mapping from owner to operator approvals\n\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n    /*\n\n     * 0x80ac58cd ===\n\n     *     bytes4(keccak256('balanceOf(address)')) ^\n\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n     */\n\n\n\n    constructor () public {\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n\n        _registerInterface(_InterfaceId_ERC721);\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address owner) public view returns (uint256) {\n\n        require(owner != address(0));\n\n        return _ownedTokensCount[owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the owner of the specified token ID\n\n     * @param tokenId uint256 ID of the token to query the owner of\n\n     * @return owner address currently marked as the owner of the given token ID\n\n     */\n\n    function ownerOf(uint256 tokenId) public view returns (address) {\n\n        address owner = _tokenOwner[tokenId];\n\n        require(owner != address(0));\n\n        return owner;\n\n    }\n\n\n\n    /**\n\n     * @dev Approves another address to transfer the given token ID\n\n     * The zero address indicates there is no approved address.\n\n     * There can only be one approved address per token at a given time.\n\n     * Can only be called by the token owner or an approved operator.\n\n     * @param to address to be approved for the given token ID\n\n     * @param tokenId uint256 ID of the token to be approved\n\n     */\n\n    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner);\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the approved address for a token ID, or zero if no address set\n\n     * Reverts if the token ID does not exist.\n\n     * @param tokenId uint256 ID of the token to query the approval of\n\n     * @return address currently approved for the given token ID\n\n     */\n\n    function getApproved(uint256 tokenId) public view returns (address) {\n\n        require(_exists(tokenId));\n\n        return _tokenApprovals[tokenId];\n\n    }\n\n\n\n    /**\n\n     * @dev Sets or unsets the approval of a given operator\n\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n\n     * @param to operator address to set the approval\n\n     * @param approved representing the status of the approval to be set\n\n     */\n\n    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != msg.sender);\n\n        _operatorApprovals[msg.sender][to] = approved;\n\n        emit ApprovalForAll(msg.sender, to, approved);\n\n    }\n\n\n\n    /**\n\n     * @dev Tells whether an operator is approved by a given owner\n\n     * @param owner owner address which you want to query the approval of\n\n     * @param operator operator address which you want to query the approval of\n\n     * @return bool whether the given operator is approved by the given owner\n\n     */\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n\n        return _operatorApprovals[owner][operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given token ID to another address\n\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n    */\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        require(to != address(0));\n\n\n\n        _clearApproval(from, tokenId);\n\n        _removeTokenFrom(from, tokenId);\n\n        _addTokenTo(to, tokenId);\n\n\n\n        emit Transfer(from, to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Safely transfers the ownership of a given token ID to another address\n\n     * If the target address is a contract, it must implement `onERC721Received`,\n\n     * which is called upon a safe transfer, and return the magic value\n\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n     * the transfer is reverted.\n\n     *\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n    */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        // solium-disable-next-line arg-overflow\n\n        safeTransferFrom(from, to, tokenId, \"\");\n\n    }\n\n\n\n    /**\n\n     * @dev Safely transfers the ownership of a given token ID to another address\n\n     * If the target address is a contract, it must implement `onERC721Received`,\n\n     * which is called upon a safe transfer, and return the magic value\n\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n     * the transfer is reverted.\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @param _data bytes data to send along with a safe transfer check\n\n     */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n\n        transferFrom(from, to, tokenId);\n\n        // solium-disable-next-line arg-overflow\n\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n\n    }\n\n\n\n    /**\n\n     * @dev Returns whether the specified token exists\n\n     * @param tokenId uint256 ID of the token to query the existence of\n\n     * @return whether the token exists\n\n     */\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n\n    }\n\n\n\n    /**\n\n     * @dev Returns whether the given spender can transfer a given token ID\n\n     * @param spender address of the spender to query\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @return bool whether the msg.sender is approved for the given token ID,\n\n     *    is an operator of the owner, or is the owner of the token\n\n     */\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        address owner = ownerOf(tokenId);\n\n        // Disable solium check because of\n\n        // https://github.com/duaraghav8/Solium/issues/175\n\n        // solium-disable-next-line operator-whitespace\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to mint a new token\n\n     * Reverts if the given token ID already exists\n\n     * @param to The address that will own the minted token\n\n     * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n     */\n\n    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0));\n\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to burn a specific token\n\n     * Reverts if the token does not exist\n\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n     */\n\n    function _burn(address owner, uint256 tokenId) internal {\n\n        _clearApproval(owner, tokenId);\n\n        _removeTokenFrom(owner, tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to add a token ID to the list of a given address\n\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n     * @param to address representing the new owner of the given token ID\n\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n     */\n\n    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        require(_tokenOwner[tokenId] == address(0));\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to remove a token ID from the list of a given address\n\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n     * and doesn't clear approvals.\n\n     * @param from address representing the previous owner of the given token ID\n\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n     */\n\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n        _tokenOwner[tokenId] = address(0);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to invoke `onERC721Received` on a target address\n\n     * The call is not executed if the target address is not a contract\n\n     * @param from address representing the previous owner of the given token ID\n\n     * @param to target address that will receive the tokens\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @param _data bytes optional data to send along with the call\n\n     * @return whether the call correctly returned the expected magic value\n\n     */\n\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n\n        return (retval == _ERC721_RECEIVED);\n\n    }\n\n\n\n    /**\n\n     * @dev Private function to clear current approval of a given token ID\n\n     * Reverts if the given address is not indeed the owner of the token\n\n     * @param owner owner of the token\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     */\n\n    function _clearApproval(address owner, uint256 tokenId) private {\n\n        require(ownerOf(tokenId) == owner);\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n\n    }\n",
                    "message": "ERC721 (TBoxManager.sol#228-497) has incorrect ERC20 function interface(s):\n\t-approve (TBoxManager.sol#296-303)\n\t-transferFrom (TBoxManager.sol#346-355)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 809,
                    "vulnerability_to_line": 817,
                    "vulnerability_code": "interface IToken {\n\n    function burnLogic(address from, uint256 value) external;\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function mint(address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n",
                    "message": "IToken (TBoxManager.sol#809-817) has incorrect ERC20 function interface(s):\n\t-transferFrom (TBoxManager.sol#816)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1149,
                    "vulnerability_to_line": 1161,
                    "vulnerability_code": "    function addTmv(uint256 _id, uint256 _amount) external onlyExists(_id) {\n\n        require(_amount > 0, \"Don't add 0\");\n\n\n\n        // Check the number of tokens\n\n        require(_amount <= boxes[_id].tmvReleased, \"Too much tokens\");\n\n\n\n        // Removes added tokens from the collateralization\n\n        _burnTMV(msg.sender, _amount);\n\n        boxes[_id].tmvReleased = boxes[_id].tmvReleased.sub(_amount);\n\n\n\n        // Fire the event\n\n        emit TmvAdded(_id, _amount, msg.sender);\n",
                    "message": "Reentrancy in TBoxManager.addTmv (TBoxManager.sol#1149-1161):\n\tExternal calls:\n\t- _burnTMV(msg.sender,_amount) (TBoxManager.sol#1156)\n\tState variables written after the call(s):\n\t- boxes (TBoxManager.sol#1157)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": 1071,
                    "vulnerability_code": "    function capitalize(uint256 _id, uint256 _tmv) public validTx {\n\n\n\n        // The maximum number of tokens for which Box can be capitalized\n\n        uint256 _maxCapAmount = maxCapAmount(_id);\n\n\n\n        // Check the number of tokens\n\n        require(_tmv <= _maxCapAmount && _tmv >= 10 ** 17, \"Tokens amount out of range\");\n\n\n\n        // Decrease Box TMV withdrawn counter\n\n        boxes[_id].tmvReleased = boxes[_id].tmvReleased.sub(_tmv);\n\n\n\n        // Calculate the Ether equivalent of tokens according to the logic\n\n        // where 1 TMV is equal to 1 USD\n\n        uint256 _equivalentETH = _tmv.mul(precision).div(rate());\n\n\n\n        // Calculate system fee\n\n        uint256 _fee = _tmv.mul(settings.sysFee()).div(rate());\n\n\n\n        // Calculate user bonus\n\n        uint256 _userReward = _tmv.mul(settings.userFee()).div(rate());\n\n\n\n        // Decrease Box's collateral amount\n\n        boxes[_id].collateral = boxes[_id].collateral.sub(_fee.add(_userReward).add(_equivalentETH));\n\n\n\n        // Decrease global Ether counter\n\n        globalETH = globalETH.sub(_fee.add(_userReward).add(_equivalentETH));\n\n\n\n        // burn Box token\n\n        _burnTMV(msg.sender, _tmv);\n\n\n\n        // Send the Ether equivalent & user benefit to the person who made capitalization happen.\n\n        msg.sender.transfer(_equivalentETH.add(_userReward));\n\n\n\n        // Fire the event\n\n        emit Capitalized(_id, ownerOf(_id), msg.sender, _tmv, _equivalentETH.add(_userReward).add(_fee), _equivalentETH.add(_userReward));\n",
                    "message": "Reentrancy in TBoxManager.capitalize (TBoxManager.sol#1036-1071):\n\tExternal calls:\n\t- _maxCapAmount = maxCapAmount(_id) (TBoxManager.sol#1039)\n\tState variables written after the call(s):\n\t- boxes (TBoxManager.sol#1045)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": 1071,
                    "vulnerability_code": "    function capitalize(uint256 _id, uint256 _tmv) public validTx {\n\n\n\n        // The maximum number of tokens for which Box can be capitalized\n\n        uint256 _maxCapAmount = maxCapAmount(_id);\n\n\n\n        // Check the number of tokens\n\n        require(_tmv <= _maxCapAmount && _tmv >= 10 ** 17, \"Tokens amount out of range\");\n\n\n\n        // Decrease Box TMV withdrawn counter\n\n        boxes[_id].tmvReleased = boxes[_id].tmvReleased.sub(_tmv);\n\n\n\n        // Calculate the Ether equivalent of tokens according to the logic\n\n        // where 1 TMV is equal to 1 USD\n\n        uint256 _equivalentETH = _tmv.mul(precision).div(rate());\n\n\n\n        // Calculate system fee\n\n        uint256 _fee = _tmv.mul(settings.sysFee()).div(rate());\n\n\n\n        // Calculate user bonus\n\n        uint256 _userReward = _tmv.mul(settings.userFee()).div(rate());\n\n\n\n        // Decrease Box's collateral amount\n\n        boxes[_id].collateral = boxes[_id].collateral.sub(_fee.add(_userReward).add(_equivalentETH));\n\n\n\n        // Decrease global Ether counter\n\n        globalETH = globalETH.sub(_fee.add(_userReward).add(_equivalentETH));\n\n\n\n        // burn Box token\n\n        _burnTMV(msg.sender, _tmv);\n\n\n\n        // Send the Ether equivalent & user benefit to the person who made capitalization happen.\n\n        msg.sender.transfer(_equivalentETH.add(_userReward));\n\n\n\n        // Fire the event\n\n        emit Capitalized(_id, ownerOf(_id), msg.sender, _tmv, _equivalentETH.add(_userReward).add(_fee), _equivalentETH.add(_userReward));\n",
                    "message": "Reentrancy in TBoxManager.capitalize (TBoxManager.sol#1036-1071):\n\tExternal calls:\n\t- _maxCapAmount = maxCapAmount(_id) (TBoxManager.sol#1039)\n\t- _equivalentETH = _tmv.mul(precision).div(rate()) (TBoxManager.sol#1049)\n\t- _fee = _tmv.mul(settings.sysFee()).div(rate()) (TBoxManager.sol#1052)\n\t- _userReward = _tmv.mul(settings.userFee()).div(rate()) (TBoxManager.sol#1055)\n\tState variables written after the call(s):\n\t- boxes (TBoxManager.sol#1058)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": 1024,
                    "vulnerability_code": "    function close(uint256 _id) external onlyApprovedOrOwner(_id) {\n\n\n\n        // Address of the owner of the Box\n\n        address _owner = _tokenOwner[_id];\n\n\n\n        // Burn needed number of tokens\n\n        uint256 _tokensNeed = boxes[_id].tmvReleased;\n\n        _burnTMV(msg.sender, _tokensNeed);\n\n\n\n        // Grab a reference to the Box's collateral in storage\n\n        uint256 _collateral = boxes[_id].collateral;\n\n\n\n        // burn Box token\n\n        _burn(_owner, _id);\n\n\n\n        // Removes Box\n\n        delete boxes[_id];\n\n\n\n        // Send the Box's collateral to the person who made closing happen\n\n        msg.sender.transfer(_collateral);\n\n\n\n        // Decrease global Ether counter\n\n        globalETH = globalETH.sub(_collateral);\n\n\n\n        // Fire the event\n\n        emit Closed(_id, _owner, msg.sender);\n",
                    "message": "Reentrancy in TBoxManager.close (TBoxManager.sol#998-1024):\n\tExternal calls:\n\t- _burnTMV(msg.sender,_tokensNeed) (TBoxManager.sol#1005)\n\tState variables written after the call(s):\n\t- _tokenOwner (TBoxManager.sol#1011)\n\t- boxes (TBoxManager.sol#1014)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": 1203,
                    "vulnerability_code": "    function closeDust(uint256 _id) external onlyExists(_id) validTx {\n\n        // Check collateral percent of the Box\n\n        require(collateralPercent(_id) >= settings.minStability(), \"This Box isn't collapsable\");\n\n\n\n        // Check collateral amount of the Box\n\n        require(boxes[_id].collateral.mul(rate()) < precision.mul(3).mul(10 ** 18), \"It's only possible to collapse dust\");\n\n\n\n        // Burn needed TMV amount to close\n\n        uint256 _tmvReleased = boxes[_id].tmvReleased;\n\n        _burnTMV(msg.sender, _tmvReleased);\n\n\n\n        uint256 _collateral = boxes[_id].collateral;\n\n\n\n        // Calculate the Ether equivalent of tokens according to the logic\n\n        // where 1 TMV is equal to 1 USD\n\n        uint256 _eth = _tmvReleased.mul(precision).div(rate());\n\n\n\n        // Calculate user bonus\n\n        uint256 _userReward = _tmvReleased.mul(settings.userFee()).div(rate());\n\n\n\n        // The owner of the Box\n\n        address _owner = ownerOf(_id);\n\n\n\n        // Remove a Box\n\n        delete boxes[_id];\n\n\n\n        // Burn Box token\n\n        _burn(_owner, _id);\n\n\n\n        // Send the Ether equivalent & user benefit to the person who made closing happen\n\n        msg.sender.transfer(_eth.add(_userReward));\n\n\n\n        // Decrease global Ether counter\n\n        globalETH = globalETH.sub(_collateral);\n\n\n\n        // Fire the event\n\n        emit Closed(_id, _owner, msg.sender);\n",
                    "message": "Reentrancy in TBoxManager.closeDust (TBoxManager.sol#1166-1203):\n\tExternal calls:\n\t- require(bool,string)(collateralPercent(_id) >= settings.minStability(),This Box isn't collapsable) (TBoxManager.sol#1168)\n\t- require(bool,string)(boxes[_id].collateral.mul(rate()) < precision.mul(3).mul(10 ** 18),It's only possible to collapse dust) (TBoxManager.sol#1171)\n\t- _burnTMV(msg.sender,_tmvReleased) (TBoxManager.sol#1175)\n\t- _eth = _tmvReleased.mul(precision).div(rate()) (TBoxManager.sol#1181)\n\t- _userReward = _tmvReleased.mul(settings.userFee()).div(rate()) (TBoxManager.sol#1184)\n\tState variables written after the call(s):\n\t- _tokenOwner (TBoxManager.sol#1193)\n\t- boxes (TBoxManager.sol#1190)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": 993,
                    "vulnerability_code": "    function create(uint256 _tokensToWithdraw) public payable validTx returns (uint256) {\n\n        // Check that msg.value isn't smaller than minimum deposit\n\n        require(msg.value >= settings.minDeposit(), \"Deposit is very small\");\n\n\n\n        // Calculate collateralization when tokens are needed\n\n        if (_tokensToWithdraw > 0) {\n\n\n\n            // The number of tokens when collateralization is high\n\n            uint256 _tokenLimit = overCapWithdrawableTmv(msg.value);\n\n\n\n            // The number of tokens that can be safely withdrawn from the system\n\n            uint256 _maxGlobal = globalWithdrawableTmv(msg.value);\n\n\n\n            // Determine the higher number of tokens\n\n            if (_tokenLimit > _maxGlobal) {\n\n                _tokenLimit = _maxGlobal;\n\n            }\n\n\n\n            // The number of tokens that can be withdrawn anyway\n\n            uint256 _local = defaultWithdrawableTmv(msg.value);\n\n\n\n            // Determine the higher number of tokens\n\n            if (_tokenLimit < _local) {\n\n                _tokenLimit = _local;\n\n            }\n\n\n\n            // You can only withdraw available amount\n\n            require(_tokensToWithdraw <= _tokenLimit, \"Token amount is more than available\");\n\n\n\n            // Mint TMV tokens to the Box creator\n\n            IToken(settings.tmvAddress()).mint(msg.sender, _tokensToWithdraw);\n\n        }\n\n\n\n        // The id of the new Box\n\n        uint256 _id = boxes.push(Box(msg.value, _tokensToWithdraw)).sub(1);\n\n\n\n        // Increase global Ether counter\n\n        globalETH = globalETH.add(msg.value);\n\n\n\n        // Mint TBX token to the Box creator\n\n        _mint(msg.sender, _id);\n\n\n\n        // Fire the event\n\n        emit Created(_id, msg.sender, msg.value, _tokensToWithdraw);\n\n\n\n        // return the new Box's ID\n\n        return _id;\n",
                    "message": "Reentrancy in TBoxManager.create (TBoxManager.sol#946-993):\n\tExternal calls:\n\t- require(bool,string)(msg.value >= settings.minDeposit(),Deposit is very small) (TBoxManager.sol#948)\n\t- _tokenLimit = overCapWithdrawableTmv(msg.value) (TBoxManager.sol#954)\n\t- _maxGlobal = globalWithdrawableTmv(msg.value) (TBoxManager.sol#957)\n\t- _local = defaultWithdrawableTmv(msg.value) (TBoxManager.sol#965)\n\t- IToken(settings.tmvAddress()).mint(msg.sender,_tokensToWithdraw) (TBoxManager.sol#976)\n\tState variables written after the call(s):\n\t- globalETH (TBoxManager.sol#983)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1085,
                    "vulnerability_to_line": 1101,
                    "vulnerability_code": "    function withdrawEth(uint256 _id, uint256 _amount) public onlyApprovedOrOwner(_id) validTx {\n\n        require(_amount > 0, \"Withdrawing zero\");\n\n\n\n        require(_amount <= withdrawableEth(_id), \"You can't withdraw so much\");\n\n\n\n        // Decrease Box's collateral amount\n\n        boxes[_id].collateral = boxes[_id].collateral.sub(_amount);\n\n\n\n        // Decrease global Ether counter\n\n        globalETH = globalETH.sub(_amount);\n\n\n\n        // Send the Ether to the person who made capitalization happen\n\n        msg.sender.transfer(_amount);\n\n\n\n        // Fire the event\n\n        emit EthWithdrawn(_id, _amount, msg.sender);\n",
                    "message": "Reentrancy in TBoxManager.withdrawEth (TBoxManager.sol#1085-1101):\n\tExternal calls:\n\t- require(bool,string)(_amount <= withdrawableEth(_id),You can't withdraw so much) (TBoxManager.sol#1088)\n\tState variables written after the call(s):\n\t- boxes (TBoxManager.sol#1091)\n\t- globalETH (TBoxManager.sol#1094)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1115,
                    "vulnerability_to_line": 1129,
                    "vulnerability_code": "    function withdrawTmv(uint256 _id, uint256 _amount) public onlyApprovedOrOwner(_id) validTx {\n\n        require(_amount > 0, \"Withdrawing zero\");\n\n\n\n        // Check the number of tokens\n\n        require(_amount <= boxWithdrawableTmv(_id), \"You can't withdraw so much\");\n\n\n\n        // Increase Box TMV withdrawn counter\n\n        boxes[_id].tmvReleased = boxes[_id].tmvReleased.add(_amount);\n\n\n\n        // Mints tokens to the person who made withdrawing\n\n        IToken(settings.tmvAddress()).mint(msg.sender, _amount);\n\n\n\n        // Fire the event\n\n        emit TmvWithdrawn(_id, _amount, msg.sender);\n",
                    "message": "Reentrancy in TBoxManager.withdrawTmv (TBoxManager.sol#1115-1129):\n\tExternal calls:\n\t- require(bool,string)(_amount <= boxWithdrawableTmv(_id),You can't withdraw so much) (TBoxManager.sol#1119)\n\tState variables written after the call(s):\n\t- boxes (TBoxManager.sol#1122)\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _globalAvailable;\n",
                    "message": "_globalAvailable in TBoxManager._freeEth (TBoxManager.sol#1261) is a local variable never initialiazed\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": 993,
                    "vulnerability_code": "    function create(uint256 _tokensToWithdraw) public payable validTx returns (uint256) {\n\n        // Check that msg.value isn't smaller than minimum deposit\n\n        require(msg.value >= settings.minDeposit(), \"Deposit is very small\");\n\n\n\n        // Calculate collateralization when tokens are needed\n\n        if (_tokensToWithdraw > 0) {\n\n\n\n            // The number of tokens when collateralization is high\n\n            uint256 _tokenLimit = overCapWithdrawableTmv(msg.value);\n\n\n\n            // The number of tokens that can be safely withdrawn from the system\n\n            uint256 _maxGlobal = globalWithdrawableTmv(msg.value);\n\n\n\n            // Determine the higher number of tokens\n\n            if (_tokenLimit > _maxGlobal) {\n\n                _tokenLimit = _maxGlobal;\n\n            }\n\n\n\n            // The number of tokens that can be withdrawn anyway\n\n            uint256 _local = defaultWithdrawableTmv(msg.value);\n\n\n\n            // Determine the higher number of tokens\n\n            if (_tokenLimit < _local) {\n\n                _tokenLimit = _local;\n\n            }\n\n\n\n            // You can only withdraw available amount\n\n            require(_tokensToWithdraw <= _tokenLimit, \"Token amount is more than available\");\n\n\n\n            // Mint TMV tokens to the Box creator\n\n            IToken(settings.tmvAddress()).mint(msg.sender, _tokensToWithdraw);\n\n        }\n\n\n\n        // The id of the new Box\n\n        uint256 _id = boxes.push(Box(msg.value, _tokensToWithdraw)).sub(1);\n\n\n\n        // Increase global Ether counter\n\n        globalETH = globalETH.add(msg.value);\n\n\n\n        // Mint TBX token to the Box creator\n\n        _mint(msg.sender, _id);\n\n\n\n        // Fire the event\n\n        emit Created(_id, msg.sender, msg.value, _tokensToWithdraw);\n\n\n\n        // return the new Box's ID\n\n        return _id;\n",
                    "message": "TBoxManager.create (TBoxManager.sol#946-993) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).mint(msg.sender,_tokensToWithdraw) (TBoxManager.sol#976)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1115,
                    "vulnerability_to_line": 1129,
                    "vulnerability_code": "    function withdrawTmv(uint256 _id, uint256 _amount) public onlyApprovedOrOwner(_id) validTx {\n\n        require(_amount > 0, \"Withdrawing zero\");\n\n\n\n        // Check the number of tokens\n\n        require(_amount <= boxWithdrawableTmv(_id), \"You can't withdraw so much\");\n\n\n\n        // Increase Box TMV withdrawn counter\n\n        boxes[_id].tmvReleased = boxes[_id].tmvReleased.add(_amount);\n\n\n\n        // Mints tokens to the person who made withdrawing\n\n        IToken(settings.tmvAddress()).mint(msg.sender, _amount);\n\n\n\n        // Fire the event\n\n        emit TmvWithdrawn(_id, _amount, msg.sender);\n",
                    "message": "TBoxManager.withdrawTmv (TBoxManager.sol#1115-1129) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).mint(msg.sender,_amount) (TBoxManager.sol#1125)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "ERC721Metadata.constructor.name (local variable @ TBoxManager.sol#703) shadows:\n\t- ERC721Metadata.name (function @ TBoxManager.sol#715-717)\n\t- IERC721Metadata.name (function @ TBoxManager.sol#671)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "ERC721Metadata.constructor.symbol (local variable @ TBoxManager.sol#703) shadows:\n\t- ERC721Metadata.symbol (function @ TBoxManager.sol#723-725)\n\t- IERC721Metadata.symbol (function @ TBoxManager.sol#672)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) ERC721Metadata(name, symbol) public {}\n",
                    "message": "TBoxToken.constructor.name (local variable @ TBoxManager.sol#777) shadows:\n\t- ERC721Metadata.name (function @ TBoxManager.sol#715-717)\n\t- IERC721Metadata.name (function @ TBoxManager.sol#671)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) ERC721Metadata(name, symbol) public {}\n",
                    "message": "TBoxToken.constructor.symbol (local variable @ TBoxManager.sol#777) shadows:\n\t- ERC721Metadata.symbol (function @ TBoxManager.sol#723-725)\n\t- IERC721Metadata.symbol (function @ TBoxManager.sol#672)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": 1071,
                    "vulnerability_code": "    function capitalize(uint256 _id, uint256 _tmv) public validTx {\n\n\n\n        // The maximum number of tokens for which Box can be capitalized\n\n        uint256 _maxCapAmount = maxCapAmount(_id);\n\n\n\n        // Check the number of tokens\n\n        require(_tmv <= _maxCapAmount && _tmv >= 10 ** 17, \"Tokens amount out of range\");\n\n\n\n        // Decrease Box TMV withdrawn counter\n\n        boxes[_id].tmvReleased = boxes[_id].tmvReleased.sub(_tmv);\n\n\n\n        // Calculate the Ether equivalent of tokens according to the logic\n\n        // where 1 TMV is equal to 1 USD\n\n        uint256 _equivalentETH = _tmv.mul(precision).div(rate());\n\n\n\n        // Calculate system fee\n\n        uint256 _fee = _tmv.mul(settings.sysFee()).div(rate());\n\n\n\n        // Calculate user bonus\n\n        uint256 _userReward = _tmv.mul(settings.userFee()).div(rate());\n\n\n\n        // Decrease Box's collateral amount\n\n        boxes[_id].collateral = boxes[_id].collateral.sub(_fee.add(_userReward).add(_equivalentETH));\n\n\n\n        // Decrease global Ether counter\n\n        globalETH = globalETH.sub(_fee.add(_userReward).add(_equivalentETH));\n\n\n\n        // burn Box token\n\n        _burnTMV(msg.sender, _tmv);\n\n\n\n        // Send the Ether equivalent & user benefit to the person who made capitalization happen.\n\n        msg.sender.transfer(_equivalentETH.add(_userReward));\n\n\n\n        // Fire the event\n\n        emit Capitalized(_id, ownerOf(_id), msg.sender, _tmv, _equivalentETH.add(_userReward).add(_fee), _equivalentETH.add(_userReward));\n",
                    "message": "Reentrancy in TBoxManager.capitalize (TBoxManager.sol#1036-1071):\n\tExternal calls:\n\t- _maxCapAmount = maxCapAmount(_id) (TBoxManager.sol#1039)\n\t- _equivalentETH = _tmv.mul(precision).div(rate()) (TBoxManager.sol#1049)\n\t- _fee = _tmv.mul(settings.sysFee()).div(rate()) (TBoxManager.sol#1052)\n\t- _userReward = _tmv.mul(settings.userFee()).div(rate()) (TBoxManager.sol#1055)\n\tState variables written after the call(s):\n\t- globalETH (TBoxManager.sol#1061)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": 1024,
                    "vulnerability_code": "    function close(uint256 _id) external onlyApprovedOrOwner(_id) {\n\n\n\n        // Address of the owner of the Box\n\n        address _owner = _tokenOwner[_id];\n\n\n\n        // Burn needed number of tokens\n\n        uint256 _tokensNeed = boxes[_id].tmvReleased;\n\n        _burnTMV(msg.sender, _tokensNeed);\n\n\n\n        // Grab a reference to the Box's collateral in storage\n\n        uint256 _collateral = boxes[_id].collateral;\n\n\n\n        // burn Box token\n\n        _burn(_owner, _id);\n\n\n\n        // Removes Box\n\n        delete boxes[_id];\n\n\n\n        // Send the Box's collateral to the person who made closing happen\n\n        msg.sender.transfer(_collateral);\n\n\n\n        // Decrease global Ether counter\n\n        globalETH = globalETH.sub(_collateral);\n\n\n\n        // Fire the event\n\n        emit Closed(_id, _owner, msg.sender);\n",
                    "message": "Reentrancy in TBoxManager.close (TBoxManager.sol#998-1024):\n\tExternal calls:\n\t- _burnTMV(msg.sender,_tokensNeed) (TBoxManager.sol#1005)\n\tState variables written after the call(s):\n\t- _ownedTokensCount (TBoxManager.sol#1011)\n\t- _tokenApprovals (TBoxManager.sol#1011)\n\t- _tokenURIs (TBoxManager.sol#1011)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": 1024,
                    "vulnerability_code": "    function close(uint256 _id) external onlyApprovedOrOwner(_id) {\n\n\n\n        // Address of the owner of the Box\n\n        address _owner = _tokenOwner[_id];\n\n\n\n        // Burn needed number of tokens\n\n        uint256 _tokensNeed = boxes[_id].tmvReleased;\n\n        _burnTMV(msg.sender, _tokensNeed);\n\n\n\n        // Grab a reference to the Box's collateral in storage\n\n        uint256 _collateral = boxes[_id].collateral;\n\n\n\n        // burn Box token\n\n        _burn(_owner, _id);\n\n\n\n        // Removes Box\n\n        delete boxes[_id];\n\n\n\n        // Send the Box's collateral to the person who made closing happen\n\n        msg.sender.transfer(_collateral);\n\n\n\n        // Decrease global Ether counter\n\n        globalETH = globalETH.sub(_collateral);\n\n\n\n        // Fire the event\n\n        emit Closed(_id, _owner, msg.sender);\n",
                    "message": "Reentrancy in TBoxManager.close (TBoxManager.sol#998-1024):\n\tExternal calls:\n\t- _burnTMV(msg.sender,_tokensNeed) (TBoxManager.sol#1005)\n\tExternal calls sending eth:\n\t- msg.sender.transfer(_collateral) (TBoxManager.sol#1017)\n\tState variables written after the call(s):\n\t- globalETH (TBoxManager.sol#1020)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": 1203,
                    "vulnerability_code": "    function closeDust(uint256 _id) external onlyExists(_id) validTx {\n\n        // Check collateral percent of the Box\n\n        require(collateralPercent(_id) >= settings.minStability(), \"This Box isn't collapsable\");\n\n\n\n        // Check collateral amount of the Box\n\n        require(boxes[_id].collateral.mul(rate()) < precision.mul(3).mul(10 ** 18), \"It's only possible to collapse dust\");\n\n\n\n        // Burn needed TMV amount to close\n\n        uint256 _tmvReleased = boxes[_id].tmvReleased;\n\n        _burnTMV(msg.sender, _tmvReleased);\n\n\n\n        uint256 _collateral = boxes[_id].collateral;\n\n\n\n        // Calculate the Ether equivalent of tokens according to the logic\n\n        // where 1 TMV is equal to 1 USD\n\n        uint256 _eth = _tmvReleased.mul(precision).div(rate());\n\n\n\n        // Calculate user bonus\n\n        uint256 _userReward = _tmvReleased.mul(settings.userFee()).div(rate());\n\n\n\n        // The owner of the Box\n\n        address _owner = ownerOf(_id);\n\n\n\n        // Remove a Box\n\n        delete boxes[_id];\n\n\n\n        // Burn Box token\n\n        _burn(_owner, _id);\n\n\n\n        // Send the Ether equivalent & user benefit to the person who made closing happen\n\n        msg.sender.transfer(_eth.add(_userReward));\n\n\n\n        // Decrease global Ether counter\n\n        globalETH = globalETH.sub(_collateral);\n\n\n\n        // Fire the event\n\n        emit Closed(_id, _owner, msg.sender);\n",
                    "message": "Reentrancy in TBoxManager.closeDust (TBoxManager.sol#1166-1203):\n\tExternal calls:\n\t- require(bool,string)(collateralPercent(_id) >= settings.minStability(),This Box isn't collapsable) (TBoxManager.sol#1168)\n\t- require(bool,string)(boxes[_id].collateral.mul(rate()) < precision.mul(3).mul(10 ** 18),It's only possible to collapse dust) (TBoxManager.sol#1171)\n\t- _burnTMV(msg.sender,_tmvReleased) (TBoxManager.sol#1175)\n\t- _eth = _tmvReleased.mul(precision).div(rate()) (TBoxManager.sol#1181)\n\t- _userReward = _tmvReleased.mul(settings.userFee()).div(rate()) (TBoxManager.sol#1184)\n\tState variables written after the call(s):\n\t- _ownedTokensCount (TBoxManager.sol#1193)\n\t- _tokenApprovals (TBoxManager.sol#1193)\n\t- _tokenURIs (TBoxManager.sol#1193)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": 1203,
                    "vulnerability_code": "    function closeDust(uint256 _id) external onlyExists(_id) validTx {\n\n        // Check collateral percent of the Box\n\n        require(collateralPercent(_id) >= settings.minStability(), \"This Box isn't collapsable\");\n\n\n\n        // Check collateral amount of the Box\n\n        require(boxes[_id].collateral.mul(rate()) < precision.mul(3).mul(10 ** 18), \"It's only possible to collapse dust\");\n\n\n\n        // Burn needed TMV amount to close\n\n        uint256 _tmvReleased = boxes[_id].tmvReleased;\n\n        _burnTMV(msg.sender, _tmvReleased);\n\n\n\n        uint256 _collateral = boxes[_id].collateral;\n\n\n\n        // Calculate the Ether equivalent of tokens according to the logic\n\n        // where 1 TMV is equal to 1 USD\n\n        uint256 _eth = _tmvReleased.mul(precision).div(rate());\n\n\n\n        // Calculate user bonus\n\n        uint256 _userReward = _tmvReleased.mul(settings.userFee()).div(rate());\n\n\n\n        // The owner of the Box\n\n        address _owner = ownerOf(_id);\n\n\n\n        // Remove a Box\n\n        delete boxes[_id];\n\n\n\n        // Burn Box token\n\n        _burn(_owner, _id);\n\n\n\n        // Send the Ether equivalent & user benefit to the person who made closing happen\n\n        msg.sender.transfer(_eth.add(_userReward));\n\n\n\n        // Decrease global Ether counter\n\n        globalETH = globalETH.sub(_collateral);\n\n\n\n        // Fire the event\n\n        emit Closed(_id, _owner, msg.sender);\n",
                    "message": "Reentrancy in TBoxManager.closeDust (TBoxManager.sol#1166-1203):\n\tExternal calls:\n\t- require(bool,string)(collateralPercent(_id) >= settings.minStability(),This Box isn't collapsable) (TBoxManager.sol#1168)\n\t- require(bool,string)(boxes[_id].collateral.mul(rate()) < precision.mul(3).mul(10 ** 18),It's only possible to collapse dust) (TBoxManager.sol#1171)\n\t- _burnTMV(msg.sender,_tmvReleased) (TBoxManager.sol#1175)\n\t- _eth = _tmvReleased.mul(precision).div(rate()) (TBoxManager.sol#1181)\n\t- _userReward = _tmvReleased.mul(settings.userFee()).div(rate()) (TBoxManager.sol#1184)\n\tExternal calls sending eth:\n\t- msg.sender.transfer(_eth.add(_userReward)) (TBoxManager.sol#1196)\n\tState variables written after the call(s):\n\t- globalETH (TBoxManager.sol#1199)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": 993,
                    "vulnerability_code": "    function create(uint256 _tokensToWithdraw) public payable validTx returns (uint256) {\n\n        // Check that msg.value isn't smaller than minimum deposit\n\n        require(msg.value >= settings.minDeposit(), \"Deposit is very small\");\n\n\n\n        // Calculate collateralization when tokens are needed\n\n        if (_tokensToWithdraw > 0) {\n\n\n\n            // The number of tokens when collateralization is high\n\n            uint256 _tokenLimit = overCapWithdrawableTmv(msg.value);\n\n\n\n            // The number of tokens that can be safely withdrawn from the system\n\n            uint256 _maxGlobal = globalWithdrawableTmv(msg.value);\n\n\n\n            // Determine the higher number of tokens\n\n            if (_tokenLimit > _maxGlobal) {\n\n                _tokenLimit = _maxGlobal;\n\n            }\n\n\n\n            // The number of tokens that can be withdrawn anyway\n\n            uint256 _local = defaultWithdrawableTmv(msg.value);\n\n\n\n            // Determine the higher number of tokens\n\n            if (_tokenLimit < _local) {\n\n                _tokenLimit = _local;\n\n            }\n\n\n\n            // You can only withdraw available amount\n\n            require(_tokensToWithdraw <= _tokenLimit, \"Token amount is more than available\");\n\n\n\n            // Mint TMV tokens to the Box creator\n\n            IToken(settings.tmvAddress()).mint(msg.sender, _tokensToWithdraw);\n\n        }\n\n\n\n        // The id of the new Box\n\n        uint256 _id = boxes.push(Box(msg.value, _tokensToWithdraw)).sub(1);\n\n\n\n        // Increase global Ether counter\n\n        globalETH = globalETH.add(msg.value);\n\n\n\n        // Mint TBX token to the Box creator\n\n        _mint(msg.sender, _id);\n\n\n\n        // Fire the event\n\n        emit Created(_id, msg.sender, msg.value, _tokensToWithdraw);\n\n\n\n        // return the new Box's ID\n\n        return _id;\n",
                    "message": "Reentrancy in TBoxManager.create (TBoxManager.sol#946-993):\n\tExternal calls:\n\t- require(bool,string)(msg.value >= settings.minDeposit(),Deposit is very small) (TBoxManager.sol#948)\n\t- _tokenLimit = overCapWithdrawableTmv(msg.value) (TBoxManager.sol#954)\n\t- _maxGlobal = globalWithdrawableTmv(msg.value) (TBoxManager.sol#957)\n\t- _local = defaultWithdrawableTmv(msg.value) (TBoxManager.sol#965)\n\t- IToken(settings.tmvAddress()).mint(msg.sender,_tokensToWithdraw) (TBoxManager.sol#976)\n\tState variables written after the call(s):\n\t- _allTokens (TBoxManager.sol#986)\n\t- _allTokensIndex (TBoxManager.sol#986)\n\t- _ownedTokensCount (TBoxManager.sol#986)\n\t- _tokenOwner (TBoxManager.sol#986)\n\t- boxes (TBoxManager.sol#980)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract uses assembly (TBoxManager.sol#157-168)\n\t- TBoxManager.sol#166-167\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public precision = 100000;\n",
                    "message": "TBoxManager.precision should be constant (TBoxManager.sol#844)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner);\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (TBoxManager.sol#296-303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (TBoxManager.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 326,
                    "vulnerability_code": "    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != msg.sender);\n\n        _operatorApprovals[msg.sender][to] = approved;\n\n        emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (TBoxManager.sol#322-326) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (TBoxManager.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 372,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        // solium-disable-next-line arg-overflow\n\n        safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (TBoxManager.sol#369-372) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.safeTransferFrom (TBoxManager.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);\n",
                    "message": "IERC721Receiver.onERC721Received (TBoxManager.sol#71) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": 562,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n\n        require(index < balanceOf(owner));\n\n        return _ownedTokens[owner][index];\n",
                    "message": "ERC721Enumerable.tokenOfOwnerByIndex (TBoxManager.sol#559-562) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (TBoxManager.sol#509) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (TBoxManager.sol#511) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "    function tokenByIndex(uint256 index) public view returns (uint256) {\n\n        require(index < totalSupply());\n\n        return _allTokens[index];\n",
                    "message": "ERC721Enumerable.tokenByIndex (TBoxManager.sol#578-581) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId) internal {\n\n        require(interfaceId != 0xffffffff);\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (TBoxManager.sol#210-213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (TBoxManager.sol#181) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (TBoxManager.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (TBoxManager.sol#397-400) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": 415,
                    "vulnerability_code": "    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        address owner = ownerOf(tokenId);\n\n        // Disable solium check because of\n\n        // https://github.com/duaraghav8/Solium/issues/175\n\n        // solium-disable-next-line operator-whitespace\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (TBoxManager.sol#409-415) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 427,
                    "vulnerability_code": "    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0));\n\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (TBoxManager.sol#423-427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        _clearApproval(owner, tokenId);\n\n        _removeTokenFrom(owner, tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (TBoxManager.sol#434-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 451,
                    "vulnerability_code": "    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        require(_tokenOwner[tokenId] == address(0));\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (TBoxManager.sol#447-451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 465,
                    "vulnerability_code": "    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n        _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (TBoxManager.sol#461-465) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n\n        return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (TBoxManager.sol#476-483) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (TBoxManager.sol#476) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": 496,
                    "vulnerability_code": "    function _clearApproval(address owner, uint256 tokenId) private {\n\n        require(ownerOf(tokenId) == owner);\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n",
                    "message": "Function 'ERC721._clearApproval' (TBoxManager.sol#491-496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) internal _tokenOwner;\n",
                    "message": "Variable 'ERC721._tokenOwner' (TBoxManager.sol#237) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (TBoxManager.sol#248) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": 637,
                    "vulnerability_code": "    function _mint(address to, uint256 tokenId) internal {\n\n        super._mint(to, tokenId);\n\n\n\n        _allTokensIndex[tokenId] = _allTokens.length;\n\n        _allTokens.push(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._mint' (TBoxManager.sol#632-637) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        super._burn(owner, tokenId);\n\n\n\n        // Reorg all tokens array\n\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n\n        uint256 lastToken = _allTokens[lastTokenIndex];\n\n\n\n        _allTokens[tokenIndex] = lastToken;\n\n        _allTokens[lastTokenIndex] = 0;\n\n\n\n        _allTokens.length--;\n\n        _allTokensIndex[tokenId] = 0;\n\n        _allTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._burn' (TBoxManager.sol#645-659) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": 595,
                    "vulnerability_code": "    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        super._addTokenTo(to, tokenId);\n\n        uint256 length = _ownedTokens[to].length;\n\n        _ownedTokens[to].push(tokenId);\n\n        _ownedTokensIndex[tokenId] = length;\n",
                    "message": "Function 'ERC721Enumerable._addTokenTo' (TBoxManager.sol#590-595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": 624,
                    "vulnerability_code": "    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        super._removeTokenFrom(from, tokenId);\n\n\n\n        // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n\n        // then delete the last slot.\n\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n\n        uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n\n\n        _ownedTokens[from][tokenIndex] = lastToken;\n\n        // This also deletes the contents at the last position of the array\n\n        _ownedTokens[from].length--;\n\n\n\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\n        // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\n\n        _ownedTokensIndex[tokenId] = 0;\n\n        _ownedTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._removeTokenFrom' (TBoxManager.sol#605-624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": "Constant 'ERC721Enumerable._InterfaceId_ERC721Enumerable' (TBoxManager.sol#537) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": 761,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        super._burn(owner, tokenId);\n\n\n\n        // Clear metadata (if any)\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n\n            delete _tokenURIs[tokenId];\n\n        }\n",
                    "message": "Function 'ERC721Metadata._burn' (TBoxManager.sol#754-761) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": 746,
                    "vulnerability_code": "    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n\n        require(_exists(tokenId));\n\n        _tokenURIs[tokenId] = uri;\n",
                    "message": "Function 'ERC721Metadata._setTokenURI' (TBoxManager.sol#743-746) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": "Constant 'ERC721Metadata.InterfaceId_ERC721Metadata' (TBoxManager.sol#692) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) TBoxToken(\"TBoxToken\", \"TBX\") public {\n",
                    "message": "Parameter '_settings' of TBoxManager. (TBoxManager.sol#916) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 928,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawFee(address _beneficiary) external onlyAdmin {\n",
                    "message": "Parameter '_beneficiary' of TBoxManager.withdrawFee (TBoxManager.sol#928) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function create(uint256 _tokensToWithdraw) public payable validTx returns (uint256) {\n",
                    "message": "Parameter '_tokensToWithdraw' of TBoxManager.create (TBoxManager.sol#946) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function close(uint256 _id) external onlyApprovedOrOwner(_id) {\n",
                    "message": "Parameter '_id' of TBoxManager.close (TBoxManager.sol#998) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1029,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function capitalizeMax(uint256 _id) external {\n",
                    "message": "Parameter '_id' of TBoxManager.capitalizeMax (TBoxManager.sol#1029) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function capitalize(uint256 _id, uint256 _tmv) public validTx {\n",
                    "message": "Parameter '_id' of TBoxManager.capitalize (TBoxManager.sol#1036) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function capitalize(uint256 _id, uint256 _tmv) public validTx {\n",
                    "message": "Parameter '_tmv' of TBoxManager.capitalize (TBoxManager.sol#1036) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1077,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawEthMax(uint256 _id) external {\n",
                    "message": "Parameter '_id' of TBoxManager.withdrawEthMax (TBoxManager.sol#1077) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1085,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawEth(uint256 _id, uint256 _amount) public onlyApprovedOrOwner(_id) validTx {\n",
                    "message": "Parameter '_id' of TBoxManager.withdrawEth (TBoxManager.sol#1085) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1085,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawEth(uint256 _id, uint256 _amount) public onlyApprovedOrOwner(_id) validTx {\n",
                    "message": "Parameter '_amount' of TBoxManager.withdrawEth (TBoxManager.sol#1085) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawTmvMax(uint256 _id) external onlyApprovedOrOwner(_id) {\n",
                    "message": "Parameter '_id' of TBoxManager.withdrawTmvMax (TBoxManager.sol#1107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawTmv(uint256 _id, uint256 _amount) public onlyApprovedOrOwner(_id) validTx {\n",
                    "message": "Parameter '_id' of TBoxManager.withdrawTmv (TBoxManager.sol#1115) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawTmv(uint256 _id, uint256 _amount) public onlyApprovedOrOwner(_id) validTx {\n",
                    "message": "Parameter '_amount' of TBoxManager.withdrawTmv (TBoxManager.sol#1115) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addEth(uint256 _id) external payable onlyExists(_id) {\n",
                    "message": "Parameter '_id' of TBoxManager.addEth (TBoxManager.sol#1133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTmv(uint256 _id, uint256 _amount) external onlyExists(_id) {\n",
                    "message": "Parameter '_id' of TBoxManager.addTmv (TBoxManager.sol#1149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTmv(uint256 _id, uint256 _amount) external onlyExists(_id) {\n",
                    "message": "Parameter '_amount' of TBoxManager.addTmv (TBoxManager.sol#1149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function closeDust(uint256 _id) external onlyExists(_id) validTx {\n",
                    "message": "Parameter '_id' of TBoxManager.closeDust (TBoxManager.sol#1166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1206,
                    "vulnerability_to_line": 1211,
                    "vulnerability_code": "    function _burnTMV(address _from, uint256 _amount) internal {\n\n        if (_amount > 0) {\n\n            require(IToken(settings.tmvAddress()).balanceOf(_from) >= _amount, \"You don't have enough tokens\");\n\n            IToken(settings.tmvAddress()).burnLogic(_from, _amount);\n\n        }\n",
                    "message": "Function 'TBoxManager._burnTMV' (TBoxManager.sol#1206-1211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _burnTMV(address _from, uint256 _amount) internal {\n",
                    "message": "Parameter '_from' of TBoxManager._burnTMV (TBoxManager.sol#1206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _burnTMV(address _from, uint256 _amount) internal {\n",
                    "message": "Parameter '_amount' of TBoxManager._burnTMV (TBoxManager.sol#1206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function boxWithdrawableTmv(uint256 _id) public view onlyExists(_id) returns(uint256) {\n",
                    "message": "Parameter '_id' of TBoxManager.boxWithdrawableTmv (TBoxManager.sol#1219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawableEth(uint256 _id) public view onlyExists(_id) returns(uint256) {\n",
                    "message": "Parameter '_id' of TBoxManager.withdrawableEth (TBoxManager.sol#1234) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": 1292,
                    "vulnerability_code": "    function _freeEth(uint256 _id) internal view returns(uint256) {\n\n        // Grab a reference to the Box\n\n        Box memory box = boxes[_id];\n\n\n\n        // When there are no tokens withdrawn\n\n        if (box.tmvReleased == 0) {\n\n            return box.collateral;\n\n        }\n\n\n\n        // The amount of Ether that can be safely withdrawn from the system\n\n        uint256 _maxGlobal = globalWithdrawableEth();\n\n        uint256 _globalAvailable;\n\n\n\n        if (_maxGlobal > 0) {\n\n            // The amount of Ether backing the tokens when the system is overcapitalized\n\n            uint256 _need = overCapFrozenEth(box.tmvReleased);\n\n            if (box.collateral > _need) {\n\n                // Free Ether amount when the system is overcapitalized\n\n                uint256 _free = box.collateral.sub(_need);\n\n                if (_free > _maxGlobal) {\n\n                    // Store available amount when Box available Ether amount\n\n                    // is more than global available\n\n                    _globalAvailable = _maxGlobal;\n\n                }\n\n\n\n                // Return available amount of Ether to withdraw when the Box withdrawable\n\n                // amount of Ether is smaller than global withdrawable amount of Ether\n\n                else return _free;\n\n            }\n\n        }\n\n\n\n        // The amount of Ether backing the tokens by default\n\n        uint256 _frozen = defaultFrozenEth(box.tmvReleased);\n\n        if (box.collateral > _frozen) {\n\n            // Define the biggest number and return available Ether amount\n\n            uint256 _localAvailable = box.collateral.sub(_frozen);\n\n            return (_localAvailable > _globalAvailable) ? _localAvailable : _globalAvailable;\n\n        } else {\n\n            // Return available Ether amount\n\n            return _globalAvailable;\n\n        }\n\n\n",
                    "message": "Function 'TBoxManager._freeEth' (TBoxManager.sol#1250-1292) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _freeEth(uint256 _id) internal view returns(uint256) {\n",
                    "message": "Parameter '_id' of TBoxManager._freeEth (TBoxManager.sol#1250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function collateralPercent(uint256 _id) public view onlyExists(_id) returns(uint256) {\n",
                    "message": "Parameter '_id' of TBoxManager.collateralPercent (TBoxManager.sol#1295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApprovedOrOwner(address _spender, uint256 _tokenId) external view returns (bool) {\n",
                    "message": "Parameter '_spender' of TBoxManager.isApprovedOrOwner (TBoxManager.sol#1308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApprovedOrOwner(address _spender, uint256 _tokenId) external view returns (bool) {\n",
                    "message": "Parameter '_tokenId' of TBoxManager.isApprovedOrOwner (TBoxManager.sol#1308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function globalWithdrawableTmv(uint256 _value) public view returns (uint256) {\n",
                    "message": "Parameter '_value' of TBoxManager.globalWithdrawableTmv (TBoxManager.sol#1322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function defaultWithdrawableTmv(uint256 _collateral) public view returns (uint256) {\n",
                    "message": "Parameter '_collateral' of TBoxManager.defaultWithdrawableTmv (TBoxManager.sol#1343) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function overCapWithdrawableTmv(uint256 _collateral) public view returns (uint256) {\n",
                    "message": "Parameter '_collateral' of TBoxManager.overCapWithdrawableTmv (TBoxManager.sol#1351) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function defaultFrozenEth(uint256 _supply) public view returns (uint256) {\n",
                    "message": "Parameter '_supply' of TBoxManager.defaultFrozenEth (TBoxManager.sol#1358) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function overCapFrozenEth(uint256 _supply) public view returns (uint256) {\n",
                    "message": "Parameter '_supply' of TBoxManager.overCapFrozenEth (TBoxManager.sol#1365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function maxCapAmount(uint256 _id) public view onlyExists(_id) returns (uint256) {\n",
                    "message": "Parameter '_id' of TBoxManager.maxCapAmount (TBoxManager.sol#1371) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawableTmv(uint256 _collateral) public view returns(uint256) {\n",
                    "message": "Parameter '_collateral' of TBoxManager.withdrawableTmv (TBoxManager.sol#1384) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawPercent(uint256 _collateral) external view returns(uint256) {\n",
                    "message": "Parameter '_collateral' of TBoxManager.withdrawPercent (TBoxManager.sol#1399) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _ownedTokens[from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 656,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _allTokens.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256[]) private _ownedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _ownedTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _allTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 690,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => string) private _tokenURIs;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/TimviToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settings = Settings(_settings);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(settings.isContractManager(msg.sender), \"You have no access\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_29"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ TimviToken.sol#389) shadows:\n\t- ERC20Detailed.name (function @ TimviToken.sol#398-400)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ TimviToken.sol#389) shadows:\n\t- ERC20Detailed.symbol (function @ TimviToken.sol#405-407)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ TimviToken.sol#389) shadows:\n\t- ERC20Detailed.decimals (function @ TimviToken.sol#412-414)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
                    "message": "ERC20.totalSupply (TimviToken.sol#141-143) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (TimviToken.sol#78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n",
                    "message": "ERC20.balanceOf (TimviToken.sol#150-152) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (TimviToken.sol#80) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function allowance(\n\n        address owner,\n\n        address spender\n\n    )\n\n    public\n\n    view\n\n    returns (uint256)\n\n    {\n\n        return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (TimviToken.sol#160-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "    function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (TimviToken.sol#82-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n",
                    "message": "ERC20.transfer (TimviToken.sol#176-179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (TimviToken.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = value;\n\n        emit Approval(msg.sender, spender, value);\n\n        return true;\n",
                    "message": "ERC20.approve (TimviToken.sol#190-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "    function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (TimviToken.sol#87-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (TimviToken.sol#90-91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n        _transfer(from, to, value);\n\n        return true;\n",
                    "message": "ERC20.transferFrom (TimviToken.sol#204-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 239,
                    "vulnerability_code": "    function increaseAllowance(\n\n        address spender,\n\n        uint256 addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].add(addedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.increaseAllowance (TimviToken.sol#226-239) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 263,
                    "vulnerability_code": "    function decreaseAllowance(\n\n        address spender,\n\n        uint256 subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].sub(subtractedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.decreaseAllowance (TimviToken.sol#250-263) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "    function burn(uint256 value) public onlyManager {\n\n        _burn(msg.sender, value);\n",
                    "message": "ERC20Burnable.burn (TimviToken.sol#330-332) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function burnLogic(address from, uint256 value) public onlyManager {\n\n        _burn(from, value);\n",
                    "message": "ERC20Burnable.burnLogic (TimviToken.sol#339-341) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "    function burnFrom(address from, uint256 value) public onlyManager {\n\n        _burnFrom(from, value);\n",
                    "message": "ERC20Burnable.burnFrom (TimviToken.sol#348-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 375,
                    "vulnerability_code": "    function mint(\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    onlyManager\n\n    returns (bool)\n\n    {\n\n        _mint(to, value);\n\n        return true;\n",
                    "message": "ERC20Mintable.mint (TimviToken.sol#365-375) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function name() public view returns(string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (TimviToken.sol#398-400) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "    function symbol() public view returns(string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (TimviToken.sol#405-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 414,
                    "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Detailed.decimals (TimviToken.sol#412-414) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0));\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (TimviToken.sol#271-277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 292,
                    "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.add(value);\n\n        _balances[account] = _balances[account].add(value);\n\n        emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (TimviToken.sol#286-292) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (TimviToken.sol#300-306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 value) internal {\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n        // this function needs to emit an event with the updated approval.\n\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n            value);\n\n        _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (TimviToken.sol#315-321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
                    "message": "Parameter '_settings' of TimviToken. (TimviToken.sol#427) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/mocks/ERC20Mock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settings = Settings(_settings);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address initialAccount, uint256 initialBalance) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _mint(initialAccount, initialBalance);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(settings.isContractManager(msg.sender), \"You have no access\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address account, uint256 amount) public {\n",
                    "message": "Anyone can burn tokens of other accounts"
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _burn(account, amount);\n",
                    "message": "Anyone can burn tokens of other accounts"
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Anyone can burn tokens of other accounts"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_32"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ ERC20Mock.sol#389) shadows:\n\t- ERC20Detailed.name (function @ ERC20Mock.sol#398-400)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ ERC20Mock.sol#389) shadows:\n\t- ERC20Detailed.symbol (function @ ERC20Mock.sol#405-407)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ ERC20Mock.sol#389) shadows:\n\t- ERC20Detailed.decimals (function @ ERC20Mock.sol#412-414)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20Mock.sol#141-143) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20Mock.sol#78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20Mock.sol#80) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20Mock.sol#150-152) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "    function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20Mock.sol#82-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function allowance(\n\n        address owner,\n\n        address spender\n\n    )\n\n    public\n\n    view\n\n    returns (uint256)\n\n    {\n\n        return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20Mock.sol#160-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20Mock.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n",
                    "message": "ERC20.transfer (ERC20Mock.sol#176-179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "    function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20Mock.sol#87-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = value;\n\n        emit Approval(msg.sender, spender, value);\n\n        return true;\n",
                    "message": "ERC20.approve (ERC20Mock.sol#190-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20Mock.sol#90-91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n        _transfer(from, to, value);\n\n        return true;\n",
                    "message": "ERC20.transferFrom (ERC20Mock.sol#204-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 239,
                    "vulnerability_code": "    function increaseAllowance(\n\n        address spender,\n\n        uint256 addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].add(addedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20Mock.sol#226-239) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 263,
                    "vulnerability_code": "    function decreaseAllowance(\n\n        address spender,\n\n        uint256 subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].sub(subtractedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20Mock.sol#250-263) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "    function burn(uint256 value) public onlyManager {\n\n        _burn(msg.sender, value);\n",
                    "message": "ERC20Burnable.burn (ERC20Mock.sol#330-332) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function burnLogic(address from, uint256 value) public onlyManager {\n\n        _burn(from, value);\n",
                    "message": "ERC20Burnable.burnLogic (ERC20Mock.sol#339-341) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "    function burnFrom(address from, uint256 value) public onlyManager {\n\n        _burnFrom(from, value);\n",
                    "message": "ERC20Burnable.burnFrom (ERC20Mock.sol#348-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 375,
                    "vulnerability_code": "    function mint(\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    onlyManager\n\n    returns (bool)\n\n    {\n\n        _mint(to, value);\n\n        return true;\n",
                    "message": "ERC20Mintable.mint (ERC20Mock.sol#365-375) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function name() public view returns(string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (ERC20Mock.sol#398-400) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "    function symbol() public view returns(string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (ERC20Mock.sol#405-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 414,
                    "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Detailed.decimals (ERC20Mock.sol#412-414) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 446,
                    "vulnerability_code": "    function mint(address account, uint256 amount) public {\n\n        _mint(account, amount);\n",
                    "message": "ERC20Mock.mint (ERC20Mock.sol#444-446) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "    function burn(address account, uint256 amount) public {\n\n        _burn(account, amount);\n",
                    "message": "ERC20Mock.burn (ERC20Mock.sol#448-450) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function burnFrom(address account, uint256 amount) public {\n\n        _burnFrom(account, amount);\n",
                    "message": "ERC20Mock.burnFrom (ERC20Mock.sol#452-454) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0));\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20Mock.sol#271-277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 292,
                    "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.add(value);\n\n        _balances[account] = _balances[account].add(value);\n\n        emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20Mock.sol#286-292) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20Mock.sol#300-306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 value) internal {\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n        // this function needs to emit an event with the updated approval.\n\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n            value);\n\n        _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20Mock.sol#315-321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
                    "message": "Parameter '_settings' of TimviToken. (ERC20Mock.sol#427) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/mocks/ERC20MintableMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settings = Settings(_settings);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public TimviToken(_settings) {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(settings.isContractManager(msg.sender), \"You have no access\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_29"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ ERC20MintableMock.sol#389) shadows:\n\t- ERC20Detailed.name (function @ ERC20MintableMock.sol#398-400)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ ERC20MintableMock.sol#389) shadows:\n\t- ERC20Detailed.symbol (function @ ERC20MintableMock.sol#405-407)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ ERC20MintableMock.sol#389) shadows:\n\t- ERC20Detailed.decimals (function @ ERC20MintableMock.sol#412-414)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20MintableMock.sol#78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20MintableMock.sol#141-143) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20MintableMock.sol#80) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20MintableMock.sol#150-152) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "    function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20MintableMock.sol#82-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function allowance(\n\n        address owner,\n\n        address spender\n\n    )\n\n    public\n\n    view\n\n    returns (uint256)\n\n    {\n\n        return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20MintableMock.sol#160-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20MintableMock.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n",
                    "message": "ERC20.transfer (ERC20MintableMock.sol#176-179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "    function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20MintableMock.sol#87-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = value;\n\n        emit Approval(msg.sender, spender, value);\n\n        return true;\n",
                    "message": "ERC20.approve (ERC20MintableMock.sol#190-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20MintableMock.sol#90-91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n        _transfer(from, to, value);\n\n        return true;\n",
                    "message": "ERC20.transferFrom (ERC20MintableMock.sol#204-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 239,
                    "vulnerability_code": "    function increaseAllowance(\n\n        address spender,\n\n        uint256 addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].add(addedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20MintableMock.sol#226-239) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 263,
                    "vulnerability_code": "    function decreaseAllowance(\n\n        address spender,\n\n        uint256 subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].sub(subtractedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20MintableMock.sol#250-263) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "    function burn(uint256 value) public onlyManager {\n\n        _burn(msg.sender, value);\n",
                    "message": "ERC20Burnable.burn (ERC20MintableMock.sol#330-332) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function burnLogic(address from, uint256 value) public onlyManager {\n\n        _burn(from, value);\n",
                    "message": "ERC20Burnable.burnLogic (ERC20MintableMock.sol#339-341) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "    function burnFrom(address from, uint256 value) public onlyManager {\n\n        _burnFrom(from, value);\n",
                    "message": "ERC20Burnable.burnFrom (ERC20MintableMock.sol#348-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 375,
                    "vulnerability_code": "    function mint(\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    onlyManager\n\n    returns (bool)\n\n    {\n\n        _mint(to, value);\n\n        return true;\n",
                    "message": "ERC20Mintable.mint (ERC20MintableMock.sol#365-375) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function name() public view returns(string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (ERC20MintableMock.sol#398-400) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "    function symbol() public view returns(string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (ERC20MintableMock.sol#405-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 414,
                    "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Detailed.decimals (ERC20MintableMock.sol#412-414) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0));\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20MintableMock.sol#271-277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 292,
                    "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.add(value);\n\n        _balances[account] = _balances[account].add(value);\n\n        emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20MintableMock.sol#286-292) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20MintableMock.sol#300-306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 value) internal {\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n        // this function needs to emit an event with the updated approval.\n\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n            value);\n\n        _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20MintableMock.sol#315-321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
                    "message": "Parameter '_settings' of TimviToken. (ERC20MintableMock.sol#427) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/mocks/DetailedERC20Mock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settings = Settings(_settings);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimals\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC20Detailed(name, symbol, decimals)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(settings.isContractManager(msg.sender), \"You have no access\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_33"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Settings public settings;\n",
                    "message": "ManagerRole.settings (DetailedERC20Mock.sol#113) is never initialized. It is used in:\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ DetailedERC20Mock.sol#389) shadows:\n\t- ERC20Detailed.name (function @ DetailedERC20Mock.sol#398-400)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ DetailedERC20Mock.sol#389) shadows:\n\t- ERC20Detailed.symbol (function @ DetailedERC20Mock.sol#405-407)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ DetailedERC20Mock.sol#389) shadows:\n\t- ERC20Detailed.decimals (function @ DetailedERC20Mock.sol#412-414)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "ERC20DetailedMock.constructor.name (local variable @ DetailedERC20Mock.sol#439) shadows:\n\t- ERC20Detailed.name (function @ DetailedERC20Mock.sol#398-400)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol,\n",
                    "message": "ERC20DetailedMock.constructor.symbol (local variable @ DetailedERC20Mock.sol#440) shadows:\n\t- ERC20Detailed.symbol (function @ DetailedERC20Mock.sol#405-407)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimals\n",
                    "message": "ERC20DetailedMock.constructor.decimals (local variable @ DetailedERC20Mock.sol#441) shadows:\n\t- ERC20Detailed.decimals (function @ DetailedERC20Mock.sol#412-414)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (DetailedERC20Mock.sol#78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
                    "message": "ERC20.totalSupply (DetailedERC20Mock.sol#141-143) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n",
                    "message": "ERC20.balanceOf (DetailedERC20Mock.sol#150-152) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (DetailedERC20Mock.sol#80) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function allowance(\n\n        address owner,\n\n        address spender\n\n    )\n\n    public\n\n    view\n\n    returns (uint256)\n\n    {\n\n        return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (DetailedERC20Mock.sol#160-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "    function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (DetailedERC20Mock.sol#82-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (DetailedERC20Mock.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n",
                    "message": "ERC20.transfer (DetailedERC20Mock.sol#176-179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = value;\n\n        emit Approval(msg.sender, spender, value);\n\n        return true;\n",
                    "message": "ERC20.approve (DetailedERC20Mock.sol#190-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "    function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (DetailedERC20Mock.sol#87-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (DetailedERC20Mock.sol#90-91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n        _transfer(from, to, value);\n\n        return true;\n",
                    "message": "ERC20.transferFrom (DetailedERC20Mock.sol#204-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 239,
                    "vulnerability_code": "    function increaseAllowance(\n\n        address spender,\n\n        uint256 addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].add(addedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.increaseAllowance (DetailedERC20Mock.sol#226-239) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 263,
                    "vulnerability_code": "    function decreaseAllowance(\n\n        address spender,\n\n        uint256 subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].sub(subtractedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.decreaseAllowance (DetailedERC20Mock.sol#250-263) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "    function burn(uint256 value) public onlyManager {\n\n        _burn(msg.sender, value);\n",
                    "message": "ERC20Burnable.burn (DetailedERC20Mock.sol#330-332) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function burnLogic(address from, uint256 value) public onlyManager {\n\n        _burn(from, value);\n",
                    "message": "ERC20Burnable.burnLogic (DetailedERC20Mock.sol#339-341) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "    function burnFrom(address from, uint256 value) public onlyManager {\n\n        _burnFrom(from, value);\n",
                    "message": "ERC20Burnable.burnFrom (DetailedERC20Mock.sol#348-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 375,
                    "vulnerability_code": "    function mint(\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    onlyManager\n\n    returns (bool)\n\n    {\n\n        _mint(to, value);\n\n        return true;\n",
                    "message": "ERC20Mintable.mint (DetailedERC20Mock.sol#365-375) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function name() public view returns(string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (DetailedERC20Mock.sol#398-400) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "    function symbol() public view returns(string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (DetailedERC20Mock.sol#405-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 414,
                    "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Detailed.decimals (DetailedERC20Mock.sol#412-414) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0));\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (DetailedERC20Mock.sol#271-277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 292,
                    "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.add(value);\n\n        _balances[account] = _balances[account].add(value);\n\n        emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (DetailedERC20Mock.sol#286-292) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (DetailedERC20Mock.sol#300-306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 value) internal {\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n        // this function needs to emit an event with the updated approval.\n\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n            value);\n\n        _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (DetailedERC20Mock.sol#315-321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
                    "message": "Parameter '_settings' of TimviToken. (DetailedERC20Mock.sol#427) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/mocks/ERC20BurnableMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settings = Settings(_settings);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address initialAccount, uint256 initialBalance, address _settings) public TimviToken(_settings) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _mint(initialAccount, initialBalance);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(settings.isContractManager(msg.sender), \"You have no access\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_29"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ ERC20BurnableMock.sol#389) shadows:\n\t- ERC20Detailed.name (function @ ERC20BurnableMock.sol#398-400)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ ERC20BurnableMock.sol#389) shadows:\n\t- ERC20Detailed.symbol (function @ ERC20BurnableMock.sol#405-407)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ ERC20BurnableMock.sol#389) shadows:\n\t- ERC20Detailed.decimals (function @ ERC20BurnableMock.sol#412-414)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (ERC20BurnableMock.sol#78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
                    "message": "ERC20.totalSupply (ERC20BurnableMock.sol#141-143) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n",
                    "message": "ERC20.balanceOf (ERC20BurnableMock.sol#150-152) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (ERC20BurnableMock.sol#80) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function allowance(\n\n        address owner,\n\n        address spender\n\n    )\n\n    public\n\n    view\n\n    returns (uint256)\n\n    {\n\n        return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (ERC20BurnableMock.sol#160-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "    function allowance(address owner, address spender)\n",
                    "message": "IERC20.allowance (ERC20BurnableMock.sol#82-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n",
                    "message": "ERC20.transfer (ERC20BurnableMock.sol#176-179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (ERC20BurnableMock.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "    function approve(address spender, uint256 value)\n",
                    "message": "IERC20.approve (ERC20BurnableMock.sol#87-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = value;\n\n        emit Approval(msg.sender, spender, value);\n\n        return true;\n",
                    "message": "ERC20.approve (ERC20BurnableMock.sol#190-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n        _transfer(from, to, value);\n\n        return true;\n",
                    "message": "ERC20.transferFrom (ERC20BurnableMock.sol#204-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value)\n",
                    "message": "IERC20.transferFrom (ERC20BurnableMock.sol#90-91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 239,
                    "vulnerability_code": "    function increaseAllowance(\n\n        address spender,\n\n        uint256 addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].add(addedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.increaseAllowance (ERC20BurnableMock.sol#226-239) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 263,
                    "vulnerability_code": "    function decreaseAllowance(\n\n        address spender,\n\n        uint256 subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].sub(subtractedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.decreaseAllowance (ERC20BurnableMock.sol#250-263) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "    function burn(uint256 value) public onlyManager {\n\n        _burn(msg.sender, value);\n",
                    "message": "ERC20Burnable.burn (ERC20BurnableMock.sol#330-332) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function burnLogic(address from, uint256 value) public onlyManager {\n\n        _burn(from, value);\n",
                    "message": "ERC20Burnable.burnLogic (ERC20BurnableMock.sol#339-341) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "    function burnFrom(address from, uint256 value) public onlyManager {\n\n        _burnFrom(from, value);\n",
                    "message": "ERC20Burnable.burnFrom (ERC20BurnableMock.sol#348-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 375,
                    "vulnerability_code": "    function mint(\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    onlyManager\n\n    returns (bool)\n\n    {\n\n        _mint(to, value);\n\n        return true;\n",
                    "message": "ERC20Mintable.mint (ERC20BurnableMock.sol#365-375) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function name() public view returns(string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (ERC20BurnableMock.sol#398-400) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "    function symbol() public view returns(string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (ERC20BurnableMock.sol#405-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 414,
                    "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Detailed.decimals (ERC20BurnableMock.sol#412-414) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0));\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (ERC20BurnableMock.sol#271-277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 292,
                    "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.add(value);\n\n        _balances[account] = _balances[account].add(value);\n\n        emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (ERC20BurnableMock.sol#286-292) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (ERC20BurnableMock.sol#300-306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 value) internal {\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n        // this function needs to emit an event with the updated approval.\n\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n            value);\n\n        _burn(account, value);\n",
                    "message": "Function 'ERC20._burnFrom' (ERC20BurnableMock.sol#315-321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
                    "message": "Parameter '_settings' of TimviToken. (ERC20BurnableMock.sol#427) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/helpers/Roles.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/helpers/IERC721Enumerable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721 (IERC721Enumerable.sol#27-45) has incorrect ERC20 function interface(s):\n\t-approve (IERC721Enumerable.sol#35)\n\t-transferFrom (IERC721Enumerable.sol#41)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (IERC721Enumerable.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 tokenId) public view returns (address owner);\n",
                    "message": "IERC721.ownerOf (IERC721Enumerable.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (IERC721Enumerable.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 tokenId) public view returns (address operator);\n",
                    "message": "IERC721.getApproved (IERC721Enumerable.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (IERC721Enumerable.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApprovedForAll(address owner, address operator) public view returns (bool);\n",
                    "message": "IERC721.isApprovedForAll (IERC721Enumerable.sol#39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.transferFrom (IERC721Enumerable.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.safeTransferFrom (IERC721Enumerable.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721.safeTransferFrom (IERC721Enumerable.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "IERC721Enumerable.totalSupply (IERC721Enumerable.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (IERC721Enumerable.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (IERC721Enumerable.sol#59) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/helpers/IERC721Metadata.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721 (IERC721Metadata.sol#27-45) has incorrect ERC20 function interface(s):\n\t-approve (IERC721Metadata.sol#35)\n\t-transferFrom (IERC721Metadata.sol#41)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (IERC721Metadata.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 tokenId) public view returns (address owner);\n",
                    "message": "IERC721.ownerOf (IERC721Metadata.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (IERC721Metadata.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 tokenId) public view returns (address operator);\n",
                    "message": "IERC721.getApproved (IERC721Metadata.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (IERC721Metadata.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApprovedForAll(address owner, address operator) public view returns (bool);\n",
                    "message": "IERC721.isApprovedForAll (IERC721Metadata.sol#39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.transferFrom (IERC721Metadata.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.safeTransferFrom (IERC721Metadata.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721.safeTransferFrom (IERC721Metadata.sol#44) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/helpers/ITBoxManager.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "interface ITBoxManager {\n\n    function create(uint256 withdraw) external payable returns (uint256);\n\n    function precision() external view returns (uint256);\n\n    function rate() external view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function close(uint256 id) external;\n\n    function withdrawPercent(uint256 _collateral) external view returns(uint256);\n\n    function boxes(uint256 id) external view returns(uint256, uint256);\n\n    function withdrawEth(uint256 _id, uint256 _amount) external;\n\n    function withdrawTmv(uint256 _id, uint256 _amount) external;\n\n    function withdrawableEth(uint256 id) external view returns(uint256);\n\n    function withdrawableTmv(uint256 collateral) external view returns(uint256);\n\n    function maxCapAmount(uint256 _id) external view returns (uint256);\n\n    function collateralPercent(uint256 _id) external view returns (uint256);\n\n    function capitalize(uint256 _id, uint256 _tmv) external;\n\n    function boxWithdrawableTmv(uint256 _id) external view returns(uint256);\n\n    function addEth(uint256 _id) external payable;\n",
                    "message": "ITBoxManager (ITBoxManager.sol#8-25) has incorrect ERC20 function interface(s):\n\t-transferFrom (ITBoxManager.sol#12)\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/helpers/IToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "interface IToken {\n\n    function burnLogic(address from, uint256 value) external;\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function mint(address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n",
                    "message": "IToken (IToken.sol#8-16) has incorrect ERC20 function interface(s):\n\t-transferFrom (IToken.sol#15)\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/helpers/IERC721Receiver.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);\n",
                    "message": "IERC721Receiver.onERC721Received (IERC721Receiver.sol#25) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/helpers/ERC721Metadata.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(InterfaceId_ERC721Metadata);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_32"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract (ERC721Metadata.sol#157-168) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721 (ERC721Metadata.sol#27-45) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Metadata.sol#35)\n\t-transferFrom (ERC721Metadata.sol#41)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 497,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n    using SafeMath for uint256;\n\n    using Address for address;\n\n\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n    // Mapping from token ID to owner\n\n    mapping (uint256 => address) internal _tokenOwner;\n\n\n\n    // Mapping from token ID to approved address\n\n    mapping (uint256 => address) private _tokenApprovals;\n\n\n\n    // Mapping from owner to number of owned token\n\n    mapping (address => uint256) private _ownedTokensCount;\n\n\n\n    // Mapping from owner to operator approvals\n\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n    /*\n\n     * 0x80ac58cd ===\n\n     *     bytes4(keccak256('balanceOf(address)')) ^\n\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n     */\n\n\n\n    constructor () public {\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n\n        _registerInterface(_InterfaceId_ERC721);\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address owner) public view returns (uint256) {\n\n        require(owner != address(0));\n\n        return _ownedTokensCount[owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the owner of the specified token ID\n\n     * @param tokenId uint256 ID of the token to query the owner of\n\n     * @return owner address currently marked as the owner of the given token ID\n\n     */\n\n    function ownerOf(uint256 tokenId) public view returns (address) {\n\n        address owner = _tokenOwner[tokenId];\n\n        require(owner != address(0));\n\n        return owner;\n\n    }\n\n\n\n    /**\n\n     * @dev Approves another address to transfer the given token ID\n\n     * The zero address indicates there is no approved address.\n\n     * There can only be one approved address per token at a given time.\n\n     * Can only be called by the token owner or an approved operator.\n\n     * @param to address to be approved for the given token ID\n\n     * @param tokenId uint256 ID of the token to be approved\n\n     */\n\n    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner);\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the approved address for a token ID, or zero if no address set\n\n     * Reverts if the token ID does not exist.\n\n     * @param tokenId uint256 ID of the token to query the approval of\n\n     * @return address currently approved for the given token ID\n\n     */\n\n    function getApproved(uint256 tokenId) public view returns (address) {\n\n        require(_exists(tokenId));\n\n        return _tokenApprovals[tokenId];\n\n    }\n\n\n\n    /**\n\n     * @dev Sets or unsets the approval of a given operator\n\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n\n     * @param to operator address to set the approval\n\n     * @param approved representing the status of the approval to be set\n\n     */\n\n    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != msg.sender);\n\n        _operatorApprovals[msg.sender][to] = approved;\n\n        emit ApprovalForAll(msg.sender, to, approved);\n\n    }\n\n\n\n    /**\n\n     * @dev Tells whether an operator is approved by a given owner\n\n     * @param owner owner address which you want to query the approval of\n\n     * @param operator operator address which you want to query the approval of\n\n     * @return bool whether the given operator is approved by the given owner\n\n     */\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n\n        return _operatorApprovals[owner][operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given token ID to another address\n\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n    */\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        require(to != address(0));\n\n\n\n        _clearApproval(from, tokenId);\n\n        _removeTokenFrom(from, tokenId);\n\n        _addTokenTo(to, tokenId);\n\n\n\n        emit Transfer(from, to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Safely transfers the ownership of a given token ID to another address\n\n     * If the target address is a contract, it must implement `onERC721Received`,\n\n     * which is called upon a safe transfer, and return the magic value\n\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n     * the transfer is reverted.\n\n     *\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n    */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        // solium-disable-next-line arg-overflow\n\n        safeTransferFrom(from, to, tokenId, \"\");\n\n    }\n\n\n\n    /**\n\n     * @dev Safely transfers the ownership of a given token ID to another address\n\n     * If the target address is a contract, it must implement `onERC721Received`,\n\n     * which is called upon a safe transfer, and return the magic value\n\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n     * the transfer is reverted.\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @param _data bytes data to send along with a safe transfer check\n\n     */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n\n        transferFrom(from, to, tokenId);\n\n        // solium-disable-next-line arg-overflow\n\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n\n    }\n\n\n\n    /**\n\n     * @dev Returns whether the specified token exists\n\n     * @param tokenId uint256 ID of the token to query the existence of\n\n     * @return whether the token exists\n\n     */\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n\n    }\n\n\n\n    /**\n\n     * @dev Returns whether the given spender can transfer a given token ID\n\n     * @param spender address of the spender to query\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @return bool whether the msg.sender is approved for the given token ID,\n\n     *    is an operator of the owner, or is the owner of the token\n\n     */\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        address owner = ownerOf(tokenId);\n\n        // Disable solium check because of\n\n        // https://github.com/duaraghav8/Solium/issues/175\n\n        // solium-disable-next-line operator-whitespace\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to mint a new token\n\n     * Reverts if the given token ID already exists\n\n     * @param to The address that will own the minted token\n\n     * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n     */\n\n    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0));\n\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to burn a specific token\n\n     * Reverts if the token does not exist\n\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n     */\n\n    function _burn(address owner, uint256 tokenId) internal {\n\n        _clearApproval(owner, tokenId);\n\n        _removeTokenFrom(owner, tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to add a token ID to the list of a given address\n\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n     * @param to address representing the new owner of the given token ID\n\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n     */\n\n    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        require(_tokenOwner[tokenId] == address(0));\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to remove a token ID from the list of a given address\n\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n     * and doesn't clear approvals.\n\n     * @param from address representing the previous owner of the given token ID\n\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n     */\n\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n        _tokenOwner[tokenId] = address(0);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to invoke `onERC721Received` on a target address\n\n     * The call is not executed if the target address is not a contract\n\n     * @param from address representing the previous owner of the given token ID\n\n     * @param to target address that will receive the tokens\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @param _data bytes optional data to send along with the call\n\n     * @return whether the call correctly returned the expected magic value\n\n     */\n\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n\n        return (retval == _ERC721_RECEIVED);\n\n    }\n\n\n\n    /**\n\n     * @dev Private function to clear current approval of a given token ID\n\n     * Reverts if the given address is not indeed the owner of the token\n\n     * @param owner owner of the token\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     */\n\n    function _clearApproval(address owner, uint256 tokenId) private {\n\n        require(ownerOf(tokenId) == owner);\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n\n    }\n",
                    "message": "ERC721 (ERC721Metadata.sol#228-497) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Metadata.sol#296-303)\n\t-transferFrom (ERC721Metadata.sol#346-355)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "ERC721Metadata.constructor.name (local variable @ ERC721Metadata.sol#540) shadows:\n\t- ERC721Metadata.name (function @ ERC721Metadata.sol#552-554)\n\t- IERC721Metadata.name (function @ ERC721Metadata.sol#508)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "ERC721Metadata.constructor.symbol (local variable @ ERC721Metadata.sol#540) shadows:\n\t- ERC721Metadata.symbol (function @ ERC721Metadata.sol#560-562)\n\t- IERC721Metadata.symbol (function @ ERC721Metadata.sol#509)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721Metadata.sol#157-168)\n\t- ERC721Metadata.sol#166-167\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        require(owner != address(0));\n\n        return _ownedTokensCount[owner];\n",
                    "message": "ERC721.balanceOf (ERC721Metadata.sol#272-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (ERC721Metadata.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner);\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721Metadata.sol#296-303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721Metadata.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 326,
                    "vulnerability_code": "    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != msg.sender);\n\n        _operatorApprovals[msg.sender][to] = approved;\n\n        emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721Metadata.sol#322-326) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721Metadata.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.safeTransferFrom (ERC721Metadata.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 372,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        // solium-disable-next-line arg-overflow\n\n        safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721Metadata.sol#369-372) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721Metadata.sol#71) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId) internal {\n\n        require(interfaceId != 0xffffffff);\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721Metadata.sol#210-213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721Metadata.sol#181) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721Metadata.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721Metadata.sol#397-400) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": 415,
                    "vulnerability_code": "    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        address owner = ownerOf(tokenId);\n\n        // Disable solium check because of\n\n        // https://github.com/duaraghav8/Solium/issues/175\n\n        // solium-disable-next-line operator-whitespace\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721Metadata.sol#409-415) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 427,
                    "vulnerability_code": "    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0));\n\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721Metadata.sol#423-427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        _clearApproval(owner, tokenId);\n\n        _removeTokenFrom(owner, tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721Metadata.sol#434-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 451,
                    "vulnerability_code": "    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        require(_tokenOwner[tokenId] == address(0));\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721Metadata.sol#447-451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 465,
                    "vulnerability_code": "    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n        _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721Metadata.sol#461-465) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n\n        return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721Metadata.sol#476-483) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721Metadata.sol#476) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": 496,
                    "vulnerability_code": "    function _clearApproval(address owner, uint256 tokenId) private {\n\n        require(ownerOf(tokenId) == owner);\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721Metadata.sol#491-496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) internal _tokenOwner;\n",
                    "message": "Variable 'ERC721._tokenOwner' (ERC721Metadata.sol#237) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721Metadata.sol#248) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 598,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        super._burn(owner, tokenId);\n\n\n\n        // Clear metadata (if any)\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n\n            delete _tokenURIs[tokenId];\n\n        }\n",
                    "message": "Function 'ERC721Metadata._burn' (ERC721Metadata.sol#591-598) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": 583,
                    "vulnerability_code": "    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n\n        require(_exists(tokenId));\n\n        _tokenURIs[tokenId] = uri;\n",
                    "message": "Function 'ERC721Metadata._setTokenURI' (ERC721Metadata.sol#580-583) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": "Constant 'ERC721Metadata.InterfaceId_ERC721Metadata' (ERC721Metadata.sol#529) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => string) private _tokenURIs;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/helpers/OracleContractMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ethUsdPrice = 10000000; //100$\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "    function setPrice(uint256 _newPrice) public {\n\n        require(msg.sender == owner);\n\n        ethUsdPrice = _newPrice;\n\n        emit PriceUpdated(ethUsdPrice);\n",
                    "message": "OracleContractMock.setPrice (OracleContractMock.sol#19-23) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setPrice(uint256 _newPrice) public {\n",
                    "message": "Parameter '_newPrice' of OracleContractMock.setPrice (OracleContractMock.sol#19) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setPrice(uint256 _newPrice) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address owner;\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/helpers/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/helpers/TBoxToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interface to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC721Enumerable);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 707,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 708,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(InterfaceId_ERC721Metadata);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) ERC721Metadata(name, symbol) public {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _ownedTokens[from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 656,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _allTokens.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_41"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract (TBoxToken.sol#157-168) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721 (TBoxToken.sol#27-45) has incorrect ERC20 function interface(s):\n\t-approve (TBoxToken.sol#35)\n\t-transferFrom (TBoxToken.sol#41)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 497,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n    using SafeMath for uint256;\n\n    using Address for address;\n\n\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n    // Mapping from token ID to owner\n\n    mapping (uint256 => address) internal _tokenOwner;\n\n\n\n    // Mapping from token ID to approved address\n\n    mapping (uint256 => address) private _tokenApprovals;\n\n\n\n    // Mapping from owner to number of owned token\n\n    mapping (address => uint256) private _ownedTokensCount;\n\n\n\n    // Mapping from owner to operator approvals\n\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n    /*\n\n     * 0x80ac58cd ===\n\n     *     bytes4(keccak256('balanceOf(address)')) ^\n\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n     */\n\n\n\n    constructor () public {\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n\n        _registerInterface(_InterfaceId_ERC721);\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address owner) public view returns (uint256) {\n\n        require(owner != address(0));\n\n        return _ownedTokensCount[owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the owner of the specified token ID\n\n     * @param tokenId uint256 ID of the token to query the owner of\n\n     * @return owner address currently marked as the owner of the given token ID\n\n     */\n\n    function ownerOf(uint256 tokenId) public view returns (address) {\n\n        address owner = _tokenOwner[tokenId];\n\n        require(owner != address(0));\n\n        return owner;\n\n    }\n\n\n\n    /**\n\n     * @dev Approves another address to transfer the given token ID\n\n     * The zero address indicates there is no approved address.\n\n     * There can only be one approved address per token at a given time.\n\n     * Can only be called by the token owner or an approved operator.\n\n     * @param to address to be approved for the given token ID\n\n     * @param tokenId uint256 ID of the token to be approved\n\n     */\n\n    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner);\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the approved address for a token ID, or zero if no address set\n\n     * Reverts if the token ID does not exist.\n\n     * @param tokenId uint256 ID of the token to query the approval of\n\n     * @return address currently approved for the given token ID\n\n     */\n\n    function getApproved(uint256 tokenId) public view returns (address) {\n\n        require(_exists(tokenId));\n\n        return _tokenApprovals[tokenId];\n\n    }\n\n\n\n    /**\n\n     * @dev Sets or unsets the approval of a given operator\n\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n\n     * @param to operator address to set the approval\n\n     * @param approved representing the status of the approval to be set\n\n     */\n\n    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != msg.sender);\n\n        _operatorApprovals[msg.sender][to] = approved;\n\n        emit ApprovalForAll(msg.sender, to, approved);\n\n    }\n\n\n\n    /**\n\n     * @dev Tells whether an operator is approved by a given owner\n\n     * @param owner owner address which you want to query the approval of\n\n     * @param operator operator address which you want to query the approval of\n\n     * @return bool whether the given operator is approved by the given owner\n\n     */\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n\n        return _operatorApprovals[owner][operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given token ID to another address\n\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n    */\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        require(to != address(0));\n\n\n\n        _clearApproval(from, tokenId);\n\n        _removeTokenFrom(from, tokenId);\n\n        _addTokenTo(to, tokenId);\n\n\n\n        emit Transfer(from, to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Safely transfers the ownership of a given token ID to another address\n\n     * If the target address is a contract, it must implement `onERC721Received`,\n\n     * which is called upon a safe transfer, and return the magic value\n\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n     * the transfer is reverted.\n\n     *\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n    */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        // solium-disable-next-line arg-overflow\n\n        safeTransferFrom(from, to, tokenId, \"\");\n\n    }\n\n\n\n    /**\n\n     * @dev Safely transfers the ownership of a given token ID to another address\n\n     * If the target address is a contract, it must implement `onERC721Received`,\n\n     * which is called upon a safe transfer, and return the magic value\n\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n     * the transfer is reverted.\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @param _data bytes data to send along with a safe transfer check\n\n     */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n\n        transferFrom(from, to, tokenId);\n\n        // solium-disable-next-line arg-overflow\n\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n\n    }\n\n\n\n    /**\n\n     * @dev Returns whether the specified token exists\n\n     * @param tokenId uint256 ID of the token to query the existence of\n\n     * @return whether the token exists\n\n     */\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n\n    }\n\n\n\n    /**\n\n     * @dev Returns whether the given spender can transfer a given token ID\n\n     * @param spender address of the spender to query\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @return bool whether the msg.sender is approved for the given token ID,\n\n     *    is an operator of the owner, or is the owner of the token\n\n     */\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        address owner = ownerOf(tokenId);\n\n        // Disable solium check because of\n\n        // https://github.com/duaraghav8/Solium/issues/175\n\n        // solium-disable-next-line operator-whitespace\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to mint a new token\n\n     * Reverts if the given token ID already exists\n\n     * @param to The address that will own the minted token\n\n     * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n     */\n\n    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0));\n\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to burn a specific token\n\n     * Reverts if the token does not exist\n\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n     */\n\n    function _burn(address owner, uint256 tokenId) internal {\n\n        _clearApproval(owner, tokenId);\n\n        _removeTokenFrom(owner, tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to add a token ID to the list of a given address\n\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n     * @param to address representing the new owner of the given token ID\n\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n     */\n\n    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        require(_tokenOwner[tokenId] == address(0));\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to remove a token ID from the list of a given address\n\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n     * and doesn't clear approvals.\n\n     * @param from address representing the previous owner of the given token ID\n\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n     */\n\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n        _tokenOwner[tokenId] = address(0);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to invoke `onERC721Received` on a target address\n\n     * The call is not executed if the target address is not a contract\n\n     * @param from address representing the previous owner of the given token ID\n\n     * @param to target address that will receive the tokens\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @param _data bytes optional data to send along with the call\n\n     * @return whether the call correctly returned the expected magic value\n\n     */\n\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n\n        return (retval == _ERC721_RECEIVED);\n\n    }\n\n\n\n    /**\n\n     * @dev Private function to clear current approval of a given token ID\n\n     * Reverts if the given address is not indeed the owner of the token\n\n     * @param owner owner of the token\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     */\n\n    function _clearApproval(address owner, uint256 tokenId) private {\n\n        require(ownerOf(tokenId) == owner);\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n\n    }\n",
                    "message": "ERC721 (TBoxToken.sol#228-497) has incorrect ERC20 function interface(s):\n\t-approve (TBoxToken.sol#296-303)\n\t-transferFrom (TBoxToken.sol#346-355)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "ERC721Metadata.constructor.name (local variable @ TBoxToken.sol#703) shadows:\n\t- ERC721Metadata.name (function @ TBoxToken.sol#715-717)\n\t- IERC721Metadata.name (function @ TBoxToken.sol#671)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "ERC721Metadata.constructor.symbol (local variable @ TBoxToken.sol#703) shadows:\n\t- ERC721Metadata.symbol (function @ TBoxToken.sol#723-725)\n\t- IERC721Metadata.symbol (function @ TBoxToken.sol#672)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) ERC721Metadata(name, symbol) public {}\n",
                    "message": "TBoxToken.constructor.name (local variable @ TBoxToken.sol#777) shadows:\n\t- ERC721Metadata.name (function @ TBoxToken.sol#715-717)\n\t- IERC721Metadata.name (function @ TBoxToken.sol#671)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) ERC721Metadata(name, symbol) public {}\n",
                    "message": "TBoxToken.constructor.symbol (local variable @ TBoxToken.sol#777) shadows:\n\t- ERC721Metadata.symbol (function @ TBoxToken.sol#723-725)\n\t- IERC721Metadata.symbol (function @ TBoxToken.sol#672)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract uses assembly (TBoxToken.sol#157-168)\n\t- TBoxToken.sol#166-167\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner);\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (TBoxToken.sol#296-303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (TBoxToken.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 326,
                    "vulnerability_code": "    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != msg.sender);\n\n        _operatorApprovals[msg.sender][to] = approved;\n\n        emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (TBoxToken.sol#322-326) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (TBoxToken.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 372,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        // solium-disable-next-line arg-overflow\n\n        safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (TBoxToken.sol#369-372) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.safeTransferFrom (TBoxToken.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);\n",
                    "message": "IERC721Receiver.onERC721Received (TBoxToken.sol#71) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": 562,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n\n        require(index < balanceOf(owner));\n\n        return _ownedTokens[owner][index];\n",
                    "message": "ERC721Enumerable.tokenOfOwnerByIndex (TBoxToken.sol#559-562) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (TBoxToken.sol#509) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "    function tokenByIndex(uint256 index) public view returns (uint256) {\n\n        require(index < totalSupply());\n\n        return _allTokens[index];\n",
                    "message": "ERC721Enumerable.tokenByIndex (TBoxToken.sol#578-581) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (TBoxToken.sol#511) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId) internal {\n\n        require(interfaceId != 0xffffffff);\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (TBoxToken.sol#210-213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (TBoxToken.sol#181) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (TBoxToken.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (TBoxToken.sol#397-400) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": 415,
                    "vulnerability_code": "    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        address owner = ownerOf(tokenId);\n\n        // Disable solium check because of\n\n        // https://github.com/duaraghav8/Solium/issues/175\n\n        // solium-disable-next-line operator-whitespace\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (TBoxToken.sol#409-415) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 427,
                    "vulnerability_code": "    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0));\n\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (TBoxToken.sol#423-427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        _clearApproval(owner, tokenId);\n\n        _removeTokenFrom(owner, tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (TBoxToken.sol#434-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 451,
                    "vulnerability_code": "    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        require(_tokenOwner[tokenId] == address(0));\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (TBoxToken.sol#447-451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 465,
                    "vulnerability_code": "    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n        _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (TBoxToken.sol#461-465) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n\n        return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (TBoxToken.sol#476-483) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (TBoxToken.sol#476) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": 496,
                    "vulnerability_code": "    function _clearApproval(address owner, uint256 tokenId) private {\n\n        require(ownerOf(tokenId) == owner);\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n",
                    "message": "Function 'ERC721._clearApproval' (TBoxToken.sol#491-496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) internal _tokenOwner;\n",
                    "message": "Variable 'ERC721._tokenOwner' (TBoxToken.sol#237) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (TBoxToken.sol#248) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": 637,
                    "vulnerability_code": "    function _mint(address to, uint256 tokenId) internal {\n\n        super._mint(to, tokenId);\n\n\n\n        _allTokensIndex[tokenId] = _allTokens.length;\n\n        _allTokens.push(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._mint' (TBoxToken.sol#632-637) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        super._burn(owner, tokenId);\n\n\n\n        // Reorg all tokens array\n\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n\n        uint256 lastToken = _allTokens[lastTokenIndex];\n\n\n\n        _allTokens[tokenIndex] = lastToken;\n\n        _allTokens[lastTokenIndex] = 0;\n\n\n\n        _allTokens.length--;\n\n        _allTokensIndex[tokenId] = 0;\n\n        _allTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._burn' (TBoxToken.sol#645-659) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": 595,
                    "vulnerability_code": "    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        super._addTokenTo(to, tokenId);\n\n        uint256 length = _ownedTokens[to].length;\n\n        _ownedTokens[to].push(tokenId);\n\n        _ownedTokensIndex[tokenId] = length;\n",
                    "message": "Function 'ERC721Enumerable._addTokenTo' (TBoxToken.sol#590-595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": 624,
                    "vulnerability_code": "    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        super._removeTokenFrom(from, tokenId);\n\n\n\n        // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n\n        // then delete the last slot.\n\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n\n        uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n\n\n        _ownedTokens[from][tokenIndex] = lastToken;\n\n        // This also deletes the contents at the last position of the array\n\n        _ownedTokens[from].length--;\n\n\n\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\n        // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\n\n        _ownedTokensIndex[tokenId] = 0;\n\n        _ownedTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._removeTokenFrom' (TBoxToken.sol#605-624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": "Constant 'ERC721Enumerable._InterfaceId_ERC721Enumerable' (TBoxToken.sol#537) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": 761,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        super._burn(owner, tokenId);\n\n\n\n        // Clear metadata (if any)\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n\n            delete _tokenURIs[tokenId];\n\n        }\n",
                    "message": "Function 'ERC721Metadata._burn' (TBoxToken.sol#754-761) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": 746,
                    "vulnerability_code": "    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n\n        require(_exists(tokenId));\n\n        _tokenURIs[tokenId] = uri;\n",
                    "message": "Function 'ERC721Metadata._setTokenURI' (TBoxToken.sol#743-746) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": "Constant 'ERC721Metadata.InterfaceId_ERC721Metadata' (TBoxToken.sol#692) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _ownedTokens[from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 656,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _allTokens.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256[]) private _ownedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _ownedTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _allTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 690,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => string) private _tokenURIs;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/helpers/Address.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract (Address.sol#16-27) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract uses assembly (Address.sol#16-27)\n\t- Address.sol#25-26\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/helpers/ERC721.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_27"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract (ERC721.sol#157-168) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721 (ERC721.sol#27-45) has incorrect ERC20 function interface(s):\n\t-approve (ERC721.sol#35)\n\t-transferFrom (ERC721.sol#41)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 497,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n    using SafeMath for uint256;\n\n    using Address for address;\n\n\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n    // Mapping from token ID to owner\n\n    mapping (uint256 => address) internal _tokenOwner;\n\n\n\n    // Mapping from token ID to approved address\n\n    mapping (uint256 => address) private _tokenApprovals;\n\n\n\n    // Mapping from owner to number of owned token\n\n    mapping (address => uint256) private _ownedTokensCount;\n\n\n\n    // Mapping from owner to operator approvals\n\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n    /*\n\n     * 0x80ac58cd ===\n\n     *     bytes4(keccak256('balanceOf(address)')) ^\n\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n     */\n\n\n\n    constructor () public {\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n\n        _registerInterface(_InterfaceId_ERC721);\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address owner) public view returns (uint256) {\n\n        require(owner != address(0));\n\n        return _ownedTokensCount[owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the owner of the specified token ID\n\n     * @param tokenId uint256 ID of the token to query the owner of\n\n     * @return owner address currently marked as the owner of the given token ID\n\n     */\n\n    function ownerOf(uint256 tokenId) public view returns (address) {\n\n        address owner = _tokenOwner[tokenId];\n\n        require(owner != address(0));\n\n        return owner;\n\n    }\n\n\n\n    /**\n\n     * @dev Approves another address to transfer the given token ID\n\n     * The zero address indicates there is no approved address.\n\n     * There can only be one approved address per token at a given time.\n\n     * Can only be called by the token owner or an approved operator.\n\n     * @param to address to be approved for the given token ID\n\n     * @param tokenId uint256 ID of the token to be approved\n\n     */\n\n    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner);\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the approved address for a token ID, or zero if no address set\n\n     * Reverts if the token ID does not exist.\n\n     * @param tokenId uint256 ID of the token to query the approval of\n\n     * @return address currently approved for the given token ID\n\n     */\n\n    function getApproved(uint256 tokenId) public view returns (address) {\n\n        require(_exists(tokenId));\n\n        return _tokenApprovals[tokenId];\n\n    }\n\n\n\n    /**\n\n     * @dev Sets or unsets the approval of a given operator\n\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n\n     * @param to operator address to set the approval\n\n     * @param approved representing the status of the approval to be set\n\n     */\n\n    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != msg.sender);\n\n        _operatorApprovals[msg.sender][to] = approved;\n\n        emit ApprovalForAll(msg.sender, to, approved);\n\n    }\n\n\n\n    /**\n\n     * @dev Tells whether an operator is approved by a given owner\n\n     * @param owner owner address which you want to query the approval of\n\n     * @param operator operator address which you want to query the approval of\n\n     * @return bool whether the given operator is approved by the given owner\n\n     */\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n\n        return _operatorApprovals[owner][operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given token ID to another address\n\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n    */\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        require(to != address(0));\n\n\n\n        _clearApproval(from, tokenId);\n\n        _removeTokenFrom(from, tokenId);\n\n        _addTokenTo(to, tokenId);\n\n\n\n        emit Transfer(from, to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Safely transfers the ownership of a given token ID to another address\n\n     * If the target address is a contract, it must implement `onERC721Received`,\n\n     * which is called upon a safe transfer, and return the magic value\n\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n     * the transfer is reverted.\n\n     *\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n    */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        // solium-disable-next-line arg-overflow\n\n        safeTransferFrom(from, to, tokenId, \"\");\n\n    }\n\n\n\n    /**\n\n     * @dev Safely transfers the ownership of a given token ID to another address\n\n     * If the target address is a contract, it must implement `onERC721Received`,\n\n     * which is called upon a safe transfer, and return the magic value\n\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n     * the transfer is reverted.\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @param _data bytes data to send along with a safe transfer check\n\n     */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n\n        transferFrom(from, to, tokenId);\n\n        // solium-disable-next-line arg-overflow\n\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n\n    }\n\n\n\n    /**\n\n     * @dev Returns whether the specified token exists\n\n     * @param tokenId uint256 ID of the token to query the existence of\n\n     * @return whether the token exists\n\n     */\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n\n    }\n\n\n\n    /**\n\n     * @dev Returns whether the given spender can transfer a given token ID\n\n     * @param spender address of the spender to query\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @return bool whether the msg.sender is approved for the given token ID,\n\n     *    is an operator of the owner, or is the owner of the token\n\n     */\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        address owner = ownerOf(tokenId);\n\n        // Disable solium check because of\n\n        // https://github.com/duaraghav8/Solium/issues/175\n\n        // solium-disable-next-line operator-whitespace\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to mint a new token\n\n     * Reverts if the given token ID already exists\n\n     * @param to The address that will own the minted token\n\n     * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n     */\n\n    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0));\n\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to burn a specific token\n\n     * Reverts if the token does not exist\n\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n     */\n\n    function _burn(address owner, uint256 tokenId) internal {\n\n        _clearApproval(owner, tokenId);\n\n        _removeTokenFrom(owner, tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to add a token ID to the list of a given address\n\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n     * @param to address representing the new owner of the given token ID\n\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n     */\n\n    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        require(_tokenOwner[tokenId] == address(0));\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to remove a token ID from the list of a given address\n\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n     * and doesn't clear approvals.\n\n     * @param from address representing the previous owner of the given token ID\n\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n     */\n\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n        _tokenOwner[tokenId] = address(0);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to invoke `onERC721Received` on a target address\n\n     * The call is not executed if the target address is not a contract\n\n     * @param from address representing the previous owner of the given token ID\n\n     * @param to target address that will receive the tokens\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @param _data bytes optional data to send along with the call\n\n     * @return whether the call correctly returned the expected magic value\n\n     */\n\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n\n        return (retval == _ERC721_RECEIVED);\n\n    }\n\n\n\n    /**\n\n     * @dev Private function to clear current approval of a given token ID\n\n     * Reverts if the given address is not indeed the owner of the token\n\n     * @param owner owner of the token\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     */\n\n    function _clearApproval(address owner, uint256 tokenId) private {\n\n        require(ownerOf(tokenId) == owner);\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n\n    }\n",
                    "message": "ERC721 (ERC721.sol#228-497) has incorrect ERC20 function interface(s):\n\t-approve (ERC721.sol#296-303)\n\t-transferFrom (ERC721.sol#346-355)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721.sol#157-168)\n\t- ERC721.sol#166-167\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        require(owner != address(0));\n\n        return _ownedTokensCount[owner];\n",
                    "message": "ERC721.balanceOf (ERC721.sol#272-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (ERC721.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner);\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721.sol#296-303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 326,
                    "vulnerability_code": "    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != msg.sender);\n\n        _operatorApprovals[msg.sender][to] = approved;\n\n        emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721.sol#322-326) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 372,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        // solium-disable-next-line arg-overflow\n\n        safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721.sol#369-372) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.safeTransferFrom (ERC721.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721.sol#71) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId) internal {\n\n        require(interfaceId != 0xffffffff);\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721.sol#210-213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721.sol#181) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721.sol#397-400) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": 415,
                    "vulnerability_code": "    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        address owner = ownerOf(tokenId);\n\n        // Disable solium check because of\n\n        // https://github.com/duaraghav8/Solium/issues/175\n\n        // solium-disable-next-line operator-whitespace\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721.sol#409-415) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 427,
                    "vulnerability_code": "    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0));\n\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721.sol#423-427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        _clearApproval(owner, tokenId);\n\n        _removeTokenFrom(owner, tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721.sol#434-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 451,
                    "vulnerability_code": "    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        require(_tokenOwner[tokenId] == address(0));\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721.sol#447-451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 465,
                    "vulnerability_code": "    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n        _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721.sol#461-465) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n\n        return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721.sol#476-483) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721.sol#476) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": 496,
                    "vulnerability_code": "    function _clearApproval(address owner, uint256 tokenId) private {\n\n        require(ownerOf(tokenId) == owner);\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721.sol#491-496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) internal _tokenOwner;\n",
                    "message": "Variable 'ERC721._tokenOwner' (ERC721.sol#237) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721.sol#248) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/helpers/IERC721.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721 (IERC721.sol#27-45) has incorrect ERC20 function interface(s):\n\t-approve (IERC721.sol#35)\n\t-transferFrom (IERC721.sol#41)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256 balance);\n",
                    "message": "IERC721.balanceOf (IERC721.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 tokenId) public view returns (address owner);\n",
                    "message": "IERC721.ownerOf (IERC721.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (IERC721.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getApproved(uint256 tokenId) public view returns (address operator);\n",
                    "message": "IERC721.getApproved (IERC721.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (IERC721.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isApprovedForAll(address owner, address operator) public view returns (bool);\n",
                    "message": "IERC721.isApprovedForAll (IERC721.sol#39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.transferFrom (IERC721.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.safeTransferFrom (IERC721.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721.safeTransferFrom (IERC721.sol#44) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/helpers/IOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/helpers/ERC721Enumerable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interface to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC721Enumerable);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _ownedTokens[from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 656,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _allTokens.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(from, to, tokenId, _data));\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_34"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract (ERC721Enumerable.sol#172-183) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721 (ERC721Enumerable.sol#27-45) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Enumerable.sol#35)\n\t-transferFrom (ERC721Enumerable.sol#41)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": 512,
                    "vulnerability_code": "contract ERC721 is ERC165, IERC721 {\n\n    using SafeMath for uint256;\n\n    using Address for address;\n\n\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n\n\n    // Mapping from token ID to owner\n\n    mapping (uint256 => address) internal _tokenOwner;\n\n\n\n    // Mapping from token ID to approved address\n\n    mapping (uint256 => address) private _tokenApprovals;\n\n\n\n    // Mapping from owner to number of owned token\n\n    mapping (address => uint256) private _ownedTokensCount;\n\n\n\n    // Mapping from owner to operator approvals\n\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n    /*\n\n     * 0x80ac58cd ===\n\n     *     bytes4(keccak256('balanceOf(address)')) ^\n\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\n     */\n\n\n\n    constructor () public {\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n\n        _registerInterface(_InterfaceId_ERC721);\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address owner) public view returns (uint256) {\n\n        require(owner != address(0));\n\n        return _ownedTokensCount[owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the owner of the specified token ID\n\n     * @param tokenId uint256 ID of the token to query the owner of\n\n     * @return owner address currently marked as the owner of the given token ID\n\n     */\n\n    function ownerOf(uint256 tokenId) public view returns (address) {\n\n        address owner = _tokenOwner[tokenId];\n\n        require(owner != address(0));\n\n        return owner;\n\n    }\n\n\n\n    /**\n\n     * @dev Approves another address to transfer the given token ID\n\n     * The zero address indicates there is no approved address.\n\n     * There can only be one approved address per token at a given time.\n\n     * Can only be called by the token owner or an approved operator.\n\n     * @param to address to be approved for the given token ID\n\n     * @param tokenId uint256 ID of the token to be approved\n\n     */\n\n    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner);\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the approved address for a token ID, or zero if no address set\n\n     * Reverts if the token ID does not exist.\n\n     * @param tokenId uint256 ID of the token to query the approval of\n\n     * @return address currently approved for the given token ID\n\n     */\n\n    function getApproved(uint256 tokenId) public view returns (address) {\n\n        require(_exists(tokenId));\n\n        return _tokenApprovals[tokenId];\n\n    }\n\n\n\n    /**\n\n     * @dev Sets or unsets the approval of a given operator\n\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n\n     * @param to operator address to set the approval\n\n     * @param approved representing the status of the approval to be set\n\n     */\n\n    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != msg.sender);\n\n        _operatorApprovals[msg.sender][to] = approved;\n\n        emit ApprovalForAll(msg.sender, to, approved);\n\n    }\n\n\n\n    /**\n\n     * @dev Tells whether an operator is approved by a given owner\n\n     * @param owner owner address which you want to query the approval of\n\n     * @param operator operator address which you want to query the approval of\n\n     * @return bool whether the given operator is approved by the given owner\n\n     */\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n\n        return _operatorApprovals[owner][operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given token ID to another address\n\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n    */\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        require(to != address(0));\n\n\n\n        _clearApproval(from, tokenId);\n\n        _removeTokenFrom(from, tokenId);\n\n        _addTokenTo(to, tokenId);\n\n\n\n        emit Transfer(from, to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Safely transfers the ownership of a given token ID to another address\n\n     * If the target address is a contract, it must implement `onERC721Received`,\n\n     * which is called upon a safe transfer, and return the magic value\n\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n     * the transfer is reverted.\n\n     *\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n    */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        // solium-disable-next-line arg-overflow\n\n        safeTransferFrom(from, to, tokenId, \"\");\n\n    }\n\n\n\n    /**\n\n     * @dev Safely transfers the ownership of a given token ID to another address\n\n     * If the target address is a contract, it must implement `onERC721Received`,\n\n     * which is called upon a safe transfer, and return the magic value\n\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n\n     * the transfer is reverted.\n\n     * Requires the msg sender to be the owner, approved, or operator\n\n     * @param from current owner of the token\n\n     * @param to address to receive the ownership of the given token ID\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @param _data bytes data to send along with a safe transfer check\n\n     */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n\n        transferFrom(from, to, tokenId);\n\n        // solium-disable-next-line arg-overflow\n\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n\n    }\n\n\n\n    /**\n\n     * @dev Returns whether the specified token exists\n\n     * @param tokenId uint256 ID of the token to query the existence of\n\n     * @return whether the token exists\n\n     */\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n\n    }\n\n\n\n    /**\n\n     * @dev Returns whether the given spender can transfer a given token ID\n\n     * @param spender address of the spender to query\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @return bool whether the msg.sender is approved for the given token ID,\n\n     *    is an operator of the owner, or is the owner of the token\n\n     */\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        address owner = ownerOf(tokenId);\n\n        // Disable solium check because of\n\n        // https://github.com/duaraghav8/Solium/issues/175\n\n        // solium-disable-next-line operator-whitespace\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to mint a new token\n\n     * Reverts if the given token ID already exists\n\n     * @param to The address that will own the minted token\n\n     * @param tokenId uint256 ID of the token to be minted by the msg.sender\n\n     */\n\n    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0));\n\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to burn a specific token\n\n     * Reverts if the token does not exist\n\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n\n     */\n\n    function _burn(address owner, uint256 tokenId) internal {\n\n        _clearApproval(owner, tokenId);\n\n        _removeTokenFrom(owner, tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to add a token ID to the list of a given address\n\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n\n     * @param to address representing the new owner of the given token ID\n\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n     */\n\n    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        require(_tokenOwner[tokenId] == address(0));\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to remove a token ID from the list of a given address\n\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n\n     * and doesn't clear approvals.\n\n     * @param from address representing the previous owner of the given token ID\n\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n     */\n\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n        _tokenOwner[tokenId] = address(0);\n\n    }\n\n\n\n    /**\n\n     * @dev Internal function to invoke `onERC721Received` on a target address\n\n     * The call is not executed if the target address is not a contract\n\n     * @param from address representing the previous owner of the given token ID\n\n     * @param to target address that will receive the tokens\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     * @param _data bytes optional data to send along with the call\n\n     * @return whether the call correctly returned the expected magic value\n\n     */\n\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n\n        return (retval == _ERC721_RECEIVED);\n\n    }\n\n\n\n    /**\n\n     * @dev Private function to clear current approval of a given token ID\n\n     * Reverts if the given address is not indeed the owner of the token\n\n     * @param owner owner of the token\n\n     * @param tokenId uint256 ID of the token to be transferred\n\n     */\n\n    function _clearApproval(address owner, uint256 tokenId) private {\n\n        require(ownerOf(tokenId) == owner);\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n\n    }\n",
                    "message": "ERC721 (ERC721Enumerable.sol#243-512) has incorrect ERC20 function interface(s):\n\t-approve (ERC721Enumerable.sol#311-318)\n\t-transferFrom (ERC721Enumerable.sol#361-370)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract uses assembly (ERC721Enumerable.sol#172-183)\n\t- ERC721Enumerable.sol#181-182\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (ERC721Enumerable.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner);\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (ERC721Enumerable.sol#311-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (ERC721Enumerable.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != msg.sender);\n\n        _operatorApprovals[msg.sender][to] = approved;\n\n        emit ApprovalForAll(msg.sender, to, approved);\n",
                    "message": "ERC721.setApprovalForAll (ERC721Enumerable.sol#337-341) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.safeTransferFrom (ERC721Enumerable.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 387,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        // solium-disable-next-line arg-overflow\n\n        safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (ERC721Enumerable.sol#384-387) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": 562,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n\n        require(index < balanceOf(owner));\n\n        return _ownedTokens[owner][index];\n",
                    "message": "ERC721Enumerable.tokenOfOwnerByIndex (ERC721Enumerable.sol#559-562) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (ERC721Enumerable.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (ERC721Enumerable.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "    function tokenByIndex(uint256 index) public view returns (uint256) {\n\n        require(index < totalSupply());\n\n        return _allTokens[index];\n",
                    "message": "ERC721Enumerable.tokenByIndex (ERC721Enumerable.sol#578-581) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);\n",
                    "message": "IERC721Receiver.onERC721Received (ERC721Enumerable.sol#86) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId) internal {\n\n        require(interfaceId != 0xffffffff);\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC721Enumerable.sol#225-228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC721Enumerable.sol#196) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (ERC721Enumerable.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 415,
                    "vulnerability_code": "    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (ERC721Enumerable.sol#412-415) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 430,
                    "vulnerability_code": "    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        address owner = ownerOf(tokenId);\n\n        // Disable solium check because of\n\n        // https://github.com/duaraghav8/Solium/issues/175\n\n        // solium-disable-next-line operator-whitespace\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (ERC721Enumerable.sol#424-430) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": 442,
                    "vulnerability_code": "    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0));\n\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (ERC721Enumerable.sol#438-442) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": 453,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        _clearApproval(owner, tokenId);\n\n        _removeTokenFrom(owner, tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (ERC721Enumerable.sol#449-453) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 466,
                    "vulnerability_code": "    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        require(_tokenOwner[tokenId] == address(0));\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n",
                    "message": "Function 'ERC721._addTokenTo' (ERC721Enumerable.sol#462-466) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": 480,
                    "vulnerability_code": "    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n\n        _tokenOwner[tokenId] = address(0);\n",
                    "message": "Function 'ERC721._removeTokenFrom' (ERC721Enumerable.sol#476-480) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": 498,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n\n        return (retval == _ERC721_RECEIVED);\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (ERC721Enumerable.sol#491-498) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (ERC721Enumerable.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "    function _clearApproval(address owner, uint256 tokenId) private {\n\n        require(ownerOf(tokenId) == owner);\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n",
                    "message": "Function 'ERC721._clearApproval' (ERC721Enumerable.sol#506-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) internal _tokenOwner;\n",
                    "message": "Variable 'ERC721._tokenOwner' (ERC721Enumerable.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": "Constant 'ERC721._InterfaceId_ERC721' (ERC721Enumerable.sol#263) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": 637,
                    "vulnerability_code": "    function _mint(address to, uint256 tokenId) internal {\n\n        super._mint(to, tokenId);\n\n\n\n        _allTokensIndex[tokenId] = _allTokens.length;\n\n        _allTokens.push(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._mint' (ERC721Enumerable.sol#632-637) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        super._burn(owner, tokenId);\n\n\n\n        // Reorg all tokens array\n\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n\n        uint256 lastToken = _allTokens[lastTokenIndex];\n\n\n\n        _allTokens[tokenIndex] = lastToken;\n\n        _allTokens[lastTokenIndex] = 0;\n\n\n\n        _allTokens.length--;\n\n        _allTokensIndex[tokenId] = 0;\n\n        _allTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._burn' (ERC721Enumerable.sol#645-659) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": 595,
                    "vulnerability_code": "    function _addTokenTo(address to, uint256 tokenId) internal {\n\n        super._addTokenTo(to, tokenId);\n\n        uint256 length = _ownedTokens[to].length;\n\n        _ownedTokens[to].push(tokenId);\n\n        _ownedTokensIndex[tokenId] = length;\n",
                    "message": "Function 'ERC721Enumerable._addTokenTo' (ERC721Enumerable.sol#590-595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": 624,
                    "vulnerability_code": "    function _removeTokenFrom(address from, uint256 tokenId) internal {\n\n        super._removeTokenFrom(from, tokenId);\n\n\n\n        // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n\n        // then delete the last slot.\n\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n\n        uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n\n\n        _ownedTokens[from][tokenIndex] = lastToken;\n\n        // This also deletes the contents at the last position of the array\n\n        _ownedTokens[from].length--;\n\n\n\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\n        // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\n\n        _ownedTokensIndex[tokenId] = 0;\n\n        _ownedTokensIndex[lastToken] = tokenIndex;\n",
                    "message": "Function 'ERC721Enumerable._removeTokenFrom' (ERC721Enumerable.sol#605-624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": "Constant 'ERC721Enumerable._InterfaceId_ERC721Enumerable' (ERC721Enumerable.sol#537) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _ownedTokens[from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 656,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _allTokens.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256[]) private _ownedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _ownedTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _allTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/helpers/ManagerRole.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settingsManager = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feeManager = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 92,
                    "vulnerability_code": "    function setContractManager(address account) public onlySettingsManager {\n\n        _setContract(account);\n",
                    "message": "ManagerRole.setContractManager (ManagerRole.sol#90-92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "    function changeFeeManager(address account) public onlyFeeManager {\n\n        require(account != address(0));\n\n        feeManager = account;\n",
                    "message": "ManagerRole.changeFeeManager (ManagerRole.sol#94-97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "    function renounceSettingsManager() public onlySettingsManager {\n\n        settingsManager = address(0);\n",
                    "message": "ManagerRole.renounceSettingsManager (ManagerRole.sol#99-101) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "    function _setContract(address account) internal {\n\n        tBoxManager = account;\n\n        emit ContractManagerAdded(account);\n",
                    "message": "Function 'ManagerRole._setContract' (ManagerRole.sol#104-107) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settingsManager = address(0);\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/helpers/ERC165.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 61,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId) internal {\n\n        require(interfaceId != 0xffffffff);\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (ERC165.sol#58-61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": "Constant 'ERC165._InterfaceId_ERC165' (ERC165.sol#29) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/helpers/ISettings.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/helpers/IERC165.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "Timvi-master/contracts/services/leverage-exchange/LeverageService.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(ISettings _settings) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        admin = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settings = ISettings(_settings);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feeLeverage = 500; // 0.5%\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feeExchange = 500; // 0.5%\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit FeeUpdated(feeLeverage, feeExchange);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        minEther = 0.1 ether;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit MinEtherUpdated(minEther);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(admin == msg.sender, \"You have no access\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(orders[_id].owner == msg.sender, \"Order isn't your\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(orders[_id].percent > 0, \"Not a leverage order\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(orders[_id].percent == 0, \"Not an exchange order\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(systemETH > 0, \"There is no available ETH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"There are no tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_leverage <= 10000 && _exchange <= 10000, \"Too much\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= 100 ether, \"Too much\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newAdmin != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.value >= minEther, \"Too small funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_percent == 0\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Collateral percent out of range\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.value == _eth, \"Incorrect ETH value\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_leverage <= 10000 && _exchange <= 10000, \"Too much\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_25"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-eth",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 349,
                    "vulnerability_code": "    function takeExchangeOrder(uint256 _id) external payable ensureExchangeOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack;\n\n        uint256 _sysEth = _eth.mul(feeExchange).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(ITBoxManager(settings.tBoxManager()).precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeExchange).div(divider);\n\n        delete orders[_id];\n\n        msg.sender.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(address(this), msg.sender, _box);\n\n        IToken(settings.tmvAddress()).transfer(_owner, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n",
                    "message": "Reentrancy in LeverageService.takeExchangeOrder (LeverageService.sol#335-349):\n\tExternal calls:\n\t- _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(ITBoxManager(settings.tBoxManager()).precision()) (LeverageService.sol#340)\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv) (LeverageService.sol#341)\n\tExternal calls sending eth:\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv) (LeverageService.sol#341)\n\tState variables written after the call(s):\n\t- orders (LeverageService.sol#343)\n"
                },
                {
                    "name": "reentrancy-eth",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "    function takeLeverageOrder(uint256 _id) external payable ensureLeverageOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack.mul(divider).div(orders[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(feeLeverage).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(\n\n            ITBoxManager(settings.tBoxManager()).precision()\n\n        );\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(\n\n            orders[_id].pack\n\n        )(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeLeverage).div(divider);\n\n        delete orders[_id];\n\n        _owner.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            _owner,\n\n            _box\n\n        );\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n",
                    "message": "Reentrancy in LeverageService.takeLeverageOrder (LeverageService.sol#307-332):\n\tExternal calls:\n\t- _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(ITBoxManager(settings.tBoxManager()).precision()) (LeverageService.sol#315-317)\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(orders[_id].pack)(_tmv) (LeverageService.sol#318-320)\n\tExternal calls sending eth:\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(orders[_id].pack)(_tmv) (LeverageService.sol#318-320)\n\tState variables written after the call(s):\n\t- orders (LeverageService.sol#322)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "interface IToken {\n\n    function burnLogic(address from, uint256 value) external;\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function mint(address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n",
                    "message": "IToken (LeverageService.sol#98-106) has incorrect ERC20 function interface(s):\n\t-transferFrom (LeverageService.sol#105)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "interface ITBoxManager {\n\n    function create(uint256 withdraw) external payable returns (uint256);\n\n    function precision() external view returns (uint256);\n\n    function rate() external view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function close(uint256 id) external;\n\n    function withdrawPercent(uint256 _collateral) external view returns(uint256);\n\n    function boxes(uint256 id) external view returns(uint256, uint256);\n\n    function withdrawEth(uint256 _id, uint256 _amount) external;\n\n    function withdrawTmv(uint256 _id, uint256 _amount) external;\n\n    function withdrawableEth(uint256 id) external view returns(uint256);\n\n    function withdrawableTmv(uint256 collateral) external view returns(uint256);\n\n    function maxCapAmount(uint256 _id) external view returns (uint256);\n\n    function collateralPercent(uint256 _id) external view returns (uint256);\n\n    function capitalize(uint256 _id, uint256 _tmv) external;\n\n    function boxWithdrawableTmv(uint256 _id) external view returns(uint256);\n\n    function addEth(uint256 _id) external payable;\n",
                    "message": "ITBoxManager (LeverageService.sol#115-132) has incorrect ERC20 function interface(s):\n\t-transferFrom (LeverageService.sol#119)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 357,
                    "vulnerability_code": "contract LeverageService {\n\n    using SafeMath for uint256;\n\n\n\n    /// @notice The address of the admin account.\n\n    address public admin;\n\n\n\n    // The amount of Ether received from the commissions of the system.\n\n    uint256 public systemETH;\n\n\n\n    // Commission percentage of leverage\n\n    uint256 public feeLeverage;\n\n\n\n    // Commission percentage of exchange\n\n    uint256 public feeExchange;\n\n\n\n    // The percentage divider\n\n    uint256 public divider = 100000;\n\n\n\n    // The minimum deposit amount\n\n    uint256 public minEther;\n\n\n\n    ISettings public settings;\n\n\n\n    /// @dev An array containing the Order struct for all Orders in existence. The ID\n\n    ///  of each Order is actually an index into this array.\n\n    Order[] public orders;\n\n\n\n    /// @dev The main Order struct. Every Order is represented by a copy\n\n    ///  of this structure.\n\n    struct Order {\n\n        address owner;\n\n        uint256 pack;\n\n        // 0: exchange order\n\n        // > 0: leverage order\n\n        uint256 percent;\n\n    }\n\n\n\n    /// @dev The OrderCreated event is fired whenever a new Order comes into existence.\n\n    event OrderCreated(uint256 id, address owner, uint256 pack, uint256 percent);\n\n\n\n    /// @dev The OrderClosed event is fired whenever Order is closed.\n\n    event OrderClosed(uint256 id, address who);\n\n\n\n    /// @dev The OrderMatched event is fired whenever an Order is matched.\n\n    event OrderMatched(uint256 id, uint256 tBox, address who, address owner);\n\n\n\n    event FeeUpdated(uint256 leverage, uint256 exchange);\n\n    event MinEtherUpdated(uint256 value);\n\n    event Transferred(address indexed from, address indexed to, uint256 indexed id);\n\n\n\n    /// @dev Defends against front-running attacks.\n\n    modifier validTx() {\n\n        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n\n        _;\n\n    }\n\n\n\n    /// @dev Access modifier for admin-only functionality.\n\n    modifier onlyAdmin() {\n\n        require(admin == msg.sender, \"You have no access\");\n\n        _;\n\n    }\n\n\n\n    /// @dev Access modifier for Order owner-only functionality.\n\n    modifier onlyOwner(uint256 _id) {\n\n        require(orders[_id].owner == msg.sender, \"Order isn't your\");\n\n        _;\n\n    }\n\n\n\n    modifier ensureLeverageOrder(uint256 _id) {\n\n        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n\n        require(orders[_id].percent > 0, \"Not a leverage order\");\n\n        _;\n\n    }\n\n\n\n    modifier ensureExchangeOrder(uint256 _id) {\n\n        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n\n        require(orders[_id].percent == 0, \"Not an exchange order\");\n\n        _;\n\n    }\n\n\n\n    /// @notice ISettings address couldn't be changed later.\n\n    /// @dev The contract constructor sets the original `admin` of the contract to the sender\n\n    //   account and sets the settings contract with provided address.\n\n    /// @param _settings The address of the settings contract.\n\n    constructor(ISettings _settings) public {\n\n        admin = msg.sender;\n\n        settings = ISettings(_settings);\n\n\n\n        feeLeverage = 500; // 0.5%\n\n        feeExchange = 500; // 0.5%\n\n        emit FeeUpdated(feeLeverage, feeExchange);\n\n\n\n        minEther = 0.1 ether;\n\n        emit MinEtherUpdated(minEther);\n\n    }\n\n\n\n    /// @dev Withdraws system fee.\n\n    function withdrawSystemETH(address _beneficiary)\n\n    external\n\n    onlyAdmin\n\n    {\n\n        require(_beneficiary != address(0), \"Zero address, be careful\");\n\n        require(systemETH > 0, \"There is no available ETH\");\n\n\n\n        uint256 _systemETH = systemETH;\n\n        systemETH = 0;\n\n        _beneficiary.transfer(_systemETH);\n\n    }\n\n\n\n    /// @dev Reclaims ERC20 tokens.\n\n    function reclaimERC20(address _token, address _beneficiary)\n\n    external\n\n    onlyAdmin\n\n    {\n\n        require(_beneficiary != address(0), \"Zero address, be careful\");\n\n\n\n        uint256 _amount = IToken(_token).balanceOf(address(this));\n\n        require(_amount > 0, \"There are no tokens\");\n\n        IToken(_token).transfer(_beneficiary, _amount);\n\n    }\n\n\n\n    /// @dev Sets commission.\n\n    function setCommission(uint256 _leverage, uint256 _exchange) external onlyAdmin {\n\n        require(_leverage <= 10000 && _exchange <= 10000, \"Too much\");\n\n        feeLeverage = _leverage;\n\n        feeExchange = _exchange;\n\n        emit FeeUpdated(_leverage, _exchange);\n\n    }\n\n\n\n    /// @dev Sets minimum deposit amount.\n\n    function setMinEther(uint256 _value) external onlyAdmin {\n\n        require(_value <= 100 ether, \"Too much\");\n\n        minEther = _value;\n\n        emit MinEtherUpdated(_value);\n\n    }\n\n\n\n    /// @dev Sets admin address.\n\n    function changeAdmin(address _newAdmin) external onlyAdmin {\n\n        require(_newAdmin != address(0), \"Zero address, be careful\");\n\n        admin = _newAdmin;\n\n    }\n\n\n\n    /// @dev Creates an Order.\n\n    function create(uint256 _percent) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_percent == 0\n\n            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n\n            \"Collateral percent out of range\"\n\n        );\n\n\n\n        Order memory _order = Order(msg.sender, msg.value, _percent);\n\n        uint256 _id = orders.push(_order).sub(1);\n\n        emit OrderCreated(_id, msg.sender, msg.value, _percent);\n\n        return _id;\n\n    }\n\n\n\n    /// @dev Closes an Order.\n\n    function close(uint256 _id) external onlyOwner(_id) {\n\n        uint256 _eth = orders[_id].pack;\n\n        delete orders[_id];\n\n        msg.sender.transfer(_eth);\n\n        emit OrderClosed(_id, msg.sender);\n\n    }\n\n\n\n    /// @dev Uses to match a leverage Order.\n\n    function takeLeverageOrder(uint256 _id) external payable ensureLeverageOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack.mul(divider).div(orders[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(feeLeverage).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(\n\n            ITBoxManager(settings.tBoxManager()).precision()\n\n        );\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(\n\n            orders[_id].pack\n\n        )(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeLeverage).div(divider);\n\n        delete orders[_id];\n\n        _owner.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            _owner,\n\n            _box\n\n        );\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n\n    }\n\n\n\n    /// @dev Uses to match an exchange Order.\n\n    function takeExchangeOrder(uint256 _id) external payable ensureExchangeOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack;\n\n        uint256 _sysEth = _eth.mul(feeExchange).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(ITBoxManager(settings.tBoxManager()).precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeExchange).div(divider);\n\n        delete orders[_id];\n\n        msg.sender.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(address(this), msg.sender, _box);\n\n        IToken(settings.tmvAddress()).transfer(_owner, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n\n    }\n\n\n\n    /// @dev Transfers ownership of an Order.\n\n    function transfer(address _to, uint256 _id) external onlyOwner(_id) {\n\n        require(_to != address(0), \"Zero address, be careful\");\n\n        orders[_id].owner = _to;\n\n        emit Transferred(msg.sender, _to, _id);\n\n    }\n",
                    "message": "LeverageService (LeverageService.sol#142-357) has incorrect ERC20 function interface(s):\n\t-transfer (LeverageService.sol#352-356)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 261,
                    "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary)\n\n    external\n\n    onlyAdmin\n\n    {\n\n        require(_beneficiary != address(0), \"Zero address, be careful\");\n\n\n\n        uint256 _amount = IToken(_token).balanceOf(address(this));\n\n        require(_amount > 0, \"There are no tokens\");\n\n        IToken(_token).transfer(_beneficiary, _amount);\n",
                    "message": "LeverageService.reclaimERC20 (LeverageService.sol#252-261) does not use the value returned by external calls:\n\t-IToken(_token).transfer(_beneficiary,_amount) (LeverageService.sol#260)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "    function takeLeverageOrder(uint256 _id) external payable ensureLeverageOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack.mul(divider).div(orders[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(feeLeverage).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(\n\n            ITBoxManager(settings.tBoxManager()).precision()\n\n        );\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(\n\n            orders[_id].pack\n\n        )(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeLeverage).div(divider);\n\n        delete orders[_id];\n\n        _owner.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            _owner,\n\n            _box\n\n        );\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n",
                    "message": "LeverageService.takeLeverageOrder (LeverageService.sol#307-332) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(msg.sender,_tmv.sub(_sysTmv)) (LeverageService.sol#329)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 349,
                    "vulnerability_code": "    function takeExchangeOrder(uint256 _id) external payable ensureExchangeOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack;\n\n        uint256 _sysEth = _eth.mul(feeExchange).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(ITBoxManager(settings.tBoxManager()).precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeExchange).div(divider);\n\n        delete orders[_id];\n\n        msg.sender.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(address(this), msg.sender, _box);\n\n        IToken(settings.tmvAddress()).transfer(_owner, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n",
                    "message": "LeverageService.takeExchangeOrder (LeverageService.sol#335-349) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(_owner,_tmv.sub(_sysTmv)) (LeverageService.sol#346)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 296,
                    "vulnerability_code": "    function create(uint256 _percent) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_percent == 0\n\n            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n\n            \"Collateral percent out of range\"\n\n        );\n\n\n\n        Order memory _order = Order(msg.sender, msg.value, _percent);\n\n        uint256 _id = orders.push(_order).sub(1);\n\n        emit OrderCreated(_id, msg.sender, msg.value, _percent);\n\n        return _id;\n",
                    "message": "Reentrancy in LeverageService.create (LeverageService.sol#285-296):\n\tExternal calls:\n\t- require(bool,string)(_percent == 0 || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),Collateral percent out of range) (LeverageService.sol#287-290)\n\tState variables written after the call(s):\n\t- orders (LeverageService.sol#293)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public divider = 100000;\n",
                    "message": "LeverageService.divider should be constant (LeverageService.sol#158)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 296,
                    "vulnerability_code": "    function create(uint256 _percent) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_percent == 0\n\n            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n\n            \"Collateral percent out of range\"\n\n        );\n\n\n\n        Order memory _order = Order(msg.sender, msg.value, _percent);\n\n        uint256 _id = orders.push(_order).sub(1);\n\n        emit OrderCreated(_id, msg.sender, msg.value, _percent);\n\n        return _id;\n",
                    "message": "LeverageService.create (LeverageService.sol#285-296) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(ISettings _settings) public {\n",
                    "message": "Parameter '_settings' of LeverageService. (LeverageService.sol#226) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawSystemETH(address _beneficiary)\n",
                    "message": "Parameter '_beneficiary' of LeverageService.withdrawSystemETH (LeverageService.sol#239) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary)\n",
                    "message": "Parameter '_token' of LeverageService.reclaimERC20 (LeverageService.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary)\n",
                    "message": "Parameter '_beneficiary' of LeverageService.reclaimERC20 (LeverageService.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCommission(uint256 _leverage, uint256 _exchange) external onlyAdmin {\n",
                    "message": "Parameter '_leverage' of LeverageService.setCommission (LeverageService.sol#264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCommission(uint256 _leverage, uint256 _exchange) external onlyAdmin {\n",
                    "message": "Parameter '_exchange' of LeverageService.setCommission (LeverageService.sol#264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinEther(uint256 _value) external onlyAdmin {\n",
                    "message": "Parameter '_value' of LeverageService.setMinEther (LeverageService.sol#272) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeAdmin(address _newAdmin) external onlyAdmin {\n",
                    "message": "Parameter '_newAdmin' of LeverageService.changeAdmin (LeverageService.sol#279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function create(uint256 _percent) public payable returns (uint256) {\n",
                    "message": "Parameter '_percent' of LeverageService.create (LeverageService.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function close(uint256 _id) external onlyOwner(_id) {\n",
                    "message": "Parameter '_id' of LeverageService.close (LeverageService.sol#299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeLeverageOrder(uint256 _id) external payable ensureLeverageOrder(_id) validTx returns(uint256) {\n",
                    "message": "Parameter '_id' of LeverageService.takeLeverageOrder (LeverageService.sol#307) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeExchangeOrder(uint256 _id) external payable ensureExchangeOrder(_id) validTx returns(uint256) {\n",
                    "message": "Parameter '_id' of LeverageService.takeExchangeOrder (LeverageService.sol#335) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _id) external onlyOwner(_id) {\n",
                    "message": "Parameter '_to' of LeverageService.transfer (LeverageService.sol#352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _id) external onlyOwner(_id) {\n",
                    "message": "Parameter '_id' of LeverageService.transfer (LeverageService.sol#352) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/services/bond/BondService.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(ISettings _settings) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        admin = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settings = _settings;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        issuerFee = 500; // 0.5%\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit BondIssuerFeeUpdated(issuerFee);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        holderFee = 10000; // 10%\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit BondHolderFeeUpdated(holderFee);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(admin == msg.sender, \"You have no access\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].issuer == msg.sender, \"You are not the issuer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].holder == msg.sender, \"You are not the holder\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_a || _b, \"You are not the single owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].issuer != address(0) && bonds[_id].holder == address(0), \"The bond isn't an emit request\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].holder != address(0) && bonds[_id].issuer == address(0), \"The bond isn't a buy request\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].issuer != address(0) && bonds[_id].holder != address(0), \"Bond isn't matched\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.value >= minEther, \"Too small funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value), \"Collateralization is not enough\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_yearFee <= 25000, \"Fee out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.value >= minEther, \"Too small funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_yearFee <= 25000, \"Fee out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].holder == msg.sender && bonds[_id].issuer == address(0), \"You are not the holder or bond is matched\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_deposit >= minEther, \"Too small funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(msg.value == _deposit.sub(_oldDeposit), \"Incorrect value\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_yearFee <= 25000, \"Fee out of range\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.value == _eth, \"Incorrect ETH value\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < bond.expiration, \"Bond expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now > bonds[_id].expiration, \"Bond hasn't expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(systemETH > 0, \"There is no available ETH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"There are no tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 636,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= 10000, \"Too much\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= 50000, \"Too much\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= 100 ether, \"Too much\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newAdmin != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].issuer != address(0) && bonds[_id].holder == address(0), \"The bond isn't an emit request\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].holder != address(0) && bonds[_id].issuer == address(0), \"The bond isn't a buy request\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].issuer != address(0) && bonds[_id].holder != address(0), \"Bond isn't matched\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].holder == msg.sender && bonds[_id].issuer == address(0), \"You are not the holder or bond is matched\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_deposit != 0 && _oldDeposit != _deposit) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_deposit >= minEther, \"Too small funds\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            bonds[_id].deposit = _deposit;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (_oldDeposit > _deposit) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                msg.sender.transfer(_oldDeposit.sub(_deposit));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(msg.value == _deposit.sub(_oldDeposit), \"Incorrect value\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_percent != 0 && _oldPercent != _percent) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            bonds[_id].percent = _percent;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bonds[_id].holder == msg.sender && bonds[_id].issuer == address(0), \"You are not the holder or bond is matched\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_66"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 374,
                    "vulnerability_code": "    function close(uint256 _id) external singleOwner(_id) {\n\n        uint256 _eth = bonds[_id].deposit;\n\n        delete bonds[_id];\n\n        msg.sender.transfer(_eth);\n\n        emit BondClosed(_id, msg.sender);\n",
                    "message": "BondService.close (BondService.sol#369-374) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(_eth) (BondService.sol#372)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": 423,
                    "vulnerability_code": "    function changeDeposit(uint256 _id, uint256 _deposit) internal {\n\n        uint256 _oldDeposit = bonds[_id].deposit;\n\n        if (_deposit != 0 && _oldDeposit != _deposit) {\n\n            require(_deposit >= minEther, \"Too small funds\");\n\n            bonds[_id].deposit = _deposit;\n\n            if (_oldDeposit > _deposit) {\n\n                msg.sender.transfer(_oldDeposit.sub(_deposit));\n\n            } else {\n\n                require(msg.value == _deposit.sub(_oldDeposit), \"Incorrect value\");\n\n            }\n\n        }\n",
                    "message": "BondService.changeDeposit (BondService.sol#412-423) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(_oldDeposit.sub(_deposit)) (BondService.sol#418)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 474,
                    "vulnerability_code": "    function takeIssueRequest(uint256 _id) external payable issueRequest(_id) validTx {\n\n\n\n        address _issuer = bonds[_id].issuer;\n\n        uint256 _eth = bonds[_id].deposit.mul(divider).div(bonds[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = _eth.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv);\n\n\n\n        bonds[_id].holder = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        _issuer.transfer(_eth.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _issuer);\n",
                    "message": "BondService.takeIssueRequest (BondService.sol#451-474) sends eth to arbitrary user\n\tDangerous calls:\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv) (BondService.sol#462)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 498,
                    "vulnerability_code": "    function takeBuyRequest(uint256 _id) external payable buyRequest(_id) validTx {\n\n\n\n        address _holder = bonds[_id].holder;\n\n\n\n        uint256 _sysEth = bonds[_id].deposit.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = bonds[_id].deposit.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n\n\n        bonds[_id].issuer = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        msg.sender.transfer(bonds[_id].deposit.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(_holder, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _holder);\n",
                    "message": "BondService.takeBuyRequest (BondService.sol#478-498) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(bonds[_id].deposit.sub(_sysEth)) (BondService.sol#495)\n"
                },
                {
                    "name": "reentrancy-eth",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": 600,
                    "vulnerability_code": "    function expire(uint256 _id) external matched(_id) validTx {\n\n        require(now > bonds[_id].expiration, \"Bond hasn't expired\");\n\n\n\n        (uint256 _eth, uint256 _tmv) = getBox(bonds[_id].tBoxId);\n\n\n\n        if (_eth == 0) {\n\n            emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n            delete bonds[_id];\n\n            return;\n\n        }\n\n\n\n        uint256 _collateralPercent = ITBoxManager(settings.tBoxManager()).collateralPercent(bonds[_id].tBoxId);\n\n        uint256 _targetCollateralPercent = settings.globalTargetCollateralization();\n\n        if (_collateralPercent > _targetCollateralPercent) {\n\n            uint256 _ethTarget = _tmv.mul(_targetCollateralPercent).div(rate()); // mul and div by precision are omitted\n\n            uint256 _issuerEth = _eth.sub(_ethTarget);\n\n            uint256 _withdrawableEth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n                bonds[_id].tBoxId\n\n            );\n\n            if (_issuerEth > _withdrawableEth) {\n\n                _issuerEth = _withdrawableEth;\n\n            }\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _issuerEth\n\n            );\n\n            bonds[_id].issuer.transfer(_issuerEth);\n\n        }\n\n\n\n        _eth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        uint256 _commission = _eth.mul(bonds[_id].sysFee).div(divider);\n\n\n\n        if (_commission > 0) {\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _commission\n\n            );\n\n            systemETH = systemETH.add(_commission);\n\n        }\n\n\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            bonds[_id].holder,\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n\n\n        delete bonds[_id];\n",
                    "message": "Reentrancy in BondService.expire (BondService.sol#548-600):\n\tExternal calls:\n\t- (_eth,_tmv) = getBox(bonds[_id].tBoxId) (BondService.sol#551)\n\t- _collateralPercent = ITBoxManager(settings.tBoxManager()).collateralPercent(bonds[_id].tBoxId) (BondService.sol#559)\n\t- _targetCollateralPercent = settings.globalTargetCollateralization() (BondService.sol#560)\n\t- _ethTarget = _tmv.mul(_targetCollateralPercent).div(rate()) (BondService.sol#562)\n\t- _withdrawableEth = ITBoxManager(settings.tBoxManager()).withdrawableEth(bonds[_id].tBoxId) (BondService.sol#564-566)\n\t- ITBoxManager(settings.tBoxManager()).withdrawEth(bonds[_id].tBoxId,_issuerEth) (BondService.sol#570-573)\n\t- _eth = ITBoxManager(settings.tBoxManager()).withdrawableEth(bonds[_id].tBoxId) (BondService.sol#577-579)\n\t- ITBoxManager(settings.tBoxManager()).withdrawEth(bonds[_id].tBoxId,_commission) (BondService.sol#584-587)\n\t- ITBoxManager(settings.tBoxManager()).transferFrom(address(this),bonds[_id].holder,bonds[_id].tBoxId) (BondService.sol#591-595)\n\tExternal calls sending eth:\n\t- bonds[_id].issuer.transfer(_issuerEth) (BondService.sol#574)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#599)\n"
                },
                {
                    "name": "reentrancy-eth",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": 394,
                    "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n\n        external\n\n        payable\n\n        singleOwner(_id)\n\n        onlyIssuer(_id)\n\n    {\n\n        changeDeposit(_id, _deposit);\n\n        changePercent(_id, _percent);\n\n        changeExpiration(_id, _expiration);\n\n        changeYearFee(_id, _yearFee);\n\n\n\n        emit BondChanged(_id, _deposit, _percent, _expiration, _yearFee, msg.sender);\n",
                    "message": "Reentrancy in BondService.issuerChange (BondService.sol#382-394):\n\tExternal calls:\n\t- changePercent(_id,_percent) (BondService.sol#389)\n\tExternal calls sending eth:\n\t- changeDeposit(_id,_deposit) (BondService.sol#388)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#390)\n\t- bonds (BondService.sol#391)\n"
                },
                {
                    "name": "reentrancy-eth",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 498,
                    "vulnerability_code": "    function takeBuyRequest(uint256 _id) external payable buyRequest(_id) validTx {\n\n\n\n        address _holder = bonds[_id].holder;\n\n\n\n        uint256 _sysEth = bonds[_id].deposit.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = bonds[_id].deposit.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n\n\n        bonds[_id].issuer = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        msg.sender.transfer(bonds[_id].deposit.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(_holder, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _holder);\n",
                    "message": "Reentrancy in BondService.takeBuyRequest (BondService.sol#478-498):\n\tExternal calls:\n\t- _tmv = bonds[_id].deposit.mul(rate()).div(precision()) (BondService.sol#485)\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv) (BondService.sol#486)\n\tExternal calls sending eth:\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv) (BondService.sol#486)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#488)\n\t- bonds (BondService.sol#489)\n\t- bonds (BondService.sol#490)\n\t- bonds (BondService.sol#491)\n\t- bonds (BondService.sol#492)\n\t- bonds (BondService.sol#493)\n"
                },
                {
                    "name": "reentrancy-eth",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 474,
                    "vulnerability_code": "    function takeIssueRequest(uint256 _id) external payable issueRequest(_id) validTx {\n\n\n\n        address _issuer = bonds[_id].issuer;\n\n        uint256 _eth = bonds[_id].deposit.mul(divider).div(bonds[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = _eth.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv);\n\n\n\n        bonds[_id].holder = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        _issuer.transfer(_eth.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _issuer);\n",
                    "message": "Reentrancy in BondService.takeIssueRequest (BondService.sol#451-474):\n\tExternal calls:\n\t- _tmv = _eth.mul(rate()).div(precision()) (BondService.sol#461)\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv) (BondService.sol#462)\n\tExternal calls sending eth:\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv) (BondService.sol#462)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#464)\n\t- bonds (BondService.sol#465)\n\t- bonds (BondService.sol#466)\n\t- bonds (BondService.sol#467)\n\t- bonds (BondService.sol#468)\n\t- bonds (BondService.sol#469)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "interface IToken {\n\n    function burnLogic(address from, uint256 value) external;\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function mint(address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n",
                    "message": "IToken (BondService.sol#76-84) has incorrect ERC20 function interface(s):\n\t-transferFrom (BondService.sol#83)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "interface ITBoxManager {\n\n    function create(uint256 withdraw) external payable returns (uint256);\n\n    function precision() external view returns (uint256);\n\n    function rate() external view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function close(uint256 id) external;\n\n    function withdrawPercent(uint256 _collateral) external view returns(uint256);\n\n    function boxes(uint256 id) external view returns(uint256, uint256);\n\n    function withdrawEth(uint256 _id, uint256 _amount) external;\n\n    function withdrawTmv(uint256 _id, uint256 _amount) external;\n\n    function withdrawableEth(uint256 id) external view returns(uint256);\n\n    function withdrawableTmv(uint256 collateral) external view returns(uint256);\n\n    function maxCapAmount(uint256 _id) external view returns (uint256);\n\n    function collateralPercent(uint256 _id) external view returns (uint256);\n\n    function capitalize(uint256 _id, uint256 _tmv) external;\n\n    function boxWithdrawableTmv(uint256 _id) external view returns(uint256);\n\n    function addEth(uint256 _id) external payable;\n",
                    "message": "ITBoxManager (BondService.sol#115-132) has incorrect ERC20 function interface(s):\n\t-transferFrom (BondService.sol#119)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "    function changePercent(uint256 _id, uint256 _percent) internal {\n\n        uint256 _oldPercent = bonds[_id].percent;\n\n        if (_percent != 0 && _oldPercent != _percent) {\n\n            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n\n            bonds[_id].percent = _percent;\n\n        }\n",
                    "message": "Reentrancy in BondService.changePercent (BondService.sol#425-431):\n\tExternal calls:\n\t- require(bool,string)(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit),Collateralization is not enough) (BondService.sol#428)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#429)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": 600,
                    "vulnerability_code": "    function expire(uint256 _id) external matched(_id) validTx {\n\n        require(now > bonds[_id].expiration, \"Bond hasn't expired\");\n\n\n\n        (uint256 _eth, uint256 _tmv) = getBox(bonds[_id].tBoxId);\n\n\n\n        if (_eth == 0) {\n\n            emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n            delete bonds[_id];\n\n            return;\n\n        }\n\n\n\n        uint256 _collateralPercent = ITBoxManager(settings.tBoxManager()).collateralPercent(bonds[_id].tBoxId);\n\n        uint256 _targetCollateralPercent = settings.globalTargetCollateralization();\n\n        if (_collateralPercent > _targetCollateralPercent) {\n\n            uint256 _ethTarget = _tmv.mul(_targetCollateralPercent).div(rate()); // mul and div by precision are omitted\n\n            uint256 _issuerEth = _eth.sub(_ethTarget);\n\n            uint256 _withdrawableEth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n                bonds[_id].tBoxId\n\n            );\n\n            if (_issuerEth > _withdrawableEth) {\n\n                _issuerEth = _withdrawableEth;\n\n            }\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _issuerEth\n\n            );\n\n            bonds[_id].issuer.transfer(_issuerEth);\n\n        }\n\n\n\n        _eth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        uint256 _commission = _eth.mul(bonds[_id].sysFee).div(divider);\n\n\n\n        if (_commission > 0) {\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _commission\n\n            );\n\n            systemETH = systemETH.add(_commission);\n\n        }\n\n\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            bonds[_id].holder,\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n\n\n        delete bonds[_id];\n",
                    "message": "Reentrancy in BondService.expire (BondService.sol#548-600):\n\tExternal calls:\n\t- (_eth,_tmv) = getBox(bonds[_id].tBoxId) (BondService.sol#551)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#555)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": 544,
                    "vulnerability_code": "    function finish(uint256 _id) external onlyIssuer(_id) validTx {\n\n\n\n        Bond memory bond = bonds[_id];\n\n\n\n        // It's not necessary to check matching of the bond\n\n        // since the expiration period cannot exceed 365 days.\n\n        require(now < bond.expiration, \"Bond expired\");\n\n\n\n        uint256 _secondsPast = now.sub(bond.createdAt);\n\n        (uint256 _eth, ) = getBox(bond.tBoxId);\n\n\n\n        uint256 _yearFee = bond.tmv\n\n            .mul(_secondsPast)\n\n            .mul(bond.yearFee)\n\n            .div(365 days)\n\n            .div(divider);\n\n        uint256 _sysTMV = _yearFee.mul(bond.sysFee).div(divider);\n\n\n\n        address _holder = bond.holder;\n\n\n\n        if (_sysTMV > 0) {\n\n            IToken(settings.tmvAddress()).transferFrom(\n\n                msg.sender,\n\n                address(this),\n\n                _sysTMV\n\n            );\n\n        }\n\n        if (_yearFee > 0) {\n\n            IToken(settings.tmvAddress()).transferFrom(\n\n                msg.sender,\n\n                _holder,\n\n                _yearFee.sub(_sysTMV)\n\n            );\n\n        }\n\n\n\n        if (_eth > 0) {\n\n            ITBoxManager(settings.tBoxManager()).transferFrom(address(this), msg.sender, bond.tBoxId);\n\n        }\n\n        // when TBox no longer exists\n\n        delete bonds[_id];\n\n\n\n        emit BondFinished(_id, msg.sender, _holder);\n",
                    "message": "Reentrancy in BondService.finish (BondService.sol#502-544):\n\tExternal calls:\n\t- (_eth) = getBox(bond.tBoxId) (BondService.sol#511)\n\t- IToken(settings.tmvAddress()).transferFrom(msg.sender,address(this),_sysTMV) (BondService.sol#523-527)\n\t- IToken(settings.tmvAddress()).transferFrom(msg.sender,_holder,_yearFee.sub(_sysTMV)) (BondService.sol#530-534)\n\t- ITBoxManager(settings.tBoxManager()).transferFrom(address(this),msg.sender,bond.tBoxId) (BondService.sol#538)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#541)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 474,
                    "vulnerability_code": "    function takeIssueRequest(uint256 _id) external payable issueRequest(_id) validTx {\n\n\n\n        address _issuer = bonds[_id].issuer;\n\n        uint256 _eth = bonds[_id].deposit.mul(divider).div(bonds[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = _eth.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv);\n\n\n\n        bonds[_id].holder = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        _issuer.transfer(_eth.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _issuer);\n",
                    "message": "BondService.takeIssueRequest (BondService.sol#451-474) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(msg.sender,_tmv) (BondService.sol#472)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 498,
                    "vulnerability_code": "    function takeBuyRequest(uint256 _id) external payable buyRequest(_id) validTx {\n\n\n\n        address _holder = bonds[_id].holder;\n\n\n\n        uint256 _sysEth = bonds[_id].deposit.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = bonds[_id].deposit.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n\n\n        bonds[_id].issuer = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        msg.sender.transfer(bonds[_id].deposit.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(_holder, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _holder);\n",
                    "message": "BondService.takeBuyRequest (BondService.sol#478-498) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(_holder,_tmv) (BondService.sol#496)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": 631,
                    "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary) external onlyAdmin {\n\n        require(_beneficiary != address(0), \"Zero address, be careful\");\n\n\n\n        uint256 _amount = IToken(_token).balanceOf(address(this));\n\n        require(_amount > 0, \"There are no tokens\");\n\n        IToken(_token).transfer(_beneficiary, _amount);\n",
                    "message": "BondService.reclaimERC20 (BondService.sol#625-631) does not use the value returned by external calls:\n\t-IToken(_token).transfer(_beneficiary,_amount) (BondService.sol#630)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": 600,
                    "vulnerability_code": "    function expire(uint256 _id) external matched(_id) validTx {\n\n        require(now > bonds[_id].expiration, \"Bond hasn't expired\");\n\n\n\n        (uint256 _eth, uint256 _tmv) = getBox(bonds[_id].tBoxId);\n\n\n\n        if (_eth == 0) {\n\n            emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n            delete bonds[_id];\n\n            return;\n\n        }\n\n\n\n        uint256 _collateralPercent = ITBoxManager(settings.tBoxManager()).collateralPercent(bonds[_id].tBoxId);\n\n        uint256 _targetCollateralPercent = settings.globalTargetCollateralization();\n\n        if (_collateralPercent > _targetCollateralPercent) {\n\n            uint256 _ethTarget = _tmv.mul(_targetCollateralPercent).div(rate()); // mul and div by precision are omitted\n\n            uint256 _issuerEth = _eth.sub(_ethTarget);\n\n            uint256 _withdrawableEth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n                bonds[_id].tBoxId\n\n            );\n\n            if (_issuerEth > _withdrawableEth) {\n\n                _issuerEth = _withdrawableEth;\n\n            }\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _issuerEth\n\n            );\n\n            bonds[_id].issuer.transfer(_issuerEth);\n\n        }\n\n\n\n        _eth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        uint256 _commission = _eth.mul(bonds[_id].sysFee).div(divider);\n\n\n\n        if (_commission > 0) {\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _commission\n\n            );\n\n            systemETH = systemETH.add(_commission);\n\n        }\n\n\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            bonds[_id].holder,\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n\n\n        delete bonds[_id];\n",
                    "message": "Reentrancy in BondService.expire (BondService.sol#548-600):\n\tExternal calls:\n\t- (_eth,_tmv) = getBox(bonds[_id].tBoxId) (BondService.sol#551)\n\t- _collateralPercent = ITBoxManager(settings.tBoxManager()).collateralPercent(bonds[_id].tBoxId) (BondService.sol#559)\n\t- _targetCollateralPercent = settings.globalTargetCollateralization() (BondService.sol#560)\n\t- _ethTarget = _tmv.mul(_targetCollateralPercent).div(rate()) (BondService.sol#562)\n\t- _withdrawableEth = ITBoxManager(settings.tBoxManager()).withdrawableEth(bonds[_id].tBoxId) (BondService.sol#564-566)\n\t- ITBoxManager(settings.tBoxManager()).withdrawEth(bonds[_id].tBoxId,_issuerEth) (BondService.sol#570-573)\n\t- _eth = ITBoxManager(settings.tBoxManager()).withdrawableEth(bonds[_id].tBoxId) (BondService.sol#577-579)\n\t- ITBoxManager(settings.tBoxManager()).withdrawEth(bonds[_id].tBoxId,_commission) (BondService.sol#584-587)\n\tExternal calls sending eth:\n\t- bonds[_id].issuer.transfer(_issuerEth) (BondService.sol#574)\n\tState variables written after the call(s):\n\t- systemETH (BondService.sol#588)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "    function leverage(uint256 _percent, uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value), \"Collateralization is not enough\");\n\n        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n\n        require(_yearFee <= 25000, \"Fee out of range\");\n\n\n\n        return createBond(msg.sender, address(0), _percent, _expiration, _yearFee);\n",
                    "message": "Reentrancy in BondService.leverage (BondService.sol#312-319):\n\tExternal calls:\n\t- require(bool,string)(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),Collateralization is not enough) (BondService.sol#314)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#318)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public divider = 100000;\n",
                    "message": "BondService.divider should be constant (BondService.sol#170)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "    function leverage(uint256 _percent, uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value), \"Collateralization is not enough\");\n\n        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n\n        require(_yearFee <= 25000, \"Fee out of range\");\n\n\n\n        return createBond(msg.sender, address(0), _percent, _expiration, _yearFee);\n",
                    "message": "BondService.leverage (BondService.sol#312-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 331,
                    "vulnerability_code": "    function exchange(uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n\n        require(_yearFee <= 25000, \"Fee out of range\");\n\n\n\n        return createBond(address(0), msg.sender, 0, _expiration, _yearFee);\n",
                    "message": "BondService.exchange (BondService.sol#325-331) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(ISettings _settings) public {\n",
                    "message": "Parameter '_settings' of BondService. (BondService.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function leverage(uint256 _percent, uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n",
                    "message": "Parameter '_percent' of BondService.leverage (BondService.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function leverage(uint256 _percent, uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n",
                    "message": "Parameter '_expiration' of BondService.leverage (BondService.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function leverage(uint256 _percent, uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n",
                    "message": "Parameter '_yearFee' of BondService.leverage (BondService.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exchange(uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n",
                    "message": "Parameter '_expiration' of BondService.exchange (BondService.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exchange(uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n",
                    "message": "Parameter '_yearFee' of BondService.exchange (BondService.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _issuer,\n",
                    "message": "Parameter '_issuer' of BondService.createBond (BondService.sol#341) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _holder,\n",
                    "message": "Parameter '_holder' of BondService.createBond (BondService.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _percent,\n",
                    "message": "Parameter '_percent' of BondService.createBond (BondService.sol#343) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _expiration,\n",
                    "message": "Parameter '_expiration' of BondService.createBond (BondService.sol#344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _yearFee\n",
                    "message": "Parameter '_yearFee' of BondService.createBond (BondService.sol#345) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function close(uint256 _id) external singleOwner(_id) {\n",
                    "message": "Parameter '_id' of BondService.close (BondService.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
                    "message": "Parameter '_id' of BondService.issuerChange (BondService.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
                    "message": "Parameter '_deposit' of BondService.issuerChange (BondService.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
                    "message": "Parameter '_percent' of BondService.issuerChange (BondService.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
                    "message": "Parameter '_expiration' of BondService.issuerChange (BondService.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
                    "message": "Parameter '_yearFee' of BondService.issuerChange (BondService.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function holderChange(uint256 _id, uint256 _deposit, uint256 _expiration, uint256 _yearFee)\n",
                    "message": "Parameter '_id' of BondService.holderChange (BondService.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function holderChange(uint256 _id, uint256 _deposit, uint256 _expiration, uint256 _yearFee)\n",
                    "message": "Parameter '_deposit' of BondService.holderChange (BondService.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function holderChange(uint256 _id, uint256 _deposit, uint256 _expiration, uint256 _yearFee)\n",
                    "message": "Parameter '_expiration' of BondService.holderChange (BondService.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function holderChange(uint256 _id, uint256 _deposit, uint256 _expiration, uint256 _yearFee)\n",
                    "message": "Parameter '_yearFee' of BondService.holderChange (BondService.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeDeposit(uint256 _id, uint256 _deposit) internal {\n",
                    "message": "Parameter '_id' of BondService.changeDeposit (BondService.sol#412) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeDeposit(uint256 _id, uint256 _deposit) internal {\n",
                    "message": "Parameter '_deposit' of BondService.changeDeposit (BondService.sol#412) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changePercent(uint256 _id, uint256 _percent) internal {\n",
                    "message": "Parameter '_id' of BondService.changePercent (BondService.sol#425) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changePercent(uint256 _id, uint256 _percent) internal {\n",
                    "message": "Parameter '_percent' of BondService.changePercent (BondService.sol#425) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeExpiration(uint256 _id, uint256 _expiration) internal {\n",
                    "message": "Parameter '_id' of BondService.changeExpiration (BondService.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeExpiration(uint256 _id, uint256 _expiration) internal {\n",
                    "message": "Parameter '_expiration' of BondService.changeExpiration (BondService.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeYearFee(uint256 _id, uint256 _yearFee) internal {\n",
                    "message": "Parameter '_id' of BondService.changeYearFee (BondService.sol#441) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeYearFee(uint256 _id, uint256 _yearFee) internal {\n",
                    "message": "Parameter '_yearFee' of BondService.changeYearFee (BondService.sol#441) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeIssueRequest(uint256 _id) external payable issueRequest(_id) validTx {\n",
                    "message": "Parameter '_id' of BondService.takeIssueRequest (BondService.sol#451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function takeBuyRequest(uint256 _id) external payable buyRequest(_id) validTx {\n",
                    "message": "Parameter '_id' of BondService.takeBuyRequest (BondService.sol#478) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function finish(uint256 _id) external onlyIssuer(_id) validTx {\n",
                    "message": "Parameter '_id' of BondService.finish (BondService.sol#502) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function expire(uint256 _id) external matched(_id) validTx {\n",
                    "message": "Parameter '_id' of BondService.expire (BondService.sol#548) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBox(uint256 _id) public view returns(uint256, uint256) {\n",
                    "message": "Parameter '_id' of BondService.getBox (BondService.sol#604) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawSystemETH(address _beneficiary) external onlyAdmin {\n",
                    "message": "Parameter '_beneficiary' of BondService.withdrawSystemETH (BondService.sol#613) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary) external onlyAdmin {\n",
                    "message": "Parameter '_token' of BondService.reclaimERC20 (BondService.sol#625) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary) external onlyAdmin {\n",
                    "message": "Parameter '_beneficiary' of BondService.reclaimERC20 (BondService.sol#625) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setIssuerFee(uint256 _value) external onlyAdmin {\n",
                    "message": "Parameter '_value' of BondService.setIssuerFee (BondService.sol#635) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setHolderFee(uint256 _value) external onlyAdmin {\n",
                    "message": "Parameter '_value' of BondService.setHolderFee (BondService.sol#643) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinEther(uint256 _value) external onlyAdmin {\n",
                    "message": "Parameter '_value' of BondService.setMinEther (BondService.sol#651) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeAdmin(address _newAdmin) external onlyAdmin {\n",
                    "message": "Parameter '_newAdmin' of BondService.changeAdmin (BondService.sol#659) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 675,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferIssuerRights(address _to, uint256 _id) external onlyIssuer(_id) {\n",
                    "message": "Parameter '_to' of BondService.transferIssuerRights (BondService.sol#675) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 675,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferIssuerRights(address _to, uint256 _id) external onlyIssuer(_id) {\n",
                    "message": "Parameter '_id' of BondService.transferIssuerRights (BondService.sol#675) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferHolderRights(address _to, uint256 _id) external onlyHolder(_id) {\n",
                    "message": "Parameter '_to' of BondService.transferHolderRights (BondService.sol#682) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferHolderRights(address _to, uint256 _id) external onlyHolder(_id) {\n",
                    "message": "Parameter '_id' of BondService.transferHolderRights (BondService.sol#682) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return createBond(msg.sender, address(0), _percent, _expiration, _yearFee);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return createBond(address(0), msg.sender, 0, _expiration, _yearFee);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private systemETH;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/contracts/services/gate/Gate.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(ISettings _settings) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        admin = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        timviWallet = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        settings = ISettings(_settings);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feePercentTMV = 500; // 0.5%\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feePercentETH = 500; // 0.5%\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        minOrder = 10 ** 18; // 1 TMV by default\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit GateTmvFeeUpdated(feePercentTMV);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(orders[id].owner != address(0), \"Order doesn't exist\");\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 tmv = orders[id].amount;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address owner = orders[id].owner;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                delete orders[id];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, 'mul');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, 'div');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, 'sub');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, 'add');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(admin == msg.sender, \"You have no access\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= _amount, \"Insufficient funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= 10000, \"Too much\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= 10000, \"Too much\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= 100 ether, \"Too much\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_wallet != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newAdmin != address(0), \"Zero address, be careful\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount >= minOrder, \"Too small amount\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(IToken(settings.tmvAddress()).allowance(msg.sender, address(this)) >= _amount, \"Gate is not approved to transfer enough tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(orders[_id].owner == msg.sender, \"Order isn't yours\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(orders[id].owner != address(0), \"Order doesn't exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(address(this).balance >= eth, \"Not enough funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.value >= eth, \"Not enough funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(IToken(settings.tmvAddress()).allowance(msg.sender, address(this)) >= _amount, \"Gate is not approved to transfer enough tokens\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_25"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-eth",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "    function multiFill(uint256[] _ids) external onlyAdmin() payable {\n\n\n\n        if (msg.value > 0) {\n\n            emit Funded(msg.value);\n\n        }\n\n\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n\n            uint256 id = _ids[i];\n\n\n\n            require(orders[id].owner != address(0), \"Order doesn't exist\");\n\n\n\n            uint256 tmv = orders[id].amount;\n\n            uint256 eth = tmv2eth(tmv);\n\n\n\n            require(address(this).balance >= eth, \"Not enough funds\");\n\n\n\n            address owner = orders[id].owner;\n\n            if (owner.send(eth)) {\n\n                delete orders[id];\n\n                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n\n                emit OrderFilledPool(id, owner, tmv, eth);\n\n            }\n\n        }\n",
                    "message": "Reentrancy in Gate.multiFill (Gate.sol#320-343):\n\tExternal calls:\n\t- eth = tmv2eth(tmv) (Gate.sol#332)\n\tExternal calls sending eth:\n\t- owner.send(eth) (Gate.sol#337-341)\n\tState variables written after the call(s):\n\t- orders (Gate.sol#338)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "interface IToken {\n\n    function burnLogic(address from, uint256 value) external;\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function mint(address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n",
                    "message": "IToken (Gate.sol#98-106) has incorrect ERC20 function interface(s):\n\t-transferFrom (Gate.sol#105)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "interface ITBoxManager {\n\n    function create(uint256 withdraw) external payable returns (uint256);\n\n    function precision() external view returns (uint256);\n\n    function rate() external view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function close(uint256 id) external;\n\n    function withdrawPercent(uint256 _collateral) external view returns(uint256);\n\n    function boxes(uint256 id) external view returns(uint256, uint256);\n\n    function withdrawEth(uint256 _id, uint256 _amount) external;\n\n    function withdrawTmv(uint256 _id, uint256 _amount) external;\n\n    function withdrawableEth(uint256 id) external view returns(uint256);\n\n    function withdrawableTmv(uint256 collateral) external view returns(uint256);\n\n    function maxCapAmount(uint256 _id) external view returns (uint256);\n\n    function collateralPercent(uint256 _id) external view returns (uint256);\n\n    function capitalize(uint256 _id, uint256 _tmv) external;\n\n    function boxWithdrawableTmv(uint256 _id) external view returns(uint256);\n\n    function addEth(uint256 _id) external payable;\n",
                    "message": "ITBoxManager (Gate.sol#126-143) has incorrect ERC20 function interface(s):\n\t-transferFrom (Gate.sol#130)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 379,
                    "vulnerability_code": "    function fill(uint256 _id) external payable validTx {\n\n        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n\n\n\n        // Retrieve values from storage\n\n        uint256 tmv = orders[_id].amount;\n\n        address owner = orders[_id].owner;\n\n\n\n        // Calculate the demand amount of Ether\n\n        uint256 eth = tmv.mul(precision()).div(rate());\n\n\n\n        require(msg.value >= eth, \"Not enough funds\");\n\n\n\n        emit Funded(eth);\n\n\n\n        // Calculate execution values\n\n        uint256 tmvFee = tmv.mul(feePercentTMV).div(precision());\n\n        uint256 ethFee = eth.mul(feePercentETH).div(precision());\n\n\n\n        uint256 tmvExecution = tmv.sub(tmvFee);\n\n        uint256 ethExecution = eth.sub(ethFee);\n\n\n\n        // Remove record about an order\n\n        delete orders[_id];\n\n\n\n        // Transfer order' funds\n\n        owner.transfer(ethExecution);\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, tmvExecution);\n\n        IToken(settings.tmvAddress()).transfer(timviWallet, tmvFee);\n\n\n\n        // Return Ether rest if exist\n\n        msg.sender.transfer(msg.value.sub(eth));\n\n\n\n        emit OrderFilled(_id, owner, tmv, tmvExecution, eth, ethExecution);\n",
                    "message": "Reentrancy in Gate.fill (Gate.sol#346-379):\n\tExternal calls:\n\t- eth = tmv.mul(precision()).div(rate()) (Gate.sol#354)\n\t- tmvFee = tmv.mul(feePercentTMV).div(precision()) (Gate.sol#361)\n\t- ethFee = eth.mul(feePercentETH).div(precision()) (Gate.sol#362)\n\tState variables written after the call(s):\n\t- orders (Gate.sol#368)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 317,
                    "vulnerability_code": "    function cancel(uint256 _id) external {\n\n        require(orders[_id].owner == msg.sender, \"Order isn't yours\");\n\n\n\n        uint256 tmv = orders[_id].amount;\n\n        delete orders[_id];\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, tmv);\n\n        emit OrderCancelled(_id, msg.sender, tmv);\n",
                    "message": "Gate.cancel (Gate.sol#310-317) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(msg.sender,tmv) (Gate.sol#315)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "    function multiFill(uint256[] _ids) external onlyAdmin() payable {\n\n\n\n        if (msg.value > 0) {\n\n            emit Funded(msg.value);\n\n        }\n\n\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n\n            uint256 id = _ids[i];\n\n\n\n            require(orders[id].owner != address(0), \"Order doesn't exist\");\n\n\n\n            uint256 tmv = orders[id].amount;\n\n            uint256 eth = tmv2eth(tmv);\n\n\n\n            require(address(this).balance >= eth, \"Not enough funds\");\n\n\n\n            address owner = orders[id].owner;\n\n            if (owner.send(eth)) {\n\n                delete orders[id];\n\n                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n\n                emit OrderFilledPool(id, owner, tmv, eth);\n\n            }\n\n        }\n",
                    "message": "Gate.multiFill (Gate.sol#320-343) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(timviWallet,tmv) (Gate.sol#339)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 379,
                    "vulnerability_code": "    function fill(uint256 _id) external payable validTx {\n\n        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n\n\n\n        // Retrieve values from storage\n\n        uint256 tmv = orders[_id].amount;\n\n        address owner = orders[_id].owner;\n\n\n\n        // Calculate the demand amount of Ether\n\n        uint256 eth = tmv.mul(precision()).div(rate());\n\n\n\n        require(msg.value >= eth, \"Not enough funds\");\n\n\n\n        emit Funded(eth);\n\n\n\n        // Calculate execution values\n\n        uint256 tmvFee = tmv.mul(feePercentTMV).div(precision());\n\n        uint256 ethFee = eth.mul(feePercentETH).div(precision());\n\n\n\n        uint256 tmvExecution = tmv.sub(tmvFee);\n\n        uint256 ethExecution = eth.sub(ethFee);\n\n\n\n        // Remove record about an order\n\n        delete orders[_id];\n\n\n\n        // Transfer order' funds\n\n        owner.transfer(ethExecution);\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, tmvExecution);\n\n        IToken(settings.tmvAddress()).transfer(timviWallet, tmvFee);\n\n\n\n        // Return Ether rest if exist\n\n        msg.sender.transfer(msg.value.sub(eth));\n\n\n\n        emit OrderFilled(_id, owner, tmv, tmvExecution, eth, ethExecution);\n",
                    "message": "Gate.fill (Gate.sol#346-379) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(msg.sender,tmvExecution) (Gate.sol#372)\n\t-IToken(settings.tmvAddress()).transfer(timviWallet,tmvFee) (Gate.sol#373)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "            if (owner.send(eth)) {\n\n                delete orders[id];\n\n                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n\n                emit OrderFilledPool(id, owner, tmv, eth);\n",
                    "message": "Gate.multiFill has external calls inside a loop:\n\t- owner.send(eth) (Gate.sol#337-341)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n",
                    "message": "Gate.multiFill has external calls inside a loop:\n\t- IToken(settings.tmvAddress()).transfer(timviWallet,tmv) (Gate.sol#339)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 307,
                    "vulnerability_code": "    function convert(uint256 _amount) external validTx {\n\n        require(_amount >= minOrder, \"Too small amount\");\n\n        require(IToken(settings.tmvAddress()).allowance(msg.sender, address(this)) >= _amount, \"Gate is not approved to transfer enough tokens\");\n\n        uint256 eth = tmv2eth(_amount);\n\n        if (address(this).balance >= eth) {\n\n            IToken(settings.tmvAddress()).transferFrom(msg.sender, timviWallet, _amount);\n\n            msg.sender.transfer(eth);\n\n            emit Converted(msg.sender, _amount, eth);\n\n        } else {\n\n            IToken(settings.tmvAddress()).transferFrom(msg.sender, address(this), _amount);\n\n            uint256 id = orders.push(Order(msg.sender, _amount)).sub(1);\n\n            emit OrderCreated(id, msg.sender, _amount);\n\n        }\n",
                    "message": "Reentrancy in Gate.convert (Gate.sol#294-307):\n\tExternal calls:\n\t- require(bool,string)(IToken(settings.tmvAddress()).allowance(msg.sender,address(this)) >= _amount,Gate is not approved to transfer enough tokens) (Gate.sol#296)\n\t- eth = tmv2eth(_amount) (Gate.sol#297)\n\t- IToken(settings.tmvAddress()).transferFrom(msg.sender,address(this),_amount) (Gate.sol#303)\n\tState variables written after the call(s):\n\t- orders (Gate.sol#304)\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(ISettings _settings) public {\n",
                    "message": "Parameter '_settings' of Gate. (Gate.sol#228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _beneficiary, uint256 _amount) external onlyAdmin {\n",
                    "message": "Parameter '_beneficiary' of Gate.withdraw (Gate.sol#249) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _beneficiary, uint256 _amount) external onlyAdmin {\n",
                    "message": "Parameter '_amount' of Gate.withdraw (Gate.sol#249) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTmvFee(uint256 _value) external onlyAdmin {\n",
                    "message": "Parameter '_value' of Gate.setTmvFee (Gate.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEthFee(uint256 _value) external onlyAdmin {\n",
                    "message": "Parameter '_value' of Gate.setEthFee (Gate.sol#264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinOrder(uint256 _value) external onlyAdmin {\n",
                    "message": "Parameter '_value' of Gate.setMinOrder (Gate.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTimviWallet(address _wallet) external onlyAdmin {\n",
                    "message": "Parameter '_wallet' of Gate.setTimviWallet (Gate.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeAdmin(address _newAdmin) external onlyAdmin {\n",
                    "message": "Parameter '_newAdmin' of Gate.changeAdmin (Gate.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function convert(uint256 _amount) external validTx {\n",
                    "message": "Parameter '_amount' of Gate.convert (Gate.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cancel(uint256 _id) external {\n",
                    "message": "Parameter '_id' of Gate.cancel (Gate.sol#310) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function multiFill(uint256[] _ids) external onlyAdmin() payable {\n",
                    "message": "Parameter '_ids' of Gate.multiFill (Gate.sol#320) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function fill(uint256 _id) external payable validTx {\n",
                    "message": "Parameter '_id' of Gate.fill (Gate.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tmv2eth(uint256 _amount) public view returns(uint256) {\n",
                    "message": "Parameter '_amount' of Gate.tmv2eth (Gate.sol#392) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function chargeFee(uint256 _amount, uint256 _percent) public view returns(uint256) {\n",
                    "message": "Parameter '_amount' of Gate.chargeFee (Gate.sol#398) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function chargeFee(uint256 _amount, uint256 _percent) public view returns(uint256) {\n",
                    "message": "Parameter '_percent' of Gate.chargeFee (Gate.sol#398) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "Timvi-master/oracle-contract/PriceGetter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (address(0x79fEbF6B9F76853EDBcBc913e6aAE8232cFB9De9).isContract()) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // mainnet\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            aggr = Aggregator(0x79fEbF6B9F76853EDBcBc913e6aAE8232cFB9De9);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            expiration = 120;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if (address(0x0Be00A19538Fac4BE07AC360C69378B870c412BF).isContract()) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // ropsten\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            aggr = Aggregator(0x0Be00A19538Fac4BE07AC360C69378B870c412BF);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            expiration = 4000;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if (address(0x1AddCFF77Ca0F032c7dCA322fd8bFE61Cae66A62).isContract()) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(block.number - aggr.updatedHeight() < expiration, \"Oracle data are outdated\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract (PriceGetter.sol#16-27) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract uses assembly (PriceGetter.sol#16-27)\n\t- PriceGetter.sol#25-26\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function ethUsdPrice() public view returns (uint256) {\n\n        require(block.number - aggr.updatedHeight() < expiration, \"Oracle data are outdated\");\n\n        return aggr.currentAnswer() / 1000;\n",
                    "message": "PriceGetter.ethUsdPrice (PriceGetter.sol#62-65) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (address(0x79fEbF6B9F76853EDBcBc913e6aAE8232cFB9De9).isContract()) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            aggr = Aggregator(0x79fEbF6B9F76853EDBcBc913e6aAE8232cFB9De9);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if (address(0x0Be00A19538Fac4BE07AC360C69378B870c412BF).isContract()) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            aggr = Aggregator(0x0Be00A19538Fac4BE07AC360C69378B870c412BF);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if (address(0x1AddCFF77Ca0F032c7dCA322fd8bFE61Cae66A62).isContract()) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            aggr = Aggregator(0x1AddCFF77Ca0F032c7dCA322fd8bFE61Cae66A62);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if (address(0x1AddCFF77Ca0F032c7dCA322fd8bFE61Cae66A62).isContract()) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Aggregator aggr;\n",
                    "message": null
                }
            ]
        }
    }
}